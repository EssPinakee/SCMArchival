CREATE    PROCEDURE [dbo].[pILSE_Archival]
AS
-- ---------------------------------------------------------------------------------------------------------------
-- DATE			AUTHOR					VER.	DETAILS
-- ---------------------------------------------------------------------------------------------------------------
-- 30-Jan-2023	Pinakee Das				1.0		Created
-- 
--
-- Description:	This procedure is used to remove old data and archive data basing on the configuration 
--				
-- Usage:	EXEC pILSE_Archival
--
-- ---------------------------------------------------------------------------------------------------------------
BEGIN
	SET NOCOUNT ON;

	DECLARE @BatchSizeForDeletion INT = 10000
		,@ActionDatatype VARCHAR(100)
		,@ActionValue VARCHAR(100)
		,@ArchivalOptionAvailableForTables VARCHAR(MAX)
		,@ArchiveAfterDays INT
		,@ArchiveDataBase VARCHAR(50) = DB_NAME() + '_Archive'
		,@BatchSizeForArchival INT = 5000
		,@BatchSizeForInterfaceArchival INT = 10000
		,@BillingArchiveAfterDays INT = 60
		,@BLHeadersDeleteAfterDays INT = 365
		,@CountOfRowsAvailableForArchival INT = 0
		,@CountOfRowsAvailableForDeletion INT
		,@CSHeadersDeleteAfterDays INT = 365
		,@Ctr00 INT = 0
		,@Ctr01 INT
		,@CurrentTableName VARCHAR(300)
		,@CustomerCode VARCHAR(100)
		,@CustomsClearanceDocumentArchiveAfterDays INT = 60
		,@DataBase VARCHAR(50) = DB_NAME()
		,@DataEntryBatchSize INT = 5000
		,@DataEntryDefinitionDataEntryType VARCHAR(200) = 'ValueAddedService, Issue, WarehouseOrder, CustomsClearanceOrder, DocumentOrder, CargoReleaseOrder, ManualShipment, Shipment, Transport'
		,@DataEntryDefinitionDataEntryTypeForDeletion VARCHAR(500) = 'StandardReceipt, RefusalReceipt, CrossDockReceipt, StandardOrder, CrossDockOrder, HeldInventory, AlternativeProduct, Product, Company, Pack, OrderContainerExchange, ReceiptContainerExchange, Billing, Transfer, BillsOfMaterial, UpcomingReceipt'
		,@DataEntryDeleteAfterDays INT = 60
		,@DataEntryDeletionStatuses VARCHAR(100) = 'Interfaced, Finished, Cancelled, NotImported'
		,@DataEntryStatuses VARCHAR(100)
		,@DelayedActionDeleteAfterDays INT = 60
		,@DelayedActionDeleteStatus VARCHAR(100)
		,@DeleteAfterDays INT = 60
		,@EmailDeleteAfterDays INT = 60
		,@EmailDeletionStatuses VARCHAR(100)
		,@ErrorFlag INT = 1
		,@ErrorMessage VARCHAR(2000)
		,@ErrorNumber VARCHAR(50)
		,@FCRHeadersDeleteAfterDays INT = 365
		,@HBLHeadersDeleteAfterDays INT = 365
		,@HostName VARCHAR(200) = HOST_NAME()
		,@InterfaceDocumentArchiveAfterDays INT = 60
		,@InterfaceDocumentTypesForArchival VARCHAR(100) = 'SANYOU DESADV, 214, Order, NIKE ILM, NIKE SDI GRN, Transport, Receipt, Nike Weighing'
		,@InterfaceTableDefinitionCode VARCHAR(100) = 'ArchivalWBK, DeletionWBK'
		,@InternalCSSpecificationArchiveAfterDays INT = 60
		,@IssueArchiveAfterDays INT = 60
		,@LineNumber INT
		,@LogDate DATETIME
		,@LogDeleteAfterDays INT = 60
		,@MaxDateToArchiveData DATETIME
		,@MaxDateToDeleteData DATETIME
		,@MaxSlNo INT = 0
		,@MileStoneUpdateArchiveAfterDays INT = 60
		,@ModificationLogDeleteAfterDays INT = 60
		,@NoOfTimes INT = 0
		,@OrderArchiveAfterDays INT = 60
		,@OrderStatusIDsForArchival VARCHAR(50) = '19, 29, 96'
		,@POHeadersDeleteAfterDays INT = 365
		,@ProductArchiveAfterDays INT = 60
		,@ReceiptArchiveAfterDays INT = 60
		,@ReceiptDataEntryBatchSize INT = 1000
		,@ReceiptsAfterProductOrderArchiveAfterDays INT = 60
		,@ReceiptStatusesForArchival VARCHAR(100)
		,@ReceiptTypesForArchival VARCHAR(100)
		,@Remarks VARCHAR(MAX)
		,@RemoveLogsAfterDays INT = 60
		,@ReportEmailLogsDeleteAfterDays INT = 60
		,@RowCount INT
		,@RowsCtr01 INT = 0
		,@RunID VARCHAR(50) = REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(30), GETUTCDATE(), 21), '-', ''), ':', ''), ' ', ''), '.', '')
		,@ShippingDataArchiveAfterDays INT = 60
		,@SOHeadersDeleteAfterDays INT = 365
		,@SourceProcName VARCHAR(100) = ISNULL(OBJECT_NAME(@@PROCID), 'Archival Proc')
		,@StockTransactionArchiveAfterDays INT = 60
		,@TableName VARCHAR(300) = ''
		,@TableNameList VARCHAR(MAX)
		,@TaskArchiveAfterDays INT = 60
		,@TotalNumberOfRecordsDeleted INT = 0
		,@TotRowCount INT
		,@TypeOfError VARCHAR(100)
		,@UserName VARCHAR(100) = USER_NAME();

	DROP TABLE IF EXISTS #TempReceiptDetailDataEntries_ForDeletion;

	CREATE TABLE #TempReceiptDetailDataEntries_ForDeletion (
		ReceiptDetailDataEntryID UNIQUEIDENTIFIER
		,OrderDetailDataEntryID UNIQUEIDENTIFIER
		,DataEntryID UNIQUEIDENTIFIER
		);

	--IF OBJECT_ID('Configurations') IS NULL
	--BEGIN
	--	CREATE TABLE Configurations (
	--		ConfigurationID INT IDENTITY(1, 1)
	--		,ActionType VARCHAR(10) --Can Be Delete or Archive
	--		,ActionKey VARCHAR(200) --Can be a Short Identification for the Action, such as MinimumMileStoneUpdateEditDateTime, DeleteDataAfterNoOfDays
	--		,ActionValue VARCHAR(100) --Can be a number, text, date, list of comma separated values, boolean value (Eg: 20 or  'M, F', etc.)
	--		,ActionValueDataType VARCHAR(100)
	--		);
	--END;

	IF OBJECT_ID('tempdb..#tmpArchivalLog') IS NOT NULL
	BEGIN
		DROP TABLE #tmpArchivalLog;
	END;

	CREATE TABLE #tmpArchivalLog (
		[IDArchiveLog] [bigint] IDENTITY(1, 1) NOT NULL
		,[ArchiveLogSource] [varchar](100) NULL
		,[ArchiveLogRUNID] [varchar](50) NULL
		,[ArchiveLogStatus] [varchar](100) NULL
		,[ArchiveLogDate] [datetime] NULL
		,[ArchiveLogRemarks] [varchar](1500) NULL
		,[ArchiveLogErrorMessage] [varchar](2000) NULL
		,[ArchiveLogTypeOfError] [varchar](100) NULL
		,[ArchiveLogErrorNumber] [varchar](50) NULL
		,[ArchiveLogLineNumber] [int] NULL
		,[ArchiveLogHostName] [varchar](200) NULL
		,[ArchiveLogUserName] [varchar](100) NULL
		);

	IF OBJECT_ID('ArchiveLogs') IS NULL
	BEGIN
		CREATE TABLE [dbo].[ArchiveLogs] (
			[IDArchiveLog] [bigint] IDENTITY(1, 1) NOT NULL
			,[ArchiveLogSource] [varchar](100) NULL
			,[ArchiveLogRUNID] [varchar](50) NULL
			,[ArchiveLogStatus] [varchar](100) NULL
			,[ArchiveLogDate] [datetime] NULL
			,[ArchiveLogRemarks] [varchar](1500) NULL
			,[ArchiveLogErrorMessage] [varchar](2000) NULL
			,[ArchiveLogTypeOfError] [varchar](100) NULL
			,[ArchiveLogErrorNumber] [varchar](50) NULL
			,[ArchiveLogLineNumber] [int] NULL
			,[ArchiveLogHostName] [varchar](200) NULL
			,[ArchiveLogUserName] [varchar](100) NULL
			,PRIMARY KEY CLUSTERED ([IDArchiveLog] ASC)
			);
	END;

	IF OBJECT_ID('tempdb..#TempTableMergeRowStatus') IS NOT NULL
	BEGIN
		DROP TABLE #TempTableMergeRowStatus;
	END;

	CREATE TABLE #TempTableMergeRowStatus (
		Inserted INT
		,Updated INT
		,Unchanged INT
		,Descr NVARCHAR(100)
		);

	IF OBJECT_ID('tempdb..#TempTableArchiveTablesList') IS NOT NULL
	BEGIN
		DROP TABLE #TempTableArchiveTablesList;
	END;

	CREATE TABLE #TempTableArchiveTablesList (
		SlNo INT IDENTITY(1, 1)
		,TableName VARCHAR(500)
		);

	IF OBJECT_ID('tempdb..#tmpReceiptIDs') IS NOT NULL
	BEGIN
		DROP TABLE #tmpReceiptIDs;
	END

	CREATE TABLE #tmpReceiptIDs (ReceiptID NVARCHAR(50));

	IF OBJECT_ID('tempdb..#tmpOrderIDs') IS NOT NULL
	BEGIN
		DROP TABLE #tmpOrderIDs;
	END

	CREATE TABLE #tmpOrderIDs (OrderID NVARCHAR(50));

	IF OBJECT_ID('tempdb..#tmpStockTransactionIDs') IS NOT NULL
	BEGIN
		DROP TABLE #tmpStockTransactionIDs;
	END

	CREATE TABLE #tmpStockTransactionIDs (StockTransactionID NVARCHAR(50));

	/*DELETION OF OLD DATA STARTED*/
	SET @LogDate = GETUTCDATE();
	SET @Remarks = '(START with RunID: ' + @RunID + ' )------------------------------------------------------------------------------------------------------------------------------------------------'

	EXEC pArchiveLogs @Remarks
		,@SourceProcName
		,NULL
		,NULL
		,NULL
		,NULL
		,@LogDate
		,@HostName
		,@UserName
		,'Info'
		,@RunID;

	SET @Remarks = 'Started Process : Deletion of data in `' + @DataBase + '` Started.'

	EXEC pArchiveLogs @Remarks
		,@SourceProcName
		,NULL
		,NULL
		,NULL
		,NULL
		,@LogDate
		,@HostName
		,@UserName
		,'InfoAction'
		,@RunID;

	------------------------------------------------------------------
	--Fetching the configured values for Archival, Deletion, etc.
	------------------------------------------------------------------
	IF OBJECT_ID('tempdb..#InterfaceFieldConfigurationValues') IS NOT NULL
	BEGIN
		DROP TABLE #InterfaceFieldConfigurationValues;
	END;

	CREATE TABLE #InterfaceFieldConfigurationValues (
		SlNo INT IDENTITY(1, 1)
		,InterfaceTableDefinitionCode VARCHAR(1000)
		,InterfaceTableDefinitionFieldCode VARCHAR(1000)
		,InterfaceTableDefinitionFieldDatabaseField VARCHAR(1000)
		,InterfaceItemColumnName VARCHAR(1000)
		,InterfaceTableDefinitionFieldDataType VARCHAR(1000)
		);

	INSERT INTO #InterfaceFieldConfigurationValues (
		InterfaceTableDefinitionCode
		,InterfaceTableDefinitionFieldCode
		,InterfaceTableDefinitionFieldDatabaseField
		,InterfaceItemColumnName
		,InterfaceTableDefinitionFieldDataType
		)
	SELECT InterfaceTableDefinitionCode
		,InterfaceTableDefinitionFieldCode
		,InterfaceTableDefinitionFieldDatabaseField
		,'InterfaceItem' + InterfaceTableDefinitionFieldDatabaseField InterfaceItemColumnName
		,InterfaceTableDefinitionFieldDataType
	FROM InterfaceTableDefinitionFields WITH (NOLOCK)
	WHERE InterfaceTableDefinitionCode IN (
			SELECT LTRIM(RTRIM(F.Value))
			FROM string_split(@InterfaceTableDefinitionCode, ',') AS F
			)
	ORDER BY InterfaceTableDefinitionFieldPosition;

	DECLARE @Str01 VARCHAR(MAX) = '';
	DECLARE @nStr01 NVARCHAR(MAX) = '';
	DECLARE @TotalNoOfRows INT = (
			SELECT COUNT(1)
			FROM #InterfaceFieldConfigurationValues
			);

	SET @Ctr01 = 1;

	WHILE @Ctr01 <= @TotalNoOfRows
	BEGIN
		IF LEN(LTRIM(RTRIM(@Str01))) = 0
		BEGIN
			SET @Str01 = 'SELECT ' + CHAR(39) + (
					SELECT I.InterfaceTableDefinitionFieldCode + CHAR(39) + ' AS FieldCode, ' + CHAR(39) + I.InterfaceTableDefinitionFieldDataType + CHAR(39) + ' AS DataType, CAST((SELECT TOP 1 ' + I.InterfaceItemColumnName + ' FROM InterfaceItems WITH (NOLOCK) WHERE InterfaceTableDefinitionCode = ' + CHAR(39) + I.InterfaceTableDefinitionCode + CHAR(39) + ' AND ' + I.InterfaceItemColumnName + ' IS NOT NULL) AS VARCHAR(MAX)) AS FieldValue'
					FROM #InterfaceFieldConfigurationValues I
					WHERE SLNo = @Ctr01
					);
		END
		ELSE
		BEGIN
			SET @Str01 = @Str01 + ' UNION ALL SELECT ' + CHAR(39) + (
					SELECT I.InterfaceTableDefinitionFieldCode + CHAR(39) + ' AS FieldCode, ' + CHAR(39) + I.InterfaceTableDefinitionFieldDataType + CHAR(39) + ' AS DataType, CAST((SELECT TOP 1 ' + I.InterfaceItemColumnName + ' FROM InterfaceItems WITH (NOLOCK) WHERE InterfaceTableDefinitionCode = ' + CHAR(39) + I.InterfaceTableDefinitionCode + CHAR(39) + ' AND ' + I.InterfaceItemColumnName + ' IS NOT NULL) AS VARCHAR(MAX)) AS FieldValue'
					FROM #InterfaceFieldConfigurationValues I
					WHERE SLNo = @Ctr01
					);
		END;

		SET @Ctr01 = @Ctr01 + 1;
	END;

	IF OBJECT_ID('tempdb..#InterfaceFieldConfigurationValues') IS NOT NULL
	BEGIN
		DROP TABLE #InterfaceFieldConfigurationValues;
	END;

	IF OBJECT_ID('tempdb..#InterfaceRowsWithConfValues') IS NOT NULL
	BEGIN
		DROP TABLE #InterfaceRowsWithConfValues;
	END;

	CREATE TABLE #InterfaceRowsWithConfValues (
		SlNo INT IDENTITY(1, 1)
		,FieldCode VARCHAR(1000)
		,DataType VARCHAR(100)
		,FieldValue VARCHAR(MAX)
		);

	SET @nStr01 = @Str01;

	INSERT INTO #InterfaceRowsWithConfValues (
		FieldCode
		,DataType
		,FieldValue
		)
	EXECUTE sp_ExecuteSQL @nStr01;

	------------------------------------------------------------------
	--ModificationLogs
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @ModificationLogDeleteAfterDays = ISNULL((
				SELECT FieldValue
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'ModificationLogDeleteAfterDays'
				), @DeleteAfterDays);
	SET @MaxDateToDeleteData = DATEADD(DAY, @ModificationLogDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM ModificationLogs WITH (NOLOCK)
			WHERE [ModificationLogs].ModificationLogDateTime < @MaxDateToDeleteData
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `ModificationLogs` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM ModificationLogs
				WHERE [ModificationLogs].ModificationLogDateTime < @MaxDateToDeleteData
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) ModificationLogs
				FROM ModificationLogs WITH (NOLOCK)
				WHERE [ModificationLogs].ModificationLogDateTime < @MaxDateToDeleteData;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `ModificationLogs` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `ModificationLogs` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `ModificationLogs` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--ReportEmailLogs
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @ReportEmailLogsDeleteAfterDays = ISNULL((
				SELECT FieldValue
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'ReportEmailLogsDeleteAfterDays'
				), @DeleteAfterDays);
	SET @MaxDateToDeleteData = DATEADD(DAY, @ReportEmailLogsDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM ReportEmailLogs WITH (NOLOCK)
			WHERE [ReportEmailLogs].ReportEmailLogDateTime < @MaxDateToDeleteData
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `ReportEmailLogs` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM ReportEmailLogs WITH (NOLOCK)
				WHERE [ReportEmailLogs].ReportEmailLogDateTime < @MaxDateToDeleteData
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) ReportEmailLogs
				FROM ReportEmailLogs
				WHERE [ReportEmailLogs].ReportEmailLogDateTime < @MaxDateToDeleteData;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `ReportEmailLogs` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `ReportEmailLogs` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `ReportEmailLogs` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--Emails
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @EmailDeletionStatuses = NULL;
	SET @EmailDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'EmailDeleteAfterDays'
				), @DeleteAfterDays);
	SET @EmailDeletionStatuses = ISNULL((
				SELECT FieldValue
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'EmailDeletionStatuses'
				), 'Sent, NotSent, Cancelled');
	SET @MaxDateToDeleteData = DATEADD(DAY, @EmailDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM Emails WITH (NOLOCK)
			WHERE [Emails].EmailEditDateTime < @MaxDateToDeleteData
				AND [Emails].EmailStatus IN (
					SELECT LTRIM(RTRIM(F.Value))
					FROM string_split(@EmailDeletionStatuses, ',') AS F
					)
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `Emails` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		IF OBJECT_ID('tempdb..#TempEmails') IS NOT NULL
		BEGIN
			DROP TABLE #TempEmails;
		END;

		SELECT [IDEmail]
		INTO #TempEmails
		FROM Emails WITH (NOLOCK)
		WHERE 1 = 0;

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM Emails WITH (NOLOCK)
				WHERE [Emails].EmailStatus IN (
						SELECT LTRIM(RTRIM(F.Value))
						FROM string_split(@EmailDeletionStatuses, ',') AS F
						)
					AND [Emails].EmailEditDateTime < @MaxDateToDeleteData
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				TRUNCATE TABLE #TempEmails;

				INSERT INTO #TempEmails ([IDEmail])
				SELECT TOP (@BatchSizeForDeletion) [IDEmail]
				FROM Emails WITH (NOLOCK)
				WHERE [Emails].EmailStatus IN (
						SELECT LTRIM(RTRIM(F.Value))
						FROM string_split(@EmailDeletionStatuses, ',') AS F
						)
					AND [Emails].EmailEditDateTime < @MaxDateToDeleteData;

				--EmailReferences
				DELETE ER
				FROM EmailReferences ER
				INNER JOIN #TempEmails TmpEmail ON ER.EmailID = TmpEmail.IDEmail;

				--EmailRecipients
				DELETE ER
				FROM EmailRecipients ER
				INNER JOIN #TempEmails TmpEmail ON ER.EmailID = TmpEmail.IDEmail;

				--EmailAttachments
				DELETE EA
				FROM EmailAttachments EA
				INNER JOIN #TempEmails TmpEmail ON EA.EmailID = TmpEmail.IDEmail;

				DELETE E
				FROM Emails E
				INNER JOIN #TempEmails TmpEmail ON E.IDEmail = TmpEmail.IDEmail;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `Emails` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `Emails` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `Emails` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--POHeaders
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @POHeadersDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'POHeadersDeleteAfterDays'
				), 365);
	SET @MaxDateToDeleteData = DATEADD(DAY, @POHeadersDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM POHeaders WITH (NOLOCK)
			LEFT JOIN POSpecifications [POHeaders_POSpecifications] WITH (NOLOCK) ON POHeaders.POHeaderConsigneeCode = POHeaders_POSpecifications.POHeaderConsigneeCode
				AND POHeaders.POHeaderConsigneeCountryCode = POHeaders_POSpecifications.POHeaderConsigneeCountryCode
				AND POHeaders.POHeaderNumber = POHeaders_POSpecifications.POHeaderNumber
			LEFT JOIN SOSpecifications [POHeaders_POSpecifications_SOSpecifications] WITH (NOLOCK) ON POHeaders_POSpecifications.POHeaderConsigneeCode = POHeaders_POSpecifications_SOSpecifications.POHeaderConsigneeCode
				AND POHeaders_POSpecifications.POHeaderConsigneeCountryCode = POHeaders_POSpecifications_SOSpecifications.POHeaderConsigneeCountryCode
				AND POHeaders_POSpecifications.POHeaderNumber = POHeaders_POSpecifications_SOSpecifications.POHeaderNumber
				AND POHeaders_POSpecifications.POSpecificationSequence = POHeaders_POSpecifications_SOSpecifications.POSpecificationSequence
			LEFT JOIN CSSpecifications [POHeaders_POSpecifications_SOSpecifications_CSSpecifications] WITH (NOLOCK) ON POHeaders_POSpecifications_SOSpecifications.SOSpecificationSequence = POHeaders_POSpecifications_SOSpecifications_CSSpecifications.CSSpecificationSequence
				AND POHeaders_POSpecifications_SOSpecifications.SOHeaderNumber = POHeaders_POSpecifications_SOSpecifications_CSSpecifications.SOHeaderNumber
			WHERE [POHeaders].POHeaderEditDateTime < @MaxDateToDeleteData
				AND [POHeaders_POSpecifications_SOSpecifications_CSSpecifications].SOHeaderNumber IS NULL
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `POHeaders` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM POHeaders WITH (NOLOCK)
				LEFT JOIN POSpecifications [POHeaders_POSpecifications] WITH (NOLOCK) ON POHeaders.POHeaderConsigneeCode = POHeaders_POSpecifications.POHeaderConsigneeCode
					AND POHeaders.POHeaderConsigneeCountryCode = POHeaders_POSpecifications.POHeaderConsigneeCountryCode
					AND POHeaders.POHeaderNumber = POHeaders_POSpecifications.POHeaderNumber
				LEFT JOIN SOSpecifications [POHeaders_POSpecifications_SOSpecifications] WITH (NOLOCK) ON POHeaders_POSpecifications.POHeaderConsigneeCode = POHeaders_POSpecifications_SOSpecifications.POHeaderConsigneeCode
					AND POHeaders_POSpecifications.POHeaderConsigneeCountryCode = POHeaders_POSpecifications_SOSpecifications.POHeaderConsigneeCountryCode
					AND POHeaders_POSpecifications.POHeaderNumber = POHeaders_POSpecifications_SOSpecifications.POHeaderNumber
					AND POHeaders_POSpecifications.POSpecificationSequence = POHeaders_POSpecifications_SOSpecifications.POSpecificationSequence
				LEFT JOIN CSSpecifications [POHeaders_POSpecifications_SOSpecifications_CSSpecifications] WITH (NOLOCK) ON POHeaders_POSpecifications_SOSpecifications.SOSpecificationSequence = POHeaders_POSpecifications_SOSpecifications_CSSpecifications.CSSpecificationSequence
					AND POHeaders_POSpecifications_SOSpecifications.SOHeaderNumber = POHeaders_POSpecifications_SOSpecifications_CSSpecifications.SOHeaderNumber
				WHERE [POHeaders].POHeaderEditDateTime < @MaxDateToDeleteData
					AND [POHeaders_POSpecifications_SOSpecifications_CSSpecifications].SOHeaderNumber IS NULL
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) POHeaders
				FROM POHeaders
				LEFT JOIN POSpecifications [POHeaders_POSpecifications] WITH (NOLOCK) ON POHeaders.POHeaderConsigneeCode = POHeaders_POSpecifications.POHeaderConsigneeCode
					AND POHeaders.POHeaderConsigneeCountryCode = POHeaders_POSpecifications.POHeaderConsigneeCountryCode
					AND POHeaders.POHeaderNumber = POHeaders_POSpecifications.POHeaderNumber
				LEFT JOIN SOSpecifications [POHeaders_POSpecifications_SOSpecifications] WITH (NOLOCK) ON POHeaders_POSpecifications.POHeaderConsigneeCode = POHeaders_POSpecifications_SOSpecifications.POHeaderConsigneeCode
					AND POHeaders_POSpecifications.POHeaderConsigneeCountryCode = POHeaders_POSpecifications_SOSpecifications.POHeaderConsigneeCountryCode
					AND POHeaders_POSpecifications.POHeaderNumber = POHeaders_POSpecifications_SOSpecifications.POHeaderNumber
					AND POHeaders_POSpecifications.POSpecificationSequence = POHeaders_POSpecifications_SOSpecifications.POSpecificationSequence
				LEFT JOIN CSSpecifications [POHeaders_POSpecifications_SOSpecifications_CSSpecifications] WITH (NOLOCK) ON POHeaders_POSpecifications_SOSpecifications.SOSpecificationSequence = POHeaders_POSpecifications_SOSpecifications_CSSpecifications.CSSpecificationSequence
					AND POHeaders_POSpecifications_SOSpecifications.SOHeaderNumber = POHeaders_POSpecifications_SOSpecifications_CSSpecifications.SOHeaderNumber
				WHERE [POHeaders].POHeaderEditDateTime < @MaxDateToDeleteData
					--AND NOT (([POHeaders_POSpecifications_SOSpecifications_CSSpecifications].SOHeaderNumber) IS NOT NULL);
					AND [POHeaders_POSpecifications_SOSpecifications_CSSpecifications].SOHeaderNumber IS NULL;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `POHeaders` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `POHeaders` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `POHeaders` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--BLHeaders
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @BLHeadersDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'BLHeadersDeleteAfterDays'
				), 365);
	SET @MaxDateToDeleteData = DATEADD(DAY, @BLHeadersDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM BLHeaders WITH (NOLOCK)
			LEFT JOIN BLSpecifications [BLHeaders_BLSpecifications] WITH (NOLOCK) ON BLHeaders.BLHeaderNumber = BLHeaders_BLSpecifications.BLHeaderNumber
			LEFT JOIN CSHeaders [BLHeaders_BLSpecifications_CSHeader] WITH (NOLOCK) ON BLHeaders_BLSpecifications.CSHeaderNumber = BLHeaders_BLSpecifications_CSHeader.CSHeaderNumber
			LEFT JOIN CSSpecifications [BLHeaders_BLSpecifications_CSHeader_CSSpecifications] WITH (NOLOCK) ON BLHeaders_BLSpecifications_CSHeader.CSHeaderNumber = BLHeaders_BLSpecifications_CSHeader_CSSpecifications.CSHeaderNumber
			WHERE [BLHeaders].BLHeaderEditDateTime < @MaxDateToDeleteData
				AND [BLHeaders_BLSpecifications_CSHeader_CSSpecifications].SOHeaderNumber IS NULL
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `BLHeaders` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM BLHeaders WITH (NOLOCK)
				LEFT JOIN BLSpecifications [BLHeaders_BLSpecifications] WITH (NOLOCK) ON BLHeaders.BLHeaderNumber = BLHeaders_BLSpecifications.BLHeaderNumber
				LEFT JOIN CSHeaders [BLHeaders_BLSpecifications_CSHeader] WITH (NOLOCK) ON BLHeaders_BLSpecifications.CSHeaderNumber = BLHeaders_BLSpecifications_CSHeader.CSHeaderNumber
				LEFT JOIN CSSpecifications [BLHeaders_BLSpecifications_CSHeader_CSSpecifications] WITH (NOLOCK) ON BLHeaders_BLSpecifications_CSHeader.CSHeaderNumber = BLHeaders_BLSpecifications_CSHeader_CSSpecifications.CSHeaderNumber
				WHERE [BLHeaders].BLHeaderEditDateTime < @MaxDateToDeleteData
					AND [BLHeaders_BLSpecifications_CSHeader_CSSpecifications].SOHeaderNumber IS NULL
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) BLHeaders
				FROM BLHeaders
				LEFT JOIN BLSpecifications [BLHeaders_BLSpecifications] WITH (NOLOCK) ON BLHeaders.BLHeaderNumber = BLHeaders_BLSpecifications.BLHeaderNumber
				LEFT JOIN CSHeaders [BLHeaders_BLSpecifications_CSHeader] WITH (NOLOCK) ON BLHeaders_BLSpecifications.CSHeaderNumber = BLHeaders_BLSpecifications_CSHeader.CSHeaderNumber
				LEFT JOIN CSSpecifications [BLHeaders_BLSpecifications_CSHeader_CSSpecifications] WITH (NOLOCK) ON BLHeaders_BLSpecifications_CSHeader.CSHeaderNumber = BLHeaders_BLSpecifications_CSHeader_CSSpecifications.CSHeaderNumber
				WHERE [BLHeaders].BLHeaderEditDateTime < @MaxDateToDeleteData
					--AND NOT (([BLHeaders_BLSpecifications_CSHeader_CSSpecifications].SOHeaderNumber) IS NOT NULL);
					AND [BLHeaders_BLSpecifications_CSHeader_CSSpecifications].SOHeaderNumber IS NULL;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `BLHeaders` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `BLHeaders` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `BLHeaders` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--HBLHeaders
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @HBLHeadersDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'HBLHeadersDeleteAfterDays'
				), 365);
	SET @MaxDateToDeleteData = DATEADD(DAY, @HBLHeadersDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM HBLHeaders WITH (NOLOCK)
			LEFT JOIN HBLSpecifications [HBLHeaders_HBLSpecifications] WITH (NOLOCK) ON HBLHeaders.HBLHeaderNumber = HBLHeaders_HBLSpecifications.HBLHeaderNumber
			LEFT JOIN SOSpecifications [HBLHeaders_HBLSpecifications_SOSpecification] WITH (NOLOCK) ON HBLHeaders_HBLSpecifications.SOSpecificationSequence = HBLHeaders_HBLSpecifications_SOSpecification.SOSpecificationSequence
				AND HBLHeaders_HBLSpecifications.SOHeaderNumber = HBLHeaders_HBLSpecifications_SOSpecification.SOHeaderNumber
			LEFT JOIN CSSpecifications [HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications] WITH (NOLOCK) ON HBLHeaders_HBLSpecifications_SOSpecification.SOSpecificationSequence = HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications.CSSpecificationSequence
				AND HBLHeaders_HBLSpecifications_SOSpecification.SOHeaderNumber = HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications.SOHeaderNumber
			WHERE [HBLHeaders].HBLHeaderEditDateTime < @MaxDateToDeleteData
				AND [HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications].SOHeaderNumber IS NULL
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `HBLHeaders` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM HBLHeaders WITH (NOLOCK)
				LEFT JOIN HBLSpecifications [HBLHeaders_HBLSpecifications] WITH (NOLOCK) ON HBLHeaders.HBLHeaderNumber = HBLHeaders_HBLSpecifications.HBLHeaderNumber
				LEFT JOIN SOSpecifications [HBLHeaders_HBLSpecifications_SOSpecification] WITH (NOLOCK) ON HBLHeaders_HBLSpecifications.SOSpecificationSequence = HBLHeaders_HBLSpecifications_SOSpecification.SOSpecificationSequence
					AND HBLHeaders_HBLSpecifications.SOHeaderNumber = HBLHeaders_HBLSpecifications_SOSpecification.SOHeaderNumber
				LEFT JOIN CSSpecifications [HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications] WITH (NOLOCK) ON HBLHeaders_HBLSpecifications_SOSpecification.SOSpecificationSequence = HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications.CSSpecificationSequence
					AND HBLHeaders_HBLSpecifications_SOSpecification.SOHeaderNumber = HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications.SOHeaderNumber
				WHERE [HBLHeaders].HBLHeaderEditDateTime < @MaxDateToDeleteData
					AND [HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications].SOHeaderNumber IS NULL
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) HBLHeaders
				FROM HBLHeaders
				LEFT JOIN HBLSpecifications [HBLHeaders_HBLSpecifications] WITH (NOLOCK) ON HBLHeaders.HBLHeaderNumber = HBLHeaders_HBLSpecifications.HBLHeaderNumber
				LEFT JOIN SOSpecifications [HBLHeaders_HBLSpecifications_SOSpecification] WITH (NOLOCK) ON HBLHeaders_HBLSpecifications.SOSpecificationSequence = HBLHeaders_HBLSpecifications_SOSpecification.SOSpecificationSequence
					AND HBLHeaders_HBLSpecifications.SOHeaderNumber = HBLHeaders_HBLSpecifications_SOSpecification.SOHeaderNumber
				LEFT JOIN CSSpecifications [HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications] WITH (NOLOCK) ON HBLHeaders_HBLSpecifications_SOSpecification.SOSpecificationSequence = HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications.CSSpecificationSequence
					AND HBLHeaders_HBLSpecifications_SOSpecification.SOHeaderNumber = HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications.SOHeaderNumber
				WHERE [HBLHeaders].HBLHeaderEditDateTime < @MaxDateToDeleteData
					--AND NOT (([HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications].SOHeaderNumber) IS NOT NULL);
					AND [HBLHeaders_HBLSpecifications_SOSpecification_CSSpecifications].SOHeaderNumber IS NULL;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `HBLHeaders` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `HBLHeaders` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `HBLHeaders` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--FCRHeaders
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @FCRHeadersDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'FCRHeadersDeleteAfterDays'
				), 365);
	SET @MaxDateToDeleteData = DATEADD(DAY, @FCRHeadersDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM FCRHeaders WITH (NOLOCK)
			LEFT JOIN FCRSpecifications [FCRHeaders_FCRSpecifications] WITH (NOLOCK) ON FCRHeaders.FCRHeaderNumber = FCRHeaders_FCRSpecifications.FCRHeaderNumber
			LEFT JOIN SOSpecifications [FCRHeaders_FCRSpecifications_SOSpecification] WITH (NOLOCK) ON FCRHeaders_FCRSpecifications.SOSpecificationSequence = FCRHeaders_FCRSpecifications_SOSpecification.SOSpecificationSequence
				AND FCRHeaders_FCRSpecifications.SOHeaderNumber = FCRHeaders_FCRSpecifications_SOSpecification.SOHeaderNumber
			LEFT JOIN CSSpecifications [FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications] WITH (NOLOCK) ON FCRHeaders_FCRSpecifications_SOSpecification.SOSpecificationSequence = FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications.CSSpecificationSequence
				AND FCRHeaders_FCRSpecifications_SOSpecification.SOHeaderNumber = FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications.SOHeaderNumber
			WHERE [FCRHeaders].FCRHeaderEditDateTime < @MaxDateToDeleteData
				AND [FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications].SOHeaderNumber IS NULL
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `FCRHeaders` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM FCRHeaders WITH (NOLOCK)
				LEFT JOIN FCRSpecifications [FCRHeaders_FCRSpecifications] WITH (NOLOCK) ON FCRHeaders.FCRHeaderNumber = FCRHeaders_FCRSpecifications.FCRHeaderNumber
				LEFT JOIN SOSpecifications [FCRHeaders_FCRSpecifications_SOSpecification] WITH (NOLOCK) ON FCRHeaders_FCRSpecifications.SOSpecificationSequence = FCRHeaders_FCRSpecifications_SOSpecification.SOSpecificationSequence
					AND FCRHeaders_FCRSpecifications.SOHeaderNumber = FCRHeaders_FCRSpecifications_SOSpecification.SOHeaderNumber
				LEFT JOIN CSSpecifications [FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications] WITH (NOLOCK) ON FCRHeaders_FCRSpecifications_SOSpecification.SOSpecificationSequence = FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications.CSSpecificationSequence
					AND FCRHeaders_FCRSpecifications_SOSpecification.SOHeaderNumber = FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications.SOHeaderNumber
				WHERE [FCRHeaders].FCRHeaderEditDateTime < @MaxDateToDeleteData
					AND [FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications].SOHeaderNumber IS NULL
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) FCRHeaders
				FROM FCRHeaders
				LEFT JOIN FCRSpecifications [FCRHeaders_FCRSpecifications] WITH (NOLOCK) ON FCRHeaders.FCRHeaderNumber = FCRHeaders_FCRSpecifications.FCRHeaderNumber
				LEFT JOIN SOSpecifications [FCRHeaders_FCRSpecifications_SOSpecification] WITH (NOLOCK) ON FCRHeaders_FCRSpecifications.SOSpecificationSequence = FCRHeaders_FCRSpecifications_SOSpecification.SOSpecificationSequence
					AND FCRHeaders_FCRSpecifications.SOHeaderNumber = FCRHeaders_FCRSpecifications_SOSpecification.SOHeaderNumber
				LEFT JOIN CSSpecifications [FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications] WITH (NOLOCK) ON FCRHeaders_FCRSpecifications_SOSpecification.SOSpecificationSequence = FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications.CSSpecificationSequence
					AND FCRHeaders_FCRSpecifications_SOSpecification.SOHeaderNumber = FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications.SOHeaderNumber
				WHERE [FCRHeaders].FCRHeaderEditDateTime < @MaxDateToDeleteData
					--AND NOT (([FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications].SOHeaderNumber) IS NOT NULL);
					AND [FCRHeaders_FCRSpecifications_SOSpecification_CSSpecifications].SOHeaderNumber IS NULL;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `FCRHeaders` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `FCRHeaders` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `FCRHeaders` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--SOHeaders
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @SOHeadersDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'SOHeadersDeleteAfterDays'
				), 365);
	SET @MaxDateToDeleteData = DATEADD(DAY, @SOHeadersDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM SOHeaders WITH (NOLOCK)
			LEFT JOIN CSSpecifications [SOHeaders_CSSpecifications] WITH (NOLOCK) ON SOHeaders.SOHeaderNumber = SOHeaders_CSSpecifications.SOHeaderNumber
			WHERE [SOHeaders].SOHeaderEditDateTime < @MaxDateToDeleteData
				AND [SOHeaders_CSSpecifications].SOHeaderNumber IS NULL
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `SOHeaders` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM SOHeaders WITH (NOLOCK)
				LEFT JOIN CSSpecifications [SOHeaders_CSSpecifications] WITH (NOLOCK) ON SOHeaders.SOHeaderNumber = SOHeaders_CSSpecifications.SOHeaderNumber
				WHERE [SOHeaders].SOHeaderEditDateTime < @MaxDateToDeleteData
					AND [SOHeaders_CSSpecifications].SOHeaderNumber IS NULL
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) SOHeaders
				FROM SOHeaders
				LEFT JOIN CSSpecifications [SOHeaders_CSSpecifications] WITH (NOLOCK) ON SOHeaders.SOHeaderNumber = SOHeaders_CSSpecifications.SOHeaderNumber
				WHERE [SOHeaders].SOHeaderEditDateTime < @MaxDateToDeleteData
					--AND NOT (([SOHeaders_CSSpecifications].SOHeaderNumber) IS NOT NULL);
					AND [SOHeaders_CSSpecifications].SOHeaderNumber IS NULL;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `SOHeaders` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `SOHeaders` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `SOHeaders` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--CSHeaders
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @CSHeadersDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'CSHeadersDeleteAfterDays'
				), 365);
	SET @MaxDateToDeleteData = DATEADD(DAY, @CSHeadersDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM CSHeaders WITH (NOLOCK)
			LEFT JOIN CSSpecifications [CSHeaders_CSSpecifications] WITH (NOLOCK) ON CSHeaders.CSHeaderNumber = CSHeaders_CSSpecifications.CSHeaderNumber
			WHERE [CSHeaders].CSHeaderEditDateTime < @MaxDateToDeleteData
				AND [CSHeaders_CSSpecifications].SOHeaderNumber IS NULL
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `CSHeaders` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM CSHeaders WITH (NOLOCK)
				LEFT JOIN CSSpecifications [CSHeaders_CSSpecifications] WITH (NOLOCK) ON CSHeaders.CSHeaderNumber = CSHeaders_CSSpecifications.CSHeaderNumber
				WHERE [CSHeaders].CSHeaderEditDateTime < @MaxDateToDeleteData
					AND [CSHeaders_CSSpecifications].SOHeaderNumber IS NULL
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) CSHeaders
				FROM CSHeaders
				LEFT JOIN CSSpecifications [CSHeaders_CSSpecifications] WITH (NOLOCK) ON CSHeaders.CSHeaderNumber = CSHeaders_CSSpecifications.CSHeaderNumber
				WHERE [CSHeaders].CSHeaderEditDateTime < @MaxDateToDeleteData
					--AND NOT (([CSHeaders_CSSpecifications].SOHeaderNumber) IS NOT NULL);
					AND [CSHeaders_CSSpecifications].SOHeaderNumber IS NULL;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `CSHeaders` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `CSHeaders` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `CSHeaders` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--DelayedActions
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @DelayedActionDeleteStatus = NULL;
	SET @DelayedActionDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'DelayedActionDeleteAfterDays'
				), 7);
	SET @DelayedActionDeleteStatus = ISNULL((
				SELECT FieldValue
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'DelayedActionDeleteStatus'
				), 'Cancelled, Finished, Error');
	SET @MaxDateToDeleteData = DATEADD(DAY, @DelayedActionDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM DelayedActions WITH (NOLOCK)
			WHERE [DelayedActions].DelayedActionEditDateTime < @MaxDateToDeleteData
				AND [DelayedActions].DelayedActionStatus IN (
					SELECT LTRIM(RTRIM(F.Value))
					FROM string_split(@DelayedActionDeleteStatus, ',') AS F
					)
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `DelayedActions` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM DelayedActions WITH (NOLOCK)
				WHERE [DelayedActions].DelayedActionEditDateTime < @MaxDateToDeleteData
					AND [DelayedActions].DelayedActionStatus IN (
						SELECT LTRIM(RTRIM(F.Value))
						FROM string_split(@DelayedActionDeleteStatus, ',') AS F
						)
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) DelayedActions
				FROM DelayedActions
				WHERE [DelayedActions].DelayedActionEditDateTime < @MaxDateToDeleteData
					AND [DelayedActions].DelayedActionStatus IN (
						SELECT LTRIM(RTRIM(F.Value))
						FROM string_split(@DelayedActionDeleteStatus, ',') AS F
						);

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `DelayedActions` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `DelayedActions` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `DelayedActions` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--Logs
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @LogDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'LogDeleteAfterDays'
				), 90);
	SET @MaxDateToDeleteData = DATEADD(DAY, @LogDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM Logs WITH (NOLOCK)
			WHERE [Logs].LogDateTime < @MaxDateToDeleteData
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `Logs` in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM Logs WITH (NOLOCK)
				WHERE [Logs].LogDateTime < @MaxDateToDeleteData
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				DELETE TOP (@BatchSizeForDeletion) Logs
				FROM Logs
				WHERE [Logs].LogDateTime < @MaxDateToDeleteData;

				SET @RowCount = @@ROWCOUNT;
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowCount) + ' records of `Logs` from `' + @DataBase + '`.';

				EXECUTE pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				COMMIT TRANSACTION;

				SET @TotRowCount = @TotRowCount + @RowCount;
				SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowCount;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while deleting from `Logs` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `Logs` in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--------------------------
	--Data Entries
	--------------------------
	SET @DeleteAfterDays = NULL;
	SET @MaxDateToDeleteData = NULL;
	SET @CountOfRowsAvailableForDeletion = NULL;
	SET @DataEntryDeletionStatuses = NULL;
	SET @DataEntryDefinitionDataEntryTypeForDeletion = ISNULL((
				SELECT FieldValue
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'DataEntryDefinitionDataEntryTypeForDeletion'
				), 'StandardReceipt, RefusalReceipt, CrossDockReceipt, StandardOrder, CrossDockOrder, HeldInventory, AlternativeProduct, Product, Company, Pack, OrderContainerExchange, ReceiptContainerExchange, Billing, Transfer, BillsOfMaterial, UpcomingReceipt');
	--DataEntryStatus can be 'Interfaced', 'Finished', 'Cancelled', 'NotImported'
	--Interfaced
	SET @CountOfRowsAvailableForDeletion = 0;
	SET @DataEntryDeletionStatuses = 'Interfaced';
	SET @DataEntryDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'DataEntryStatusInterfacedDeleteAfterDays'
				), 90);
	SET @MaxDateToDeleteData = DATEADD(DAY, @DataEntryDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM DataEntries DE WITH (NOLOCK)
			INNER JOIN DataEntryDefinitions DED WITH (NOLOCK) ON DE.DataEntryDefinitionID = DED.IDDataEntryDefinition
			WHERE CAST(DE.DataEntryStatusChangeDateTime AS DATE) < CAST(@MaxDateToDeleteData AS DATE)
				AND DE.DataEntryStatus = @DataEntryDeletionStatuses
				AND DED.DataEntryDefinitionDataEntryType IN (
					SELECT LTRIM(RTRIM(F.Value))
					FROM string_split(@DataEntryDefinitionDataEntryTypeForDeletion, ',') AS F
					)
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `DataEntries` (' + @DataEntryDeletionStatuses + ') in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		IF EXISTS (
				SELECT 1
				FROM INFORMATION_SCHEMA.TABLES T
				WHERE T.TABLE_NAME = 'TempDataEntries_ForDeletion'
					AND T.TABLE_TYPE = 'BASE TABLE'
				)
		BEGIN
			DROP TABLE TempDataEntries_ForDeletion;
		END

		SELECT ROW_NUMBER() OVER (
				ORDER BY (
						SELECT NULL
						)
				) AS SNO
			,IDDataEntry
			,CAST(0 AS BIT) AS DeletionFlag
			,GETUTCDATE() CurrentDate
		INTO TempDataEntries_ForDeletion
		FROM DataEntries DE WITH (NOLOCK)
		INNER JOIN DataEntryDefinitions DED WITH (NOLOCK) ON DE.DataEntryDefinitionID = DED.IDDataEntryDefinition
		WHERE CAST(DE.DataEntryStatusChangeDateTime AS DATE) < CAST(@MaxDateToDeleteData AS DATE)
			AND DE.DataEntryStatus = @DataEntryDeletionStatuses
			AND DED.DataEntryDefinitionDataEntryType IN (
				SELECT LTRIM(RTRIM(F.Value))
				FROM string_split(@DataEntryDefinitionDataEntryTypeForDeletion, ',') AS F
				);

		IF OBJECT_ID('tempdb..#TempDataEntries_ForDeletion') IS NOT NULL
		BEGIN
			DROP TABLE #TempDataEntries_ForDeletion;
		END

		SELECT *
		INTO #TempDataEntries_ForDeletion
		FROM TempDataEntries_ForDeletion
		WHERE 1 = 0;

		SET @MaxSlNo = (
				SELECT MAX(SNO)
				FROM TempDataEntries_ForDeletion
				);
		SET @NoOfTimes = ROUND(@MaxSlNo / @DataEntryBatchSize, 0);

		IF (@MaxSlNo % @DataEntryBatchSize) > 0
		BEGIN
			SET @NoOfTimes = @NoOfTimes + 1;
		END

		WHILE @Ctr01 <= @MaxSlNo
		BEGIN
			SET @Ctr00 = @Ctr00 + 1;

			PRINT '(' + RIGHT('00000000' + LTRIM(STR(@Ctr00)), 8) + ') ------------------------------------------------------------------------';

			TRUNCATE TABLE #TempDataEntries_ForDeletion;

			INSERT INTO #TempDataEntries_ForDeletion (
				SNO
				,[IDDataEntry]
				,CurrentDate
				)
			SELECT SNO
				,[IDDataEntry]
				,CurrentDate
			FROM TempDataEntries_ForDeletion
			WHERE SNO BETWEEN @Ctr01
					AND @Ctr01 + (@DataEntryBatchSize - 1);

			--AlternativeProductDataEntries: FK_AlternativeProductDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'AlternativeProductDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelAlternativeProductDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM AlternativeProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelAlternativeProductDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--BillingDataEntries: FK_BillingDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'BillingDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelBillingDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM BillingDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						PRINT 'Deadlock while deleting from `BillingDataEntries`';

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelBillingDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--BillsOfMaterialDataEntries: FK_BillsOfMaterialDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'BillsOfMaterialDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelBillsOfMaterialDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM BillsOfMaterialDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelBillsOfMaterialDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--DataEntryLogs: FK_DataEntryLogs_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'DataEntryLogs';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelDataEntryLogs01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM DataEntryLogs PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelDataEntryLogs01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--HeldInventoryDataEntries: FK_HeldInventoryDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'HeldInventoryDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelHeldInventoryDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM HeldInventoryDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelHeldInventoryDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderContainerExchangeDataEntries: FK_OrderContainerExchangeDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'OrderContainerExchangeDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderContainerExchangeDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderContainerExchangeDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderContainerExchangeDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--DROP TABLE 	IF EXISTS #TempReceiptDetailDataEntries_ForDeletion;
			--CREATE TABLE #TempReceiptDetailDataEntries_ForDeletion(ReceiptDetailDataEntryID UNIQUEIDENTIFIER
			--,OrderDetailDataEntryID UNIQUEIDENTIFIER
			--,DataEntryID UNIQUEIDENTIFIER
			--);
			TRUNCATE TABLE #TempReceiptDetailDataEntries_ForDeletion;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT IDReceiptDetailDataEntry --ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
			--INTO #TempReceiptDetailDataEntries_ForDeletion
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry
			WHERE 1 = 0;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT ReceiptDetailDataEntryID
				,IDOrderDetailDataEntry
				,DataEntryId
			FROM OrderDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT PS.IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,PS.DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN PackDataEntries PDS WITH (NOLOCK) ON PS.DataEntryIDPack = PDS.DataEntryID
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT PS.IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,PS.DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry
			INNER JOIN ProductDataEntries PDS WITH (NOLOCK) ON PS.DataEntryIDProduct = PDS.DataEntryID;

			--ReceiptCaseDetailDataEntries: FK_ReceiptCaseDetailDataEntries_ReceiptDetailDataEntries
			----ReceiptDetailDataEntryID REFERENCES ILSE_WBK.dbo.ReceiptDetailDataEntries (IDReceiptDetailDataEntry)
			SET @TableName = 'ReceiptCaseDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptCaseDetailDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptCaseDetailDataEntries PS
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.ReceiptDetailDataEntryID = TP.ReceiptDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptCaseDetailDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			ALTER TABLE [dbo].[OrderDataEntries] NOCHECK CONSTRAINT [FK_OrderDataEntries_ReceiptDataEntries];

			ALTER TABLE [dbo].[OrderDetailDataEntries] NOCHECK CONSTRAINT [FK_OrderDetailDataEntries_ReceiptDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] NOCHECK CONSTRAINT [FK_ReceiptDetailDataEntries_OrderDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] NOCHECK CONSTRAINT [FK_ReceiptDetailDataEntries_ProductDataEntries];

			/*	
	--ReceiptDetailDataEntries: FK_ReceiptDetailDataEntries_OrderDetailDataEntries
	----OrderDetailDataEntryID REFERENCES ILSE_WBK.dbo.OrderDetailDataEntries (IDOrderDetailDataEntry)
	--OrderDetailDataEntries: FK_OrderDetailDataEntries_OrderDataEntries
	----DataEntryID REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
	--ReceiptDataEntries: FK_ReceiptDataEntries_OrderDataEntries
	----DataEntryIDOrder REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
	--OrderDataEntries: FK_OrderDataEntries_DataEntries
	----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
	--ReceiptDetailDataEntries: FK_ReceiptDetailDataEntries_PackDataEntries
	----DataEntryIDPack REFERENCES ILSE_WBK.dbo.PackDataEnstries (DataEntryID)
	*/
			--PackDataEntries: FK_PackDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'PackDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelPackDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM PackDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelPackDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderDetailDataEntries: FK_OrderDetailDataEntries_OrderDataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
			SET @TableName = 'OrderDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderDetailDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderDetailDataEntries PS
					--INNER JOIN ProductDataEntries PDE WITH (NOLOCK) ON PS.DataEntryIDProduct = PDE.DataEntryID
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.IDOrderDetailDataEntry = TP.OrderDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderDetailDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptDetailDataEntries: FK_ReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptDetailDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptDetailDataEntries PS
					--INNER JOIN ProductDataEntries PDE WITH (NOLOCK) ON PS.DataEntryIDProduct = PDE.DataEntryID
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.IDReceiptDetailDataEntry = TP.ReceiptDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptDetailDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ProductDataEntries: FK_ProductDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ProductDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelProductDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SELECT PS.*
					FROM ProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelProductDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptContainerExchangeDataEntries: FK_ReceiptContainerExchangeDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptContainerExchangeDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptContainerExchangeDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptContainerExchangeDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptContainerExchangeDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--UpcomingReceiptDataEntries: FK_UpcomingReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'UpcomingReceiptDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelUpcomingReceiptDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM UpcomingReceiptDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelUpcomingReceiptDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--TransferDataEntries: FK__TransferD__DataE__31D75E8D
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'TransferDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelTransferDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM TransferDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelTransferDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderDataEntries: FK_OrderDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'OrderDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptDataEntries: FK_ReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@ReceiptDataEntryBatchSize) PS
					FROM ReceiptDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @ReceiptDataEntryBatchSize
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			ALTER TABLE [dbo].[OrderDataEntries] CHECK CONSTRAINT [FK_OrderDataEntries_ReceiptDataEntries];

			ALTER TABLE [dbo].[OrderDetailDataEntries] CHECK CONSTRAINT [FK_OrderDetailDataEntries_ReceiptDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] CHECK CONSTRAINT [FK_ReceiptDetailDataEntries_OrderDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] CHECK CONSTRAINT [FK_ReceiptDetailDataEntries_ProductDataEntries];

			--DataEntries
			--IDDataEntry
			SET @TableName = 'DataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelDataEntries01:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM DataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.IDDataEntry = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelDataEntries01;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			UPDATE T0
			SET T0.DeletionFlag = 1
			FROM TempDataEntries_ForDeletion T0
			INNER JOIN #TempDataEntries_ForDeletion T1 ON T0.SNO = T1.SNO
			WHERE T0.DeletionFlag = 0;

			SET @Ctr01 = @Ctr01 + @DataEntryBatchSize;
				--SET @BatchEndTime = GETDATE();
				--SET @Var01 = DATEDIFF(SECOND, @BatchStartTime, @BatchEndTime);
		END;

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `DataEntries` (' + @DataEntryDeletionStatuses + ') in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END

	--Finished
	SET @CountOfRowsAvailableForDeletion = 0;
	SET @DataEntryDeletionStatuses = 'Finished';
	SET @DataEntryDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'DataEntryStatusFinishedDeleteAfterDays'
				), 90);
	SET @MaxDateToDeleteData = DATEADD(DAY, @DataEntryDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM DataEntries DE WITH (NOLOCK)
			INNER JOIN DataEntryDefinitions DED WITH (NOLOCK) ON DE.DataEntryDefinitionID = DED.IDDataEntryDefinition
			WHERE CAST(DE.DataEntryStatusChangeDateTime AS DATE) < CAST(@MaxDateToDeleteData AS DATE)
				AND DE.DataEntryStatus = @DataEntryDeletionStatuses
				AND DED.DataEntryDefinitionDataEntryType IN (
					SELECT LTRIM(RTRIM(F.Value))
					FROM string_split(@DataEntryDefinitionDataEntryTypeForDeletion, ',') AS F
					)
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `DataEntries` (' + @DataEntryDeletionStatuses + ') in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		IF EXISTS (
				SELECT 1
				FROM INFORMATION_SCHEMA.TABLES T
				WHERE T.TABLE_NAME = 'TempDataEntries_ForDeletion'
					AND T.TABLE_TYPE = 'BASE TABLE'
				)
		BEGIN
			DROP TABLE TempDataEntries_ForDeletion;
		END

		SELECT ROW_NUMBER() OVER (
				ORDER BY (
						SELECT NULL
						)
				) AS SNO
			,IDDataEntry
			,CAST(0 AS BIT) AS DeletionFlag
			,GETUTCDATE() CurrentDate
		INTO TempDataEntries_ForDeletion
		FROM DataEntries DE WITH (NOLOCK)
		INNER JOIN DataEntryDefinitions DED WITH (NOLOCK) ON DE.DataEntryDefinitionID = DED.IDDataEntryDefinition
		WHERE CAST(DE.DataEntryStatusChangeDateTime AS DATE) < CAST(@MaxDateToDeleteData AS DATE)
			AND DE.DataEntryStatus = @DataEntryDeletionStatuses
			AND DED.DataEntryDefinitionDataEntryType IN (
				SELECT LTRIM(RTRIM(F.Value))
				FROM string_split(@DataEntryDefinitionDataEntryTypeForDeletion, ',') AS F
				);

		--DROP TABLE IF EXISTS #TempDataEntries_ForDeletion;
		--SELECT *
		--INTO #TempDataEntries_ForDeletion
		--FROM TempDataEntries_ForDeletion
		--WHERE 1 = 0;
		TRUNCATE TABLE #TempDataEntries_ForDeletion;

		SET @MaxSlNo = (
				SELECT MAX(SNO)
				FROM TempDataEntries_ForDeletion
				);
		SET @NoOfTimes = ROUND(@MaxSlNo / @DataEntryBatchSize, 0);

		IF (@MaxSlNo % @DataEntryBatchSize) > 0
		BEGIN
			SET @NoOfTimes = @NoOfTimes + 1;
		END

		WHILE @Ctr01 <= @MaxSlNo
		BEGIN
			SET @Ctr00 = @Ctr00 + 1;

			PRINT '(' + RIGHT('00000000' + LTRIM(STR(@Ctr00)), 8) + ') ------------------------------------------------------------------------';

			TRUNCATE TABLE #TempDataEntries_ForDeletion;

			INSERT INTO #TempDataEntries_ForDeletion (
				SNO
				,[IDDataEntry]
				,CurrentDate
				)
			SELECT SNO
				,[IDDataEntry]
				,CurrentDate
			FROM TempDataEntries_ForDeletion
			WHERE SNO BETWEEN @Ctr01
					AND @Ctr01 + (@DataEntryBatchSize - 1);

			--AlternativeProductDataEntries: FK_AlternativeProductDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'AlternativeProductDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelAlternativeProductDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM AlternativeProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelAlternativeProductDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--BillingDataEntries: FK_BillingDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'BillingDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelBillingDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM BillingDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						PRINT 'Deadlock while deleting from `BillingDataEntries`';

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelBillingDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--BillsOfMaterialDataEntries: FK_BillsOfMaterialDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'BillsOfMaterialDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelBillsOfMaterialDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM BillsOfMaterialDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelBillsOfMaterialDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--DataEntryLogs: FK_DataEntryLogs_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'DataEntryLogs';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelDataEntryLogs02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM DataEntryLogs PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelDataEntryLogs02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--HeldInventoryDataEntries: FK_HeldInventoryDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'HeldInventoryDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelHeldInventoryDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM HeldInventoryDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelHeldInventoryDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderContainerExchangeDataEntries: FK_OrderContainerExchangeDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'OrderContainerExchangeDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderContainerExchangeDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderContainerExchangeDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderContainerExchangeDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--DROP TABLE IF EXISTS #TempReceiptDetailDataEntries_ForDeletion;
			--	SELECT IDReceiptDetailDataEntry ReceiptDetailDataEntryID
			--		,OrderDetailDataEntryID
			--		,DataEntryID
			--	INTO #TempReceiptDetailDataEntries_ForDeletion
			--	FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			--	INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry
			--	WHERE 1 = 0;
			TRUNCATE TABLE #TempReceiptDetailDataEntries_ForDeletion

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT ReceiptDetailDataEntryID
				,IDOrderDetailDataEntry
				,DataEntryId
			FROM OrderDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT PS.IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,PS.DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN PackDataEntries PDS WITH (NOLOCK) ON PS.DataEntryIDPack = PDS.DataEntryID
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT PS.IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,PS.DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry
			INNER JOIN ProductDataEntries PDS WITH (NOLOCK) ON PS.DataEntryIDProduct = PDS.DataEntryID;

			--ReceiptCaseDetailDataEntries: FK_ReceiptCaseDetailDataEntries_ReceiptDetailDataEntries
			----ReceiptDetailDataEntryID REFERENCES ILSE_WBK.dbo.ReceiptDetailDataEntries (IDReceiptDetailDataEntry)
			SET @TableName = 'ReceiptCaseDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptCaseDetailDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptCaseDetailDataEntries PS
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.ReceiptDetailDataEntryID = TP.ReceiptDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptCaseDetailDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			ALTER TABLE [dbo].[OrderDataEntries] NOCHECK CONSTRAINT [FK_OrderDataEntries_ReceiptDataEntries];

			ALTER TABLE [dbo].[OrderDetailDataEntries] NOCHECK CONSTRAINT [FK_OrderDetailDataEntries_ReceiptDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] NOCHECK CONSTRAINT [FK_ReceiptDetailDataEntries_OrderDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] NOCHECK CONSTRAINT [FK_ReceiptDetailDataEntries_ProductDataEntries];

			/*	
	--ReceiptDetailDataEntries: FK_ReceiptDetailDataEntries_OrderDetailDataEntries
	----OrderDetailDataEntryID REFERENCES ILSE_WBK.dbo.OrderDetailDataEntries (IDOrderDetailDataEntry)
	--OrderDetailDataEntries: FK_OrderDetailDataEntries_OrderDataEntries
	----DataEntryID REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
	--ReceiptDataEntries: FK_ReceiptDataEntries_OrderDataEntries
	----DataEntryIDOrder REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
	--OrderDataEntries: FK_OrderDataEntries_DataEntries
	----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
	--ReceiptDetailDataEntries: FK_ReceiptDetailDataEntries_PackDataEntries
	----DataEntryIDPack REFERENCES ILSE_WBK.dbo.PackDataEnstries (DataEntryID)
	*/
			--PackDataEntries: FK_PackDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'PackDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelPackDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM PackDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelPackDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderDetailDataEntries: FK_OrderDetailDataEntries_OrderDataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
			SET @TableName = 'OrderDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderDetailDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderDetailDataEntries PS
					--INNER JOIN ProductDataEntries PDE WITH (NOLOCK) ON PS.DataEntryIDProduct = PDE.DataEntryID
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.IDOrderDetailDataEntry = TP.OrderDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderDetailDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptDetailDataEntries: FK_ReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptDetailDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptDetailDataEntries PS
					--INNER JOIN ProductDataEntries PDE WITH (NOLOCK) ON PS.DataEntryIDProduct = PDE.DataEntryID
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.IDReceiptDetailDataEntry = TP.ReceiptDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptDetailDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ProductDataEntries: FK_ProductDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ProductDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelProductDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SELECT PS.*
					FROM ProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelProductDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptContainerExchangeDataEntries: FK_ReceiptContainerExchangeDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptContainerExchangeDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptContainerExchangeDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptContainerExchangeDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptContainerExchangeDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--UpcomingReceiptDataEntries: FK_UpcomingReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'UpcomingReceiptDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelUpcomingReceiptDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM UpcomingReceiptDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelUpcomingReceiptDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--TransferDataEntries: FK__TransferD__DataE__31D75E8D
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'TransferDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelTransferDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM TransferDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelTransferDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderDataEntries: FK_OrderDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'OrderDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptDataEntries: FK_ReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@ReceiptDataEntryBatchSize) PS
					FROM ReceiptDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @ReceiptDataEntryBatchSize
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			ALTER TABLE [dbo].[OrderDataEntries] CHECK CONSTRAINT [FK_OrderDataEntries_ReceiptDataEntries];

			ALTER TABLE [dbo].[OrderDetailDataEntries] CHECK CONSTRAINT [FK_OrderDetailDataEntries_ReceiptDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] CHECK CONSTRAINT [FK_ReceiptDetailDataEntries_OrderDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] CHECK CONSTRAINT [FK_ReceiptDetailDataEntries_ProductDataEntries];

			--DataEntries
			--IDDataEntry
			SET @TableName = 'DataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelDataEntries02:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM DataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.IDDataEntry = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelDataEntries02;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			UPDATE T0
			SET T0.DeletionFlag = 1
			FROM TempDataEntries_ForDeletion T0
			INNER JOIN #TempDataEntries_ForDeletion T1 ON T0.SNO = T1.SNO
			WHERE T0.DeletionFlag = 0;

			SET @Ctr01 = @Ctr01 + @DataEntryBatchSize;
				--SET @BatchEndTime = GETDATE();
				--SET @Var01 = DATEDIFF(SECOND, @BatchStartTime, @BatchEndTime);
		END;

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `DataEntries` (' + @DataEntryDeletionStatuses + ') in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END

	--Cancelled
	SET @DataEntryDeletionStatuses = 'Cancelled';
	SET @DataEntryDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'DataEntryStatusCancelledDeleteAfterDays'
				), 90);
	SET @MaxDateToDeleteData = DATEADD(DAY, @DataEntryDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM DataEntries DE WITH (NOLOCK)
			INNER JOIN DataEntryDefinitions DED WITH (NOLOCK) ON DE.DataEntryDefinitionID = DED.IDDataEntryDefinition
			WHERE CAST(DE.DataEntryStatusChangeDateTime AS DATE) < CAST(@MaxDateToDeleteData AS DATE)
				AND DE.DataEntryStatus = @DataEntryDeletionStatuses
				AND DED.DataEntryDefinitionDataEntryType IN (
					SELECT LTRIM(RTRIM(F.Value))
					FROM string_split(@DataEntryDefinitionDataEntryTypeForDeletion, ',') AS F
					)
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `DataEntries` (' + @DataEntryDeletionStatuses + ') in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		IF EXISTS (
				SELECT 1
				FROM INFORMATION_SCHEMA.TABLES T
				WHERE T.TABLE_NAME = 'TempDataEntries_ForDeletion'
					AND T.TABLE_TYPE = 'BASE TABLE'
				)
		BEGIN
			DROP TABLE TempDataEntries_ForDeletion;
		END

		SELECT ROW_NUMBER() OVER (
				ORDER BY (
						SELECT NULL
						)
				) AS SNO
			,IDDataEntry
			,CAST(0 AS BIT) AS DeletionFlag
			,GETUTCDATE() CurrentDate
		INTO TempDataEntries_ForDeletion
		FROM DataEntries DE WITH (NOLOCK)
		INNER JOIN DataEntryDefinitions DED WITH (NOLOCK) ON DE.DataEntryDefinitionID = DED.IDDataEntryDefinition
		WHERE CAST(DE.DataEntryStatusChangeDateTime AS DATE) < CAST(@MaxDateToDeleteData AS DATE)
			AND DE.DataEntryStatus = @DataEntryDeletionStatuses
			AND DED.DataEntryDefinitionDataEntryType IN (
				SELECT LTRIM(RTRIM(F.Value))
				FROM string_split(@DataEntryDefinitionDataEntryTypeForDeletion, ',') AS F
				);

		--IF OBJECT_ID('tempdb..#TempDataEntries_ForDeletion') IS NOT NULL
		--BEGIN
		--	DROP TABLE #TempDataEntries_ForDeletion;
		--END
		--SELECT *
		--INTO #TempDataEntries_ForDeletion
		--FROM TempDataEntries_ForDeletion
		--WHERE 1 = 0;
		TRUNCATE TABLE #TempDataEntries_ForDeletion;

		SET @MaxSlNo = (
				SELECT MAX(SNO)
				FROM TempDataEntries_ForDeletion
				);
		SET @NoOfTimes = ROUND(@MaxSlNo / @DataEntryBatchSize, 0);

		IF (@MaxSlNo % @DataEntryBatchSize) > 0
		BEGIN
			SET @NoOfTimes = @NoOfTimes + 1;
		END

		WHILE @Ctr01 <= @MaxSlNo
		BEGIN
			SET @Ctr00 = @Ctr00 + 1;

			PRINT '(' + RIGHT('00000000' + LTRIM(STR(@Ctr00)), 8) + ') ------------------------------------------------------------------------';

			TRUNCATE TABLE #TempDataEntries_ForDeletion;

			INSERT INTO #TempDataEntries_ForDeletion (
				SNO
				,[IDDataEntry]
				,CurrentDate
				)
			SELECT SNO
				,[IDDataEntry]
				,CurrentDate
			FROM TempDataEntries_ForDeletion
			WHERE SNO BETWEEN @Ctr01
					AND @Ctr01 + (@DataEntryBatchSize - 1);

			--AlternativeProductDataEntries: FK_AlternativeProductDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'AlternativeProductDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelAlternativeProductDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM AlternativeProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelAlternativeProductDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--BillingDataEntries: FK_BillingDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'BillingDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelBillingDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM BillingDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						PRINT 'Deadlock while deleting from `BillingDataEntries`';

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelBillingDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--BillsOfMaterialDataEntries: FK_BillsOfMaterialDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'BillsOfMaterialDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelBillsOfMaterialDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM BillsOfMaterialDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelBillsOfMaterialDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--DataEntryLogs: FK_DataEntryLogs_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'DataEntryLogs';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelDataEntryLogs03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM DataEntryLogs PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelDataEntryLogs03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--HeldInventoryDataEntries: FK_HeldInventoryDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'HeldInventoryDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelHeldInventoryDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM HeldInventoryDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelHeldInventoryDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderContainerExchangeDataEntries: FK_OrderContainerExchangeDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'OrderContainerExchangeDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderContainerExchangeDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderContainerExchangeDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderContainerExchangeDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--DROP TABLE IF EXISTS #TempReceiptDetailDataEntries_ForDeletion;
			--	SELECT IDReceiptDetailDataEntry ReceiptDetailDataEntryID
			--		,OrderDetailDataEntryID
			--		,DataEntryID
			--	INTO #TempReceiptDetailDataEntries_ForDeletion
			--	FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			--	INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry
			--	WHERE 1 = 0;
			TRUNCATE TABLE #TempReceiptDetailDataEntries_ForDeletion;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT ReceiptDetailDataEntryID
				,IDOrderDetailDataEntry
				,DataEntryId
			FROM OrderDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT PS.IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,PS.DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN PackDataEntries PDS WITH (NOLOCK) ON PS.DataEntryIDPack = PDS.DataEntryID
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT PS.IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,PS.DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry
			INNER JOIN ProductDataEntries PDS WITH (NOLOCK) ON PS.DataEntryIDProduct = PDS.DataEntryID;

			--ReceiptCaseDetailDataEntries: FK_ReceiptCaseDetailDataEntries_ReceiptDetailDataEntries
			----ReceiptDetailDataEntryID REFERENCES ILSE_WBK.dbo.ReceiptDetailDataEntries (IDReceiptDetailDataEntry)
			SET @TableName = 'ReceiptCaseDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptCaseDetailDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptCaseDetailDataEntries PS
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.ReceiptDetailDataEntryID = TP.ReceiptDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptCaseDetailDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			ALTER TABLE [dbo].[OrderDataEntries] NOCHECK CONSTRAINT [FK_OrderDataEntries_ReceiptDataEntries];

			ALTER TABLE [dbo].[OrderDetailDataEntries] NOCHECK CONSTRAINT [FK_OrderDetailDataEntries_ReceiptDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] NOCHECK CONSTRAINT [FK_ReceiptDetailDataEntries_OrderDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] NOCHECK CONSTRAINT [FK_ReceiptDetailDataEntries_ProductDataEntries];

			/*	
	--ReceiptDetailDataEntries: FK_ReceiptDetailDataEntries_OrderDetailDataEntries
	----OrderDetailDataEntryID REFERENCES ILSE_WBK.dbo.OrderDetailDataEntries (IDOrderDetailDataEntry)
	--OrderDetailDataEntries: FK_OrderDetailDataEntries_OrderDataEntries
	----DataEntryID REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
	--ReceiptDataEntries: FK_ReceiptDataEntries_OrderDataEntries
	----DataEntryIDOrder REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
	--OrderDataEntries: FK_OrderDataEntries_DataEntries
	----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
	--ReceiptDetailDataEntries: FK_ReceiptDetailDataEntries_PackDataEntries
	----DataEntryIDPack REFERENCES ILSE_WBK.dbo.PackDataEnstries (DataEntryID)
	*/
			--PackDataEntries: FK_PackDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'PackDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelPackDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM PackDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelPackDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderDetailDataEntries: FK_OrderDetailDataEntries_OrderDataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
			SET @TableName = 'OrderDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderDetailDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderDetailDataEntries PS
					--INNER JOIN ProductDataEntries PDE WITH (NOLOCK) ON PS.DataEntryIDProduct = PDE.DataEntryID
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.IDOrderDetailDataEntry = TP.OrderDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderDetailDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptDetailDataEntries: FK_ReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptDetailDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptDetailDataEntries PS
					--INNER JOIN ProductDataEntries PDE WITH (NOLOCK) ON PS.DataEntryIDProduct = PDE.DataEntryID
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.IDReceiptDetailDataEntry = TP.ReceiptDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptDetailDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ProductDataEntries: FK_ProductDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ProductDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelProductDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SELECT PS.*
					FROM ProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelProductDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptContainerExchangeDataEntries: FK_ReceiptContainerExchangeDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptContainerExchangeDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptContainerExchangeDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptContainerExchangeDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptContainerExchangeDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--UpcomingReceiptDataEntries: FK_UpcomingReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'UpcomingReceiptDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelUpcomingReceiptDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM UpcomingReceiptDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelUpcomingReceiptDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--TransferDataEntries: FK__TransferD__DataE__31D75E8D
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'TransferDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelTransferDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM TransferDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelTransferDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderDataEntries: FK_OrderDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'OrderDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptDataEntries: FK_ReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@ReceiptDataEntryBatchSize) PS
					FROM ReceiptDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @ReceiptDataEntryBatchSize
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			ALTER TABLE [dbo].[OrderDataEntries] CHECK CONSTRAINT [FK_OrderDataEntries_ReceiptDataEntries];

			ALTER TABLE [dbo].[OrderDetailDataEntries] CHECK CONSTRAINT [FK_OrderDetailDataEntries_ReceiptDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] CHECK CONSTRAINT [FK_ReceiptDetailDataEntries_OrderDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] CHECK CONSTRAINT [FK_ReceiptDetailDataEntries_ProductDataEntries];

			--DataEntries
			--IDDataEntry
			SET @TableName = 'DataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelDataEntries03:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM DataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.IDDataEntry = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelDataEntries03;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			UPDATE T0
			SET T0.DeletionFlag = 1
			FROM TempDataEntries_ForDeletion T0
			INNER JOIN #TempDataEntries_ForDeletion T1 ON T0.SNO = T1.SNO
			WHERE T0.DeletionFlag = 0;

			SET @Ctr01 = @Ctr01 + @DataEntryBatchSize;
				--SET @BatchEndTime = GETDATE();
				--SET @Var01 = DATEDIFF(SECOND, @BatchStartTime, @BatchEndTime);
		END;

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `DataEntries` (' + @DataEntryDeletionStatuses + ') in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	--NotImported
	SET @DataEntryDeletionStatuses = 'NotImported';
	SET @DataEntryDeleteAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'DataEntryStatusNotImportedDeleteAfterDays'
				), 90);
	SET @MaxDateToDeleteData = DATEADD(DAY, @DataEntryDeleteAfterDays * - 1, GETUTCDATE());
	SET @CountOfRowsAvailableForDeletion = (
			SELECT COUNT(1)
			FROM DataEntries DE WITH (NOLOCK)
			INNER JOIN DataEntryDefinitions DED WITH (NOLOCK) ON DE.DataEntryDefinitionID = DED.IDDataEntryDefinition
			WHERE CAST(DE.DataEntryStatusChangeDateTime AS DATE) < CAST(@MaxDateToDeleteData AS DATE)
				AND DE.DataEntryStatus = @DataEntryDeletionStatuses
				AND DED.DataEntryDefinitionDataEntryType IN (
					SELECT LTRIM(RTRIM(F.Value))
					FROM string_split(@DataEntryDefinitionDataEntryTypeForDeletion, ',') AS F
					)
			);

	IF @CountOfRowsAvailableForDeletion > 0
	BEGIN
		SET @TotRowCount = 0;
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Started Deletion Of data from `DataEntries` (' + @DataEntryDeletionStatuses + ') in `' + @DataBase + '`. No. of rows to be deleted: ' + LTRIM(STR(@CountOfRowsAvailableForDeletion));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		IF EXISTS (
				SELECT 1
				FROM INFORMATION_SCHEMA.TABLES T
				WHERE T.TABLE_NAME = 'TempDataEntries_ForDeletion'
					AND T.TABLE_TYPE = 'BASE TABLE'
				)
		BEGIN
			DROP TABLE TempDataEntries_ForDeletion;
		END

		SELECT ROW_NUMBER() OVER (
				ORDER BY (
						SELECT NULL
						)
				) AS SNO
			,IDDataEntry
			,CAST(0 AS BIT) AS DeletionFlag
			,GETUTCDATE() CurrentDate
		INTO TempDataEntries_ForDeletion
		FROM DataEntries DE WITH (NOLOCK)
		INNER JOIN DataEntryDefinitions DED WITH (NOLOCK) ON DE.DataEntryDefinitionID = DED.IDDataEntryDefinition
		WHERE CAST(DE.DataEntryStatusChangeDateTime AS DATE) < CAST(@MaxDateToDeleteData AS DATE)
			AND DE.DataEntryStatus = @DataEntryDeletionStatuses
			AND DED.DataEntryDefinitionDataEntryType IN (
				SELECT LTRIM(RTRIM(F.Value))
				FROM string_split(@DataEntryDefinitionDataEntryTypeForDeletion, ',') AS F
				);

		--IF OBJECT_ID('tempdb..#TempDataEntries_ForDeletion') IS NOT NULL
		--BEGIN
		--	DROP TABLE #TempDataEntries_ForDeletion;
		--END
		--SELECT *
		--INTO #TempDataEntries_ForDeletion
		--FROM TempDataEntries_ForDeletion
		--WHERE 1 = 0;
		TRUNCATE TABLE #TempDataEntries_ForDeletion;

		SET @MaxSlNo = (
				SELECT MAX(SNO)
				FROM TempDataEntries_ForDeletion
				);
		SET @NoOfTimes = ROUND(@MaxSlNo / @DataEntryBatchSize, 0);

		IF (@MaxSlNo % @DataEntryBatchSize) > 0
		BEGIN
			SET @NoOfTimes = @NoOfTimes + 1;
		END

		WHILE @Ctr01 <= @MaxSlNo
		BEGIN
			SET @Ctr00 = @Ctr00 + 1;

			PRINT '(' + RIGHT('00000000' + LTRIM(STR(@Ctr00)), 8) + ') ------------------------------------------------------------------------';

			TRUNCATE TABLE #TempDataEntries_ForDeletion;

			INSERT INTO #TempDataEntries_ForDeletion (
				SNO
				,[IDDataEntry]
				,CurrentDate
				)
			SELECT SNO
				,[IDDataEntry]
				,CurrentDate
			FROM TempDataEntries_ForDeletion
			WHERE SNO BETWEEN @Ctr01
					AND @Ctr01 + (@DataEntryBatchSize - 1);

			--AlternativeProductDataEntries: FK_AlternativeProductDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'AlternativeProductDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelAlternativeProductDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM AlternativeProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelAlternativeProductDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--BillingDataEntries: FK_BillingDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'BillingDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelBillingDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM BillingDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						PRINT 'Deadlock while deleting from `BillingDataEntries`';

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelBillingDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--BillsOfMaterialDataEntries: FK_BillsOfMaterialDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'BillsOfMaterialDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelBillsOfMaterialDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM BillsOfMaterialDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelBillsOfMaterialDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--DataEntryLogs: FK_DataEntryLogs_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'DataEntryLogs';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelDataEntryLogs04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM DataEntryLogs PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelDataEntryLogs04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--HeldInventoryDataEntries: FK_HeldInventoryDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'HeldInventoryDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelHeldInventoryDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM HeldInventoryDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelHeldInventoryDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderContainerExchangeDataEntries: FK_OrderContainerExchangeDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'OrderContainerExchangeDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderContainerExchangeDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderContainerExchangeDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderContainerExchangeDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--DROP TABLE IF EXISTS #TempReceiptDetailDataEntries_ForDeletion;
			--	SELECT IDReceiptDetailDataEntry ReceiptDetailDataEntryID
			--		,OrderDetailDataEntryID
			--		,DataEntryID
			--	INTO #TempReceiptDetailDataEntries_ForDeletion
			--	FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			--	INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry
			--	WHERE 1 = 0;
			TRUNCATE TABLE #TempReceiptDetailDataEntries_ForDeletion;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT ReceiptDetailDataEntryID
				,IDOrderDetailDataEntry
				,DataEntryId
			FROM OrderDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT PS.IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,PS.DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN PackDataEntries PDS WITH (NOLOCK) ON PS.DataEntryIDPack = PDS.DataEntryID
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

			INSERT INTO #TempReceiptDetailDataEntries_ForDeletion (
				ReceiptDetailDataEntryID
				,OrderDetailDataEntryID
				,DataEntryID
				)
			SELECT PS.IDReceiptDetailDataEntry
				,OrderDetailDataEntryID
				,PS.DataEntryId
			FROM ReceiptDetailDataEntries PS WITH (NOLOCK)
			INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry
			INNER JOIN ProductDataEntries PDS WITH (NOLOCK) ON PS.DataEntryIDProduct = PDS.DataEntryID;

			--ReceiptCaseDetailDataEntries: FK_ReceiptCaseDetailDataEntries_ReceiptDetailDataEntries
			----ReceiptDetailDataEntryID REFERENCES ILSE_WBK.dbo.ReceiptDetailDataEntries (IDReceiptDetailDataEntry)
			SET @TableName = 'ReceiptCaseDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptCaseDetailDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptCaseDetailDataEntries PS
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.ReceiptDetailDataEntryID = TP.ReceiptDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptCaseDetailDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			ALTER TABLE [dbo].[OrderDataEntries] NOCHECK CONSTRAINT [FK_OrderDataEntries_ReceiptDataEntries];

			ALTER TABLE [dbo].[OrderDetailDataEntries] NOCHECK CONSTRAINT [FK_OrderDetailDataEntries_ReceiptDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] NOCHECK CONSTRAINT [FK_ReceiptDetailDataEntries_OrderDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] NOCHECK CONSTRAINT [FK_ReceiptDetailDataEntries_ProductDataEntries];

			/*	
	--ReceiptDetailDataEntries: FK_ReceiptDetailDataEntries_OrderDetailDataEntries
	----OrderDetailDataEntryID REFERENCES ILSE_WBK.dbo.OrderDetailDataEntries (IDOrderDetailDataEntry)
	--OrderDetailDataEntries: FK_OrderDetailDataEntries_OrderDataEntries
	----DataEntryID REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
	--ReceiptDataEntries: FK_ReceiptDataEntries_OrderDataEntries
	----DataEntryIDOrder REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
	--OrderDataEntries: FK_OrderDataEntries_DataEntries
	----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
	--ReceiptDetailDataEntries: FK_ReceiptDetailDataEntries_PackDataEntries
	----DataEntryIDPack REFERENCES ILSE_WBK.dbo.PackDataEnstries (DataEntryID)
	*/
			--PackDataEntries: FK_PackDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'PackDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelPackDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM PackDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelPackDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderDetailDataEntries: FK_OrderDetailDataEntries_OrderDataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.OrderDataEntries (DataEntryID)
			SET @TableName = 'OrderDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderDetailDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderDetailDataEntries PS
					--INNER JOIN ProductDataEntries PDE WITH (NOLOCK) ON PS.DataEntryIDProduct = PDE.DataEntryID
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.IDOrderDetailDataEntry = TP.OrderDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderDetailDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptDetailDataEntries: FK_ReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptDetailDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptDetailDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptDetailDataEntries PS
					--INNER JOIN ProductDataEntries PDE WITH (NOLOCK) ON PS.DataEntryIDProduct = PDE.DataEntryID
					INNER JOIN #TempReceiptDetailDataEntries_ForDeletion TP ON PS.IDReceiptDetailDataEntry = TP.ReceiptDetailDataEntryID;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptDetailDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ProductDataEntries: FK_ProductDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ProductDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelProductDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SELECT PS.*
					FROM ProductDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelProductDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptContainerExchangeDataEntries: FK_ReceiptContainerExchangeDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptContainerExchangeDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptContainerExchangeDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM ReceiptContainerExchangeDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptContainerExchangeDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--UpcomingReceiptDataEntries: FK_UpcomingReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'UpcomingReceiptDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelUpcomingReceiptDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM UpcomingReceiptDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelUpcomingReceiptDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--TransferDataEntries: FK__TransferD__DataE__31D75E8D
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'TransferDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelTransferDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM TransferDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelTransferDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--OrderDataEntries: FK_OrderDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'OrderDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelOrderDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM OrderDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelOrderDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			--ReceiptDataEntries: FK_ReceiptDataEntries_DataEntries
			----DataEntryID REFERENCES ILSE_WBK.dbo.DataEntries (IDDataEntry)
			SET @TableName = 'ReceiptDataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelReceiptDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@ReceiptDataEntryBatchSize) PS
					FROM ReceiptDataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.DataEntryID = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @ReceiptDataEntryBatchSize
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelReceiptDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			ALTER TABLE [dbo].[OrderDataEntries] CHECK CONSTRAINT [FK_OrderDataEntries_ReceiptDataEntries];

			ALTER TABLE [dbo].[OrderDetailDataEntries] CHECK CONSTRAINT [FK_OrderDetailDataEntries_ReceiptDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] CHECK CONSTRAINT [FK_ReceiptDetailDataEntries_OrderDetailDataEntries];

			ALTER TABLE [dbo].[ReceiptDetailDataEntries] CHECK CONSTRAINT [FK_ReceiptDetailDataEntries_ProductDataEntries];

			--DataEntries
			--IDDataEntry
			SET @TableName = 'DataEntries';
			SET @Remarks = 'Started Deletion Of data from `' + @TableName + '` in `' + @DataBase + '`';

			EXECUTE pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			WHILE (1 = 1)
			BEGIN
				TrnDelDataEntries04:

				BEGIN TRY
					BEGIN TRANSACTION;

					DELETE TOP (@BatchSizeForDeletion) PS
					FROM DataEntries PS
					INNER JOIN #TempDataEntries_ForDeletion TP ON PS.IDDataEntry = TP.IDDataEntry;

					SET @RowsCtr01 = @@rowcount;

					COMMIT TRANSACTION;

					SET @ErrorFlag = 0;
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Deleted ' + CONVERT(VARCHAR(10), @RowsCtr01) + ' records of `' + @TableName + '` from `' + @DataBase + '`.';
					SET @TotRowCount = @TotRowCount + @RowsCtr01;
					SET @TotalNumberOfRecordsDeleted = @TotalNumberOfRecordsDeleted + @RowsCtr01;

					EXECUTE pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					IF @RowsCtr01 = 0
						OR @RowsCtr01 < @BatchSizeForDeletion
					BEGIN
						BREAK;
					END
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @ErrorFlag = 1;

					IF ERROR_NUMBER() = 1205
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Deadlock while deleting from `' + @TableName + '` in ' + @DataBase + ', Retrying...';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						WAITFOR DELAY '00:00:01';

						GOTO TrnDelDataEntries04;
					END
					ELSE
					BEGIN
						SET @TypeOfError = ERROR_SEVERITY();
						SET @ErrorNumber = ERROR_NUMBER();
						SET @ErrorMessage = ERROR_MESSAGE();
						SET @LineNumber = ERROR_LINE();
						SET @LogDate = GETUTCDATE();
						SET @Remarks = 'Error while deleting from `' + @TableName + '` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

						EXEC pArchiveLogs @Remarks
							,@SourceProcName
							,@TypeOfError
							,@ErrorNumber
							,@ErrorMessage
							,@LineNumber
							,@LogDate
							,@HostName
							,@UserName
							,'Error'
							,@RunID;

						RAISERROR (
								@ErrorMessage
								,@TypeOfError
								,- 1
								);

						RETURN;
					END
				END CATCH
			END

			UPDATE T0
			SET T0.DeletionFlag = 1
			FROM TempDataEntries_ForDeletion T0
			INNER JOIN #TempDataEntries_ForDeletion T1 ON T0.SNO = T1.SNO
			WHERE T0.DeletionFlag = 0;

			SET @Ctr01 = @Ctr01 + @DataEntryBatchSize;
				--SET @BatchEndTime = GETDATE();
				--SET @Var01 = DATEDIFF(SECOND, @BatchStartTime, @BatchEndTime);
		END;

		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Completed Deletion Of data from `DataEntries` (' + @DataEntryDeletionStatuses + ') in `' + @DataBase + '`. No of rows deleted: ' + LTRIM(STR(@TotRowCount));

		EXECUTE pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END;

	SET @LogDate = GETUTCDATE();
	SET @Remarks = 'Completed Process : Deletion of data in `' + @DataBase + '` Completed.'

	EXEC pArchiveLogs @Remarks
		,@SourceProcName
		,NULL
		,NULL
		,NULL
		,NULL
		,@LogDate
		,@HostName
		,@UserName
		,'InfoAction'
		,@RunID;

	/*DELETION OF OLD DATA COMPLETED*/
	--------------------------
	SET @LogDate = GETUTCDATE();
	SET @Remarks = 'Started Process : Archival of data for `' + @DataBase + '` in `' + @ArchiveDataBase + '` Started.'

	EXEC pArchiveLogs @Remarks
		,@SourceProcName
		,NULL
		,NULL
		,NULL
		,NULL
		,@LogDate
		,@HostName
		,@UserName
		,'InfoAction'
		,@RunID;

	IF OBJECT_ID('tempdb..#tmpTableVal') IS NOT NULL
	BEGIN
		DROP TABLE #tmpTableVal;
	END;

	CREATE TABLE #tmpTableVal (
		MergeAction VARCHAR(20)
		,InsertedID VARCHAR(100)
		,DeletedID VARCHAR(100)
		,Descr VARCHAR(100)
		)

	/*ARCHIVAL DATA STARTED*/
	--Checks for the list of tables to be archived
	--On getting the list, it will be split and each table name will be put in as a row
	--to the `#TempTableArchiveTablesList` temporary table
	--The list will be validated for each table while archiving
	--
	SET @ArchivalOptionAvailableForTables = (
			SELECT FieldValue
			FROM #InterfaceRowsWithConfValues I
			WHERE I.FieldCode = 'TablesListForArchival'
			);

	IF LEN(LTRIM(RTRIM(@ArchivalOptionAvailableForTables))) > 0
	BEGIN
		INSERT INTO #TempTableArchiveTablesList (TableName)
		SELECT LTRIM(RTRIM(F.Value))
		FROM string_split(@ArchivalOptionAvailableForTables, ',') AS F;
	END

	----------------------------------------------------------------------------------------------
	-- 01 User Companies
	----a) Archival
	SET @CurrentTableName = 'UserCompanies';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		IF OBJECT_ID('tempdb..#tmpCompanyPattern') IS NOT NULL
		BEGIN
			DROP TABLE #tmpCompanyPattern;
		END;

		CREATE TABLE #tmpCompanyPattern (
			SlNo INT IDENTITY(1, 1)
			,CompanyIDPattern NVARCHAR(100)
			,UserCompanyUserLogin NVARCHAR(100)
			);

		INSERT INTO #tmpCompanyPattern (
			CompanyIDPattern
			,UserCompanyUserLogin
			)
		SELECT [UserCompanies].CompanyIDPattern AS [CompanyIDPattern]
			,[UserCompanies].UserCompanyUserLogin AS [UserLogin]
		FROM UserCompanies WITH (NOLOCK)
		WHERE (
				[UserCompanies].CompanyIDPattern = 'ALBLAS%'
				AND [UserCompanies].UserCompanyUserLogin = 'ALBLAS'
				)
			OR (
				[UserCompanies].CompanyIDPattern = 'AMBROGIO%'
				AND [UserCompanies].UserCompanyUserLogin = 'AMBROGIO'
				)
			OR (
				[UserCompanies].CompanyIDPattern = 'BATRANS%'
				AND [UserCompanies].UserCompanyUserLogin = 'BATRANS'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%BOSMAN%'
				AND [UserCompanies].UserCompanyUserLogin = 'BOSMAN'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'CHE040'
				)
			OR (
				[UserCompanies].CompanyIDPattern = 'CLAASSEN%'
				AND [UserCompanies].UserCompanyUserLogin = 'CLAASSEN'
				)
			OR (
				[UserCompanies].CompanyIDPattern = 'DAMCO'
				AND [UserCompanies].UserCompanyUserLogin = 'DAMCO'
				)
			OR (
				[UserCompanies].CompanyIDPattern = 'DAMCO'
				AND [UserCompanies].UserCompanyUserLogin = 'DAMCO1'
				)
			OR (
				[UserCompanies].CompanyIDPattern = 'EXTRA LOGISTICS'
				AND [UserCompanies].UserCompanyUserLogin = 'EXTRALOGISTICS'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'IHU007'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'JOT005'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'KVD007'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'MPE187'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'MVG005'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'NEV003'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'PHI009'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'TSA050'
				)
			OR (
				[UserCompanies].CompanyIDPattern = '%'
				AND [UserCompanies].UserCompanyUserLogin = 'VBE006'
				)
			OR (
				[UserCompanies].CompanyIDPattern = 'VERACHTERT EMIEL BVBA'
				AND [UserCompanies].UserCompanyUserLogin = 'VERACHTERT'
				);

		IF EXISTS (
				SELECT 1
				FROM #tmpCompanyPattern
				)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION;

				/*
					MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.UserCompanies Dest
					USING (
						SELECT UC.CompanyIDPattern
							,UC.UserCompanyUserLogin
						FROM UserCompanies UC WITH (NOLOCK)
						INNER JOIN #tmpCompanyPattern TUC ON UC.CompanyIDPattern = TUC.CompanyIDPattern
							AND UC.UserCompanyUserLogin = TUC.UserCompanyUserLogin
						) AS Src
						ON (
								Src.CompanyIDPattern = Dest.CompanyIDPattern
								AND Src.UserCompanyUserLogin = Dest.UserCompanyUserLogin
								)
					WHEN NOT MATCHED
						THEN
							INSERT (
								CompanyIDPattern
								,UserCompanyUserLogin
								)
							VALUES (
								Src.CompanyIDPattern
								,Src.UserCompanyUserLogin
								);
				*/
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.UserCompanies (
					CompanyIDPattern
					,UserCompanyUserLogin
					)
				SELECT UC.CompanyIDPattern
					,UC.UserCompanyUserLogin
				FROM UserCompanies UC WITH (NOLOCK)
				INNER JOIN #tmpCompanyPattern TUC ON UC.CompanyIDPattern = TUC.CompanyIDPattern
					AND UC.UserCompanyUserLogin = TUC.UserCompanyUserLogin
				WHERE NOT EXISTS (
						SELECT 1
						FROM ILSE_WBK_ARCHIVE_NONPROD.dbo.UserCompanies Dest
						WHERE UC.CompanyIDPattern = Dest.CompanyIDPattern
							AND UC.UserCompanyUserLogin = Dest.UserCompanyUserLogin
						);

				COMMIT TRANSACTION;
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while archiving from `UserCompanies` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH
		END;
	END

	--TaskCategories
	SET @CurrentTableName = 'TaskCategories';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest
			USING (
				SELECT TC.[IDTaskCategory]
					,TC.[TaskCategoryAddDateTime]
					,TC.[TaskCategoryEditDateTime]
					,TC.[TaskCategoryAddUserCode]
					,TC.[TaskCategoryEditUserCode]
					,TC.[TaskCategoryName]
				FROM [dbo].[TaskCategories] TC WITH (NOLOCK)
				) AS Src
				ON (Src.[IDTaskCategory] = Dest.[IDTaskCategory])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[TaskCategoryAddDateTime] = Src.[TaskCategoryAddDateTime]
						,Dest.[TaskCategoryEditDateTime] = Src.[TaskCategoryEditDateTime]
						,Dest.[TaskCategoryAddUserCode] = Src.[TaskCategoryAddUserCode]
						,Dest.[TaskCategoryEditUserCode] = Src.[TaskCategoryEditUserCode]
						,Dest.[TaskCategoryName] = Src.[TaskCategoryName]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDTaskCategory]
						,[TaskCategoryAddDateTime]
						,[TaskCategoryEditDateTime]
						,[TaskCategoryAddUserCode]
						,[TaskCategoryEditUserCode]
						,[TaskCategoryName]
						)
					VALUES (
						Src.[IDTaskCategory]
						,Src.[TaskCategoryAddDateTime]
						,Src.[TaskCategoryEditDateTime]
						,Src.[TaskCategoryAddUserCode]
						,Src.[TaskCategoryEditUserCode]
						,Src.[TaskCategoryName]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDTaskCategory] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDTaskCategory] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].[TaskCategories] Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest WITH (NOLOCK) ON Src.[IDTaskCategory] = Dest.[IDTaskCategory]
					WHERE Dest.[TaskCategoryAddDateTime] < Src.[TaskCategoryAddDateTime]
						OR Dest.[TaskCategoryEditDateTime] < Src.[TaskCategoryEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[TaskCategoryAddDateTime] = Src.[TaskCategoryAddDateTime]
					,Dest.[TaskCategoryEditDateTime] = Src.[TaskCategoryEditDateTime]
					,Dest.[TaskCategoryAddUserCode] = Src.[TaskCategoryAddUserCode]
					,Dest.[TaskCategoryEditUserCode] = Src.[TaskCategoryEditUserCode]
					,Dest.[TaskCategoryName] = Src.[TaskCategoryName]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDTaskCategory] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDTaskCategory] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].[TaskCategories] Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest ON Src.[IDTaskCategory] = Dest.[IDTaskCategory]
				WHERE Dest.[TaskCategoryAddDateTime] < Src.[TaskCategoryAddDateTime]
					OR Dest.[TaskCategoryEditDateTime] < Src.[TaskCategoryEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].[TaskCategories] Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest WITH (NOLOCK) ON Src.[IDTaskCategory] = Dest.[IDTaskCategory]
					WHERE Dest.IDTaskCategory IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories (
					[IDTaskCategory]
					,[TaskCategoryAddDateTime]
					,[TaskCategoryEditDateTime]
					,[TaskCategoryAddUserCode]
					,[TaskCategoryEditUserCode]
					,[TaskCategoryName]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDTaskCategory] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDTaskCategory]
					,Src.[TaskCategoryAddDateTime]
					,Src.[TaskCategoryEditDateTime]
					,Src.[TaskCategoryAddUserCode]
					,Src.[TaskCategoryEditUserCode]
					,Src.[TaskCategoryName]
				FROM [dbo].[TaskCategories] Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest WITH (NOLOCK) ON Src.[IDTaskCategory] = Dest.[IDTaskCategory]
				WHERE Dest.IDTaskCategory IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') TaskCategories: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `TaskCategory` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Tasks
	SET @CurrentTableName = 'Tasks';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks AS Dest
			USING (
				SELECT [Tasks].IDTask
					,[Tasks].TaskActivationDateTime
					,[Tasks].TaskAddDateTime
					,[Tasks].TaskAddUserCode
					,[Tasks].TaskBody
					,[Tasks].TaskCategoryID
					,[Tasks].TaskCompletionDateTime
					,[Tasks].TaskEditDateTime
					,[Tasks].TaskEditUserCode
					,[Tasks].TaskSubject
				FROM dbo.Tasks WITH (NOLOCK)
				--WHERE CAST(FLOOR(CAST([Tasks].TaskEditDateTime AS FLOAT)) AS DATETIME) <= @MaxDateToArchiveData
				WHERE CAST([Tasks].TaskEditDateTime AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					AND [Tasks].TaskCompletionDateTime IS NOT NULL
				) AS Src
				ON (Src.[IDTask] = Dest.[IDTask])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[TaskAddDateTime] = Src.[TaskAddDateTime]
						,Dest.[TaskEditDateTime] = Src.[TaskEditDateTime]
						,Dest.[TaskAddUserCode] = Src.[TaskAddUserCode]
						,Dest.[TaskEditUserCode] = Src.[TaskEditUserCode]
						,Dest.[TaskCategoryID] = Src.[TaskCategoryID]
						,Dest.[TaskActivationDateTime] = Src.[TaskActivationDateTime]
						,Dest.[TaskSubject] = Src.[TaskSubject]
						,Dest.[TaskBody] = Src.[TaskBody]
						,Dest.[TaskCompletionDateTime] = Src.[TaskCompletionDateTime]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDTask]
						,[TaskAddDateTime]
						,[TaskEditDateTime]
						,[TaskAddUserCode]
						,[TaskEditUserCode]
						,[TaskCategoryID]
						,[TaskActivationDateTime]
						,[TaskSubject]
						,[TaskBody]
						,[TaskCompletionDateTime]
						)
					VALUES (
						Src.[IDTask]
						,Src.[TaskAddDateTime]
						,Src.[TaskEditDateTime]
						,Src.[TaskAddUserCode]
						,Src.[TaskEditUserCode]
						,Src.[TaskCategoryID]
						,Src.[TaskActivationDateTime]
						,Src.[TaskSubject]
						,Src.[TaskBody]
						,Src.[TaskCompletionDateTime]
						)
			OUTPUT $ACTION
				,CAST(Inserted.IDTask AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDTask AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].[Tasks] Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks Dest WITH (NOLOCK) ON Src.[IDTask] = Dest.[IDTask]
					WHERE Dest.[TaskEditDateTime] < Src.[TaskEditDateTime]
						AND CAST([Src].TaskEditDateTime AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
						AND [Src].TaskCompletionDateTime IS NOT NULL
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[TaskAddDateTime] = Src.[TaskAddDateTime]
					,Dest.[TaskEditDateTime] = Src.[TaskEditDateTime]
					,Dest.[TaskAddUserCode] = Src.[TaskAddUserCode]
					,Dest.[TaskEditUserCode] = Src.[TaskEditUserCode]
					,Dest.[TaskCategoryID] = Src.[TaskCategoryID]
					,Dest.[TaskActivationDateTime] = Src.[TaskActivationDateTime]
					,Dest.[TaskSubject] = Src.[TaskSubject]
					,Dest.[TaskBody] = Src.[TaskBody]
					,Dest.[TaskCompletionDateTime] = Src.[TaskCompletionDateTime]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDTask] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDTask] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].[Tasks] Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks Dest ON Src.[IDTask] = Dest.[IDTask]
				WHERE Dest.[TaskEditDateTime] < Src.[TaskEditDateTime]
					AND CAST(Src.TaskEditDateTime AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					AND Src.TaskCompletionDateTime IS NOT NULL;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].[Tasks] Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks Dest WITH (NOLOCK) ON Src.[IDTask] = Dest.[IDTask]
					WHERE Dest.IDTask IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks (
					[IDTask]
					,[TaskAddDateTime]
					,[TaskEditDateTime]
					,[TaskAddUserCode]
					,[TaskEditUserCode]
					,[TaskCategoryID]
					,[TaskActivationDateTime]
					,[TaskSubject]
					,[TaskBody]
					,[TaskCompletionDateTime]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDTask] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDTask]
					,Src.[TaskAddDateTime]
					,Src.[TaskEditDateTime]
					,Src.[TaskAddUserCode]
					,Src.[TaskEditUserCode]
					,Src.[TaskCategoryID]
					,Src.[TaskActivationDateTime]
					,Src.[TaskSubject]
					,Src.[TaskBody]
					,Src.[TaskCompletionDateTime]
				FROM [dbo].[Tasks] Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks Dest WITH (NOLOCK) ON Src.[IDTask] = Dest.[IDTask]
				WHERE Dest.IDTask IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Tasks: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Tasks` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ReceiptTypes
	SET @CurrentTableName = 'ReceiptTypes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptTypes AS Dest
			USING (
				SELECT [IDReceiptType]
					,[ReceiptTypeName]
					,[ReceiptTypeDescription]
					,[ReceiptTypeAddDateTime]
					,[ReceiptTypeAddUserCode]
					,[ReceiptTypeEditDateTime]
					,[ReceiptTypeEditUserCode]
				FROM dbo.ReceiptTypes WITH (NOLOCK)
				) AS Src
				ON (Src.IDReceiptType = Dest.IDReceiptType)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ReceiptTypeName] = Src.[ReceiptTypeName]
						,Dest.[ReceiptTypeDescription] = Src.[ReceiptTypeDescription]
						,Dest.[ReceiptTypeAddDateTime] = Src.[ReceiptTypeAddDateTime]
						,Dest.[ReceiptTypeAddUserCode] = Src.[ReceiptTypeAddUserCode]
						,Dest.[ReceiptTypeEditDateTime] = Src.[ReceiptTypeEditDateTime]
						,Dest.[ReceiptTypeEditUserCode] = Src.[ReceiptTypeEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDReceiptType]
						,[ReceiptTypeName]
						,[ReceiptTypeDescription]
						,[ReceiptTypeAddDateTime]
						,[ReceiptTypeAddUserCode]
						,[ReceiptTypeEditDateTime]
						,[ReceiptTypeEditUserCode]
						)
					VALUES (
						Src.[IDReceiptType]
						,Src.[ReceiptTypeName]
						,Src.[ReceiptTypeDescription]
						,Src.[ReceiptTypeAddDateTime]
						,Src.[ReceiptTypeAddUserCode]
						,Src.[ReceiptTypeEditDateTime]
						,Src.[ReceiptTypeEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDReceiptType] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDReceiptType] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ReceiptTypes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptTypes Dest WITH (NOLOCK) ON Src.IDReceiptType = Dest.IDReceiptType
					WHERE Dest.ReceiptTypeEditDateTime < Src.ReceiptTypeEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ReceiptTypeName] = Src.[ReceiptTypeName]
					,Dest.[ReceiptTypeDescription] = Src.[ReceiptTypeDescription]
					,Dest.[ReceiptTypeAddDateTime] = Src.[ReceiptTypeAddDateTime]
					,Dest.[ReceiptTypeAddUserCode] = Src.[ReceiptTypeAddUserCode]
					,Dest.[ReceiptTypeEditDateTime] = Src.[ReceiptTypeEditDateTime]
					,Dest.[ReceiptTypeEditUserCode] = Src.[ReceiptTypeEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDReceiptType AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDReceiptType AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ReceiptTypes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptTypes Dest ON Src.IDReceiptType = Dest.IDReceiptType
				WHERE Dest.ReceiptTypeEditDateTime < Src.ReceiptTypeEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ReceiptTypes Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptTypes Dest WITH (NOLOCK) ON Src.IDReceiptType = Dest.IDReceiptType
					WHERE Dest.IDReceiptType IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptTypes (
					[IDReceiptType]
					,[ReceiptTypeName]
					,[ReceiptTypeDescription]
					,[ReceiptTypeAddDateTime]
					,[ReceiptTypeAddUserCode]
					,[ReceiptTypeEditDateTime]
					,[ReceiptTypeEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDReceiptType AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDReceiptType]
					,Src.[ReceiptTypeName]
					,Src.[ReceiptTypeDescription]
					,Src.[ReceiptTypeAddDateTime]
					,Src.[ReceiptTypeAddUserCode]
					,Src.[ReceiptTypeEditDateTime]
					,Src.[ReceiptTypeEditUserCode]
				FROM [dbo].ReceiptTypes Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptTypes Dest WITH (NOLOCK) ON Src.IDReceiptType = Dest.IDReceiptType
				WHERE Dest.IDReceiptType IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ReceiptTypes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ReceiptTypes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ReceiptStatuses
	SET @CurrentTableName = 'ReceiptStatuses';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptStatuses AS Dest
			USING (
				SELECT [IDReceiptStatus]
					,[ReceiptStatusName]
					,[ReceiptStatusDescription]
					,[ReceiptStatusAddDateTime]
					,[ReceiptStatusAddUserCode]
					,[ReceiptStatusEditDateTime]
					,[ReceiptStatusEditUserCode]
					,[ReceiptStatusSubStatus]
					,[ReceiptStatusIDPrevious]
					,[ReceiptStatusButtonText]
					,[ReceiptStatusReverseButtonText]
					,[ReceiptstatusChangeMaxItemSelection]
				FROM dbo.ReceiptStatuses WITH (NOLOCK)
				) AS Src
				ON (Src.IDReceiptStatus = Dest.IDReceiptStatus)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ReceiptStatusName] = Src.[ReceiptStatusName]
						,Dest.[ReceiptStatusDescription] = Src.[ReceiptStatusDescription]
						,Dest.[ReceiptStatusAddDateTime] = Src.[ReceiptStatusAddDateTime]
						,Dest.[ReceiptStatusAddUserCode] = Src.[ReceiptStatusAddUserCode]
						,Dest.[ReceiptStatusEditDateTime] = Src.[ReceiptStatusEditDateTime]
						,Dest.[ReceiptStatusEditUserCode] = Src.[ReceiptStatusEditUserCode]
						,Dest.[ReceiptStatusSubStatus] = Src.[ReceiptStatusSubStatus]
						,Dest.[ReceiptStatusIDPrevious] = Src.[ReceiptStatusIDPrevious]
						,Dest.[ReceiptStatusButtonText] = Src.[ReceiptStatusButtonText]
						,Dest.[ReceiptStatusReverseButtonText] = Src.[ReceiptStatusReverseButtonText]
						,Dest.[ReceiptstatusChangeMaxItemSelection] = Src.[ReceiptstatusChangeMaxItemSelection]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDReceiptStatus]
						,[ReceiptStatusName]
						,[ReceiptStatusDescription]
						,[ReceiptStatusAddDateTime]
						,[ReceiptStatusAddUserCode]
						,[ReceiptStatusEditDateTime]
						,[ReceiptStatusEditUserCode]
						,[ReceiptStatusSubStatus]
						,[ReceiptStatusIDPrevious]
						,[ReceiptStatusButtonText]
						,[ReceiptStatusReverseButtonText]
						,[ReceiptstatusChangeMaxItemSelection]
						)
					VALUES (
						Src.[IDReceiptStatus]
						,Src.[ReceiptStatusName]
						,Src.[ReceiptStatusDescription]
						,Src.[ReceiptStatusAddDateTime]
						,Src.[ReceiptStatusAddUserCode]
						,Src.[ReceiptStatusEditDateTime]
						,Src.[ReceiptStatusEditUserCode]
						,Src.[ReceiptStatusSubStatus]
						,Src.[ReceiptStatusIDPrevious]
						,Src.[ReceiptStatusButtonText]
						,Src.[ReceiptStatusReverseButtonText]
						,Src.[ReceiptstatusChangeMaxItemSelection]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDReceiptStatus] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDReceiptStatus] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ReceiptStatuses Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptStatuses Dest WITH (NOLOCK) ON Src.IDReceiptStatus = Dest.IDReceiptStatus
					WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ReceiptStatusName] = Src.[ReceiptStatusName]
					,Dest.[ReceiptStatusDescription] = Src.[ReceiptStatusDescription]
					,Dest.[ReceiptStatusAddDateTime] = Src.[ReceiptStatusAddDateTime]
					,Dest.[ReceiptStatusAddUserCode] = Src.[ReceiptStatusAddUserCode]
					,Dest.[ReceiptStatusEditDateTime] = Src.[ReceiptStatusEditDateTime]
					,Dest.[ReceiptStatusEditUserCode] = Src.[ReceiptStatusEditUserCode]
					,Dest.[ReceiptStatusSubStatus] = Src.[ReceiptStatusSubStatus]
					,Dest.[ReceiptStatusIDPrevious] = Src.[ReceiptStatusIDPrevious]
					,Dest.[ReceiptStatusButtonText] = Src.[ReceiptStatusButtonText]
					,Dest.[ReceiptStatusReverseButtonText] = Src.[ReceiptStatusReverseButtonText]
					,Dest.[ReceiptstatusChangeMaxItemSelection] = Src.[ReceiptstatusChangeMaxItemSelection]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDReceiptStatus AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDReceiptStatus AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ReceiptStatuses Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptStatuses Dest ON Src.IDReceiptStatus = Dest.IDReceiptStatus
				WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ReceiptStatuses Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptStatuses Dest WITH (NOLOCK) ON Src.IDReceiptStatus = Dest.IDReceiptStatus
					WHERE Dest.IDReceiptStatus IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptStatuses (
					[IDReceiptStatus]
					,[ReceiptStatusName]
					,[ReceiptStatusDescription]
					,[ReceiptStatusAddDateTime]
					,[ReceiptStatusAddUserCode]
					,[ReceiptStatusEditDateTime]
					,[ReceiptStatusEditUserCode]
					,[ReceiptStatusSubStatus]
					,[ReceiptStatusIDPrevious]
					,[ReceiptStatusButtonText]
					,[ReceiptStatusReverseButtonText]
					,[ReceiptstatusChangeMaxItemSelection]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDReceiptStatus AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDReceiptStatus]
					,Src.[ReceiptStatusName]
					,Src.[ReceiptStatusDescription]
					,Src.[ReceiptStatusAddDateTime]
					,Src.[ReceiptStatusAddUserCode]
					,Src.[ReceiptStatusEditDateTime]
					,Src.[ReceiptStatusEditUserCode]
					,Src.[ReceiptStatusSubStatus]
					,Src.[ReceiptStatusIDPrevious]
					,Src.[ReceiptStatusButtonText]
					,Src.[ReceiptStatusReverseButtonText]
					,Src.[ReceiptstatusChangeMaxItemSelection]
				FROM [dbo].ReceiptStatuses Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptStatuses Dest WITH (NOLOCK) ON Src.IDReceiptStatus = Dest.IDReceiptStatus
				WHERE Dest.IDReceiptStatus IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ReceiptStatuses: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ReceiptStatuses` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Countries
	SET @CurrentTableName = 'Countries';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Countries AS Dest
			USING (
				SELECT [CountryCode]
					,[CountryName]
					,[CountryAddDateTime]
					,[CountryEditDateTime]
					,[CountryAddUserCode]
					,[CountryEditUserCode]
				FROM dbo.Countries WITH (NOLOCK)
				) AS Src
				ON (Src.CountryCode = Dest.CountryCode)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CountryName] = Src.[CountryName]
						,Dest.[CountryAddDateTime] = Src.[CountryAddDateTime]
						,Dest.[CountryEditDateTime] = Src.[CountryEditDateTime]
						,Dest.[CountryAddUserCode] = Src.[CountryAddUserCode]
						,Dest.[CountryEditUserCode] = Src.[CountryEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[CountryCode]
						,[CountryName]
						,[CountryAddDateTime]
						,[CountryEditDateTime]
						,[CountryAddUserCode]
						,[CountryEditUserCode]
						)
					VALUES (
						Src.[CountryCode]
						,Src.[CountryName]
						,Src.[CountryAddDateTime]
						,Src.[CountryEditDateTime]
						,Src.[CountryAddUserCode]
						,Src.[CountryEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[CountryCode] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[CountryCode] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Countries Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Countries Dest WITH (NOLOCK) ON Src.CountryCode = Dest.CountryCode
					WHERE Dest.[CountryEditDateTime] < Src.[CountryEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CountryName] = Src.[CountryName]
					,Dest.[CountryAddDateTime] = Src.[CountryAddDateTime]
					,Dest.[CountryEditDateTime] = Src.[CountryEditDateTime]
					,Dest.[CountryAddUserCode] = Src.[CountryAddUserCode]
					,Dest.[CountryEditUserCode] = Src.[CountryEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.CountryCode AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.CountryCode AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Countries Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Countries Dest ON Src.CountryCode = Dest.CountryCode
				WHERE Dest.[CountryEditDateTime] < Src.[CountryEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Countries Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Countries Dest WITH (NOLOCK) ON Src.CountryCode = Dest.CountryCode
					WHERE Dest.CountryCode IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Countries (
					[CountryCode]
					,[CountryName]
					,[CountryAddDateTime]
					,[CountryEditDateTime]
					,[CountryAddUserCode]
					,[CountryEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.CountryCode AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[CountryCode]
					,Src.[CountryName]
					,Src.[CountryAddDateTime]
					,Src.[CountryEditDateTime]
					,Src.[CountryAddUserCode]
					,Src.[CountryEditUserCode]
				FROM [dbo].Countries Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Countries Dest WITH (NOLOCK) ON Src.CountryCode = Dest.CountryCode
				WHERE Dest.CountryCode IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Countries: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Countries` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Currencies
	SET @CurrentTableName = 'Currencies';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Currencies AS Dest
			USING (
				SELECT [CurrencyCode]
					,[CurrencyAddUserCode]
					,[CurrencyEditUserCode]
					,[CurrencyEditDateTime]
					,[CurrencyAddDateTime]
					,[CurrencyDefaultRateOfExchange]
				FROM dbo.Currencies WITH (NOLOCK)
				) AS Src
				ON (Src.[CurrencyCode] = Dest.[CurrencyCode])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CurrencyAddUserCode] = Src.[CurrencyAddUserCode]
						,Dest.[CurrencyEditUserCode] = Src.[CurrencyEditUserCode]
						,Dest.[CurrencyEditDateTime] = Src.[CurrencyEditDateTime]
						,Dest.[CurrencyAddDateTime] = Src.[CurrencyAddDateTime]
						,Dest.[CurrencyDefaultRateOfExchange] = Src.[CurrencyDefaultRateOfExchange]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[CurrencyCode]
						,[CurrencyAddUserCode]
						,[CurrencyEditUserCode]
						,[CurrencyEditDateTime]
						,[CurrencyAddDateTime]
						,[CurrencyDefaultRateOfExchange]
						)
					VALUES (
						Src.[CurrencyCode]
						,Src.[CurrencyAddUserCode]
						,Src.[CurrencyEditUserCode]
						,Src.[CurrencyEditDateTime]
						,Src.[CurrencyAddDateTime]
						,Src.[CurrencyDefaultRateOfExchange]
						);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Currencies Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Currencies Dest WITH (NOLOCK) ON Src.[CurrencyCode] = Dest.[CurrencyCode]
					WHERE Dest.[CurrencyEditDateTime] < Src.[CurrencyEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CurrencyAddUserCode] = Src.[CurrencyAddUserCode]
					,Dest.[CurrencyEditUserCode] = Src.[CurrencyEditUserCode]
					,Dest.[CurrencyEditDateTime] = Src.[CurrencyEditDateTime]
					,Dest.[CurrencyAddDateTime] = Src.[CurrencyAddDateTime]
					,Dest.[CurrencyDefaultRateOfExchange] = Src.[CurrencyDefaultRateOfExchange]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[CurrencyCode] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[CurrencyCode] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Currencies Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Currencies Dest ON Src.[CurrencyCode] = Dest.[CurrencyCode]
				WHERE Dest.[CurrencyEditDateTime] < Src.[CurrencyEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Currencies Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Currencies Dest WITH (NOLOCK) ON Src.[CurrencyCode] = Dest.[CurrencyCode]
					WHERE Dest.[CurrencyCode] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Currencies (
					[CurrencyCode]
					,[CurrencyAddUserCode]
					,[CurrencyEditUserCode]
					,[CurrencyEditDateTime]
					,[CurrencyAddDateTime]
					,[CurrencyDefaultRateOfExchange]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[CurrencyCode] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[CurrencyCode]
					,Src.[CurrencyAddUserCode]
					,Src.[CurrencyEditUserCode]
					,Src.[CurrencyEditDateTime]
					,Src.[CurrencyAddDateTime]
					,Src.[CurrencyDefaultRateOfExchange]
				FROM [dbo].Currencies Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Currencies Dest WITH (NOLOCK) ON Src.[CurrencyCode] = Dest.[CurrencyCode]
				WHERE Dest.[CurrencyCode] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Currencies: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Currencies` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--CustomsTypes
	SET @CurrentTableName = 'CustomsTypes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsTypes AS Dest
			USING (
				SELECT [CustomsTypeCode]
					,[CustomsTypeName]
					,[CustomsTypeAddDateTime]
					,[CustomsTypeEditDateTime]
					,[CustomsTypeAddUserCode]
					,[CustomsTypeEditUserCode]
					,[CustomsTypeCountryCode]
				FROM dbo.CustomsTypes WITH (NOLOCK)
				) AS Src
				ON (Src.CustomsTypeCode = Dest.CustomsTypeCode)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CustomsTypeName] = Src.[CustomsTypeName]
						,Dest.[CustomsTypeAddDateTime] = Src.[CustomsTypeAddDateTime]
						,Dest.[CustomsTypeEditDateTime] = Src.[CustomsTypeEditDateTime]
						,Dest.[CustomsTypeAddUserCode] = Src.[CustomsTypeAddUserCode]
						,Dest.[CustomsTypeEditUserCode] = Src.[CustomsTypeEditUserCode]
						,Dest.[CustomsTypeCountryCode] = Src.[CustomsTypeCountryCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[CustomsTypeCode]
						,[CustomsTypeName]
						,[CustomsTypeAddDateTime]
						,[CustomsTypeEditDateTime]
						,[CustomsTypeAddUserCode]
						,[CustomsTypeEditUserCode]
						,[CustomsTypeCountryCode]
						)
					VALUES (
						Src.[CustomsTypeCode]
						,Src.[CustomsTypeName]
						,Src.[CustomsTypeAddDateTime]
						,Src.[CustomsTypeEditDateTime]
						,Src.[CustomsTypeAddUserCode]
						,Src.[CustomsTypeEditUserCode]
						,Src.[CustomsTypeCountryCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[CustomsTypeCode] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[CustomsTypeCode] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsTypes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsTypes Dest WITH (NOLOCK) ON Src.CustomsTypeCode = Dest.CustomsTypeCode
					WHERE Dest.CustomsTypeEditDateTime < Src.CustomsTypeEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CustomsTypeName] = Src.[CustomsTypeName]
					,Dest.[CustomsTypeAddDateTime] = Src.[CustomsTypeAddDateTime]
					,Dest.[CustomsTypeEditDateTime] = Src.[CustomsTypeEditDateTime]
					,Dest.[CustomsTypeAddUserCode] = Src.[CustomsTypeAddUserCode]
					,Dest.[CustomsTypeEditUserCode] = Src.[CustomsTypeEditUserCode]
					,Dest.[CustomsTypeCountryCode] = Src.[CustomsTypeCountryCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.CustomsTypeCode AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.CustomsTypeCode AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CustomsTypes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsTypes Dest ON Src.CustomsTypeCode = Dest.CustomsTypeCode
				WHERE Dest.CustomsTypeEditDateTime < Src.CustomsTypeEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsTypes Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsTypes Dest WITH (NOLOCK) ON Src.CustomsTypeCode = Dest.CustomsTypeCode
					WHERE Dest.CustomsTypeCode IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsTypes (
					[CustomsTypeCode]
					,[CustomsTypeName]
					,[CustomsTypeAddDateTime]
					,[CustomsTypeEditDateTime]
					,[CustomsTypeAddUserCode]
					,[CustomsTypeEditUserCode]
					,[CustomsTypeCountryCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.CustomsTypeCode AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[CustomsTypeCode]
					,Src.[CustomsTypeName]
					,Src.[CustomsTypeAddDateTime]
					,Src.[CustomsTypeEditDateTime]
					,Src.[CustomsTypeAddUserCode]
					,Src.[CustomsTypeEditUserCode]
					,Src.[CustomsTypeCountryCode]
				FROM [dbo].CustomsTypes Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsTypes Dest WITH (NOLOCK) ON Src.CustomsTypeCode = Dest.CustomsTypeCode
				WHERE Dest.CustomsTypeCode IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CustomsTypes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CustomsTypes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--InsuranceTypes
	SET @CurrentTableName = 'InsuranceTypes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.InsuranceTypes AS Dest
			USING (
				SELECT [InsuranceTypeCode]
					,[InsuranceTypeName]
					,[InsuranceTypeAddDateTime]
					,[InsuranceTypeEditDateTime]
					,[InsuranceTypeAddUserCode]
					,[InsuranceTypeEditUserCode]
				FROM dbo.InsuranceTypes WITH (NOLOCK)
				) AS Src
				ON (Src.InsuranceTypeCode = Dest.InsuranceTypeCode)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[InsuranceTypeName] = Src.[InsuranceTypeName]
						,Dest.[InsuranceTypeAddDateTime] = Src.[InsuranceTypeAddDateTime]
						,Dest.[InsuranceTypeEditDateTime] = Src.[InsuranceTypeEditDateTime]
						,Dest.[InsuranceTypeAddUserCode] = Src.[InsuranceTypeAddUserCode]
						,Dest.[InsuranceTypeEditUserCode] = Src.[InsuranceTypeEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[InsuranceTypeCode]
						,[InsuranceTypeName]
						,[InsuranceTypeAddDateTime]
						,[InsuranceTypeEditDateTime]
						,[InsuranceTypeAddUserCode]
						,[InsuranceTypeEditUserCode]
						)
					VALUES (
						Src.[InsuranceTypeCode]
						,Src.[InsuranceTypeName]
						,Src.[InsuranceTypeAddDateTime]
						,Src.[InsuranceTypeEditDateTime]
						,Src.[InsuranceTypeAddUserCode]
						,Src.[InsuranceTypeEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[InsuranceTypeCode] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[InsuranceTypeCode] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].InsuranceTypes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InsuranceTypes Dest WITH (NOLOCK) ON Src.InsuranceTypeCode = Dest.InsuranceTypeCode
					WHERE Dest.[InsuranceTypeEditDateTime] < Src.[InsuranceTypeEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[InsuranceTypeName] = Src.[InsuranceTypeName]
					,Dest.[InsuranceTypeAddDateTime] = Src.[InsuranceTypeAddDateTime]
					,Dest.[InsuranceTypeEditDateTime] = Src.[InsuranceTypeEditDateTime]
					,Dest.[InsuranceTypeAddUserCode] = Src.[InsuranceTypeAddUserCode]
					,Dest.[InsuranceTypeEditUserCode] = Src.[InsuranceTypeEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.InsuranceTypeCode AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.InsuranceTypeCode AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].InsuranceTypes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InsuranceTypes Dest ON Src.InsuranceTypeCode = Dest.InsuranceTypeCode
				WHERE Dest.[InsuranceTypeEditDateTime] < Src.[InsuranceTypeEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].InsuranceTypes Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InsuranceTypes Dest WITH (NOLOCK) ON Src.InsuranceTypeCode = Dest.InsuranceTypeCode
					WHERE Dest.InsuranceTypeCode IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.InsuranceTypes (
					[InsuranceTypeCode]
					,[InsuranceTypeName]
					,[InsuranceTypeAddDateTime]
					,[InsuranceTypeEditDateTime]
					,[InsuranceTypeAddUserCode]
					,[InsuranceTypeEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.InsuranceTypeCode AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[InsuranceTypeCode]
					,Src.[InsuranceTypeName]
					,Src.[InsuranceTypeAddDateTime]
					,Src.[InsuranceTypeEditDateTime]
					,Src.[InsuranceTypeAddUserCode]
					,Src.[InsuranceTypeEditUserCode]
				FROM [dbo].InsuranceTypes Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InsuranceTypes Dest WITH (NOLOCK) ON Src.InsuranceTypeCode = Dest.InsuranceTypeCode
				WHERE Dest.InsuranceTypeCode IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') InsuranceTypes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `InsuranceTypes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Languages
	SET @CurrentTableName = 'Languages';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Languages AS Dest
			USING (
				SELECT [LanguageCode]
					,[LanguageName]
					,[LanguageAddDateTime]
					,[LanguageEditDateTime]
					,[LanguageAddUserCode]
					,[LanguageEditUserCode]
					,[CountryCodeDefault]
				FROM dbo.Languages WITH (NOLOCK)
				) AS Src
				ON (Src.LanguageCode = Dest.LanguageCode)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[LanguageName] = Src.[LanguageName]
						,Dest.[LanguageAddDateTime] = Src.[LanguageAddDateTime]
						,Dest.[LanguageEditDateTime] = Src.[LanguageEditDateTime]
						,Dest.[LanguageAddUserCode] = Src.[LanguageAddUserCode]
						,Dest.[LanguageEditUserCode] = Src.[LanguageEditUserCode]
						,Dest.[CountryCodeDefault] = Src.[CountryCodeDefault]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[LanguageCode]
						,[LanguageName]
						,[LanguageAddDateTime]
						,[LanguageEditDateTime]
						,[LanguageAddUserCode]
						,[LanguageEditUserCode]
						,[CountryCodeDefault]
						)
					VALUES (
						Src.[LanguageCode]
						,Src.[LanguageName]
						,Src.[LanguageAddDateTime]
						,Src.[LanguageEditDateTime]
						,Src.[LanguageAddUserCode]
						,Src.[LanguageEditUserCode]
						,Src.[CountryCodeDefault]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[LanguageCode] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[LanguageCode] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Languages Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Languages Dest WITH (NOLOCK) ON Src.LanguageCode = Dest.LanguageCode
					WHERE Dest.[LanguageEditDateTime] < Src.[LanguageEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[LanguageName] = Src.[LanguageName]
					,Dest.[LanguageAddDateTime] = Src.[LanguageAddDateTime]
					,Dest.[LanguageEditDateTime] = Src.[LanguageEditDateTime]
					,Dest.[LanguageAddUserCode] = Src.[LanguageAddUserCode]
					,Dest.[LanguageEditUserCode] = Src.[LanguageEditUserCode]
					,Dest.[CountryCodeDefault] = Src.[CountryCodeDefault]
				OUTPUT 'UPDATE'
					,CAST(Inserted.LanguageCode AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.LanguageCode AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Languages Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Languages Dest ON Src.LanguageCode = Dest.LanguageCode
				WHERE Dest.[LanguageEditDateTime] < Src.[LanguageEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Languages Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Languages Dest WITH (NOLOCK) ON Src.LanguageCode = Dest.LanguageCode
					WHERE Dest.LanguageCode IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Languages (
					[LanguageCode]
					,[LanguageName]
					,[LanguageAddDateTime]
					,[LanguageEditDateTime]
					,[LanguageAddUserCode]
					,[LanguageEditUserCode]
					,[CountryCodeDefault]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[LanguageCode] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[LanguageCode]
					,Src.[LanguageName]
					,Src.[LanguageAddDateTime]
					,Src.[LanguageEditDateTime]
					,Src.[LanguageAddUserCode]
					,Src.[LanguageEditUserCode]
					,Src.[CountryCodeDefault]
				FROM [dbo].Languages Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Languages Dest WITH (NOLOCK) ON Src.LanguageCode = Dest.LanguageCode
				WHERE Dest.LanguageCode IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Languages: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Languages` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Locations
	SET @CurrentTableName = 'Locations';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Locations AS Dest
			USING (
				SELECT [IDLocation]
					,[LocationCube]
					,[LocationLength]
					,[LocationWidth]
					,[LocationHeight]
					,[LocationType]
					,[LocationFlag]
					,[LocationHandling]
					,[LocationCategory]
					,[LocationLogicalAllocation]
					,[LocationCubicCapacity]
					,[LocationWeightCapacity]
					,[LocationStatus]
					,[LocationLoseID]
					,[LocationFacility]
					,[LocationSection]
					,[LocationABC]
					,[LocationPickZone]
					,[LocationPutAwayZone]
					,[LocationSectionCode]
					,[LocationPickMethod]
					,[LocationAllowCommingleProduct]
					,[LocationAllowCommingleLot]
					,[LocationLevel]
					,[LocationStackLimit]
					,[LocationFootPrint]
					,[LocationAddDateTime]
					,[LocationAddUserCode]
					,[LocationEditDateTime]
					,[LocationEditUserCode]
					,[LocationGroupID]
					,[CompanyIDWarehouse]
					,[LocationName]
				FROM dbo.Locations WITH (NOLOCK)
				) AS Src
				ON (Src.IDLocation = Dest.IDLocation)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[LocationCube] = Src.[LocationCube]
						,Dest.[LocationLength] = Src.[LocationLength]
						,Dest.[LocationWidth] = Src.[LocationWidth]
						,Dest.[LocationHeight] = Src.[LocationHeight]
						,Dest.[LocationType] = Src.[LocationType]
						,Dest.[LocationFlag] = Src.[LocationFlag]
						,Dest.[LocationHandling] = Src.[LocationHandling]
						,Dest.[LocationCategory] = Src.[LocationCategory]
						,Dest.[LocationLogicalAllocation] = Src.[LocationLogicalAllocation]
						,Dest.[LocationCubicCapacity] = Src.[LocationCubicCapacity]
						,Dest.[LocationWeightCapacity] = Src.[LocationWeightCapacity]
						,Dest.[LocationStatus] = Src.[LocationStatus]
						,Dest.[LocationLoseID] = Src.[LocationLoseID]
						,Dest.[LocationFacility] = Src.[LocationFacility]
						,Dest.[LocationSection] = Src.[LocationSection]
						,Dest.[LocationABC] = Src.[LocationABC]
						,Dest.[LocationPickZone] = Src.[LocationPickZone]
						,Dest.[LocationPutAwayZone] = Src.[LocationPutAwayZone]
						,Dest.[LocationSectionCode] = Src.[LocationSectionCode]
						,Dest.[LocationPickMethod] = Src.[LocationPickMethod]
						,Dest.[LocationAllowCommingleProduct] = Src.[LocationAllowCommingleProduct]
						,Dest.[LocationAllowCommingleLot] = Src.[LocationAllowCommingleLot]
						,Dest.[LocationLevel] = Src.[LocationLevel]
						,Dest.[LocationStackLimit] = Src.[LocationStackLimit]
						,Dest.[LocationFootPrint] = Src.[LocationFootPrint]
						,Dest.[LocationAddDateTime] = Src.[LocationAddDateTime]
						,Dest.[LocationAddUserCode] = Src.[LocationAddUserCode]
						,Dest.[LocationEditDateTime] = Src.[LocationEditDateTime]
						,Dest.[LocationEditUserCode] = Src.[LocationEditUserCode]
						,Dest.[LocationGroupID] = Src.[LocationGroupID]
						,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
						,Dest.[LocationName] = Src.[LocationName]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDLocation]
						,[LocationCube]
						,[LocationLength]
						,[LocationWidth]
						,[LocationHeight]
						,[LocationType]
						,[LocationFlag]
						,[LocationHandling]
						,[LocationCategory]
						,[LocationLogicalAllocation]
						,[LocationCubicCapacity]
						,[LocationWeightCapacity]
						,[LocationStatus]
						,[LocationLoseID]
						,[LocationFacility]
						,[LocationSection]
						,[LocationABC]
						,[LocationPickZone]
						,[LocationPutAwayZone]
						,[LocationSectionCode]
						,[LocationPickMethod]
						,[LocationAllowCommingleProduct]
						,[LocationAllowCommingleLot]
						,[LocationLevel]
						,[LocationStackLimit]
						,[LocationFootPrint]
						,[LocationAddDateTime]
						,[LocationAddUserCode]
						,[LocationEditDateTime]
						,[LocationEditUserCode]
						,[LocationGroupID]
						,[CompanyIDWarehouse]
						,[LocationName]
						)
					VALUES (
						Src.[IDLocation]
						,Src.[LocationCube]
						,Src.[LocationLength]
						,Src.[LocationWidth]
						,Src.[LocationHeight]
						,Src.[LocationType]
						,Src.[LocationFlag]
						,Src.[LocationHandling]
						,Src.[LocationCategory]
						,Src.[LocationLogicalAllocation]
						,Src.[LocationCubicCapacity]
						,Src.[LocationWeightCapacity]
						,Src.[LocationStatus]
						,Src.[LocationLoseID]
						,Src.[LocationFacility]
						,Src.[LocationSection]
						,Src.[LocationABC]
						,Src.[LocationPickZone]
						,Src.[LocationPutAwayZone]
						,Src.[LocationSectionCode]
						,Src.[LocationPickMethod]
						,Src.[LocationAllowCommingleProduct]
						,Src.[LocationAllowCommingleLot]
						,Src.[LocationLevel]
						,Src.[LocationStackLimit]
						,Src.[LocationFootPrint]
						,Src.[LocationAddDateTime]
						,Src.[LocationAddUserCode]
						,Src.[LocationEditDateTime]
						,Src.[LocationEditUserCode]
						,Src.[LocationGroupID]
						,Src.[CompanyIDWarehouse]
						,Src.[LocationName]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDLocation] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDLocation] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Locations Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Locations Dest WITH (NOLOCK) ON Src.[IDLocation] = Dest.[IDLocation]
					WHERE Dest.[LocationEditDateTime] < Src.[LocationEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[LocationCube] = Src.[LocationCube]
					,Dest.[LocationLength] = Src.[LocationLength]
					,Dest.[LocationWidth] = Src.[LocationWidth]
					,Dest.[LocationHeight] = Src.[LocationHeight]
					,Dest.[LocationType] = Src.[LocationType]
					,Dest.[LocationFlag] = Src.[LocationFlag]
					,Dest.[LocationHandling] = Src.[LocationHandling]
					,Dest.[LocationCategory] = Src.[LocationCategory]
					,Dest.[LocationLogicalAllocation] = Src.[LocationLogicalAllocation]
					,Dest.[LocationCubicCapacity] = Src.[LocationCubicCapacity]
					,Dest.[LocationWeightCapacity] = Src.[LocationWeightCapacity]
					,Dest.[LocationStatus] = Src.[LocationStatus]
					,Dest.[LocationLoseID] = Src.[LocationLoseID]
					,Dest.[LocationFacility] = Src.[LocationFacility]
					,Dest.[LocationSection] = Src.[LocationSection]
					,Dest.[LocationABC] = Src.[LocationABC]
					,Dest.[LocationPickZone] = Src.[LocationPickZone]
					,Dest.[LocationPutAwayZone] = Src.[LocationPutAwayZone]
					,Dest.[LocationSectionCode] = Src.[LocationSectionCode]
					,Dest.[LocationPickMethod] = Src.[LocationPickMethod]
					,Dest.[LocationAllowCommingleProduct] = Src.[LocationAllowCommingleProduct]
					,Dest.[LocationAllowCommingleLot] = Src.[LocationAllowCommingleLot]
					,Dest.[LocationLevel] = Src.[LocationLevel]
					,Dest.[LocationStackLimit] = Src.[LocationStackLimit]
					,Dest.[LocationFootPrint] = Src.[LocationFootPrint]
					,Dest.[LocationAddDateTime] = Src.[LocationAddDateTime]
					,Dest.[LocationAddUserCode] = Src.[LocationAddUserCode]
					,Dest.[LocationEditDateTime] = Src.[LocationEditDateTime]
					,Dest.[LocationEditUserCode] = Src.[LocationEditUserCode]
					,Dest.[LocationGroupID] = Src.[LocationGroupID]
					,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
					,Dest.[LocationName] = Src.[LocationName]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDLocation] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDLocation] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Locations Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Locations Dest ON Src.[IDLocation] = Dest.[IDLocation]
				WHERE Dest.[LocationEditDateTime] < Src.[LocationEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Locations Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Locations Dest WITH (NOLOCK) ON Src.[IDLocation] = Dest.[IDLocation]
					WHERE Dest.[IDLocation] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Locations (
					[IDLocation]
					,[LocationCube]
					,[LocationLength]
					,[LocationWidth]
					,[LocationHeight]
					,[LocationType]
					,[LocationFlag]
					,[LocationHandling]
					,[LocationCategory]
					,[LocationLogicalAllocation]
					,[LocationCubicCapacity]
					,[LocationWeightCapacity]
					,[LocationStatus]
					,[LocationLoseID]
					,[LocationFacility]
					,[LocationSection]
					,[LocationABC]
					,[LocationPickZone]
					,[LocationPutAwayZone]
					,[LocationSectionCode]
					,[LocationPickMethod]
					,[LocationAllowCommingleProduct]
					,[LocationAllowCommingleLot]
					,[LocationLevel]
					,[LocationStackLimit]
					,[LocationFootPrint]
					,[LocationAddDateTime]
					,[LocationAddUserCode]
					,[LocationEditDateTime]
					,[LocationEditUserCode]
					,[LocationGroupID]
					,[CompanyIDWarehouse]
					,[LocationName]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDLocation] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDLocation]
					,Src.[LocationCube]
					,Src.[LocationLength]
					,Src.[LocationWidth]
					,Src.[LocationHeight]
					,Src.[LocationType]
					,Src.[LocationFlag]
					,Src.[LocationHandling]
					,Src.[LocationCategory]
					,Src.[LocationLogicalAllocation]
					,Src.[LocationCubicCapacity]
					,Src.[LocationWeightCapacity]
					,Src.[LocationStatus]
					,Src.[LocationLoseID]
					,Src.[LocationFacility]
					,Src.[LocationSection]
					,Src.[LocationABC]
					,Src.[LocationPickZone]
					,Src.[LocationPutAwayZone]
					,Src.[LocationSectionCode]
					,Src.[LocationPickMethod]
					,Src.[LocationAllowCommingleProduct]
					,Src.[LocationAllowCommingleLot]
					,Src.[LocationLevel]
					,Src.[LocationStackLimit]
					,Src.[LocationFootPrint]
					,Src.[LocationAddDateTime]
					,Src.[LocationAddUserCode]
					,Src.[LocationEditDateTime]
					,Src.[LocationEditUserCode]
					,Src.[LocationGroupID]
					,Src.[CompanyIDWarehouse]
					,Src.[LocationName]
				FROM [dbo].Locations Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Locations Dest WITH (NOLOCK) ON Src.[IDLocation] = Dest.[IDLocation]
				WHERE Dest.[IDLocation] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Locations: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Locations` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--PalletTypes
	SET @CurrentTableName = 'PalletTypes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.PalletTypes AS Dest
			USING (
				SELECT [PalletTypeCode]
					,[PalletTypeName]
					,[PalletTypeAddDateTime]
					,[PalletTypeEditDateTime]
					,[PalletTypeAddUserCode]
					,[PalletTypeEditUserCode]
					,[PalletTypeVolumeRatio]
					,[PalletTypeWeight]
					,[PalletTypeMaximumCountPerTransport]
				FROM dbo.PalletTypes WITH (NOLOCK)
				) AS Src
				ON (Dest.[PalletTypeCode] = Src.[PalletTypeCode])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[PalletTypeName] = Src.[PalletTypeName]
						,Dest.[PalletTypeAddDateTime] = Src.[PalletTypeAddDateTime]
						,Dest.[PalletTypeEditDateTime] = Src.[PalletTypeEditDateTime]
						,Dest.[PalletTypeAddUserCode] = Src.[PalletTypeAddUserCode]
						,Dest.[PalletTypeEditUserCode] = Src.[PalletTypeEditUserCode]
						,Dest.[PalletTypeVolumeRatio] = Src.[PalletTypeVolumeRatio]
						,Dest.[PalletTypeWeight] = Src.[PalletTypeWeight]
						,Dest.[PalletTypeMaximumCountPerTransport] = Src.[PalletTypeMaximumCountPerTransport]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[PalletTypeCode]
						,[PalletTypeName]
						,[PalletTypeAddDateTime]
						,[PalletTypeEditDateTime]
						,[PalletTypeAddUserCode]
						,[PalletTypeEditUserCode]
						,[PalletTypeVolumeRatio]
						,[PalletTypeWeight]
						,[PalletTypeMaximumCountPerTransport]
						)
					VALUES (
						Src.[PalletTypeCode]
						,Src.[PalletTypeName]
						,Src.[PalletTypeAddDateTime]
						,Src.[PalletTypeEditDateTime]
						,Src.[PalletTypeAddUserCode]
						,Src.[PalletTypeEditUserCode]
						,Src.[PalletTypeVolumeRatio]
						,Src.[PalletTypeWeight]
						,Src.[PalletTypeMaximumCountPerTransport]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[PalletTypeCode] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[PalletTypeCode] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].PalletTypes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.PalletTypes Dest WITH (NOLOCK) ON Src.PalletTypeCode = Dest.PalletTypeCode
					WHERE Dest.[PalletTypeEditDateTime] < Src.[PalletTypeEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[PalletTypeName] = Src.[PalletTypeName]
					,Dest.[PalletTypeAddDateTime] = Src.[PalletTypeAddDateTime]
					,Dest.[PalletTypeEditDateTime] = Src.[PalletTypeEditDateTime]
					,Dest.[PalletTypeAddUserCode] = Src.[PalletTypeAddUserCode]
					,Dest.[PalletTypeEditUserCode] = Src.[PalletTypeEditUserCode]
					,Dest.[PalletTypeVolumeRatio] = Src.[PalletTypeVolumeRatio]
					,Dest.[PalletTypeWeight] = Src.[PalletTypeWeight]
					,Dest.[PalletTypeMaximumCountPerTransport] = Src.[PalletTypeMaximumCountPerTransport]
				OUTPUT 'UPDATE'
					,CAST(Inserted.PalletTypeCode AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.PalletTypeCode AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].PalletTypes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.PalletTypes Dest ON Src.PalletTypeCode = Dest.PalletTypeCode
				WHERE Dest.[PalletTypeEditDateTime] < Src.[PalletTypeEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].PalletTypes Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.PalletTypes Dest WITH (NOLOCK) ON Src.PalletTypeCode = Dest.PalletTypeCode
					WHERE Dest.PalletTypeCode IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.PalletTypes (
					[PalletTypeCode]
					,[PalletTypeName]
					,[PalletTypeAddDateTime]
					,[PalletTypeEditDateTime]
					,[PalletTypeAddUserCode]
					,[PalletTypeEditUserCode]
					,[PalletTypeVolumeRatio]
					,[PalletTypeWeight]
					,[PalletTypeMaximumCountPerTransport]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.PalletTypeCode AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[PalletTypeCode]
					,Src.[PalletTypeName]
					,Src.[PalletTypeAddDateTime]
					,Src.[PalletTypeEditDateTime]
					,Src.[PalletTypeAddUserCode]
					,Src.[PalletTypeEditUserCode]
					,Src.[PalletTypeVolumeRatio]
					,Src.[PalletTypeWeight]
					,Src.[PalletTypeMaximumCountPerTransport]
				FROM [dbo].PalletTypes Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.PalletTypes Dest WITH (NOLOCK) ON Src.PalletTypeCode = Dest.PalletTypeCode
				WHERE Dest.PalletTypeCode IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') PalletTypes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `PalletTypes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--WrappingTypes
	SET @CurrentTableName = 'WrappingTypes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.WrappingTypes AS Dest
			USING (
				SELECT [WrappingTypeCode]
					,[WrappingTypeName]
					,[WrappingTypeAddDateTime]
					,[WrappingTypeEditDateTime]
					,[WrappingTypeAddUserCode]
					,[WrappingTypeEditUserCode]
				FROM dbo.WrappingTypes WITH (NOLOCK)
				) AS Src
				ON (Dest.[WrappingTypeCode] = Src.[WrappingTypeCode])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[WrappingTypeName] = Src.[WrappingTypeName]
						,Dest.[WrappingTypeAddDateTime] = Src.[WrappingTypeAddDateTime]
						,Dest.[WrappingTypeEditDateTime] = Src.[WrappingTypeEditDateTime]
						,Dest.[WrappingTypeAddUserCode] = Src.[WrappingTypeAddUserCode]
						,Dest.[WrappingTypeEditUserCode] = Src.[WrappingTypeEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[WrappingTypeCode]
						,[WrappingTypeName]
						,[WrappingTypeAddDateTime]
						,[WrappingTypeEditDateTime]
						,[WrappingTypeAddUserCode]
						,[WrappingTypeEditUserCode]
						)
					VALUES (
						Src.[WrappingTypeCode]
						,Src.[WrappingTypeName]
						,Src.[WrappingTypeAddDateTime]
						,Src.[WrappingTypeEditDateTime]
						,Src.[WrappingTypeAddUserCode]
						,Src.[WrappingTypeEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[WrappingTypeCode] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[WrappingTypeCode] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].WrappingTypes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WrappingTypes Dest WITH (NOLOCK) ON Src.WrappingTypeCode = Dest.WrappingTypeCode
					WHERE Dest.[WrappingTypeEditDateTime] < Src.[WrappingTypeEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[WrappingTypeName] = Src.[WrappingTypeName]
					,Dest.[WrappingTypeAddDateTime] = Src.[WrappingTypeAddDateTime]
					,Dest.[WrappingTypeEditDateTime] = Src.[WrappingTypeEditDateTime]
					,Dest.[WrappingTypeAddUserCode] = Src.[WrappingTypeAddUserCode]
					,Dest.[WrappingTypeEditUserCode] = Src.[WrappingTypeEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.WrappingTypeCode AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.WrappingTypeCode AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].WrappingTypes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WrappingTypes Dest ON Src.WrappingTypeCode = Dest.WrappingTypeCode
				WHERE Dest.[WrappingTypeEditDateTime] < Src.[WrappingTypeEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].WrappingTypes Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WrappingTypes Dest WITH (NOLOCK) ON Src.WrappingTypeCode = Dest.WrappingTypeCode
					WHERE Dest.WrappingTypeCode IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.WrappingTypes (
					[WrappingTypeCode]
					,[WrappingTypeName]
					,[WrappingTypeAddDateTime]
					,[WrappingTypeEditDateTime]
					,[WrappingTypeAddUserCode]
					,[WrappingTypeEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.WrappingTypeCode AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[WrappingTypeCode]
					,Src.[WrappingTypeName]
					,Src.[WrappingTypeAddDateTime]
					,Src.[WrappingTypeEditDateTime]
					,Src.[WrappingTypeAddUserCode]
					,Src.[WrappingTypeEditUserCode]
				FROM [dbo].WrappingTypes Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WrappingTypes Dest WITH (NOLOCK) ON Src.WrappingTypeCode = Dest.WrappingTypeCode
				WHERE Dest.WrappingTypeCode IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') WrappingTypes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `WrappingTypes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Companies
	-- 02 Receipts
	----a) Archival
	----SELECT * FROM Receipts;
	----SELECT * FROM ReceiptStatuses;
	--Companies
	SET @CurrentTableName = 'Companies';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Companies AS Dest
			USING (
				SELECT [IDCompany]
					,[CompanyType]
					,[CompanyName]
					,[CompanyVATNumber]
					,[CompanyAddress1]
					,[CompanyAddress2]
					,[CompanyAddress3]
					,[CompanyAddress4]
					,[CompanyCity]
					,[CompanyState]
					,[CompanyZipCode]
					,[CompanyCountry]
					,[CompanyISOCountryCode]
					,[CompanyContact1]
					,[CompanyContact2]
					,[CompanyPhoneNumber1]
					,[CompanyPhoneNumber2]
					,[CompanyFaxNumber1]
					,[CompanyFaxNumber2]
					,[CompanyEmail1]
					,[CompanyEmail2]
					,[CompanyBillToContact1]
					,[CompanyBillToContact2]
					,[CompanyBillToCompany]
					,[CompanyBillToAddress1]
					,[CompanyBillToAddress2]
					,[CompanyBillToAddress3]
					,[CompanyBillToAddress4]
					,[CompanyBillToCity]
					,[CompanyBillToState]
					,[CompanyBillToZipCode]
					,[CompanyCillToCountry]
					,[CompanyBillToIsoCountryCode]
					,[CompanyBillToPhoneNumber1]
					,[CompanyBillToPhoneNumber2]
					,[CompanyBillToFaxNumber1]
					,[CompanyBillToFaxNumber2]
					,[CompanyBillToEmail1]
					,[CompanyBillToEmail2]
					,[CompanyCreditLimit]
					,[CompanyCartonGroup]
					,[CompanyPickCode]
					,[CompanyCreatePutawayTaskOnRFReceipt]
					,[CompanyCalculatePutawayLocation]
					,[CompanyStatus]
					,[CompanyDefaultStrategy]
					,[CompanyDefaultProductRotation]
					,[CompanyDefaultRotation]
					,[CompanyTitle1]
					,[CompanyTitle2]
					,[CompanyDescription2]
					,[CompanyUserDefined01]
					,[CompanyUserDefined02]
					,[CompanyUserDefined03]
					,[CompanyUserDefined04]
					,[CompanyUserDefined05]
					,[CompanyUserDefined06]
					,[CompanyNotes1]
					,[CompanyNotes2]
					,[CompanyApportionRule]
					,[CompanyAllowOpportunisticXdock]
					,[CompanyAllowOverShipment]
					,[CompanyMaximumOrders]
					,[CompanyMinimumPercent]
					,[CompanyOrderDateStartDays]
					,[CompanyOrderDateEndDays]
					,[CompanyOrderTypeRestriction1]
					,[CompanyOrderTypeRestriction2]
					,[CompanyOrderTypeRestriction3]
					,[CompanyOrderTypeRestriction4]
					,[CompanyOrderTypeRestriction5]
					,[CompanyOrderTypeRestriction6]
					,[CompanyReceiptValidationTemplate]
					,[CompanyCaseLabelType]
					,[CompanyTrackInventoryBy]
					,[CompanyAllowDuplicateCaseID]
					,[LocationIDDefaultReturns]
					,[LocationIDDefaultQualityCheck]
					,[CompanyAddDateTime]
					,[CompanyAddUserCode]
					,[CompanyEditDateTime]
					,[CompanyEditUserCode]
					,[PalletTypeCode]
					,[WrappingTypeCode]
					,[CompanyBonded]
					,[CompanyIsSupplierForBilling]
					,[CompanyRegionCode]
					,[CompanyGroup]
					,[CompanyPerformance]
					,[CompanyClass]
					,[InsuranceTypeCode]
					,[CustomsTypeCode]
					,[CompanyEORINumber]
					,[CompanyLicenseNumber]
					,[CompanySBBDocumentType]
					,[CompanyCreatedInILSE]
					,[CompanyIDDefaultDelivery]
					,[CompanyIDDefaultPickUp]
					,[CompanyIDDefaultReturn]
					,[CompanyIDParent]
					,[IncoTermCode]
					,[CompanyShortName]
					,[CompanyActivationDateETAOffSet]
					,[CompanyActivationDateETDOffSet]
					,[CompanyUserDefined07]
					,[CompanyUserDefined08]
					,[CompanyUserDefined09]
					,[CompanyUserDefined10]
					,[CompanyTransit]
					,[CountryCodeControl]
					,[LanguageCode]
					,[CompanyIDDefaultMandatoryCarrier]
					,[CompanyAllowDirectFTL]
					,[CompanyBookingWindowEndTime]
					,[CompanyBookingWindowStartTime]
					,[CompanyDepartment]
					,[CompanyFinanceID]
					,[CompanyLeadTime]
					,[CompanyMaximumPalletHeight]
					,[CompanyMaximumTransportWeight]
					,[CompanyName2]
					,[CompanySingleProductPerPallet]
					,[CompanyUserDefinedYesNo01]
					,[CompanyUserDefinedYesNo02]
					,[CompanyUserDefinedYesNo03]
					,[CompanyUserDefinedYesNo04]
					,[CompanyUserDefinedYesNo05]
					,[CompanyUserDefinedDateTime01]
					,[CompanyUserDefinedDateTime02]
					,[CompanyUserDefinedDateTime03]
					,[CompanyUserDefinedDateTime04]
					,[CompanyUserDefinedDateTime05]
					,[CurrencyCodeDefault]
				FROM dbo.Companies WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDCompany] = Src.[IDCompany])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CompanyType] = Src.[CompanyType]
						,Dest.[CompanyName] = Src.[CompanyName]
						,Dest.[CompanyVATNumber] = Src.[CompanyVATNumber]
						,Dest.[CompanyAddress1] = Src.[CompanyAddress1]
						,Dest.[CompanyAddress2] = Src.[CompanyAddress2]
						,Dest.[CompanyAddress3] = Src.[CompanyAddress3]
						,Dest.[CompanyAddress4] = Src.[CompanyAddress4]
						,Dest.[CompanyCity] = Src.[CompanyCity]
						,Dest.[CompanyState] = Src.[CompanyState]
						,Dest.[CompanyZipCode] = Src.[CompanyZipCode]
						,Dest.[CompanyCountry] = Src.[CompanyCountry]
						,Dest.[CompanyISOCountryCode] = Src.[CompanyISOCountryCode]
						,Dest.[CompanyContact1] = Src.[CompanyContact1]
						,Dest.[CompanyContact2] = Src.[CompanyContact2]
						,Dest.[CompanyPhoneNumber1] = Src.[CompanyPhoneNumber1]
						,Dest.[CompanyPhoneNumber2] = Src.[CompanyPhoneNumber2]
						,Dest.[CompanyFaxNumber1] = Src.[CompanyFaxNumber1]
						,Dest.[CompanyFaxNumber2] = Src.[CompanyFaxNumber2]
						,Dest.[CompanyEmail1] = Src.[CompanyEmail1]
						,Dest.[CompanyEmail2] = Src.[CompanyEmail2]
						,Dest.[CompanyBillToContact1] = Src.[CompanyBillToContact1]
						,Dest.[CompanyBillToContact2] = Src.[CompanyBillToContact2]
						,Dest.[CompanyBillToCompany] = Src.[CompanyBillToCompany]
						,Dest.[CompanyBillToAddress1] = Src.[CompanyBillToAddress1]
						,Dest.[CompanyBillToAddress2] = Src.[CompanyBillToAddress2]
						,Dest.[CompanyBillToAddress3] = Src.[CompanyBillToAddress3]
						,Dest.[CompanyBillToAddress4] = Src.[CompanyBillToAddress4]
						,Dest.[CompanyBillToCity] = Src.[CompanyBillToCity]
						,Dest.[CompanyBillToState] = Src.[CompanyBillToState]
						,Dest.[CompanyBillToZipCode] = Src.[CompanyBillToZipCode]
						,Dest.[CompanyCillToCountry] = Src.[CompanyCillToCountry]
						,Dest.[CompanyBillToIsoCountryCode] = Src.[CompanyBillToIsoCountryCode]
						,Dest.[CompanyBillToPhoneNumber1] = Src.[CompanyBillToPhoneNumber1]
						,Dest.[CompanyBillToPhoneNumber2] = Src.[CompanyBillToPhoneNumber2]
						,Dest.[CompanyBillToFaxNumber1] = Src.[CompanyBillToFaxNumber1]
						,Dest.[CompanyBillToFaxNumber2] = Src.[CompanyBillToFaxNumber2]
						,Dest.[CompanyBillToEmail1] = Src.[CompanyBillToEmail1]
						,Dest.[CompanyBillToEmail2] = Src.[CompanyBillToEmail2]
						,Dest.[CompanyCreditLimit] = Src.[CompanyCreditLimit]
						,Dest.[CompanyCartonGroup] = Src.[CompanyCartonGroup]
						,Dest.[CompanyPickCode] = Src.[CompanyPickCode]
						,Dest.[CompanyCreatePutawayTaskOnRFReceipt] = Src.[CompanyCreatePutawayTaskOnRFReceipt]
						,Dest.[CompanyCalculatePutawayLocation] = Src.[CompanyCalculatePutawayLocation]
						,Dest.[CompanyStatus] = Src.[CompanyStatus]
						,Dest.[CompanyDefaultStrategy] = Src.[CompanyDefaultStrategy]
						,Dest.[CompanyDefaultProductRotation] = Src.[CompanyDefaultProductRotation]
						,Dest.[CompanyDefaultRotation] = Src.[CompanyDefaultRotation]
						,Dest.[CompanyTitle1] = Src.[CompanyTitle1]
						,Dest.[CompanyTitle2] = Src.[CompanyTitle2]
						,Dest.[CompanyDescription2] = Src.[CompanyDescription2]
						,Dest.[CompanyUserDefined01] = Src.[CompanyUserDefined01]
						,Dest.[CompanyUserDefined02] = Src.[CompanyUserDefined02]
						,Dest.[CompanyUserDefined03] = Src.[CompanyUserDefined03]
						,Dest.[CompanyUserDefined04] = Src.[CompanyUserDefined04]
						,Dest.[CompanyUserDefined05] = Src.[CompanyUserDefined05]
						,Dest.[CompanyUserDefined06] = Src.[CompanyUserDefined06]
						,Dest.[CompanyNotes1] = Src.[CompanyNotes1]
						,Dest.[CompanyNotes2] = Src.[CompanyNotes2]
						,Dest.[CompanyApportionRule] = Src.[CompanyApportionRule]
						,Dest.[CompanyAllowOpportunisticXdock] = Src.[CompanyAllowOpportunisticXdock]
						,Dest.[CompanyAllowOverShipment] = Src.[CompanyAllowOverShipment]
						,Dest.[CompanyMaximumOrders] = Src.[CompanyMaximumOrders]
						,Dest.[CompanyMinimumPercent] = Src.[CompanyMinimumPercent]
						,Dest.[CompanyOrderDateStartDays] = Src.[CompanyOrderDateStartDays]
						,Dest.[CompanyOrderDateEndDays] = Src.[CompanyOrderDateEndDays]
						,Dest.[CompanyOrderTypeRestriction1] = Src.[CompanyOrderTypeRestriction1]
						,Dest.[CompanyOrderTypeRestriction2] = Src.[CompanyOrderTypeRestriction2]
						,Dest.[CompanyOrderTypeRestriction3] = Src.[CompanyOrderTypeRestriction3]
						,Dest.[CompanyOrderTypeRestriction4] = Src.[CompanyOrderTypeRestriction4]
						,Dest.[CompanyOrderTypeRestriction5] = Src.[CompanyOrderTypeRestriction5]
						,Dest.[CompanyOrderTypeRestriction6] = Src.[CompanyOrderTypeRestriction6]
						,Dest.[CompanyReceiptValidationTemplate] = Src.[CompanyReceiptValidationTemplate]
						,Dest.[CompanyCaseLabelType] = Src.[CompanyCaseLabelType]
						,Dest.[CompanyTrackInventoryBy] = Src.[CompanyTrackInventoryBy]
						,Dest.[CompanyAllowDuplicateCaseID] = Src.[CompanyAllowDuplicateCaseID]
						,Dest.[LocationIDDefaultReturns] = Src.[LocationIDDefaultReturns]
						,Dest.[LocationIDDefaultQualityCheck] = Src.[LocationIDDefaultQualityCheck]
						,Dest.[CompanyAddDateTime] = Src.[CompanyAddDateTime]
						,Dest.[CompanyAddUserCode] = Src.[CompanyAddUserCode]
						,Dest.[CompanyEditDateTime] = Src.[CompanyEditDateTime]
						,Dest.[CompanyEditUserCode] = Src.[CompanyEditUserCode]
						,Dest.[PalletTypeCode] = Src.[PalletTypeCode]
						,Dest.[WrappingTypeCode] = Src.[WrappingTypeCode]
						,Dest.[CompanyBonded] = Src.[CompanyBonded]
						,Dest.[CompanyIsSupplierForBilling] = Src.[CompanyIsSupplierForBilling]
						,Dest.[CompanyRegionCode] = Src.[CompanyRegionCode]
						,Dest.[CompanyGroup] = Src.[CompanyGroup]
						,Dest.[CompanyPerformance] = Src.[CompanyPerformance]
						,Dest.[CompanyClass] = Src.[CompanyClass]
						,Dest.[InsuranceTypeCode] = Src.[InsuranceTypeCode]
						,Dest.[CustomsTypeCode] = Src.[CustomsTypeCode]
						,Dest.[CompanyEORINumber] = Src.[CompanyEORINumber]
						,Dest.[CompanyLicenseNumber] = Src.[CompanyLicenseNumber]
						,Dest.[CompanySBBDocumentType] = Src.[CompanySBBDocumentType]
						,Dest.[CompanyCreatedInILSE] = Src.[CompanyCreatedInILSE]
						,Dest.[CompanyIDDefaultDelivery] = Src.[CompanyIDDefaultDelivery]
						,Dest.[CompanyIDDefaultPickUp] = Src.[CompanyIDDefaultPickUp]
						,Dest.[CompanyIDDefaultReturn] = Src.[CompanyIDDefaultReturn]
						,Dest.[CompanyIDParent] = Src.[CompanyIDParent]
						,Dest.[IncoTermCode] = Src.[IncoTermCode]
						,Dest.[CompanyShortName] = Src.[CompanyShortName]
						,Dest.[CompanyActivationDateETAOffSet] = Src.[CompanyActivationDateETAOffSet]
						,Dest.[CompanyActivationDateETDOffSet] = Src.[CompanyActivationDateETDOffSet]
						,Dest.[CompanyUserDefined07] = Src.[CompanyUserDefined07]
						,Dest.[CompanyUserDefined08] = Src.[CompanyUserDefined08]
						,Dest.[CompanyUserDefined09] = Src.[CompanyUserDefined09]
						,Dest.[CompanyUserDefined10] = Src.[CompanyUserDefined10]
						,Dest.[CompanyTransit] = Src.[CompanyTransit]
						,Dest.[CountryCodeControl] = Src.[CountryCodeControl]
						,Dest.[LanguageCode] = Src.[LanguageCode]
						,Dest.[CompanyIDDefaultMandatoryCarrier] = Src.[CompanyIDDefaultMandatoryCarrier]
						,Dest.[CompanyAllowDirectFTL] = Src.[CompanyAllowDirectFTL]
						,Dest.[CompanyBookingWindowEndTime] = Src.[CompanyBookingWindowEndTime]
						,Dest.[CompanyBookingWindowStartTime] = Src.[CompanyBookingWindowStartTime]
						,Dest.[CompanyDepartment] = Src.[CompanyDepartment]
						,Dest.[CompanyFinanceID] = Src.[CompanyFinanceID]
						,Dest.[CompanyLeadTime] = Src.[CompanyLeadTime]
						,Dest.[CompanyMaximumPalletHeight] = Src.[CompanyMaximumPalletHeight]
						,Dest.[CompanyMaximumTransportWeight] = Src.[CompanyMaximumTransportWeight]
						,Dest.[CompanyName2] = Src.[CompanyName2]
						,Dest.[CompanySingleProductPerPallet] = Src.[CompanySingleProductPerPallet]
						,Dest.[CompanyUserDefinedYesNo01] = Src.[CompanyUserDefinedYesNo01]
						,Dest.[CompanyUserDefinedYesNo02] = Src.[CompanyUserDefinedYesNo02]
						,Dest.[CompanyUserDefinedYesNo03] = Src.[CompanyUserDefinedYesNo03]
						,Dest.[CompanyUserDefinedYesNo04] = Src.[CompanyUserDefinedYesNo04]
						,Dest.[CompanyUserDefinedYesNo05] = Src.[CompanyUserDefinedYesNo05]
						,Dest.[CompanyUserDefinedDateTime01] = Src.[CompanyUserDefinedDateTime01]
						,Dest.[CompanyUserDefinedDateTime02] = Src.[CompanyUserDefinedDateTime02]
						,Dest.[CompanyUserDefinedDateTime03] = Src.[CompanyUserDefinedDateTime03]
						,Dest.[CompanyUserDefinedDateTime04] = Src.[CompanyUserDefinedDateTime04]
						,Dest.[CompanyUserDefinedDateTime05] = Src.[CompanyUserDefinedDateTime05]
						,Dest.[CurrencyCodeDefault] = Src.[CurrencyCodeDefault]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCompany]
						,[CompanyType]
						,[CompanyName]
						,[CompanyVATNumber]
						,[CompanyAddress1]
						,[CompanyAddress2]
						,[CompanyAddress3]
						,[CompanyAddress4]
						,[CompanyCity]
						,[CompanyState]
						,[CompanyZipCode]
						,[CompanyCountry]
						,[CompanyISOCountryCode]
						,[CompanyContact1]
						,[CompanyContact2]
						,[CompanyPhoneNumber1]
						,[CompanyPhoneNumber2]
						,[CompanyFaxNumber1]
						,[CompanyFaxNumber2]
						,[CompanyEmail1]
						,[CompanyEmail2]
						,[CompanyBillToContact1]
						,[CompanyBillToContact2]
						,[CompanyBillToCompany]
						,[CompanyBillToAddress1]
						,[CompanyBillToAddress2]
						,[CompanyBillToAddress3]
						,[CompanyBillToAddress4]
						,[CompanyBillToCity]
						,[CompanyBillToState]
						,[CompanyBillToZipCode]
						,[CompanyCillToCountry]
						,[CompanyBillToIsoCountryCode]
						,[CompanyBillToPhoneNumber1]
						,[CompanyBillToPhoneNumber2]
						,[CompanyBillToFaxNumber1]
						,[CompanyBillToFaxNumber2]
						,[CompanyBillToEmail1]
						,[CompanyBillToEmail2]
						,[CompanyCreditLimit]
						,[CompanyCartonGroup]
						,[CompanyPickCode]
						,[CompanyCreatePutawayTaskOnRFReceipt]
						,[CompanyCalculatePutawayLocation]
						,[CompanyStatus]
						,[CompanyDefaultStrategy]
						,[CompanyDefaultProductRotation]
						,[CompanyDefaultRotation]
						,[CompanyTitle1]
						,[CompanyTitle2]
						,[CompanyDescription2]
						,[CompanyUserDefined01]
						,[CompanyUserDefined02]
						,[CompanyUserDefined03]
						,[CompanyUserDefined04]
						,[CompanyUserDefined05]
						,[CompanyUserDefined06]
						,[CompanyNotes1]
						,[CompanyNotes2]
						,[CompanyApportionRule]
						,[CompanyAllowOpportunisticXdock]
						,[CompanyAllowOverShipment]
						,[CompanyMaximumOrders]
						,[CompanyMinimumPercent]
						,[CompanyOrderDateStartDays]
						,[CompanyOrderDateEndDays]
						,[CompanyOrderTypeRestriction1]
						,[CompanyOrderTypeRestriction2]
						,[CompanyOrderTypeRestriction3]
						,[CompanyOrderTypeRestriction4]
						,[CompanyOrderTypeRestriction5]
						,[CompanyOrderTypeRestriction6]
						,[CompanyReceiptValidationTemplate]
						,[CompanyCaseLabelType]
						,[CompanyTrackInventoryBy]
						,[CompanyAllowDuplicateCaseID]
						,[LocationIDDefaultReturns]
						,[LocationIDDefaultQualityCheck]
						,[CompanyAddDateTime]
						,[CompanyAddUserCode]
						,[CompanyEditDateTime]
						,[CompanyEditUserCode]
						,[PalletTypeCode]
						,[WrappingTypeCode]
						,[CompanyBonded]
						,[CompanyIsSupplierForBilling]
						,[CompanyRegionCode]
						,[CompanyGroup]
						,[CompanyPerformance]
						,[CompanyClass]
						,[InsuranceTypeCode]
						,[CustomsTypeCode]
						,[CompanyEORINumber]
						,[CompanyLicenseNumber]
						,[CompanySBBDocumentType]
						,[CompanyCreatedInILSE]
						,[CompanyIDDefaultDelivery]
						,[CompanyIDDefaultPickUp]
						,[CompanyIDDefaultReturn]
						,[CompanyIDParent]
						,[IncoTermCode]
						,[CompanyShortName]
						,[CompanyActivationDateETAOffSet]
						,[CompanyActivationDateETDOffSet]
						,[CompanyUserDefined07]
						,[CompanyUserDefined08]
						,[CompanyUserDefined09]
						,[CompanyUserDefined10]
						,[CompanyTransit]
						,[CountryCodeControl]
						,[LanguageCode]
						,[CompanyIDDefaultMandatoryCarrier]
						,[CompanyAllowDirectFTL]
						,[CompanyBookingWindowEndTime]
						,[CompanyBookingWindowStartTime]
						,[CompanyDepartment]
						,[CompanyFinanceID]
						,[CompanyLeadTime]
						,[CompanyMaximumPalletHeight]
						,[CompanyMaximumTransportWeight]
						,[CompanyName2]
						,[CompanySingleProductPerPallet]
						,[CompanyUserDefinedYesNo01]
						,[CompanyUserDefinedYesNo02]
						,[CompanyUserDefinedYesNo03]
						,[CompanyUserDefinedYesNo04]
						,[CompanyUserDefinedYesNo05]
						,[CompanyUserDefinedDateTime01]
						,[CompanyUserDefinedDateTime02]
						,[CompanyUserDefinedDateTime03]
						,[CompanyUserDefinedDateTime04]
						,[CompanyUserDefinedDateTime05]
						,[CurrencyCodeDefault]
						)
					VALUES (
						Src.[IDCompany]
						,Src.[CompanyType]
						,Src.[CompanyName]
						,Src.[CompanyVATNumber]
						,Src.[CompanyAddress1]
						,Src.[CompanyAddress2]
						,Src.[CompanyAddress3]
						,Src.[CompanyAddress4]
						,Src.[CompanyCity]
						,Src.[CompanyState]
						,Src.[CompanyZipCode]
						,Src.[CompanyCountry]
						,Src.[CompanyISOCountryCode]
						,Src.[CompanyContact1]
						,Src.[CompanyContact2]
						,Src.[CompanyPhoneNumber1]
						,Src.[CompanyPhoneNumber2]
						,Src.[CompanyFaxNumber1]
						,Src.[CompanyFaxNumber2]
						,Src.[CompanyEmail1]
						,Src.[CompanyEmail2]
						,Src.[CompanyBillToContact1]
						,Src.[CompanyBillToContact2]
						,Src.[CompanyBillToCompany]
						,Src.[CompanyBillToAddress1]
						,Src.[CompanyBillToAddress2]
						,Src.[CompanyBillToAddress3]
						,Src.[CompanyBillToAddress4]
						,Src.[CompanyBillToCity]
						,Src.[CompanyBillToState]
						,Src.[CompanyBillToZipCode]
						,Src.[CompanyCillToCountry]
						,Src.[CompanyBillToIsoCountryCode]
						,Src.[CompanyBillToPhoneNumber1]
						,Src.[CompanyBillToPhoneNumber2]
						,Src.[CompanyBillToFaxNumber1]
						,Src.[CompanyBillToFaxNumber2]
						,Src.[CompanyBillToEmail1]
						,Src.[CompanyBillToEmail2]
						,Src.[CompanyCreditLimit]
						,Src.[CompanyCartonGroup]
						,Src.[CompanyPickCode]
						,Src.[CompanyCreatePutawayTaskOnRFReceipt]
						,Src.[CompanyCalculatePutawayLocation]
						,Src.[CompanyStatus]
						,Src.[CompanyDefaultStrategy]
						,Src.[CompanyDefaultProductRotation]
						,Src.[CompanyDefaultRotation]
						,Src.[CompanyTitle1]
						,Src.[CompanyTitle2]
						,Src.[CompanyDescription2]
						,Src.[CompanyUserDefined01]
						,Src.[CompanyUserDefined02]
						,Src.[CompanyUserDefined03]
						,Src.[CompanyUserDefined04]
						,Src.[CompanyUserDefined05]
						,Src.[CompanyUserDefined06]
						,Src.[CompanyNotes1]
						,Src.[CompanyNotes2]
						,Src.[CompanyApportionRule]
						,Src.[CompanyAllowOpportunisticXdock]
						,Src.[CompanyAllowOverShipment]
						,Src.[CompanyMaximumOrders]
						,Src.[CompanyMinimumPercent]
						,Src.[CompanyOrderDateStartDays]
						,Src.[CompanyOrderDateEndDays]
						,Src.[CompanyOrderTypeRestriction1]
						,Src.[CompanyOrderTypeRestriction2]
						,Src.[CompanyOrderTypeRestriction3]
						,Src.[CompanyOrderTypeRestriction4]
						,Src.[CompanyOrderTypeRestriction5]
						,Src.[CompanyOrderTypeRestriction6]
						,Src.[CompanyReceiptValidationTemplate]
						,Src.[CompanyCaseLabelType]
						,Src.[CompanyTrackInventoryBy]
						,Src.[CompanyAllowDuplicateCaseID]
						,Src.[LocationIDDefaultReturns]
						,Src.[LocationIDDefaultQualityCheck]
						,Src.[CompanyAddDateTime]
						,Src.[CompanyAddUserCode]
						,Src.[CompanyEditDateTime]
						,Src.[CompanyEditUserCode]
						,Src.[PalletTypeCode]
						,Src.[WrappingTypeCode]
						,Src.[CompanyBonded]
						,Src.[CompanyIsSupplierForBilling]
						,Src.[CompanyRegionCode]
						,Src.[CompanyGroup]
						,Src.[CompanyPerformance]
						,Src.[CompanyClass]
						,Src.[InsuranceTypeCode]
						,Src.[CustomsTypeCode]
						,Src.[CompanyEORINumber]
						,Src.[CompanyLicenseNumber]
						,Src.[CompanySBBDocumentType]
						,Src.[CompanyCreatedInILSE]
						,Src.[CompanyIDDefaultDelivery]
						,Src.[CompanyIDDefaultPickUp]
						,Src.[CompanyIDDefaultReturn]
						,Src.[CompanyIDParent]
						,Src.[IncoTermCode]
						,Src.[CompanyShortName]
						,Src.[CompanyActivationDateETAOffSet]
						,Src.[CompanyActivationDateETDOffSet]
						,Src.[CompanyUserDefined07]
						,Src.[CompanyUserDefined08]
						,Src.[CompanyUserDefined09]
						,Src.[CompanyUserDefined10]
						,Src.[CompanyTransit]
						,Src.[CountryCodeControl]
						,Src.[LanguageCode]
						,Src.[CompanyIDDefaultMandatoryCarrier]
						,Src.[CompanyAllowDirectFTL]
						,Src.[CompanyBookingWindowEndTime]
						,Src.[CompanyBookingWindowStartTime]
						,Src.[CompanyDepartment]
						,Src.[CompanyFinanceID]
						,Src.[CompanyLeadTime]
						,Src.[CompanyMaximumPalletHeight]
						,Src.[CompanyMaximumTransportWeight]
						,Src.[CompanyName2]
						,Src.[CompanySingleProductPerPallet]
						,Src.[CompanyUserDefinedYesNo01]
						,Src.[CompanyUserDefinedYesNo02]
						,Src.[CompanyUserDefinedYesNo03]
						,Src.[CompanyUserDefinedYesNo04]
						,Src.[CompanyUserDefinedYesNo05]
						,Src.[CompanyUserDefinedDateTime01]
						,Src.[CompanyUserDefinedDateTime02]
						,Src.[CompanyUserDefinedDateTime03]
						,Src.[CompanyUserDefinedDateTime04]
						,Src.[CompanyUserDefinedDateTime05]
						,Src.[CurrencyCodeDefault]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCompany] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCompany] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Companies Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Companies Dest WITH (NOLOCK) ON Src.IDCompany = Dest.IDCompany
					WHERE Dest.CompanyEditDateTime < Src.CompanyEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CompanyType] = Src.[CompanyType]
					,Dest.[CompanyName] = Src.[CompanyName]
					,Dest.[CompanyVATNumber] = Src.[CompanyVATNumber]
					,Dest.[CompanyAddress1] = Src.[CompanyAddress1]
					,Dest.[CompanyAddress2] = Src.[CompanyAddress2]
					,Dest.[CompanyAddress3] = Src.[CompanyAddress3]
					,Dest.[CompanyAddress4] = Src.[CompanyAddress4]
					,Dest.[CompanyCity] = Src.[CompanyCity]
					,Dest.[CompanyState] = Src.[CompanyState]
					,Dest.[CompanyZipCode] = Src.[CompanyZipCode]
					,Dest.[CompanyCountry] = Src.[CompanyCountry]
					,Dest.[CompanyISOCountryCode] = Src.[CompanyISOCountryCode]
					,Dest.[CompanyContact1] = Src.[CompanyContact1]
					,Dest.[CompanyContact2] = Src.[CompanyContact2]
					,Dest.[CompanyPhoneNumber1] = Src.[CompanyPhoneNumber1]
					,Dest.[CompanyPhoneNumber2] = Src.[CompanyPhoneNumber2]
					,Dest.[CompanyFaxNumber1] = Src.[CompanyFaxNumber1]
					,Dest.[CompanyFaxNumber2] = Src.[CompanyFaxNumber2]
					,Dest.[CompanyEmail1] = Src.[CompanyEmail1]
					,Dest.[CompanyEmail2] = Src.[CompanyEmail2]
					,Dest.[CompanyBillToContact1] = Src.[CompanyBillToContact1]
					,Dest.[CompanyBillToContact2] = Src.[CompanyBillToContact2]
					,Dest.[CompanyBillToCompany] = Src.[CompanyBillToCompany]
					,Dest.[CompanyBillToAddress1] = Src.[CompanyBillToAddress1]
					,Dest.[CompanyBillToAddress2] = Src.[CompanyBillToAddress2]
					,Dest.[CompanyBillToAddress3] = Src.[CompanyBillToAddress3]
					,Dest.[CompanyBillToAddress4] = Src.[CompanyBillToAddress4]
					,Dest.[CompanyBillToCity] = Src.[CompanyBillToCity]
					,Dest.[CompanyBillToState] = Src.[CompanyBillToState]
					,Dest.[CompanyBillToZipCode] = Src.[CompanyBillToZipCode]
					,Dest.[CompanyCillToCountry] = Src.[CompanyCillToCountry]
					,Dest.[CompanyBillToIsoCountryCode] = Src.[CompanyBillToIsoCountryCode]
					,Dest.[CompanyBillToPhoneNumber1] = Src.[CompanyBillToPhoneNumber1]
					,Dest.[CompanyBillToPhoneNumber2] = Src.[CompanyBillToPhoneNumber2]
					,Dest.[CompanyBillToFaxNumber1] = Src.[CompanyBillToFaxNumber1]
					,Dest.[CompanyBillToFaxNumber2] = Src.[CompanyBillToFaxNumber2]
					,Dest.[CompanyBillToEmail1] = Src.[CompanyBillToEmail1]
					,Dest.[CompanyBillToEmail2] = Src.[CompanyBillToEmail2]
					,Dest.[CompanyCreditLimit] = Src.[CompanyCreditLimit]
					,Dest.[CompanyCartonGroup] = Src.[CompanyCartonGroup]
					,Dest.[CompanyPickCode] = Src.[CompanyPickCode]
					,Dest.[CompanyCreatePutawayTaskOnRFReceipt] = Src.[CompanyCreatePutawayTaskOnRFReceipt]
					,Dest.[CompanyCalculatePutawayLocation] = Src.[CompanyCalculatePutawayLocation]
					,Dest.[CompanyStatus] = Src.[CompanyStatus]
					,Dest.[CompanyDefaultStrategy] = Src.[CompanyDefaultStrategy]
					,Dest.[CompanyDefaultProductRotation] = Src.[CompanyDefaultProductRotation]
					,Dest.[CompanyDefaultRotation] = Src.[CompanyDefaultRotation]
					,Dest.[CompanyTitle1] = Src.[CompanyTitle1]
					,Dest.[CompanyTitle2] = Src.[CompanyTitle2]
					,Dest.[CompanyDescription2] = Src.[CompanyDescription2]
					,Dest.[CompanyUserDefined01] = Src.[CompanyUserDefined01]
					,Dest.[CompanyUserDefined02] = Src.[CompanyUserDefined02]
					,Dest.[CompanyUserDefined03] = Src.[CompanyUserDefined03]
					,Dest.[CompanyUserDefined04] = Src.[CompanyUserDefined04]
					,Dest.[CompanyUserDefined05] = Src.[CompanyUserDefined05]
					,Dest.[CompanyUserDefined06] = Src.[CompanyUserDefined06]
					,Dest.[CompanyNotes1] = Src.[CompanyNotes1]
					,Dest.[CompanyNotes2] = Src.[CompanyNotes2]
					,Dest.[CompanyApportionRule] = Src.[CompanyApportionRule]
					,Dest.[CompanyAllowOpportunisticXdock] = Src.[CompanyAllowOpportunisticXdock]
					,Dest.[CompanyAllowOverShipment] = Src.[CompanyAllowOverShipment]
					,Dest.[CompanyMaximumOrders] = Src.[CompanyMaximumOrders]
					,Dest.[CompanyMinimumPercent] = Src.[CompanyMinimumPercent]
					,Dest.[CompanyOrderDateStartDays] = Src.[CompanyOrderDateStartDays]
					,Dest.[CompanyOrderDateEndDays] = Src.[CompanyOrderDateEndDays]
					,Dest.[CompanyOrderTypeRestriction1] = Src.[CompanyOrderTypeRestriction1]
					,Dest.[CompanyOrderTypeRestriction2] = Src.[CompanyOrderTypeRestriction2]
					,Dest.[CompanyOrderTypeRestriction3] = Src.[CompanyOrderTypeRestriction3]
					,Dest.[CompanyOrderTypeRestriction4] = Src.[CompanyOrderTypeRestriction4]
					,Dest.[CompanyOrderTypeRestriction5] = Src.[CompanyOrderTypeRestriction5]
					,Dest.[CompanyOrderTypeRestriction6] = Src.[CompanyOrderTypeRestriction6]
					,Dest.[CompanyReceiptValidationTemplate] = Src.[CompanyReceiptValidationTemplate]
					,Dest.[CompanyCaseLabelType] = Src.[CompanyCaseLabelType]
					,Dest.[CompanyTrackInventoryBy] = Src.[CompanyTrackInventoryBy]
					,Dest.[CompanyAllowDuplicateCaseID] = Src.[CompanyAllowDuplicateCaseID]
					,Dest.[LocationIDDefaultReturns] = Src.[LocationIDDefaultReturns]
					,Dest.[LocationIDDefaultQualityCheck] = Src.[LocationIDDefaultQualityCheck]
					,Dest.[CompanyAddDateTime] = Src.[CompanyAddDateTime]
					,Dest.[CompanyAddUserCode] = Src.[CompanyAddUserCode]
					,Dest.[CompanyEditDateTime] = Src.[CompanyEditDateTime]
					,Dest.[CompanyEditUserCode] = Src.[CompanyEditUserCode]
					,Dest.[PalletTypeCode] = Src.[PalletTypeCode]
					,Dest.[WrappingTypeCode] = Src.[WrappingTypeCode]
					,Dest.[CompanyBonded] = Src.[CompanyBonded]
					,Dest.[CompanyIsSupplierForBilling] = Src.[CompanyIsSupplierForBilling]
					,Dest.[CompanyRegionCode] = Src.[CompanyRegionCode]
					,Dest.[CompanyGroup] = Src.[CompanyGroup]
					,Dest.[CompanyPerformance] = Src.[CompanyPerformance]
					,Dest.[CompanyClass] = Src.[CompanyClass]
					,Dest.[InsuranceTypeCode] = Src.[InsuranceTypeCode]
					,Dest.[CustomsTypeCode] = Src.[CustomsTypeCode]
					,Dest.[CompanyEORINumber] = Src.[CompanyEORINumber]
					,Dest.[CompanyLicenseNumber] = Src.[CompanyLicenseNumber]
					,Dest.[CompanySBBDocumentType] = Src.[CompanySBBDocumentType]
					,Dest.[CompanyCreatedInILSE] = Src.[CompanyCreatedInILSE]
					,Dest.[CompanyIDDefaultDelivery] = Src.[CompanyIDDefaultDelivery]
					,Dest.[CompanyIDDefaultPickUp] = Src.[CompanyIDDefaultPickUp]
					,Dest.[CompanyIDDefaultReturn] = Src.[CompanyIDDefaultReturn]
					,Dest.[CompanyIDParent] = Src.[CompanyIDParent]
					,Dest.[IncoTermCode] = Src.[IncoTermCode]
					,Dest.[CompanyShortName] = Src.[CompanyShortName]
					,Dest.[CompanyActivationDateETAOffSet] = Src.[CompanyActivationDateETAOffSet]
					,Dest.[CompanyActivationDateETDOffSet] = Src.[CompanyActivationDateETDOffSet]
					,Dest.[CompanyUserDefined07] = Src.[CompanyUserDefined07]
					,Dest.[CompanyUserDefined08] = Src.[CompanyUserDefined08]
					,Dest.[CompanyUserDefined09] = Src.[CompanyUserDefined09]
					,Dest.[CompanyUserDefined10] = Src.[CompanyUserDefined10]
					,Dest.[CompanyTransit] = Src.[CompanyTransit]
					,Dest.[CountryCodeControl] = Src.[CountryCodeControl]
					,Dest.[LanguageCode] = Src.[LanguageCode]
					,Dest.[CompanyIDDefaultMandatoryCarrier] = Src.[CompanyIDDefaultMandatoryCarrier]
					,Dest.[CompanyAllowDirectFTL] = Src.[CompanyAllowDirectFTL]
					,Dest.[CompanyBookingWindowEndTime] = Src.[CompanyBookingWindowEndTime]
					,Dest.[CompanyBookingWindowStartTime] = Src.[CompanyBookingWindowStartTime]
					,Dest.[CompanyDepartment] = Src.[CompanyDepartment]
					,Dest.[CompanyFinanceID] = Src.[CompanyFinanceID]
					,Dest.[CompanyLeadTime] = Src.[CompanyLeadTime]
					,Dest.[CompanyMaximumPalletHeight] = Src.[CompanyMaximumPalletHeight]
					,Dest.[CompanyMaximumTransportWeight] = Src.[CompanyMaximumTransportWeight]
					,Dest.[CompanyName2] = Src.[CompanyName2]
					,Dest.[CompanySingleProductPerPallet] = Src.[CompanySingleProductPerPallet]
					,Dest.[CompanyUserDefinedYesNo01] = Src.[CompanyUserDefinedYesNo01]
					,Dest.[CompanyUserDefinedYesNo02] = Src.[CompanyUserDefinedYesNo02]
					,Dest.[CompanyUserDefinedYesNo03] = Src.[CompanyUserDefinedYesNo03]
					,Dest.[CompanyUserDefinedYesNo04] = Src.[CompanyUserDefinedYesNo04]
					,Dest.[CompanyUserDefinedYesNo05] = Src.[CompanyUserDefinedYesNo05]
					,Dest.[CompanyUserDefinedDateTime01] = Src.[CompanyUserDefinedDateTime01]
					,Dest.[CompanyUserDefinedDateTime02] = Src.[CompanyUserDefinedDateTime02]
					,Dest.[CompanyUserDefinedDateTime03] = Src.[CompanyUserDefinedDateTime03]
					,Dest.[CompanyUserDefinedDateTime04] = Src.[CompanyUserDefinedDateTime04]
					,Dest.[CompanyUserDefinedDateTime05] = Src.[CompanyUserDefinedDateTime05]
					,Dest.[CurrencyCodeDefault] = Src.[CurrencyCodeDefault]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCompany AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCompany AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Companies Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Companies Dest ON Src.IDCompany = Dest.IDCompany
				WHERE Dest.CompanyEditDateTime < Src.CompanyEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Companies Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Companies Dest WITH (NOLOCK) ON Src.IDCompany = Dest.IDCompany
					WHERE Dest.IDCompany IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Companies (
					[IDCompany]
					,[CompanyType]
					,[CompanyName]
					,[CompanyVATNumber]
					,[CompanyAddress1]
					,[CompanyAddress2]
					,[CompanyAddress3]
					,[CompanyAddress4]
					,[CompanyCity]
					,[CompanyState]
					,[CompanyZipCode]
					,[CompanyCountry]
					,[CompanyISOCountryCode]
					,[CompanyContact1]
					,[CompanyContact2]
					,[CompanyPhoneNumber1]
					,[CompanyPhoneNumber2]
					,[CompanyFaxNumber1]
					,[CompanyFaxNumber2]
					,[CompanyEmail1]
					,[CompanyEmail2]
					,[CompanyBillToContact1]
					,[CompanyBillToContact2]
					,[CompanyBillToCompany]
					,[CompanyBillToAddress1]
					,[CompanyBillToAddress2]
					,[CompanyBillToAddress3]
					,[CompanyBillToAddress4]
					,[CompanyBillToCity]
					,[CompanyBillToState]
					,[CompanyBillToZipCode]
					,[CompanyCillToCountry]
					,[CompanyBillToIsoCountryCode]
					,[CompanyBillToPhoneNumber1]
					,[CompanyBillToPhoneNumber2]
					,[CompanyBillToFaxNumber1]
					,[CompanyBillToFaxNumber2]
					,[CompanyBillToEmail1]
					,[CompanyBillToEmail2]
					,[CompanyCreditLimit]
					,[CompanyCartonGroup]
					,[CompanyPickCode]
					,[CompanyCreatePutawayTaskOnRFReceipt]
					,[CompanyCalculatePutawayLocation]
					,[CompanyStatus]
					,[CompanyDefaultStrategy]
					,[CompanyDefaultProductRotation]
					,[CompanyDefaultRotation]
					,[CompanyTitle1]
					,[CompanyTitle2]
					,[CompanyDescription2]
					,[CompanyUserDefined01]
					,[CompanyUserDefined02]
					,[CompanyUserDefined03]
					,[CompanyUserDefined04]
					,[CompanyUserDefined05]
					,[CompanyUserDefined06]
					,[CompanyNotes1]
					,[CompanyNotes2]
					,[CompanyApportionRule]
					,[CompanyAllowOpportunisticXdock]
					,[CompanyAllowOverShipment]
					,[CompanyMaximumOrders]
					,[CompanyMinimumPercent]
					,[CompanyOrderDateStartDays]
					,[CompanyOrderDateEndDays]
					,[CompanyOrderTypeRestriction1]
					,[CompanyOrderTypeRestriction2]
					,[CompanyOrderTypeRestriction3]
					,[CompanyOrderTypeRestriction4]
					,[CompanyOrderTypeRestriction5]
					,[CompanyOrderTypeRestriction6]
					,[CompanyReceiptValidationTemplate]
					,[CompanyCaseLabelType]
					,[CompanyTrackInventoryBy]
					,[CompanyAllowDuplicateCaseID]
					,[LocationIDDefaultReturns]
					,[LocationIDDefaultQualityCheck]
					,[CompanyAddDateTime]
					,[CompanyAddUserCode]
					,[CompanyEditDateTime]
					,[CompanyEditUserCode]
					,[PalletTypeCode]
					,[WrappingTypeCode]
					,[CompanyBonded]
					,[CompanyIsSupplierForBilling]
					,[CompanyRegionCode]
					,[CompanyGroup]
					,[CompanyPerformance]
					,[CompanyClass]
					,[InsuranceTypeCode]
					,[CustomsTypeCode]
					,[CompanyEORINumber]
					,[CompanyLicenseNumber]
					,[CompanySBBDocumentType]
					,[CompanyCreatedInILSE]
					,[CompanyIDDefaultDelivery]
					,[CompanyIDDefaultPickUp]
					,[CompanyIDDefaultReturn]
					,[CompanyIDParent]
					,[IncoTermCode]
					,[CompanyShortName]
					,[CompanyActivationDateETAOffSet]
					,[CompanyActivationDateETDOffSet]
					,[CompanyUserDefined07]
					,[CompanyUserDefined08]
					,[CompanyUserDefined09]
					,[CompanyUserDefined10]
					,[CompanyTransit]
					,[CountryCodeControl]
					,[LanguageCode]
					,[CompanyIDDefaultMandatoryCarrier]
					,[CompanyAllowDirectFTL]
					,[CompanyBookingWindowEndTime]
					,[CompanyBookingWindowStartTime]
					,[CompanyDepartment]
					,[CompanyFinanceID]
					,[CompanyLeadTime]
					,[CompanyMaximumPalletHeight]
					,[CompanyMaximumTransportWeight]
					,[CompanyName2]
					,[CompanySingleProductPerPallet]
					,[CompanyUserDefinedYesNo01]
					,[CompanyUserDefinedYesNo02]
					,[CompanyUserDefinedYesNo03]
					,[CompanyUserDefinedYesNo04]
					,[CompanyUserDefinedYesNo05]
					,[CompanyUserDefinedDateTime01]
					,[CompanyUserDefinedDateTime02]
					,[CompanyUserDefinedDateTime03]
					,[CompanyUserDefinedDateTime04]
					,[CompanyUserDefinedDateTime05]
					,[CurrencyCodeDefault]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCompany AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCompany]
					,Src.[CompanyType]
					,Src.[CompanyName]
					,Src.[CompanyVATNumber]
					,Src.[CompanyAddress1]
					,Src.[CompanyAddress2]
					,Src.[CompanyAddress3]
					,Src.[CompanyAddress4]
					,Src.[CompanyCity]
					,Src.[CompanyState]
					,Src.[CompanyZipCode]
					,Src.[CompanyCountry]
					,Src.[CompanyISOCountryCode]
					,Src.[CompanyContact1]
					,Src.[CompanyContact2]
					,Src.[CompanyPhoneNumber1]
					,Src.[CompanyPhoneNumber2]
					,Src.[CompanyFaxNumber1]
					,Src.[CompanyFaxNumber2]
					,Src.[CompanyEmail1]
					,Src.[CompanyEmail2]
					,Src.[CompanyBillToContact1]
					,Src.[CompanyBillToContact2]
					,Src.[CompanyBillToCompany]
					,Src.[CompanyBillToAddress1]
					,Src.[CompanyBillToAddress2]
					,Src.[CompanyBillToAddress3]
					,Src.[CompanyBillToAddress4]
					,Src.[CompanyBillToCity]
					,Src.[CompanyBillToState]
					,Src.[CompanyBillToZipCode]
					,Src.[CompanyCillToCountry]
					,Src.[CompanyBillToIsoCountryCode]
					,Src.[CompanyBillToPhoneNumber1]
					,Src.[CompanyBillToPhoneNumber2]
					,Src.[CompanyBillToFaxNumber1]
					,Src.[CompanyBillToFaxNumber2]
					,Src.[CompanyBillToEmail1]
					,Src.[CompanyBillToEmail2]
					,Src.[CompanyCreditLimit]
					,Src.[CompanyCartonGroup]
					,Src.[CompanyPickCode]
					,Src.[CompanyCreatePutawayTaskOnRFReceipt]
					,Src.[CompanyCalculatePutawayLocation]
					,Src.[CompanyStatus]
					,Src.[CompanyDefaultStrategy]
					,Src.[CompanyDefaultProductRotation]
					,Src.[CompanyDefaultRotation]
					,Src.[CompanyTitle1]
					,Src.[CompanyTitle2]
					,Src.[CompanyDescription2]
					,Src.[CompanyUserDefined01]
					,Src.[CompanyUserDefined02]
					,Src.[CompanyUserDefined03]
					,Src.[CompanyUserDefined04]
					,Src.[CompanyUserDefined05]
					,Src.[CompanyUserDefined06]
					,Src.[CompanyNotes1]
					,Src.[CompanyNotes2]
					,Src.[CompanyApportionRule]
					,Src.[CompanyAllowOpportunisticXdock]
					,Src.[CompanyAllowOverShipment]
					,Src.[CompanyMaximumOrders]
					,Src.[CompanyMinimumPercent]
					,Src.[CompanyOrderDateStartDays]
					,Src.[CompanyOrderDateEndDays]
					,Src.[CompanyOrderTypeRestriction1]
					,Src.[CompanyOrderTypeRestriction2]
					,Src.[CompanyOrderTypeRestriction3]
					,Src.[CompanyOrderTypeRestriction4]
					,Src.[CompanyOrderTypeRestriction5]
					,Src.[CompanyOrderTypeRestriction6]
					,Src.[CompanyReceiptValidationTemplate]
					,Src.[CompanyCaseLabelType]
					,Src.[CompanyTrackInventoryBy]
					,Src.[CompanyAllowDuplicateCaseID]
					,Src.[LocationIDDefaultReturns]
					,Src.[LocationIDDefaultQualityCheck]
					,Src.[CompanyAddDateTime]
					,Src.[CompanyAddUserCode]
					,Src.[CompanyEditDateTime]
					,Src.[CompanyEditUserCode]
					,Src.[PalletTypeCode]
					,Src.[WrappingTypeCode]
					,Src.[CompanyBonded]
					,Src.[CompanyIsSupplierForBilling]
					,Src.[CompanyRegionCode]
					,Src.[CompanyGroup]
					,Src.[CompanyPerformance]
					,Src.[CompanyClass]
					,Src.[InsuranceTypeCode]
					,Src.[CustomsTypeCode]
					,Src.[CompanyEORINumber]
					,Src.[CompanyLicenseNumber]
					,Src.[CompanySBBDocumentType]
					,Src.[CompanyCreatedInILSE]
					,Src.[CompanyIDDefaultDelivery]
					,Src.[CompanyIDDefaultPickUp]
					,Src.[CompanyIDDefaultReturn]
					,Src.[CompanyIDParent]
					,Src.[IncoTermCode]
					,Src.[CompanyShortName]
					,Src.[CompanyActivationDateETAOffSet]
					,Src.[CompanyActivationDateETDOffSet]
					,Src.[CompanyUserDefined07]
					,Src.[CompanyUserDefined08]
					,Src.[CompanyUserDefined09]
					,Src.[CompanyUserDefined10]
					,Src.[CompanyTransit]
					,Src.[CountryCodeControl]
					,Src.[LanguageCode]
					,Src.[CompanyIDDefaultMandatoryCarrier]
					,Src.[CompanyAllowDirectFTL]
					,Src.[CompanyBookingWindowEndTime]
					,Src.[CompanyBookingWindowStartTime]
					,Src.[CompanyDepartment]
					,Src.[CompanyFinanceID]
					,Src.[CompanyLeadTime]
					,Src.[CompanyMaximumPalletHeight]
					,Src.[CompanyMaximumTransportWeight]
					,Src.[CompanyName2]
					,Src.[CompanySingleProductPerPallet]
					,Src.[CompanyUserDefinedYesNo01]
					,Src.[CompanyUserDefinedYesNo02]
					,Src.[CompanyUserDefinedYesNo03]
					,Src.[CompanyUserDefinedYesNo04]
					,Src.[CompanyUserDefinedYesNo05]
					,Src.[CompanyUserDefinedDateTime01]
					,Src.[CompanyUserDefinedDateTime02]
					,Src.[CompanyUserDefinedDateTime03]
					,Src.[CompanyUserDefinedDateTime04]
					,Src.[CompanyUserDefinedDateTime05]
					,Src.[CurrencyCodeDefault]
				FROM [dbo].Companies Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Companies Dest WITH (NOLOCK) ON Src.IDCompany = Dest.IDCompany
				WHERE Dest.IDCompany IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Companies: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Companies` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Receipts
	SET @CurrentTableName = 'Receipts';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		SET @ReceiptTypesForArchival = '1, 5';
		--ReceiptStatuses
		--ReceiptsAfterProductOrderArchiveAfterDays
		--a)	Receipt Archive Days
		--b)	Receipt Statuses
		--c)	Receipt Types
		--d)	Companies
		--e)	Archive Receipts After Product Order Days 
		SET @ReceiptTypesForArchival = ISNULL((
					SELECT FieldValue
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'ReceiptTypesForArchival'
					), '1, 5');
		SET @ReceiptStatusesForArchival = ISNULL((
					SELECT FieldValue
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'ReceiptStatusesForArchival'
					), '11, 15, 20');
		SET @ReceiptArchiveAfterDays = ISNULL((
					SELECT FieldValue
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'ReceiptsArchiveAfterDays'
					), 365);
		SET @MaxDateToArchiveData = DATEADD(DAY, @ReceiptArchiveAfterDays * - 1, GETUTCDATE());
		SET @ReceiptsAfterProductOrderArchiveAfterDays = ISNULL((
					SELECT FieldValue
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'ReceiptsAfterProductOrderArchiveAfterDays'
					), 60);

		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts AS Dest
			USING (
				SELECT DISTINCT [IDReceipt]
					,[ReceiptExternalReceiptID]
					,[ReceiptReceiptGroup]
					,[CompanyIDStorer]
					,[ReceiptReceiptDateTime]
					,[ReceiptPurchaseOrderCode]
					,[CompanyIDCarrier]
					,[ReceiptCarrierName]
					,[ReceiptCarrierAddress1]
					,[ReceiptCarrierAddress2]
					,[ReceiptCarrierCity]
					,[ReceiptCarrierState]
					,[ReceiptCarrierZipCode]
					,[ReceiptCarrierReference]
					,[ReceiptWarehouseReference]
					,[ReceiptOriginCountry]
					,[ReceiptDestinationCountry]
					,[ReceiptVehicleNumber]
					,[ReceiptVehicleDateTime]
					,[ReceiptPlaceOfLoading]
					,[ReceiptPlaceOfDischarge]
					,[ReceiptPlaceOfDelivery]
					,[ReceiptIncoTerms]
					,[ReceiptTermsNote]
					,[ReceiptContainerCode]
					,[ReceiptSignatory]
					,[ReceiptPlaceOfIssue]
					,[ReceiptOpenQuantity]
					,[ReceiptForteFlag]
					,[ReceiptStatusID]
					,[ReceiptEffectiveDateTime]
					,[ReceiptContainerType]
					,[ReceiptContainerQuantity]
					,[ReceiptBilledContainerQuantity]
					,[ReceiptTransportationMode]
					,[ReceiptExternalReceiptCode2]
					,[ReceiptUserDefined01]
					,[ReceiptUserDefined02]
					,[ReceiptUserDefined03]
					,[ReceiptUserDefined04]
					,[ReceiptUserDefined05]
					,[ReceiptTypeID]
					,[ReceiptRMA]
					,[ReceiptExpectedReceiptDateTime]
					,[ReceiptAllowedAutoReceipt]
					,[ReceiptClosedDateTime]
					,[ReceiptTrackInventoryBy]
					,[ReceiptCarrierCountry]
					,[ReceiptCarrierPhone]
					,[ReceiptDriverName]
					,[ReceiptTrailerNumber]
					,[ReceiptTrailerOwner]
					,[ReceiptArrivalDateTime]
					,[ReceiptLotMatchRequired]
					,[ReceiptAddDateTime]
					,[ReceiptAddUserCode]
					,[ReceiptEditDateTime]
					,[ReceiptEditUserCode]
					,CAST([ReceiptNotes] AS VARCHAR(MAX)) AS [ReceiptNotes]
					,[ReceiptRealClosedDateTime]
					,[ReceiptStartReceivingDateTime]
					,[ReceiptUserDefined06]
					,[ReceiptUserDefined07]
					,[ReceiptUserDefined08]
					,[ReceiptUserDefined09]
					,[ReceiptUserDefined10]
					,[CompanyIDUnloading]
					,[ReceiptDestination]
					,[ReceiptDestinationDescription]
					,[ReceiptReference]
					,[ReceiptOrigin]
					,[ReceiptTag01]
					,[ReceiptTransportCompany]
					,[ReceiptOrderDeliveryDateTime]
					,[ReceiptBundleID]
					,[ReceiptUserDefinedDateTime01]
					,[ReceiptUserDefinedDateTime02]
					,[ReceiptUserDefinedDateTime03]
					,[ReceiptUserDefinedDateTime04]
					,[ReceiptUserDefinedDateTime05]
					,[ReceiptUserDefinedYesNo01]
					,[ReceiptUserDefinedYesNo02]
					,[ReceiptUserDefinedYesNo03]
					,[ReceiptUserDefinedYesNo04]
					,[ReceiptUserDefinedYesNo05]
					,[ReceiptWaveCode]
					,[CustomsTypeCode]
					,[ReceiptCustomsNumber]
					,[ReceiptCustomsOK]
					,[ReceiptLastChequeNumber]
					,[ReceiptUserDefinedYesNo06]
					,[ReceiptUserDefinedYesNo07]
					,[ReceiptUserDefinedYesNo08]
					,[ReceiptUserDefinedYesNo09]
					,[ReceiptUserDefinedYesNo10]
					,CAST([ReceiptInternalNotes] AS NVARCHAR(MAX)) AS [ReceiptInternalNotes]
					,CAST([ReceiptWarehousingNotes] AS NVARCHAR(MAX)) AS [ReceiptWarehousingNotes]
					,[ReceiptFirstScanDateTime]
					,[ReceiptLastStatusChangeDateTime]
					,[CompanyIDWarehouse]
					,[ReceiptDelayInbound]
					,CAST([ReceiptCustomerNotes] AS NVARCHAR(MAX)) AS [ReceiptCustomerNotes]
					,[ReceiptSequenceNumber]
					,[ReceiptReadyForArchiving]
					,[ReceiptCarrierRouteStatus]
					,[ReceiptConsigneeKey]
					,[ReceiptExternalUserDefinedDateTime01]
					,[ReceiptExternalUserDefinedDateTime02]
					,[ReceiptExternalUserDefinedDateTime03]
					,[ReceiptExternalUserDefinedDateTime04]
					,[ReceiptExternalUserDefinedDateTime05]
					,[ReceiptExternalUserDefinedFloat01]
					,[ReceiptExternalUserDefinedFloat02]
					,[ReceiptExternalUserDefinedFloat03]
					,[ReceiptExternalUserDefinedFloat04]
					,[ReceiptExternalUserDefinedFloat05]
					,[ReceiptExternalUserDefinedLookup01]
					,[ReceiptExternalUserDefinedLookup02]
					,[ReceiptExternalUserDefinedLookup03]
					,[ReceiptExternalUserDefinedLookup04]
					,[ReceiptExternalUserDefinedLookup05]
					,[ReceiptExternalUserDefinedLookup06]
					,[ReceiptExternalUserDefinedLookup07]
					,[ReceiptExternalUserDefinedLookup08]
					,[ReceiptExternalUserDefinedLookup09]
					,[ReceiptExternalUserDefinedLookup10]
					,[ReceiptExternalUserDefinedString01]
					,[ReceiptExternalUserDefinedString02]
					,[ReceiptExternalUserDefinedString03]
					,[ReceiptExternalUserDefinedString04]
					,[ReceiptExternalUserDefinedString05]
					,[ReceiptExternalUserDefinedString06]
					,[ReceiptExternalUserDefinedString07]
					,[ReceiptExternalUserDefinedString08]
					,[ReceiptExternalUserDefinedString09]
					,[ReceiptExternalUserDefinedString10]
					,[ReceiptExternalUserDefinedString11]
					,[ReceiptExternalUserDefinedString12]
					,[ReceiptExternalUserDefinedString13]
					,[ReceiptExternalUserDefinedString14]
					,[ReceiptExternalUserDefinedString15]
					,[ReceiptFreightChargeAmount]
					,[ReceiptFreightChargeBaseAmount]
					,[ReceiptFreightCostAmount]
					,[ReceiptFreightCostBaseAmount]
					,[ReceiptProductionStatus]
					,[ReceiptProNumber]
					,[ReceiptReturnLots]
					,[ReceiptTmFreightChargeCurrency]
					,[ReceiptTmFreightCostCurrency]
					,[ReceiptTransportationService]
					,[ReceiptUseRainbow]
				FROM dbo.Receipts WITH (NOLOCK)
				WHERE
					--[ReceiptReadyForArchiving] = 1
					--AND 
					[ReceiptTypeID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@ReceiptTypesForArchival, ',')
						)
					AND [ReceiptStatusID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@ReceiptStatusesForArchival, ',')
						)
					AND CAST([ReceiptEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					--@ReceiptsAfterProductOrderArchiveAfterDays
				) AS Src
				ON (Dest.[IDReceipt] = Src.[IDReceipt])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ReceiptExternalReceiptID] = Src.[ReceiptExternalReceiptID]
						,Dest.[ReceiptReceiptGroup] = Src.[ReceiptReceiptGroup]
						,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[ReceiptReceiptDateTime] = Src.[ReceiptReceiptDateTime]
						,Dest.[ReceiptPurchaseOrderCode] = Src.[ReceiptPurchaseOrderCode]
						,Dest.[CompanyIDCarrier] = Src.[CompanyIDCarrier]
						,Dest.[ReceiptCarrierName] = Src.[ReceiptCarrierName]
						,Dest.[ReceiptCarrierAddress1] = Src.[ReceiptCarrierAddress1]
						,Dest.[ReceiptCarrierAddress2] = Src.[ReceiptCarrierAddress2]
						,Dest.[ReceiptCarrierCity] = Src.[ReceiptCarrierCity]
						,Dest.[ReceiptCarrierState] = Src.[ReceiptCarrierState]
						,Dest.[ReceiptCarrierZipCode] = Src.[ReceiptCarrierZipCode]
						,Dest.[ReceiptCarrierReference] = Src.[ReceiptCarrierReference]
						,Dest.[ReceiptWarehouseReference] = Src.[ReceiptWarehouseReference]
						,Dest.[ReceiptOriginCountry] = Src.[ReceiptOriginCountry]
						,Dest.[ReceiptDestinationCountry] = Src.[ReceiptDestinationCountry]
						,Dest.[ReceiptVehicleNumber] = Src.[ReceiptVehicleNumber]
						,Dest.[ReceiptVehicleDateTime] = Src.[ReceiptVehicleDateTime]
						,Dest.[ReceiptPlaceOfLoading] = Src.[ReceiptPlaceOfLoading]
						,Dest.[ReceiptPlaceOfDischarge] = Src.[ReceiptPlaceOfDischarge]
						,Dest.[ReceiptPlaceOfDelivery] = Src.[ReceiptPlaceOfDelivery]
						,Dest.[ReceiptIncoTerms] = Src.[ReceiptIncoTerms]
						,Dest.[ReceiptTermsNote] = Src.[ReceiptTermsNote]
						,Dest.[ReceiptContainerCode] = Src.[ReceiptContainerCode]
						,Dest.[ReceiptSignatory] = Src.[ReceiptSignatory]
						,Dest.[ReceiptPlaceOfIssue] = Src.[ReceiptPlaceOfIssue]
						,Dest.[ReceiptOpenQuantity] = Src.[ReceiptOpenQuantity]
						,Dest.[ReceiptForteFlag] = Src.[ReceiptForteFlag]
						,Dest.[ReceiptStatusID] = Src.[ReceiptStatusID]
						,Dest.[ReceiptEffectiveDateTime] = Src.[ReceiptEffectiveDateTime]
						,Dest.[ReceiptContainerType] = Src.[ReceiptContainerType]
						,Dest.[ReceiptContainerQuantity] = Src.[ReceiptContainerQuantity]
						,Dest.[ReceiptBilledContainerQuantity] = Src.[ReceiptBilledContainerQuantity]
						,Dest.[ReceiptTransportationMode] = Src.[ReceiptTransportationMode]
						,Dest.[ReceiptExternalReceiptCode2] = Src.[ReceiptExternalReceiptCode2]
						,Dest.[ReceiptUserDefined01] = Src.[ReceiptUserDefined01]
						,Dest.[ReceiptUserDefined02] = Src.[ReceiptUserDefined02]
						,Dest.[ReceiptUserDefined03] = Src.[ReceiptUserDefined03]
						,Dest.[ReceiptUserDefined04] = Src.[ReceiptUserDefined04]
						,Dest.[ReceiptUserDefined05] = Src.[ReceiptUserDefined05]
						,Dest.[ReceiptTypeID] = Src.[ReceiptTypeID]
						,Dest.[ReceiptRMA] = Src.[ReceiptRMA]
						,Dest.[ReceiptExpectedReceiptDateTime] = Src.[ReceiptExpectedReceiptDateTime]
						,Dest.[ReceiptAllowedAutoReceipt] = Src.[ReceiptAllowedAutoReceipt]
						,Dest.[ReceiptClosedDateTime] = Src.[ReceiptClosedDateTime]
						,Dest.[ReceiptTrackInventoryBy] = Src.[ReceiptTrackInventoryBy]
						,Dest.[ReceiptCarrierCountry] = Src.[ReceiptCarrierCountry]
						,Dest.[ReceiptCarrierPhone] = Src.[ReceiptCarrierPhone]
						,Dest.[ReceiptDriverName] = Src.[ReceiptDriverName]
						,Dest.[ReceiptTrailerNumber] = Src.[ReceiptTrailerNumber]
						,Dest.[ReceiptTrailerOwner] = Src.[ReceiptTrailerOwner]
						,Dest.[ReceiptArrivalDateTime] = Src.[ReceiptArrivalDateTime]
						,Dest.[ReceiptLotMatchRequired] = Src.[ReceiptLotMatchRequired]
						,Dest.[ReceiptAddDateTime] = Src.[ReceiptAddDateTime]
						,Dest.[ReceiptAddUserCode] = Src.[ReceiptAddUserCode]
						,Dest.[ReceiptEditDateTime] = Src.[ReceiptEditDateTime]
						,Dest.[ReceiptEditUserCode] = Src.[ReceiptEditUserCode]
						,Dest.[ReceiptNotes] = Src.[ReceiptNotes]
						,Dest.[ReceiptRealClosedDateTime] = Src.[ReceiptRealClosedDateTime]
						,Dest.[ReceiptStartReceivingDateTime] = Src.[ReceiptStartReceivingDateTime]
						,Dest.[ReceiptUserDefined06] = Src.[ReceiptUserDefined06]
						,Dest.[ReceiptUserDefined07] = Src.[ReceiptUserDefined07]
						,Dest.[ReceiptUserDefined08] = Src.[ReceiptUserDefined08]
						,Dest.[ReceiptUserDefined09] = Src.[ReceiptUserDefined09]
						,Dest.[ReceiptUserDefined10] = Src.[ReceiptUserDefined10]
						,Dest.[CompanyIDUnloading] = Src.[CompanyIDUnloading]
						,Dest.[ReceiptDestination] = Src.[ReceiptDestination]
						,Dest.[ReceiptDestinationDescription] = Src.[ReceiptDestinationDescription]
						,Dest.[ReceiptReference] = Src.[ReceiptReference]
						,Dest.[ReceiptOrigin] = Src.[ReceiptOrigin]
						,Dest.[ReceiptTag01] = Src.[ReceiptTag01]
						,Dest.[ReceiptTransportCompany] = Src.[ReceiptTransportCompany]
						,Dest.[ReceiptOrderDeliveryDateTime] = Src.[ReceiptOrderDeliveryDateTime]
						,Dest.[ReceiptBundleID] = Src.[ReceiptBundleID]
						,Dest.[ReceiptUserDefinedDateTime01] = Src.[ReceiptUserDefinedDateTime01]
						,Dest.[ReceiptUserDefinedDateTime02] = Src.[ReceiptUserDefinedDateTime02]
						,Dest.[ReceiptUserDefinedDateTime03] = Src.[ReceiptUserDefinedDateTime03]
						,Dest.[ReceiptUserDefinedDateTime04] = Src.[ReceiptUserDefinedDateTime04]
						,Dest.[ReceiptUserDefinedDateTime05] = Src.[ReceiptUserDefinedDateTime05]
						,Dest.[ReceiptUserDefinedYesNo01] = Src.[ReceiptUserDefinedYesNo01]
						,Dest.[ReceiptUserDefinedYesNo02] = Src.[ReceiptUserDefinedYesNo02]
						,Dest.[ReceiptUserDefinedYesNo03] = Src.[ReceiptUserDefinedYesNo03]
						,Dest.[ReceiptUserDefinedYesNo04] = Src.[ReceiptUserDefinedYesNo04]
						,Dest.[ReceiptUserDefinedYesNo05] = Src.[ReceiptUserDefinedYesNo05]
						,Dest.[ReceiptWaveCode] = Src.[ReceiptWaveCode]
						,Dest.[CustomsTypeCode] = Src.[CustomsTypeCode]
						,Dest.[ReceiptCustomsNumber] = Src.[ReceiptCustomsNumber]
						,Dest.[ReceiptCustomsOK] = Src.[ReceiptCustomsOK]
						,Dest.[ReceiptLastChequeNumber] = Src.[ReceiptLastChequeNumber]
						,Dest.[ReceiptUserDefinedYesNo06] = Src.[ReceiptUserDefinedYesNo06]
						,Dest.[ReceiptUserDefinedYesNo07] = Src.[ReceiptUserDefinedYesNo07]
						,Dest.[ReceiptUserDefinedYesNo08] = Src.[ReceiptUserDefinedYesNo08]
						,Dest.[ReceiptUserDefinedYesNo09] = Src.[ReceiptUserDefinedYesNo09]
						,Dest.[ReceiptUserDefinedYesNo10] = Src.[ReceiptUserDefinedYesNo10]
						,Dest.[ReceiptInternalNotes] = Src.[ReceiptInternalNotes]
						,Dest.[ReceiptWarehousingNotes] = Src.[ReceiptWarehousingNotes]
						,Dest.[ReceiptFirstScanDateTime] = Src.[ReceiptFirstScanDateTime]
						,Dest.[ReceiptLastStatusChangeDateTime] = Src.[ReceiptLastStatusChangeDateTime]
						,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
						,Dest.[ReceiptDelayInbound] = Src.[ReceiptDelayInbound]
						,Dest.[ReceiptCustomerNotes] = Src.[ReceiptCustomerNotes]
						,Dest.[ReceiptSequenceNumber] = Src.[ReceiptSequenceNumber]
						,Dest.[ReceiptReadyForArchiving] = Src.[ReceiptReadyForArchiving]
						,Dest.[ReceiptCarrierRouteStatus] = Src.[ReceiptCarrierRouteStatus]
						,Dest.[ReceiptConsigneeKey] = Src.[ReceiptConsigneeKey]
						,Dest.[ReceiptExternalUserDefinedDateTime01] = Src.[ReceiptExternalUserDefinedDateTime01]
						,Dest.[ReceiptExternalUserDefinedDateTime02] = Src.[ReceiptExternalUserDefinedDateTime02]
						,Dest.[ReceiptExternalUserDefinedDateTime03] = Src.[ReceiptExternalUserDefinedDateTime03]
						,Dest.[ReceiptExternalUserDefinedDateTime04] = Src.[ReceiptExternalUserDefinedDateTime04]
						,Dest.[ReceiptExternalUserDefinedDateTime05] = Src.[ReceiptExternalUserDefinedDateTime05]
						,Dest.[ReceiptExternalUserDefinedFloat01] = Src.[ReceiptExternalUserDefinedFloat01]
						,Dest.[ReceiptExternalUserDefinedFloat02] = Src.[ReceiptExternalUserDefinedFloat02]
						,Dest.[ReceiptExternalUserDefinedFloat03] = Src.[ReceiptExternalUserDefinedFloat03]
						,Dest.[ReceiptExternalUserDefinedFloat04] = Src.[ReceiptExternalUserDefinedFloat04]
						,Dest.[ReceiptExternalUserDefinedFloat05] = Src.[ReceiptExternalUserDefinedFloat05]
						,Dest.[ReceiptExternalUserDefinedLookup01] = Src.[ReceiptExternalUserDefinedLookup01]
						,Dest.[ReceiptExternalUserDefinedLookup02] = Src.[ReceiptExternalUserDefinedLookup02]
						,Dest.[ReceiptExternalUserDefinedLookup03] = Src.[ReceiptExternalUserDefinedLookup03]
						,Dest.[ReceiptExternalUserDefinedLookup04] = Src.[ReceiptExternalUserDefinedLookup04]
						,Dest.[ReceiptExternalUserDefinedLookup05] = Src.[ReceiptExternalUserDefinedLookup05]
						,Dest.[ReceiptExternalUserDefinedLookup06] = Src.[ReceiptExternalUserDefinedLookup06]
						,Dest.[ReceiptExternalUserDefinedLookup07] = Src.[ReceiptExternalUserDefinedLookup07]
						,Dest.[ReceiptExternalUserDefinedLookup08] = Src.[ReceiptExternalUserDefinedLookup08]
						,Dest.[ReceiptExternalUserDefinedLookup09] = Src.[ReceiptExternalUserDefinedLookup09]
						,Dest.[ReceiptExternalUserDefinedLookup10] = Src.[ReceiptExternalUserDefinedLookup10]
						,Dest.[ReceiptExternalUserDefinedString01] = Src.[ReceiptExternalUserDefinedString01]
						,Dest.[ReceiptExternalUserDefinedString02] = Src.[ReceiptExternalUserDefinedString02]
						,Dest.[ReceiptExternalUserDefinedString03] = Src.[ReceiptExternalUserDefinedString03]
						,Dest.[ReceiptExternalUserDefinedString04] = Src.[ReceiptExternalUserDefinedString04]
						,Dest.[ReceiptExternalUserDefinedString05] = Src.[ReceiptExternalUserDefinedString05]
						,Dest.[ReceiptExternalUserDefinedString06] = Src.[ReceiptExternalUserDefinedString06]
						,Dest.[ReceiptExternalUserDefinedString07] = Src.[ReceiptExternalUserDefinedString07]
						,Dest.[ReceiptExternalUserDefinedString08] = Src.[ReceiptExternalUserDefinedString08]
						,Dest.[ReceiptExternalUserDefinedString09] = Src.[ReceiptExternalUserDefinedString09]
						,Dest.[ReceiptExternalUserDefinedString10] = Src.[ReceiptExternalUserDefinedString10]
						,Dest.[ReceiptExternalUserDefinedString11] = Src.[ReceiptExternalUserDefinedString11]
						,Dest.[ReceiptExternalUserDefinedString12] = Src.[ReceiptExternalUserDefinedString12]
						,Dest.[ReceiptExternalUserDefinedString13] = Src.[ReceiptExternalUserDefinedString13]
						,Dest.[ReceiptExternalUserDefinedString14] = Src.[ReceiptExternalUserDefinedString14]
						,Dest.[ReceiptExternalUserDefinedString15] = Src.[ReceiptExternalUserDefinedString15]
						,Dest.[ReceiptFreightChargeAmount] = Src.[ReceiptFreightChargeAmount]
						,Dest.[ReceiptFreightChargeBaseAmount] = Src.[ReceiptFreightChargeBaseAmount]
						,Dest.[ReceiptFreightCostAmount] = Src.[ReceiptFreightCostAmount]
						,Dest.[ReceiptFreightCostBaseAmount] = Src.[ReceiptFreightCostBaseAmount]
						,Dest.[ReceiptProductionStatus] = Src.[ReceiptProductionStatus]
						,Dest.[ReceiptProNumber] = Src.[ReceiptProNumber]
						,Dest.[ReceiptReturnLots] = Src.[ReceiptReturnLots]
						,Dest.[ReceiptTmFreightChargeCurrency] = Src.[ReceiptTmFreightChargeCurrency]
						,Dest.[ReceiptTmFreightCostCurrency] = Src.[ReceiptTmFreightCostCurrency]
						,Dest.[ReceiptTransportationService] = Src.[ReceiptTransportationService]
						,Dest.[ReceiptUseRainbow] = Src.[ReceiptUseRainbow]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDReceipt]
						,[ReceiptExternalReceiptID]
						,[ReceiptReceiptGroup]
						,[CompanyIDStorer]
						,[ReceiptReceiptDateTime]
						,[ReceiptPurchaseOrderCode]
						,[CompanyIDCarrier]
						,[ReceiptCarrierName]
						,[ReceiptCarrierAddress1]
						,[ReceiptCarrierAddress2]
						,[ReceiptCarrierCity]
						,[ReceiptCarrierState]
						,[ReceiptCarrierZipCode]
						,[ReceiptCarrierReference]
						,[ReceiptWarehouseReference]
						,[ReceiptOriginCountry]
						,[ReceiptDestinationCountry]
						,[ReceiptVehicleNumber]
						,[ReceiptVehicleDateTime]
						,[ReceiptPlaceOfLoading]
						,[ReceiptPlaceOfDischarge]
						,[ReceiptPlaceOfDelivery]
						,[ReceiptIncoTerms]
						,[ReceiptTermsNote]
						,[ReceiptContainerCode]
						,[ReceiptSignatory]
						,[ReceiptPlaceOfIssue]
						,[ReceiptOpenQuantity]
						,[ReceiptForteFlag]
						,[ReceiptStatusID]
						,[ReceiptEffectiveDateTime]
						,[ReceiptContainerType]
						,[ReceiptContainerQuantity]
						,[ReceiptBilledContainerQuantity]
						,[ReceiptTransportationMode]
						,[ReceiptExternalReceiptCode2]
						,[ReceiptUserDefined01]
						,[ReceiptUserDefined02]
						,[ReceiptUserDefined03]
						,[ReceiptUserDefined04]
						,[ReceiptUserDefined05]
						,[ReceiptTypeID]
						,[ReceiptRMA]
						,[ReceiptExpectedReceiptDateTime]
						,[ReceiptAllowedAutoReceipt]
						,[ReceiptClosedDateTime]
						,[ReceiptTrackInventoryBy]
						,[ReceiptCarrierCountry]
						,[ReceiptCarrierPhone]
						,[ReceiptDriverName]
						,[ReceiptTrailerNumber]
						,[ReceiptTrailerOwner]
						,[ReceiptArrivalDateTime]
						,[ReceiptLotMatchRequired]
						,[ReceiptAddDateTime]
						,[ReceiptAddUserCode]
						,[ReceiptEditDateTime]
						,[ReceiptEditUserCode]
						,[ReceiptNotes]
						,[ReceiptRealClosedDateTime]
						,[ReceiptStartReceivingDateTime]
						,[ReceiptUserDefined06]
						,[ReceiptUserDefined07]
						,[ReceiptUserDefined08]
						,[ReceiptUserDefined09]
						,[ReceiptUserDefined10]
						,[CompanyIDUnloading]
						,[ReceiptDestination]
						,[ReceiptDestinationDescription]
						,[ReceiptReference]
						,[ReceiptOrigin]
						,[ReceiptTag01]
						,[ReceiptTransportCompany]
						,[ReceiptOrderDeliveryDateTime]
						,[ReceiptBundleID]
						,[ReceiptUserDefinedDateTime01]
						,[ReceiptUserDefinedDateTime02]
						,[ReceiptUserDefinedDateTime03]
						,[ReceiptUserDefinedDateTime04]
						,[ReceiptUserDefinedDateTime05]
						,[ReceiptUserDefinedYesNo01]
						,[ReceiptUserDefinedYesNo02]
						,[ReceiptUserDefinedYesNo03]
						,[ReceiptUserDefinedYesNo04]
						,[ReceiptUserDefinedYesNo05]
						,[ReceiptWaveCode]
						,[CustomsTypeCode]
						,[ReceiptCustomsNumber]
						,[ReceiptCustomsOK]
						,[ReceiptLastChequeNumber]
						,[ReceiptUserDefinedYesNo06]
						,[ReceiptUserDefinedYesNo07]
						,[ReceiptUserDefinedYesNo08]
						,[ReceiptUserDefinedYesNo09]
						,[ReceiptUserDefinedYesNo10]
						,[ReceiptInternalNotes]
						,[ReceiptWarehousingNotes]
						,[ReceiptFirstScanDateTime]
						,[ReceiptLastStatusChangeDateTime]
						,[CompanyIDWarehouse]
						,[ReceiptDelayInbound]
						,[ReceiptCustomerNotes]
						,[ReceiptSequenceNumber]
						,[ReceiptReadyForArchiving]
						--	)
						,[ReceiptCarrierRouteStatus]
						,[ReceiptConsigneeKey]
						,[ReceiptExternalUserDefinedDateTime01]
						,[ReceiptExternalUserDefinedDateTime02]
						,[ReceiptExternalUserDefinedDateTime03]
						,[ReceiptExternalUserDefinedDateTime04]
						,[ReceiptExternalUserDefinedDateTime05]
						,[ReceiptExternalUserDefinedFloat01]
						,[ReceiptExternalUserDefinedFloat02]
						,[ReceiptExternalUserDefinedFloat03]
						,[ReceiptExternalUserDefinedFloat04]
						,[ReceiptExternalUserDefinedFloat05]
						,[ReceiptExternalUserDefinedLookup01]
						,[ReceiptExternalUserDefinedLookup02]
						,[ReceiptExternalUserDefinedLookup03]
						,[ReceiptExternalUserDefinedLookup04]
						,[ReceiptExternalUserDefinedLookup05]
						,[ReceiptExternalUserDefinedLookup06]
						,[ReceiptExternalUserDefinedLookup07]
						,[ReceiptExternalUserDefinedLookup08]
						,[ReceiptExternalUserDefinedLookup09]
						,[ReceiptExternalUserDefinedLookup10]
						,[ReceiptExternalUserDefinedString01]
						,[ReceiptExternalUserDefinedString02]
						,[ReceiptExternalUserDefinedString03]
						,[ReceiptExternalUserDefinedString04]
						,[ReceiptExternalUserDefinedString05]
						,[ReceiptExternalUserDefinedString06]
						,[ReceiptExternalUserDefinedString07]
						,[ReceiptExternalUserDefinedString08]
						,[ReceiptExternalUserDefinedString09]
						,[ReceiptExternalUserDefinedString10]
						,[ReceiptExternalUserDefinedString11]
						,[ReceiptExternalUserDefinedString12]
						,[ReceiptExternalUserDefinedString13]
						,[ReceiptExternalUserDefinedString14]
						,[ReceiptExternalUserDefinedString15]
						,[ReceiptFreightChargeAmount]
						,[ReceiptFreightChargeBaseAmount]
						,[ReceiptFreightCostAmount]
						,[ReceiptFreightCostBaseAmount]
						,[ReceiptProductionStatus]
						,[ReceiptProNumber]
						,[ReceiptReturnLots]
						,[ReceiptTmFreightChargeCurrency]
						,[ReceiptTmFreightCostCurrency]
						,[ReceiptTransportationService]
						,[ReceiptUseRainbow]
						)
					VALUES (
						Src.[IDReceipt]
						,Src.[ReceiptExternalReceiptID]
						,Src.[ReceiptReceiptGroup]
						,Src.[CompanyIDStorer]
						,Src.[ReceiptReceiptDateTime]
						,Src.[ReceiptPurchaseOrderCode]
						,Src.[CompanyIDCarrier]
						,Src.[ReceiptCarrierName]
						,Src.[ReceiptCarrierAddress1]
						,Src.[ReceiptCarrierAddress2]
						,Src.[ReceiptCarrierCity]
						,Src.[ReceiptCarrierState]
						,Src.[ReceiptCarrierZipCode]
						,Src.[ReceiptCarrierReference]
						,Src.[ReceiptWarehouseReference]
						,Src.[ReceiptOriginCountry]
						,Src.[ReceiptDestinationCountry]
						,Src.[ReceiptVehicleNumber]
						,Src.[ReceiptVehicleDateTime]
						,Src.[ReceiptPlaceOfLoading]
						,Src.[ReceiptPlaceOfDischarge]
						,Src.[ReceiptPlaceOfDelivery]
						,Src.[ReceiptIncoTerms]
						,Src.[ReceiptTermsNote]
						,Src.[ReceiptContainerCode]
						,Src.[ReceiptSignatory]
						,Src.[ReceiptPlaceOfIssue]
						,Src.[ReceiptOpenQuantity]
						,Src.[ReceiptForteFlag]
						,Src.[ReceiptStatusID]
						,Src.[ReceiptEffectiveDateTime]
						,Src.[ReceiptContainerType]
						,Src.[ReceiptContainerQuantity]
						,Src.[ReceiptBilledContainerQuantity]
						,Src.[ReceiptTransportationMode]
						,Src.[ReceiptExternalReceiptCode2]
						,Src.[ReceiptUserDefined01]
						,Src.[ReceiptUserDefined02]
						,Src.[ReceiptUserDefined03]
						,Src.[ReceiptUserDefined04]
						,Src.[ReceiptUserDefined05]
						,Src.[ReceiptTypeID]
						,Src.[ReceiptRMA]
						,Src.[ReceiptExpectedReceiptDateTime]
						,Src.[ReceiptAllowedAutoReceipt]
						,Src.[ReceiptClosedDateTime]
						,Src.[ReceiptTrackInventoryBy]
						,Src.[ReceiptCarrierCountry]
						,Src.[ReceiptCarrierPhone]
						,Src.[ReceiptDriverName]
						,Src.[ReceiptTrailerNumber]
						,Src.[ReceiptTrailerOwner]
						,Src.[ReceiptArrivalDateTime]
						,Src.[ReceiptLotMatchRequired]
						,Src.[ReceiptAddDateTime]
						,Src.[ReceiptAddUserCode]
						,Src.[ReceiptEditDateTime]
						,Src.[ReceiptEditUserCode]
						,Src.[ReceiptNotes]
						,Src.[ReceiptRealClosedDateTime]
						,Src.[ReceiptStartReceivingDateTime]
						,Src.[ReceiptUserDefined06]
						,Src.[ReceiptUserDefined07]
						,Src.[ReceiptUserDefined08]
						,Src.[ReceiptUserDefined09]
						,Src.[ReceiptUserDefined10]
						,Src.[CompanyIDUnloading]
						,Src.[ReceiptDestination]
						,Src.[ReceiptDestinationDescription]
						,Src.[ReceiptReference]
						,Src.[ReceiptOrigin]
						,Src.[ReceiptTag01]
						,Src.[ReceiptTransportCompany]
						,Src.[ReceiptOrderDeliveryDateTime]
						,Src.[ReceiptBundleID]
						,Src.[ReceiptUserDefinedDateTime01]
						,Src.[ReceiptUserDefinedDateTime02]
						,Src.[ReceiptUserDefinedDateTime03]
						,Src.[ReceiptUserDefinedDateTime04]
						,Src.[ReceiptUserDefinedDateTime05]
						,Src.[ReceiptUserDefinedYesNo01]
						,Src.[ReceiptUserDefinedYesNo02]
						,Src.[ReceiptUserDefinedYesNo03]
						,Src.[ReceiptUserDefinedYesNo04]
						,Src.[ReceiptUserDefinedYesNo05]
						,Src.[ReceiptWaveCode]
						,Src.[CustomsTypeCode]
						,Src.[ReceiptCustomsNumber]
						,Src.[ReceiptCustomsOK]
						,Src.[ReceiptLastChequeNumber]
						,Src.[ReceiptUserDefinedYesNo06]
						,Src.[ReceiptUserDefinedYesNo07]
						,Src.[ReceiptUserDefinedYesNo08]
						,Src.[ReceiptUserDefinedYesNo09]
						,Src.[ReceiptUserDefinedYesNo10]
						,Src.[ReceiptInternalNotes]
						,Src.[ReceiptWarehousingNotes]
						,Src.[ReceiptFirstScanDateTime]
						,Src.[ReceiptLastStatusChangeDateTime]
						,Src.[CompanyIDWarehouse]
						,Src.[ReceiptDelayInbound]
						,Src.[ReceiptCustomerNotes]
						,Src.[ReceiptSequenceNumber]
						,Src.[ReceiptReadyForArchiving]
						--)
						,Src.[ReceiptCarrierRouteStatus]
						,Src.[ReceiptConsigneeKey]
						,Src.[ReceiptExternalUserDefinedDateTime01]
						,Src.[ReceiptExternalUserDefinedDateTime02]
						,Src.[ReceiptExternalUserDefinedDateTime03]
						,Src.[ReceiptExternalUserDefinedDateTime04]
						,Src.[ReceiptExternalUserDefinedDateTime05]
						,Src.[ReceiptExternalUserDefinedFloat01]
						,Src.[ReceiptExternalUserDefinedFloat02]
						,Src.[ReceiptExternalUserDefinedFloat03]
						,Src.[ReceiptExternalUserDefinedFloat04]
						,Src.[ReceiptExternalUserDefinedFloat05]
						,Src.[ReceiptExternalUserDefinedLookup01]
						,Src.[ReceiptExternalUserDefinedLookup02]
						,Src.[ReceiptExternalUserDefinedLookup03]
						,Src.[ReceiptExternalUserDefinedLookup04]
						,Src.[ReceiptExternalUserDefinedLookup05]
						,Src.[ReceiptExternalUserDefinedLookup06]
						,Src.[ReceiptExternalUserDefinedLookup07]
						,Src.[ReceiptExternalUserDefinedLookup08]
						,Src.[ReceiptExternalUserDefinedLookup09]
						,Src.[ReceiptExternalUserDefinedLookup10]
						,Src.[ReceiptExternalUserDefinedString01]
						,Src.[ReceiptExternalUserDefinedString02]
						,Src.[ReceiptExternalUserDefinedString03]
						,Src.[ReceiptExternalUserDefinedString04]
						,Src.[ReceiptExternalUserDefinedString05]
						,Src.[ReceiptExternalUserDefinedString06]
						,Src.[ReceiptExternalUserDefinedString07]
						,Src.[ReceiptExternalUserDefinedString08]
						,Src.[ReceiptExternalUserDefinedString09]
						,Src.[ReceiptExternalUserDefinedString10]
						,Src.[ReceiptExternalUserDefinedString11]
						,Src.[ReceiptExternalUserDefinedString12]
						,Src.[ReceiptExternalUserDefinedString13]
						,Src.[ReceiptExternalUserDefinedString14]
						,Src.[ReceiptExternalUserDefinedString15]
						,Src.[ReceiptFreightChargeAmount]
						,Src.[ReceiptFreightChargeBaseAmount]
						,Src.[ReceiptFreightCostAmount]
						,Src.[ReceiptFreightCostBaseAmount]
						,Src.[ReceiptProductionStatus]
						,Src.[ReceiptProNumber]
						,Src.[ReceiptReturnLots]
						,Src.[ReceiptTmFreightChargeCurrency]
						,Src.[ReceiptTmFreightCostCurrency]
						,Src.[ReceiptTransportationService]
						,Src.[ReceiptUseRainbow]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDReceipt] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDReceipt] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
						SELECT 1
						FROM [dbo].Receipts Src WITH (NOLOCK)
						INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts Dest WITH (NOLOCK) ON Src.IDReceipt = Dest.IDReceipt
						WHERE Src.[ReceiptTypeID] IN (
								SELECT LTRIM(RTRIM(Value))
								FROM string_split(@ReceiptTypesForArchival, ',')
								)
							AND Src.[ReceiptStatusID] IN (
								SELECT LTRIM(RTRIM(Value))
								FROM string_split(@ReceiptStatusesForArchival, ',')
								)
							AND CAST(Src.[ReceiptEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
							AND Dest.ReceiptEditDateTime < Src.ReceiptEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ReceiptExternalReceiptID] = Src.[ReceiptExternalReceiptID]
					,Dest.[ReceiptReceiptGroup] = Src.[ReceiptReceiptGroup]
					,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					,Dest.[ReceiptReceiptDateTime] = Src.[ReceiptReceiptDateTime]
					,Dest.[ReceiptPurchaseOrderCode] = Src.[ReceiptPurchaseOrderCode]
					,Dest.[CompanyIDCarrier] = Src.[CompanyIDCarrier]
					,Dest.[ReceiptCarrierName] = Src.[ReceiptCarrierName]
					,Dest.[ReceiptCarrierAddress1] = Src.[ReceiptCarrierAddress1]
					,Dest.[ReceiptCarrierAddress2] = Src.[ReceiptCarrierAddress2]
					,Dest.[ReceiptCarrierCity] = Src.[ReceiptCarrierCity]
					,Dest.[ReceiptCarrierState] = Src.[ReceiptCarrierState]
					,Dest.[ReceiptCarrierZipCode] = Src.[ReceiptCarrierZipCode]
					,Dest.[ReceiptCarrierReference] = Src.[ReceiptCarrierReference]
					,Dest.[ReceiptWarehouseReference] = Src.[ReceiptWarehouseReference]
					,Dest.[ReceiptOriginCountry] = Src.[ReceiptOriginCountry]
					,Dest.[ReceiptDestinationCountry] = Src.[ReceiptDestinationCountry]
					,Dest.[ReceiptVehicleNumber] = Src.[ReceiptVehicleNumber]
					,Dest.[ReceiptVehicleDateTime] = Src.[ReceiptVehicleDateTime]
					,Dest.[ReceiptPlaceOfLoading] = Src.[ReceiptPlaceOfLoading]
					,Dest.[ReceiptPlaceOfDischarge] = Src.[ReceiptPlaceOfDischarge]
					,Dest.[ReceiptPlaceOfDelivery] = Src.[ReceiptPlaceOfDelivery]
					,Dest.[ReceiptIncoTerms] = Src.[ReceiptIncoTerms]
					,Dest.[ReceiptTermsNote] = Src.[ReceiptTermsNote]
					,Dest.[ReceiptContainerCode] = Src.[ReceiptContainerCode]
					,Dest.[ReceiptSignatory] = Src.[ReceiptSignatory]
					,Dest.[ReceiptPlaceOfIssue] = Src.[ReceiptPlaceOfIssue]
					,Dest.[ReceiptOpenQuantity] = Src.[ReceiptOpenQuantity]
					,Dest.[ReceiptForteFlag] = Src.[ReceiptForteFlag]
					,Dest.[ReceiptStatusID] = Src.[ReceiptStatusID]
					,Dest.[ReceiptEffectiveDateTime] = Src.[ReceiptEffectiveDateTime]
					,Dest.[ReceiptContainerType] = Src.[ReceiptContainerType]
					,Dest.[ReceiptContainerQuantity] = Src.[ReceiptContainerQuantity]
					,Dest.[ReceiptBilledContainerQuantity] = Src.[ReceiptBilledContainerQuantity]
					,Dest.[ReceiptTransportationMode] = Src.[ReceiptTransportationMode]
					,Dest.[ReceiptExternalReceiptCode2] = Src.[ReceiptExternalReceiptCode2]
					,Dest.[ReceiptUserDefined01] = Src.[ReceiptUserDefined01]
					,Dest.[ReceiptUserDefined02] = Src.[ReceiptUserDefined02]
					,Dest.[ReceiptUserDefined03] = Src.[ReceiptUserDefined03]
					,Dest.[ReceiptUserDefined04] = Src.[ReceiptUserDefined04]
					,Dest.[ReceiptUserDefined05] = Src.[ReceiptUserDefined05]
					,Dest.[ReceiptTypeID] = Src.[ReceiptTypeID]
					,Dest.[ReceiptRMA] = Src.[ReceiptRMA]
					,Dest.[ReceiptExpectedReceiptDateTime] = Src.[ReceiptExpectedReceiptDateTime]
					,Dest.[ReceiptAllowedAutoReceipt] = Src.[ReceiptAllowedAutoReceipt]
					,Dest.[ReceiptClosedDateTime] = Src.[ReceiptClosedDateTime]
					,Dest.[ReceiptTrackInventoryBy] = Src.[ReceiptTrackInventoryBy]
					,Dest.[ReceiptCarrierCountry] = Src.[ReceiptCarrierCountry]
					,Dest.[ReceiptCarrierPhone] = Src.[ReceiptCarrierPhone]
					,Dest.[ReceiptDriverName] = Src.[ReceiptDriverName]
					,Dest.[ReceiptTrailerNumber] = Src.[ReceiptTrailerNumber]
					,Dest.[ReceiptTrailerOwner] = Src.[ReceiptTrailerOwner]
					,Dest.[ReceiptArrivalDateTime] = Src.[ReceiptArrivalDateTime]
					,Dest.[ReceiptLotMatchRequired] = Src.[ReceiptLotMatchRequired]
					,Dest.[ReceiptAddDateTime] = Src.[ReceiptAddDateTime]
					,Dest.[ReceiptAddUserCode] = Src.[ReceiptAddUserCode]
					,Dest.[ReceiptEditDateTime] = Src.[ReceiptEditDateTime]
					,Dest.[ReceiptEditUserCode] = Src.[ReceiptEditUserCode]
					,Dest.[ReceiptNotes] = Src.[ReceiptNotes]
					,Dest.[ReceiptRealClosedDateTime] = Src.[ReceiptRealClosedDateTime]
					,Dest.[ReceiptStartReceivingDateTime] = Src.[ReceiptStartReceivingDateTime]
					,Dest.[ReceiptUserDefined06] = Src.[ReceiptUserDefined06]
					,Dest.[ReceiptUserDefined07] = Src.[ReceiptUserDefined07]
					,Dest.[ReceiptUserDefined08] = Src.[ReceiptUserDefined08]
					,Dest.[ReceiptUserDefined09] = Src.[ReceiptUserDefined09]
					,Dest.[ReceiptUserDefined10] = Src.[ReceiptUserDefined10]
					,Dest.[CompanyIDUnloading] = Src.[CompanyIDUnloading]
					,Dest.[ReceiptDestination] = Src.[ReceiptDestination]
					,Dest.[ReceiptDestinationDescription] = Src.[ReceiptDestinationDescription]
					,Dest.[ReceiptReference] = Src.[ReceiptReference]
					,Dest.[ReceiptOrigin] = Src.[ReceiptOrigin]
					,Dest.[ReceiptTag01] = Src.[ReceiptTag01]
					,Dest.[ReceiptTransportCompany] = Src.[ReceiptTransportCompany]
					,Dest.[ReceiptOrderDeliveryDateTime] = Src.[ReceiptOrderDeliveryDateTime]
					,Dest.[ReceiptBundleID] = Src.[ReceiptBundleID]
					,Dest.[ReceiptUserDefinedDateTime01] = Src.[ReceiptUserDefinedDateTime01]
					,Dest.[ReceiptUserDefinedDateTime02] = Src.[ReceiptUserDefinedDateTime02]
					,Dest.[ReceiptUserDefinedDateTime03] = Src.[ReceiptUserDefinedDateTime03]
					,Dest.[ReceiptUserDefinedDateTime04] = Src.[ReceiptUserDefinedDateTime04]
					,Dest.[ReceiptUserDefinedDateTime05] = Src.[ReceiptUserDefinedDateTime05]
					,Dest.[ReceiptUserDefinedYesNo01] = Src.[ReceiptUserDefinedYesNo01]
					,Dest.[ReceiptUserDefinedYesNo02] = Src.[ReceiptUserDefinedYesNo02]
					,Dest.[ReceiptUserDefinedYesNo03] = Src.[ReceiptUserDefinedYesNo03]
					,Dest.[ReceiptUserDefinedYesNo04] = Src.[ReceiptUserDefinedYesNo04]
					,Dest.[ReceiptUserDefinedYesNo05] = Src.[ReceiptUserDefinedYesNo05]
					,Dest.[ReceiptWaveCode] = Src.[ReceiptWaveCode]
					,Dest.[CustomsTypeCode] = Src.[CustomsTypeCode]
					,Dest.[ReceiptCustomsNumber] = Src.[ReceiptCustomsNumber]
					,Dest.[ReceiptCustomsOK] = Src.[ReceiptCustomsOK]
					,Dest.[ReceiptLastChequeNumber] = Src.[ReceiptLastChequeNumber]
					,Dest.[ReceiptUserDefinedYesNo06] = Src.[ReceiptUserDefinedYesNo06]
					,Dest.[ReceiptUserDefinedYesNo07] = Src.[ReceiptUserDefinedYesNo07]
					,Dest.[ReceiptUserDefinedYesNo08] = Src.[ReceiptUserDefinedYesNo08]
					,Dest.[ReceiptUserDefinedYesNo09] = Src.[ReceiptUserDefinedYesNo09]
					,Dest.[ReceiptUserDefinedYesNo10] = Src.[ReceiptUserDefinedYesNo10]
					,Dest.[ReceiptInternalNotes] = Src.[ReceiptInternalNotes]
					,Dest.[ReceiptWarehousingNotes] = Src.[ReceiptWarehousingNotes]
					,Dest.[ReceiptFirstScanDateTime] = Src.[ReceiptFirstScanDateTime]
					,Dest.[ReceiptLastStatusChangeDateTime] = Src.[ReceiptLastStatusChangeDateTime]
					,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
					,Dest.[ReceiptDelayInbound] = Src.[ReceiptDelayInbound]
					,Dest.[ReceiptCustomerNotes] = Src.[ReceiptCustomerNotes]
					,Dest.[ReceiptSequenceNumber] = Src.[ReceiptSequenceNumber]
					,Dest.[ReceiptReadyForArchiving] = Src.[ReceiptReadyForArchiving]
					--,Dest.[ReceiptCarrierRouteStatus] = Src.[ReceiptCarrierRouteStatus]
					--,Dest.[ReceiptConsigneeKey] = Src.[ReceiptConsigneeKey]
					,Dest.[ReceiptExternalUserDefinedDateTime01] = Src.[ReceiptExternalUserDefinedDateTime01]
					,Dest.[ReceiptExternalUserDefinedDateTime02] = Src.[ReceiptExternalUserDefinedDateTime02]
					,Dest.[ReceiptExternalUserDefinedDateTime03] = Src.[ReceiptExternalUserDefinedDateTime03]
					,Dest.[ReceiptExternalUserDefinedDateTime04] = Src.[ReceiptExternalUserDefinedDateTime04]
					,Dest.[ReceiptExternalUserDefinedDateTime05] = Src.[ReceiptExternalUserDefinedDateTime05]
					,Dest.[ReceiptExternalUserDefinedFloat01] = Src.[ReceiptExternalUserDefinedFloat01]
					,Dest.[ReceiptExternalUserDefinedFloat02] = Src.[ReceiptExternalUserDefinedFloat02]
					,Dest.[ReceiptExternalUserDefinedFloat03] = Src.[ReceiptExternalUserDefinedFloat03]
					,Dest.[ReceiptExternalUserDefinedFloat04] = Src.[ReceiptExternalUserDefinedFloat04]
					,Dest.[ReceiptExternalUserDefinedFloat05] = Src.[ReceiptExternalUserDefinedFloat05]
					,Dest.[ReceiptExternalUserDefinedLookup01] = Src.[ReceiptExternalUserDefinedLookup01]
					,Dest.[ReceiptExternalUserDefinedLookup02] = Src.[ReceiptExternalUserDefinedLookup02]
					,Dest.[ReceiptExternalUserDefinedLookup03] = Src.[ReceiptExternalUserDefinedLookup03]
					,Dest.[ReceiptExternalUserDefinedLookup04] = Src.[ReceiptExternalUserDefinedLookup04]
					,Dest.[ReceiptExternalUserDefinedLookup05] = Src.[ReceiptExternalUserDefinedLookup05]
					,Dest.[ReceiptExternalUserDefinedLookup06] = Src.[ReceiptExternalUserDefinedLookup06]
					,Dest.[ReceiptExternalUserDefinedLookup07] = Src.[ReceiptExternalUserDefinedLookup07]
					,Dest.[ReceiptExternalUserDefinedLookup08] = Src.[ReceiptExternalUserDefinedLookup08]
					,Dest.[ReceiptExternalUserDefinedLookup09] = Src.[ReceiptExternalUserDefinedLookup09]
					,Dest.[ReceiptExternalUserDefinedLookup10] = Src.[ReceiptExternalUserDefinedLookup10]
					,Dest.[ReceiptExternalUserDefinedString01] = Src.[ReceiptExternalUserDefinedString01]
					,Dest.[ReceiptExternalUserDefinedString02] = Src.[ReceiptExternalUserDefinedString02]
					,Dest.[ReceiptExternalUserDefinedString03] = Src.[ReceiptExternalUserDefinedString03]
					,Dest.[ReceiptExternalUserDefinedString04] = Src.[ReceiptExternalUserDefinedString04]
					,Dest.[ReceiptExternalUserDefinedString05] = Src.[ReceiptExternalUserDefinedString05]
					,Dest.[ReceiptExternalUserDefinedString06] = Src.[ReceiptExternalUserDefinedString06]
					,Dest.[ReceiptExternalUserDefinedString07] = Src.[ReceiptExternalUserDefinedString07]
					,Dest.[ReceiptExternalUserDefinedString08] = Src.[ReceiptExternalUserDefinedString08]
					,Dest.[ReceiptExternalUserDefinedString09] = Src.[ReceiptExternalUserDefinedString09]
					,Dest.[ReceiptExternalUserDefinedString10] = Src.[ReceiptExternalUserDefinedString10]
					,Dest.[ReceiptExternalUserDefinedString11] = Src.[ReceiptExternalUserDefinedString11]
					,Dest.[ReceiptExternalUserDefinedString12] = Src.[ReceiptExternalUserDefinedString12]
					,Dest.[ReceiptExternalUserDefinedString13] = Src.[ReceiptExternalUserDefinedString13]
					,Dest.[ReceiptExternalUserDefinedString14] = Src.[ReceiptExternalUserDefinedString14]
					,Dest.[ReceiptExternalUserDefinedString15] = Src.[ReceiptExternalUserDefinedString15]
					--,Dest.[ReceiptFreightChargeAmount] = Src.[ReceiptFreightChargeAmount]
					--,Dest.[ReceiptFreightChargeBaseAmount] = Src.[ReceiptFreightChargeBaseAmount]
					--,Dest.[ReceiptFreightCostAmount] = Src.[ReceiptFreightCostAmount]
					--,Dest.[ReceiptFreightCostBaseAmount] = Src.[ReceiptFreightCostBaseAmount]
					--,Dest.[ReceiptProductionStatus] = Src.[ReceiptProductionStatus]
					--,Dest.[ReceiptProNumber] = Src.[ReceiptProNumber]
					--,Dest.[ReceiptReturnLots] = Src.[ReceiptReturnLots]
					--,Dest.[ReceiptTmFreightChargeCurrency] = Src.[ReceiptTmFreightChargeCurrency]
					--,Dest.[ReceiptTmFreightCostCurrency] = Src.[ReceiptTmFreightCostCurrency]
					--,Dest.[ReceiptTransportationService] = Src.[ReceiptTransportationService]
					--,Dest.[ReceiptUseRainbow] = Src.[ReceiptUseRainbow]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDReceipt AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDReceipt AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Receipts Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts Dest ON Src.IDReceipt = Dest.IDReceipt
				WHERE
					--[ReceiptReadyForArchiving] = 1
					--AND 
					Src.[ReceiptTypeID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@ReceiptTypesForArchival, ',')
						)
					AND Src.[ReceiptStatusID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@ReceiptStatusesForArchival, ',')
						)
					AND CAST(Src.[ReceiptEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					--@ReceiptsAfterProductOrderArchiveAfterDays
					AND Dest.[ReceiptEditDateTime] < Src.[ReceiptEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Receipts Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts Dest WITH (NOLOCK) ON Src.IDReceipt = Dest.IDReceipt
					WHERE Src.[ReceiptTypeID] IN (
								SELECT LTRIM(RTRIM(Value))
								FROM string_split(@ReceiptTypesForArchival, ',')
								)
							AND Src.[ReceiptStatusID] IN (
								SELECT LTRIM(RTRIM(Value))
								FROM string_split(@ReceiptStatusesForArchival, ',')
								)
							AND CAST(Src.[ReceiptEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
							AND Dest.ReceiptEditDateTime < Src.ReceiptEditDateTime
							AND Dest.IDReceipt IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts (
					[IDReceipt]
					,[ReceiptExternalReceiptID]
					,[ReceiptReceiptGroup]
					,[CompanyIDStorer]
					,[ReceiptReceiptDateTime]
					,[ReceiptPurchaseOrderCode]
					,[CompanyIDCarrier]
					,[ReceiptCarrierName]
					,[ReceiptCarrierAddress1]
					,[ReceiptCarrierAddress2]
					,[ReceiptCarrierCity]
					,[ReceiptCarrierState]
					,[ReceiptCarrierZipCode]
					,[ReceiptCarrierReference]
					,[ReceiptWarehouseReference]
					,[ReceiptOriginCountry]
					,[ReceiptDestinationCountry]
					,[ReceiptVehicleNumber]
					,[ReceiptVehicleDateTime]
					,[ReceiptPlaceOfLoading]
					,[ReceiptPlaceOfDischarge]
					,[ReceiptPlaceOfDelivery]
					,[ReceiptIncoTerms]
					,[ReceiptTermsNote]
					,[ReceiptContainerCode]
					,[ReceiptSignatory]
					,[ReceiptPlaceOfIssue]
					,[ReceiptOpenQuantity]
					,[ReceiptForteFlag]
					,[ReceiptStatusID]
					,[ReceiptEffectiveDateTime]
					,[ReceiptContainerType]
					,[ReceiptContainerQuantity]
					,[ReceiptBilledContainerQuantity]
					,[ReceiptTransportationMode]
					,[ReceiptExternalReceiptCode2]
					,[ReceiptUserDefined01]
					,[ReceiptUserDefined02]
					,[ReceiptUserDefined03]
					,[ReceiptUserDefined04]
					,[ReceiptUserDefined05]
					,[ReceiptTypeID]
					,[ReceiptRMA]
					,[ReceiptExpectedReceiptDateTime]
					,[ReceiptAllowedAutoReceipt]
					,[ReceiptClosedDateTime]
					,[ReceiptTrackInventoryBy]
					,[ReceiptCarrierCountry]
					,[ReceiptCarrierPhone]
					,[ReceiptDriverName]
					,[ReceiptTrailerNumber]
					,[ReceiptTrailerOwner]
					,[ReceiptArrivalDateTime]
					,[ReceiptLotMatchRequired]
					,[ReceiptAddDateTime]
					,[ReceiptAddUserCode]
					,[ReceiptEditDateTime]
					,[ReceiptEditUserCode]
					,[ReceiptNotes]
					,[ReceiptRealClosedDateTime]
					,[ReceiptStartReceivingDateTime]
					,[ReceiptUserDefined06]
					,[ReceiptUserDefined07]
					,[ReceiptUserDefined08]
					,[ReceiptUserDefined09]
					,[ReceiptUserDefined10]
					,[CompanyIDUnloading]
					,[ReceiptDestination]
					,[ReceiptDestinationDescription]
					,[ReceiptReference]
					,[ReceiptOrigin]
					,[ReceiptTag01]
					,[ReceiptTransportCompany]
					,[ReceiptOrderDeliveryDateTime]
					,[ReceiptBundleID]
					,[ReceiptUserDefinedDateTime01]
					,[ReceiptUserDefinedDateTime02]
					,[ReceiptUserDefinedDateTime03]
					,[ReceiptUserDefinedDateTime04]
					,[ReceiptUserDefinedDateTime05]
					,[ReceiptUserDefinedYesNo01]
					,[ReceiptUserDefinedYesNo02]
					,[ReceiptUserDefinedYesNo03]
					,[ReceiptUserDefinedYesNo04]
					,[ReceiptUserDefinedYesNo05]
					,[ReceiptWaveCode]
					,[CustomsTypeCode]
					,[ReceiptCustomsNumber]
					,[ReceiptCustomsOK]
					,[ReceiptLastChequeNumber]
					,[ReceiptUserDefinedYesNo06]
					,[ReceiptUserDefinedYesNo07]
					,[ReceiptUserDefinedYesNo08]
					,[ReceiptUserDefinedYesNo09]
					,[ReceiptUserDefinedYesNo10]
					,[ReceiptInternalNotes]
					,[ReceiptWarehousingNotes]
					,[ReceiptFirstScanDateTime]
					,[ReceiptLastStatusChangeDateTime]
					,[CompanyIDWarehouse]
					,[ReceiptDelayInbound]
					,[ReceiptCustomerNotes]
					,[ReceiptSequenceNumber]
					,[ReceiptReadyForArchiving]
					--	)
					--,[ReceiptCarrierRouteStatus]
					--,[ReceiptConsigneeKey]
					,[ReceiptExternalUserDefinedDateTime01]
					,[ReceiptExternalUserDefinedDateTime02]
					,[ReceiptExternalUserDefinedDateTime03]
					,[ReceiptExternalUserDefinedDateTime04]
					,[ReceiptExternalUserDefinedDateTime05]
					,[ReceiptExternalUserDefinedFloat01]
					,[ReceiptExternalUserDefinedFloat02]
					,[ReceiptExternalUserDefinedFloat03]
					,[ReceiptExternalUserDefinedFloat04]
					,[ReceiptExternalUserDefinedFloat05]
					,[ReceiptExternalUserDefinedLookup01]
					,[ReceiptExternalUserDefinedLookup02]
					,[ReceiptExternalUserDefinedLookup03]
					,[ReceiptExternalUserDefinedLookup04]
					,[ReceiptExternalUserDefinedLookup05]
					,[ReceiptExternalUserDefinedLookup06]
					,[ReceiptExternalUserDefinedLookup07]
					,[ReceiptExternalUserDefinedLookup08]
					,[ReceiptExternalUserDefinedLookup09]
					,[ReceiptExternalUserDefinedLookup10]
					,[ReceiptExternalUserDefinedString01]
					,[ReceiptExternalUserDefinedString02]
					,[ReceiptExternalUserDefinedString03]
					,[ReceiptExternalUserDefinedString04]
					,[ReceiptExternalUserDefinedString05]
					,[ReceiptExternalUserDefinedString06]
					,[ReceiptExternalUserDefinedString07]
					,[ReceiptExternalUserDefinedString08]
					,[ReceiptExternalUserDefinedString09]
					,[ReceiptExternalUserDefinedString10]
					,[ReceiptExternalUserDefinedString11]
					,[ReceiptExternalUserDefinedString12]
					,[ReceiptExternalUserDefinedString13]
					,[ReceiptExternalUserDefinedString14]
					,[ReceiptExternalUserDefinedString15]
					--,[ReceiptFreightChargeAmount]
					--,[ReceiptFreightChargeBaseAmount]
					--,[ReceiptFreightCostAmount]
					--,[ReceiptFreightCostBaseAmount]
					--,[ReceiptProductionStatus]
					--,[ReceiptProNumber]
					--,[ReceiptReturnLots]
					--,[ReceiptTmFreightChargeCurrency]
					--,[ReceiptTmFreightCostCurrency]
					--,[ReceiptTransportationService]
					--,[ReceiptUseRainbow]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDReceipt AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDReceipt]
					,Src.[ReceiptExternalReceiptID]
					,Src.[ReceiptReceiptGroup]
					,Src.[CompanyIDStorer]
					,Src.[ReceiptReceiptDateTime]
					,Src.[ReceiptPurchaseOrderCode]
					,Src.[CompanyIDCarrier]
					,Src.[ReceiptCarrierName]
					,Src.[ReceiptCarrierAddress1]
					,Src.[ReceiptCarrierAddress2]
					,Src.[ReceiptCarrierCity]
					,Src.[ReceiptCarrierState]
					,Src.[ReceiptCarrierZipCode]
					,Src.[ReceiptCarrierReference]
					,Src.[ReceiptWarehouseReference]
					,Src.[ReceiptOriginCountry]
					,Src.[ReceiptDestinationCountry]
					,Src.[ReceiptVehicleNumber]
					,Src.[ReceiptVehicleDateTime]
					,Src.[ReceiptPlaceOfLoading]
					,Src.[ReceiptPlaceOfDischarge]
					,Src.[ReceiptPlaceOfDelivery]
					,Src.[ReceiptIncoTerms]
					,Src.[ReceiptTermsNote]
					,Src.[ReceiptContainerCode]
					,Src.[ReceiptSignatory]
					,Src.[ReceiptPlaceOfIssue]
					,Src.[ReceiptOpenQuantity]
					,Src.[ReceiptForteFlag]
					,Src.[ReceiptStatusID]
					,Src.[ReceiptEffectiveDateTime]
					,Src.[ReceiptContainerType]
					,Src.[ReceiptContainerQuantity]
					,Src.[ReceiptBilledContainerQuantity]
					,Src.[ReceiptTransportationMode]
					,Src.[ReceiptExternalReceiptCode2]
					,Src.[ReceiptUserDefined01]
					,Src.[ReceiptUserDefined02]
					,Src.[ReceiptUserDefined03]
					,Src.[ReceiptUserDefined04]
					,Src.[ReceiptUserDefined05]
					,Src.[ReceiptTypeID]
					,Src.[ReceiptRMA]
					,Src.[ReceiptExpectedReceiptDateTime]
					,Src.[ReceiptAllowedAutoReceipt]
					,Src.[ReceiptClosedDateTime]
					,Src.[ReceiptTrackInventoryBy]
					,Src.[ReceiptCarrierCountry]
					,Src.[ReceiptCarrierPhone]
					,Src.[ReceiptDriverName]
					,Src.[ReceiptTrailerNumber]
					,Src.[ReceiptTrailerOwner]
					,Src.[ReceiptArrivalDateTime]
					,Src.[ReceiptLotMatchRequired]
					,Src.[ReceiptAddDateTime]
					,Src.[ReceiptAddUserCode]
					,Src.[ReceiptEditDateTime]
					,Src.[ReceiptEditUserCode]
					,Src.[ReceiptNotes]
					,Src.[ReceiptRealClosedDateTime]
					,Src.[ReceiptStartReceivingDateTime]
					,Src.[ReceiptUserDefined06]
					,Src.[ReceiptUserDefined07]
					,Src.[ReceiptUserDefined08]
					,Src.[ReceiptUserDefined09]
					,Src.[ReceiptUserDefined10]
					,Src.[CompanyIDUnloading]
					,Src.[ReceiptDestination]
					,Src.[ReceiptDestinationDescription]
					,Src.[ReceiptReference]
					,Src.[ReceiptOrigin]
					,Src.[ReceiptTag01]
					,Src.[ReceiptTransportCompany]
					,Src.[ReceiptOrderDeliveryDateTime]
					,Src.[ReceiptBundleID]
					,Src.[ReceiptUserDefinedDateTime01]
					,Src.[ReceiptUserDefinedDateTime02]
					,Src.[ReceiptUserDefinedDateTime03]
					,Src.[ReceiptUserDefinedDateTime04]
					,Src.[ReceiptUserDefinedDateTime05]
					,Src.[ReceiptUserDefinedYesNo01]
					,Src.[ReceiptUserDefinedYesNo02]
					,Src.[ReceiptUserDefinedYesNo03]
					,Src.[ReceiptUserDefinedYesNo04]
					,Src.[ReceiptUserDefinedYesNo05]
					,Src.[ReceiptWaveCode]
					,Src.[CustomsTypeCode]
					,Src.[ReceiptCustomsNumber]
					,Src.[ReceiptCustomsOK]
					,Src.[ReceiptLastChequeNumber]
					,Src.[ReceiptUserDefinedYesNo06]
					,Src.[ReceiptUserDefinedYesNo07]
					,Src.[ReceiptUserDefinedYesNo08]
					,Src.[ReceiptUserDefinedYesNo09]
					,Src.[ReceiptUserDefinedYesNo10]
					,Src.[ReceiptInternalNotes]
					,Src.[ReceiptWarehousingNotes]
					,Src.[ReceiptFirstScanDateTime]
					,Src.[ReceiptLastStatusChangeDateTime]
					,Src.[CompanyIDWarehouse]
					,Src.[ReceiptDelayInbound]
					,Src.[ReceiptCustomerNotes]
					,Src.[ReceiptSequenceNumber]
					,Src.[ReceiptReadyForArchiving]
					--)
					--,Src.[ReceiptCarrierRouteStatus]
					--,Src.[ReceiptConsigneeKey]
					,Src.[ReceiptExternalUserDefinedDateTime01]
					,Src.[ReceiptExternalUserDefinedDateTime02]
					,Src.[ReceiptExternalUserDefinedDateTime03]
					,Src.[ReceiptExternalUserDefinedDateTime04]
					,Src.[ReceiptExternalUserDefinedDateTime05]
					,Src.[ReceiptExternalUserDefinedFloat01]
					,Src.[ReceiptExternalUserDefinedFloat02]
					,Src.[ReceiptExternalUserDefinedFloat03]
					,Src.[ReceiptExternalUserDefinedFloat04]
					,Src.[ReceiptExternalUserDefinedFloat05]
					,Src.[ReceiptExternalUserDefinedLookup01]
					,Src.[ReceiptExternalUserDefinedLookup02]
					,Src.[ReceiptExternalUserDefinedLookup03]
					,Src.[ReceiptExternalUserDefinedLookup04]
					,Src.[ReceiptExternalUserDefinedLookup05]
					,Src.[ReceiptExternalUserDefinedLookup06]
					,Src.[ReceiptExternalUserDefinedLookup07]
					,Src.[ReceiptExternalUserDefinedLookup08]
					,Src.[ReceiptExternalUserDefinedLookup09]
					,Src.[ReceiptExternalUserDefinedLookup10]
					,Src.[ReceiptExternalUserDefinedString01]
					,Src.[ReceiptExternalUserDefinedString02]
					,Src.[ReceiptExternalUserDefinedString03]
					,Src.[ReceiptExternalUserDefinedString04]
					,Src.[ReceiptExternalUserDefinedString05]
					,Src.[ReceiptExternalUserDefinedString06]
					,Src.[ReceiptExternalUserDefinedString07]
					,Src.[ReceiptExternalUserDefinedString08]
					,Src.[ReceiptExternalUserDefinedString09]
					,Src.[ReceiptExternalUserDefinedString10]
					,Src.[ReceiptExternalUserDefinedString11]
					,Src.[ReceiptExternalUserDefinedString12]
					,Src.[ReceiptExternalUserDefinedString13]
					,Src.[ReceiptExternalUserDefinedString14]
					,Src.[ReceiptExternalUserDefinedString15]
					--,Src.[ReceiptFreightChargeAmount]
					--,Src.[ReceiptFreightChargeBaseAmount]
					--,Src.[ReceiptFreightCostAmount]
					--,Src.[ReceiptFreightCostBaseAmount]
					--,Src.[ReceiptProductionStatus]
					--,Src.[ReceiptProNumber]
					--,Src.[ReceiptReturnLots]
					--,Src.[ReceiptTmFreightChargeCurrency]
					--,Src.[ReceiptTmFreightCostCurrency]
					--,Src.[ReceiptTransportationService]
					--,Src.[ReceiptUseRainbow]
				FROM [dbo].Receipts Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts Dest WITH (NOLOCK) ON Src.IDReceipt = Dest.IDReceipt
				WHERE Dest.IDReceipt IS NULL
					AND --[ReceiptReadyForArchiving] = 1
					--AND 
					Src.[ReceiptTypeID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@ReceiptTypesForArchival, ',')
						)
					AND Src.[ReceiptStatusID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@ReceiptStatusesForArchival, ',')
						)
					AND CAST(Src.[ReceiptEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE);
			END;

			IF OBJECT_ID('tempdb..#tmpReportIDs') IS NOT NULL
			BEGIN
				TRUNCATE TABLE #tmpReceiptIDs;
			END

			--CREATE TABLE #tmpReceiptIDs (ReceiptID NVARCHAR(50));
			IF EXISTS (
					SELECT 1
					FROM #tmpTableVal
					)
			BEGIN
				INSERT INTO #tmpReceiptIDs
				SELECT InsertedId AS ReceiptID
				FROM #tmpTableVal
				
				UNION
				
				SELECT DeletedId
				FROM #tmpTableVal;
			END

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Receipts: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Receipts` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ReceiptParties Delete
	--ReceiptCaseDetails Delete
	--ReceiptDetails Delete
	--Receipts Delete
	--SELECT @MaxDateToArchiveData
	----SELECT * FROM Companies;
	----b) Deletion
	-- 03 Orders
	----a) Archival
	----OrderStatuses
	SET @CurrentTableName = 'OrderStatuses';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderStatuses AS Dest
			USING (
				SELECT [IDOrderStatus]
					,[OrderStatusName]
					,[OrderStatusRules]
					,[OrderStatusComments]
					,[OrderStatusAddDateTime]
					,[OrderStatusAddUserCode]
					,[OrderStatusEditDateTime]
					,[OrderStatusEditUserCode]
					,[OrderStatusSubStatus]
					,[OrderStatusIDPrevious]
					,[OrderStatusButtonText]
					,[OrderStatusReverseButtonText]
					,[OrderStatusChangeMaxItemSelection]
				FROM dbo.OrderStatuses WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDOrderStatus] = Src.[IDOrderStatus])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[OrderStatusName] = Src.[OrderStatusName]
						,Dest.[OrderStatusRules] = Src.[OrderStatusRules]
						,Dest.[OrderStatusComments] = Src.[OrderStatusComments]
						,Dest.[OrderStatusAddDateTime] = Src.[OrderStatusAddDateTime]
						,Dest.[OrderStatusAddUserCode] = Src.[OrderStatusAddUserCode]
						,Dest.[OrderStatusEditDateTime] = Src.[OrderStatusEditDateTime]
						,Dest.[OrderStatusEditUserCode] = Src.[OrderStatusEditUserCode]
						,Dest.[OrderStatusSubStatus] = Src.[OrderStatusSubStatus]
						,Dest.[OrderStatusIDPrevious] = Src.[OrderStatusIDPrevious]
						,Dest.[OrderStatusButtonText] = Src.[OrderStatusButtonText]
						,Dest.[OrderStatusReverseButtonText] = Src.[OrderStatusReverseButtonText]
						,Dest.[OrderStatusChangeMaxItemSelection] = Src.[OrderStatusChangeMaxItemSelection]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDOrderStatus]
						,[OrderStatusName]
						,[OrderStatusRules]
						,[OrderStatusComments]
						,[OrderStatusAddDateTime]
						,[OrderStatusAddUserCode]
						,[OrderStatusEditDateTime]
						,[OrderStatusEditUserCode]
						,[OrderStatusSubStatus]
						,[OrderStatusIDPrevious]
						,[OrderStatusButtonText]
						,[OrderStatusReverseButtonText]
						,[OrderStatusChangeMaxItemSelection]
						)
					VALUES (
						Src.[IDOrderStatus]
						,Src.[OrderStatusName]
						,Src.[OrderStatusRules]
						,Src.[OrderStatusComments]
						,Src.[OrderStatusAddDateTime]
						,Src.[OrderStatusAddUserCode]
						,Src.[OrderStatusEditDateTime]
						,Src.[OrderStatusEditUserCode]
						,Src.[OrderStatusSubStatus]
						,Src.[OrderStatusIDPrevious]
						,Src.[OrderStatusButtonText]
						,Src.[OrderStatusReverseButtonText]
						,Src.[OrderStatusChangeMaxItemSelection]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDOrderStatus] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDOrderStatus] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].OrderStatuses Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderStatuses Dest WITH (NOLOCK) ON Src.[IDOrderStatus] = Dest.[IDOrderStatus]
					WHERE Dest.[OrderStatusEditDateTime] < Src.[OrderStatusEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[OrderStatusName] = Src.[OrderStatusName]
					,Dest.[OrderStatusRules] = Src.[OrderStatusRules]
					,Dest.[OrderStatusComments] = Src.[OrderStatusComments]
					,Dest.[OrderStatusAddDateTime] = Src.[OrderStatusAddDateTime]
					,Dest.[OrderStatusAddUserCode] = Src.[OrderStatusAddUserCode]
					,Dest.[OrderStatusEditDateTime] = Src.[OrderStatusEditDateTime]
					,Dest.[OrderStatusEditUserCode] = Src.[OrderStatusEditUserCode]
					,Dest.[OrderStatusSubStatus] = Src.[OrderStatusSubStatus]
					,Dest.[OrderStatusIDPrevious] = Src.[OrderStatusIDPrevious]
					,Dest.[OrderStatusButtonText] = Src.[OrderStatusButtonText]
					,Dest.[OrderStatusReverseButtonText] = Src.[OrderStatusReverseButtonText]
					,Dest.[OrderStatusChangeMaxItemSelection] = Src.[OrderStatusChangeMaxItemSelection]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDOrderStatus] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDOrderStatus] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].OrderStatuses Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderStatuses Dest ON Src.[IDOrderStatus] = Dest.[IDOrderStatus]
				WHERE Dest.[OrderStatusEditDateTime] < Src.[OrderStatusEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].OrderStatuses Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderStatuses Dest WITH (NOLOCK) ON Src.[IDOrderStatus] = Dest.[IDOrderStatus]
					WHERE Dest.[IDOrderStatus] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderStatuses (
					[IDOrderStatus]
					,[OrderStatusName]
					,[OrderStatusRules]
					,[OrderStatusComments]
					,[OrderStatusAddDateTime]
					,[OrderStatusAddUserCode]
					,[OrderStatusEditDateTime]
					,[OrderStatusEditUserCode]
					,[OrderStatusSubStatus]
					,[OrderStatusIDPrevious]
					,[OrderStatusButtonText]
					,[OrderStatusReverseButtonText]
					,[OrderStatusChangeMaxItemSelection]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDOrderStatus] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDOrderStatus]
					,Src.[OrderStatusName]
					,Src.[OrderStatusRules]
					,Src.[OrderStatusComments]
					,Src.[OrderStatusAddDateTime]
					,Src.[OrderStatusAddUserCode]
					,Src.[OrderStatusEditDateTime]
					,Src.[OrderStatusEditUserCode]
					,Src.[OrderStatusSubStatus]
					,Src.[OrderStatusIDPrevious]
					,Src.[OrderStatusButtonText]
					,Src.[OrderStatusReverseButtonText]
					,Src.[OrderStatusChangeMaxItemSelection]
				FROM [dbo].OrderStatuses Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderStatuses Dest WITH (NOLOCK) ON Src.[IDOrderStatus] = Dest.[IDOrderStatus]
				WHERE Dest.[IDOrderStatus] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') OrderStatuses: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `OrderStatuses` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--OrderTypes
	SET @CurrentTableName = 'OrderTypes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderTypes AS Dest
			USING (
				SELECT [IDOrderType]
					,[OrderTypeName]
					,[OrderTypeDescription]
					,[OrderTypeAddDateTime]
					,[OrderTypeAddUserCode]
					,[OrderTypeEditDateTime]
					,[OrderTypeEditUserCode]
				FROM dbo.OrderTypes WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDOrderType] = Src.[IDOrderType])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[OrderTypeName] = Src.[OrderTypeName]
						,Dest.[OrderTypeDescription] = Src.[OrderTypeDescription]
						,Dest.[OrderTypeAddDateTime] = Src.[OrderTypeAddDateTime]
						,Dest.[OrderTypeAddUserCode] = Src.[OrderTypeAddUserCode]
						,Dest.[OrderTypeEditDateTime] = Src.[OrderTypeEditDateTime]
						,Dest.[OrderTypeEditUserCode] = Src.[OrderTypeEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDOrderType]
						,[OrderTypeName]
						,[OrderTypeDescription]
						,[OrderTypeAddDateTime]
						,[OrderTypeAddUserCode]
						,[OrderTypeEditDateTime]
						,[OrderTypeEditUserCode]
						)
					VALUES (
						Src.[IDOrderType]
						,Src.[OrderTypeName]
						,Src.[OrderTypeDescription]
						,Src.[OrderTypeAddDateTime]
						,Src.[OrderTypeAddUserCode]
						,Src.[OrderTypeEditDateTime]
						,Src.[OrderTypeEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDOrderType] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDOrderType] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].OrderTypes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderTypes Dest WITH (NOLOCK) ON Src.IDOrderType = Dest.IDOrderType
					WHERE Dest.[OrderTypeEditDateTime] < Src.[OrderTypeEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[OrderTypeName] = Src.[OrderTypeName]
					,Dest.[OrderTypeDescription] = Src.[OrderTypeDescription]
					,Dest.[OrderTypeAddDateTime] = Src.[OrderTypeAddDateTime]
					,Dest.[OrderTypeAddUserCode] = Src.[OrderTypeAddUserCode]
					,Dest.[OrderTypeEditDateTime] = Src.[OrderTypeEditDateTime]
					,Dest.[OrderTypeEditUserCode] = Src.[OrderTypeEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDOrderType AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDOrderType AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].OrderTypes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderTypes Dest ON Src.IDOrderType = Dest.IDOrderType
				WHERE Dest.[OrderTypeEditDateTime] < Src.[OrderTypeEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].OrderTypes Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderTypes Dest WITH (NOLOCK) ON Src.IDOrderType = Dest.IDOrderType
					WHERE Dest.IDOrderType IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderTypes (
					[IDOrderType]
					,[OrderTypeName]
					,[OrderTypeDescription]
					,[OrderTypeAddDateTime]
					,[OrderTypeAddUserCode]
					,[OrderTypeEditDateTime]
					,[OrderTypeEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDOrderType AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDOrderType]
					,Src.[OrderTypeName]
					,Src.[OrderTypeDescription]
					,Src.[OrderTypeAddDateTime]
					,Src.[OrderTypeAddUserCode]
					,Src.[OrderTypeEditDateTime]
					,Src.[OrderTypeEditUserCode]
				FROM [dbo].OrderTypes Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderTypes Dest WITH (NOLOCK) ON Src.IDOrderType = Dest.IDOrderType
				WHERE Dest.IDOrderType IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') OrderTypes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `OrderTypes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--
	--
	--OrderHandlingTypes
	SET @CurrentTableName = 'OrderHandlingTypes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderHandlingTypes AS Dest
			USING (
				SELECT [IDOrderHandlingType]
					,[OrderHandlingTypeName]
					,[OrderHandlingTypeDescription]
					,[OrderHandlingTypeAddDateTime]
					,[OrderHandlingTypeAddUserCode]
					,[OrderHandlingTypeEditDateTime]
					,[OrderHandlingTypeEditUserCode]
				FROM dbo.OrderHandlingTypes WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDOrderHandlingType] = Src.[IDOrderHandlingType])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[OrderHandlingTypeName] = Src.[OrderHandlingTypeName]
						,Dest.[OrderHandlingTypeDescription] = Src.[OrderHandlingTypeDescription]
						,Dest.[OrderHandlingTypeAddDateTime] = Src.[OrderHandlingTypeAddDateTime]
						,Dest.[OrderHandlingTypeAddUserCode] = Src.[OrderHandlingTypeAddUserCode]
						,Dest.[OrderHandlingTypeEditDateTime] = Src.[OrderHandlingTypeEditDateTime]
						,Dest.[OrderHandlingTypeEditUserCode] = Src.[OrderHandlingTypeEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDOrderHandlingType]
						,[OrderHandlingTypeName]
						,[OrderHandlingTypeDescription]
						,[OrderHandlingTypeAddDateTime]
						,[OrderHandlingTypeAddUserCode]
						,[OrderHandlingTypeEditDateTime]
						,[OrderHandlingTypeEditUserCode]
						)
					VALUES (
						Src.[IDOrderHandlingType]
						,Src.[OrderHandlingTypeName]
						,Src.[OrderHandlingTypeDescription]
						,Src.[OrderHandlingTypeAddDateTime]
						,Src.[OrderHandlingTypeAddUserCode]
						,Src.[OrderHandlingTypeEditDateTime]
						,Src.[OrderHandlingTypeEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDOrderHandlingType] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDOrderHandlingType] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].OrderHandlingTypes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderHandlingTypes Dest WITH (NOLOCK) ON Src.[IDOrderHandlingType] = Dest.[IDOrderHandlingType]
					WHERE Dest.[OrderHandlingTypeEditDateTime] < Src.[OrderHandlingTypeEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[OrderHandlingTypeName] = Src.[OrderHandlingTypeName]
					,Dest.[OrderHandlingTypeDescription] = Src.[OrderHandlingTypeDescription]
					,Dest.[OrderHandlingTypeAddDateTime] = Src.[OrderHandlingTypeAddDateTime]
					,Dest.[OrderHandlingTypeAddUserCode] = Src.[OrderHandlingTypeAddUserCode]
					,Dest.[OrderHandlingTypeEditDateTime] = Src.[OrderHandlingTypeEditDateTime]
					,Dest.[OrderHandlingTypeEditUserCode] = Src.[OrderHandlingTypeEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDOrderHandlingType] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDOrderHandlingType] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].OrderHandlingTypes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderHandlingTypes Dest ON Src.[IDOrderHandlingType] = Dest.[IDOrderHandlingType]
				WHERE Dest.[OrderHandlingTypeEditDateTime] < Src.[OrderHandlingTypeEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].OrderHandlingTypes Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderHandlingTypes Dest WITH (NOLOCK) ON Src.[IDOrderHandlingType] = Dest.[IDOrderHandlingType]
					WHERE Dest.[IDOrderHandlingType] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderHandlingTypes (
					[IDOrderHandlingType]
					,[OrderHandlingTypeName]
					,[OrderHandlingTypeDescription]
					,[OrderHandlingTypeAddDateTime]
					,[OrderHandlingTypeAddUserCode]
					,[OrderHandlingTypeEditDateTime]
					,[OrderHandlingTypeEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDOrderHandlingType] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDOrderHandlingType]
					,Src.[OrderHandlingTypeName]
					,Src.[OrderHandlingTypeDescription]
					,Src.[OrderHandlingTypeAddDateTime]
					,Src.[OrderHandlingTypeAddUserCode]
					,Src.[OrderHandlingTypeEditDateTime]
					,Src.[OrderHandlingTypeEditUserCode]
				FROM [dbo].OrderHandlingTypes Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderHandlingTypes Dest WITH (NOLOCK) ON Src.[IDOrderHandlingType] = Dest.[IDOrderHandlingType]
				WHERE Dest.[IDOrderHandlingType] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') OrderHandlingTypes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `OrderHandlingTypes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--LoadStatuses
	SET @CurrentTableName = 'LoadStatuses';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStatuses AS Dest
			USING (
				SELECT [IDLoadStatus]
					,[LoadStatusName]
					,[LoadStatusDescription]
					,[LoadStatusAddDateTime]
					,[LoadStatusAddUserCode]
					,[LoadStatusEditDateTime]
					,[LoadStatusEditUserCode]
				FROM dbo.LoadStatuses WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDLoadStatus] = Src.[IDLoadStatus])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[LoadStatusName] = Src.[LoadStatusName]
						,Dest.[LoadStatusDescription] = Src.[LoadStatusDescription]
						,Dest.[LoadStatusAddDateTime] = Src.[LoadStatusAddDateTime]
						,Dest.[LoadStatusAddUserCode] = Src.[LoadStatusAddUserCode]
						,Dest.[LoadStatusEditDateTime] = Src.[LoadStatusEditDateTime]
						,Dest.[LoadStatusEditUserCode] = Src.[LoadStatusEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDLoadStatus]
						,[LoadStatusName]
						,[LoadStatusDescription]
						,[LoadStatusAddDateTime]
						,[LoadStatusAddUserCode]
						,[LoadStatusEditDateTime]
						,[LoadStatusEditUserCode]
						)
					VALUES (
						Src.[IDLoadStatus]
						,Src.[LoadStatusName]
						,Src.[LoadStatusDescription]
						,Src.[LoadStatusAddDateTime]
						,Src.[LoadStatusAddUserCode]
						,Src.[LoadStatusEditDateTime]
						,Src.[LoadStatusEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDLoadStatus] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDLoadStatus] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].LoadStatuses Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStatuses Dest WITH (NOLOCK) ON Src.IDLoadStatus = Dest.IDLoadStatus
					WHERE Dest.LoadStatusEditDateTime < Src.LoadStatusEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[LoadStatusName] = Src.[LoadStatusName]
					,Dest.[LoadStatusDescription] = Src.[LoadStatusDescription]
					,Dest.[LoadStatusAddDateTime] = Src.[LoadStatusAddDateTime]
					,Dest.[LoadStatusAddUserCode] = Src.[LoadStatusAddUserCode]
					,Dest.[LoadStatusEditDateTime] = Src.[LoadStatusEditDateTime]
					,Dest.[LoadStatusEditUserCode] = Src.[LoadStatusEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDLoadStatus AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDLoadStatus AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].LoadStatuses Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStatuses Dest ON Src.IDLoadStatus = Dest.IDLoadStatus
				WHERE Dest.LoadStatusEditDateTime < Src.LoadStatusEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].LoadStatuses Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStatuses Dest WITH (NOLOCK) ON Src.IDLoadStatus = Dest.IDLoadStatus
					WHERE Dest.IDLoadStatus IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStatuses (
					[IDLoadStatus]
					,[LoadStatusName]
					,[LoadStatusDescription]
					,[LoadStatusAddDateTime]
					,[LoadStatusAddUserCode]
					,[LoadStatusEditDateTime]
					,[LoadStatusEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDLoadStatus AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDLoadStatus]
					,Src.[LoadStatusName]
					,Src.[LoadStatusDescription]
					,Src.[LoadStatusAddDateTime]
					,Src.[LoadStatusAddUserCode]
					,Src.[LoadStatusEditDateTime]
					,Src.[LoadStatusEditUserCode]
				FROM [dbo].LoadStatuses Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStatuses Dest WITH (NOLOCK) ON Src.IDLoadStatus = Dest.IDLoadStatus
				WHERE Dest.IDLoadStatus IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') LoadStatuses: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `LoadStatuses` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----b) Deletion
	-- 04 Stock Transactions
	----a) Archival
	-- 05 Products
	----a) Archival
	--Packs
	SET @CurrentTableName = 'Packs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Packs AS Dest
			USING (
				SELECT [PackCode]
					,[PackDescription]
					,[PackUnitOfMeasure1]
					,[PackEachesPerCase]
					,[PackIsWarehouseQuantity1]
					,[PackReplenishmentUnitOfMeasure1]
					,[PackReplenishmentZone1]
					,[PackCartonizeUnitOfMeasure1]
					,[PackLengthUnitOfMeasure1]
					,[PackWidthUnitOfMeasure1]
					,[PackHeightUnitOfMeasure1]
					,[PackCubeUnitOfMeasure1]
					,[PackFilterValueUnitOfMeasure1]
					,[PackIndicatorDigitUnitOfMeasure1]
					,[PackUnitOfMeasure2]
					,[PackInnerPack]
					,[PackIsWarehouseQuantity2]
					,[PackReplenishmentUnitOfMeasure2]
					,[PackReplenishmentZone2]
					,[PackCartonizeUnitOfMeasure2]
					,[PackLengthUnitOfMeasure2]
					,[PackWidthUnitOfMeasure2]
					,[PackHeightUnitOfMeasure2]
					,[PackCubeUnitOfMeasure2]
					,[PackFilterValueUnitOfMeasure2]
					,[PackIndicatorDigitUnitOfMeasure2]
					,[PackUnitOfMeasure3]
					,[PackQuantity]
					,[PackIsWarehouseQuantity3]
					,[PackReplenishmentUnitOfMeasure3]
					,[PackReplenishmentZone3]
					,[PackCartonizeUnitOfMeasure3]
					,[PackLengthUnitOfMeasure3]
					,[PackWidthUnitOfMeasure3]
					,[PackHeightUnitOfMeasure3]
					,[PackCubeUnitOfMeasure3]
					,[PackFilterValueUnitOfMeasure3]
					,[PackIndicatorDigitUnitOfMeasure3]
					,[PackUnitOfMeasure4]
					,[PackEachesPerPallet]
					,[PackIsWarehouseQuantity4]
					,[PackReplenishmentUnitOfMeasure4]
					,[PackReplenishmentZone4]
					,[PackCartonizeUnitOfMeasure4]
					,[PackLengthUnitOfMeasure4]
					,[PackWidthUnitOfMeasure4]
					,[PackHeightUnitOfMeasure4]
					,[PackCubeUnitOfMeasure4]
					,[PackFilterValueUnitOfMeasure4]
					,[PackIndicatorDigitUnitOfMeasure4]
					,[PackPalletWoodLength]
					,[PackPalletWoodWidth]
					,[PackPalletWoodHeight]
					,[PackPalletTI]
					,[PackPalletHI]
					,[PackUnitOfMeasure5]
					,[PackCube]
					,[PackIsWarehouseQuantity5]
					,[PackFilterValueUnitOfMeasure5]
					,[PackIndicatorDigitUnitOfMeasure5]
					,[PackUnitOfMeasure6]
					,[PackGrossWeight]
					,[PackIsWarehouseQuantity6]
					,[PackFilterValueUnitOfMeasure6]
					,[PackIndicatorDigitUnitOfMeasure6]
					,[PackUnitOfMeasure7]
					,[PackNetWeight]
					,[PackIsWarehouseQuantity7]
					,[PackFilterValueUnitOfMeasure7]
					,[PackIndicatorDigitUnitOfMeasure7]
					,[PackUnitOfMeasure8]
					,[PackOtherUnit1]
					,[PackIsWarehouseQuantity8]
					,[PackReplenishmentUnitOfMeasure8]
					,[PackReplenishmentZone8]
					,[PackCartonizeUnitOfMeasure8]
					,[PackLengthUnitOfMeasure8]
					,[PackWidthUnitOfMeasure8]
					,[PackHeightUnitOfMeasure8]
					,[PackFilterValueUnitOfMeasure8]
					,[PackIndicatorDigitUnitOfMeasure8]
					,[PackUnitOfMeasure9]
					,[PackOtherUnit2]
					,[PackIsWarehouseQuantity9]
					,[PackReplenishmentUnitOfMeasure9]
					,[PackReplenishmentZone9]
					,[PackCartonizeUnitOfMeasure9]
					,[PackLengthUnitOfMeasure9]
					,[PackWidthUnitOfMeasure9]
					,[PackHeightUnitOfMeasure9]
					,[PackFilterValueUnitOfMeasure9]
					,[PackIndicatorDigitUnitOfMeasure9]
					,[PackAddDateTime]
					,[PackAddUserCode]
					,[PackEditDateTime]
					,[PackEditUserCode]
					,[PackDiameterUnitOfMeasure1]
					,[PackThickNessUnitOfMeasure1]
				FROM dbo.Packs WITH (NOLOCK)
				) AS Src
				ON (Dest.[PackCode] = Src.[PackCode])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[PackDescription] = Src.[PackDescription]
						,Dest.[PackUnitOfMeasure1] = Src.[PackUnitOfMeasure1]
						,Dest.[PackEachesPerCase] = Src.[PackEachesPerCase]
						,Dest.[PackIsWarehouseQuantity1] = Src.[PackIsWarehouseQuantity1]
						,Dest.[PackReplenishmentUnitOfMeasure1] = Src.[PackReplenishmentUnitOfMeasure1]
						,Dest.[PackReplenishmentZone1] = Src.[PackReplenishmentZone1]
						,Dest.[PackCartonizeUnitOfMeasure1] = Src.[PackCartonizeUnitOfMeasure1]
						,Dest.[PackLengthUnitOfMeasure1] = Src.[PackLengthUnitOfMeasure1]
						,Dest.[PackWidthUnitOfMeasure1] = Src.[PackWidthUnitOfMeasure1]
						,Dest.[PackHeightUnitOfMeasure1] = Src.[PackHeightUnitOfMeasure1]
						,Dest.[PackCubeUnitOfMeasure1] = Src.[PackCubeUnitOfMeasure1]
						,Dest.[PackFilterValueUnitOfMeasure1] = Src.[PackFilterValueUnitOfMeasure1]
						,Dest.[PackIndicatorDigitUnitOfMeasure1] = Src.[PackIndicatorDigitUnitOfMeasure1]
						,Dest.[PackUnitOfMeasure2] = Src.[PackUnitOfMeasure2]
						,Dest.[PackInnerPack] = Src.[PackInnerPack]
						,Dest.[PackIsWarehouseQuantity2] = Src.[PackIsWarehouseQuantity2]
						,Dest.[PackReplenishmentUnitOfMeasure2] = Src.[PackReplenishmentUnitOfMeasure2]
						,Dest.[PackReplenishmentZone2] = Src.[PackReplenishmentZone2]
						,Dest.[PackCartonizeUnitOfMeasure2] = Src.[PackCartonizeUnitOfMeasure2]
						,Dest.[PackLengthUnitOfMeasure2] = Src.[PackLengthUnitOfMeasure2]
						,Dest.[PackWidthUnitOfMeasure2] = Src.[PackWidthUnitOfMeasure2]
						,Dest.[PackHeightUnitOfMeasure2] = Src.[PackHeightUnitOfMeasure2]
						,Dest.[PackCubeUnitOfMeasure2] = Src.[PackCubeUnitOfMeasure2]
						,Dest.[PackFilterValueUnitOfMeasure2] = Src.[PackFilterValueUnitOfMeasure2]
						,Dest.[PackIndicatorDigitUnitOfMeasure2] = Src.[PackIndicatorDigitUnitOfMeasure2]
						,Dest.[PackUnitOfMeasure3] = Src.[PackUnitOfMeasure3]
						,Dest.[PackQuantity] = Src.[PackQuantity]
						,Dest.[PackIsWarehouseQuantity3] = Src.[PackIsWarehouseQuantity3]
						,Dest.[PackReplenishmentUnitOfMeasure3] = Src.[PackReplenishmentUnitOfMeasure3]
						,Dest.[PackReplenishmentZone3] = Src.[PackReplenishmentZone3]
						,Dest.[PackCartonizeUnitOfMeasure3] = Src.[PackCartonizeUnitOfMeasure3]
						,Dest.[PackLengthUnitOfMeasure3] = Src.[PackLengthUnitOfMeasure3]
						,Dest.[PackWidthUnitOfMeasure3] = Src.[PackWidthUnitOfMeasure3]
						,Dest.[PackHeightUnitOfMeasure3] = Src.[PackHeightUnitOfMeasure3]
						,Dest.[PackCubeUnitOfMeasure3] = Src.[PackCubeUnitOfMeasure3]
						,Dest.[PackFilterValueUnitOfMeasure3] = Src.[PackFilterValueUnitOfMeasure3]
						,Dest.[PackIndicatorDigitUnitOfMeasure3] = Src.[PackIndicatorDigitUnitOfMeasure3]
						,Dest.[PackUnitOfMeasure4] = Src.[PackUnitOfMeasure4]
						,Dest.[PackEachesPerPallet] = Src.[PackEachesPerPallet]
						,Dest.[PackIsWarehouseQuantity4] = Src.[PackIsWarehouseQuantity4]
						,Dest.[PackReplenishmentUnitOfMeasure4] = Src.[PackReplenishmentUnitOfMeasure4]
						,Dest.[PackReplenishmentZone4] = Src.[PackReplenishmentZone4]
						,Dest.[PackCartonizeUnitOfMeasure4] = Src.[PackCartonizeUnitOfMeasure4]
						,Dest.[PackLengthUnitOfMeasure4] = Src.[PackLengthUnitOfMeasure4]
						,Dest.[PackWidthUnitOfMeasure4] = Src.[PackWidthUnitOfMeasure4]
						,Dest.[PackHeightUnitOfMeasure4] = Src.[PackHeightUnitOfMeasure4]
						,Dest.[PackCubeUnitOfMeasure4] = Src.[PackCubeUnitOfMeasure4]
						,Dest.[PackFilterValueUnitOfMeasure4] = Src.[PackFilterValueUnitOfMeasure4]
						,Dest.[PackIndicatorDigitUnitOfMeasure4] = Src.[PackIndicatorDigitUnitOfMeasure4]
						,Dest.[PackPalletWoodLength] = Src.[PackPalletWoodLength]
						,Dest.[PackPalletWoodWidth] = Src.[PackPalletWoodWidth]
						,Dest.[PackPalletWoodHeight] = Src.[PackPalletWoodHeight]
						,Dest.[PackPalletTI] = Src.[PackPalletTI]
						,Dest.[PackPalletHI] = Src.[PackPalletHI]
						,Dest.[PackUnitOfMeasure5] = Src.[PackUnitOfMeasure5]
						,Dest.[PackCube] = Src.[PackCube]
						,Dest.[PackIsWarehouseQuantity5] = Src.[PackIsWarehouseQuantity5]
						,Dest.[PackFilterValueUnitOfMeasure5] = Src.[PackFilterValueUnitOfMeasure5]
						,Dest.[PackIndicatorDigitUnitOfMeasure5] = Src.[PackIndicatorDigitUnitOfMeasure5]
						,Dest.[PackUnitOfMeasure6] = Src.[PackUnitOfMeasure6]
						,Dest.[PackGrossWeight] = Src.[PackGrossWeight]
						,Dest.[PackIsWarehouseQuantity6] = Src.[PackIsWarehouseQuantity6]
						,Dest.[PackFilterValueUnitOfMeasure6] = Src.[PackFilterValueUnitOfMeasure6]
						,Dest.[PackIndicatorDigitUnitOfMeasure6] = Src.[PackIndicatorDigitUnitOfMeasure6]
						,Dest.[PackUnitOfMeasure7] = Src.[PackUnitOfMeasure7]
						,Dest.[PackNetWeight] = Src.[PackNetWeight]
						,Dest.[PackIsWarehouseQuantity7] = Src.[PackIsWarehouseQuantity7]
						,Dest.[PackFilterValueUnitOfMeasure7] = Src.[PackFilterValueUnitOfMeasure7]
						,Dest.[PackIndicatorDigitUnitOfMeasure7] = Src.[PackIndicatorDigitUnitOfMeasure7]
						,Dest.[PackUnitOfMeasure8] = Src.[PackUnitOfMeasure8]
						,Dest.[PackOtherUnit1] = Src.[PackOtherUnit1]
						,Dest.[PackIsWarehouseQuantity8] = Src.[PackIsWarehouseQuantity8]
						,Dest.[PackReplenishmentUnitOfMeasure8] = Src.[PackReplenishmentUnitOfMeasure8]
						,Dest.[PackReplenishmentZone8] = Src.[PackReplenishmentZone8]
						,Dest.[PackCartonizeUnitOfMeasure8] = Src.[PackCartonizeUnitOfMeasure8]
						,Dest.[PackLengthUnitOfMeasure8] = Src.[PackLengthUnitOfMeasure8]
						,Dest.[PackWidthUnitOfMeasure8] = Src.[PackWidthUnitOfMeasure8]
						,Dest.[PackHeightUnitOfMeasure8] = Src.[PackHeightUnitOfMeasure8]
						,Dest.[PackFilterValueUnitOfMeasure8] = Src.[PackFilterValueUnitOfMeasure8]
						,Dest.[PackIndicatorDigitUnitOfMeasure8] = Src.[PackIndicatorDigitUnitOfMeasure8]
						,Dest.[PackUnitOfMeasure9] = Src.[PackUnitOfMeasure9]
						,Dest.[PackOtherUnit2] = Src.[PackOtherUnit2]
						,Dest.[PackIsWarehouseQuantity9] = Src.[PackIsWarehouseQuantity9]
						,Dest.[PackReplenishmentUnitOfMeasure9] = Src.[PackReplenishmentUnitOfMeasure9]
						,Dest.[PackReplenishmentZone9] = Src.[PackReplenishmentZone9]
						,Dest.[PackCartonizeUnitOfMeasure9] = Src.[PackCartonizeUnitOfMeasure9]
						,Dest.[PackLengthUnitOfMeasure9] = Src.[PackLengthUnitOfMeasure9]
						,Dest.[PackWidthUnitOfMeasure9] = Src.[PackWidthUnitOfMeasure9]
						,Dest.[PackHeightUnitOfMeasure9] = Src.[PackHeightUnitOfMeasure9]
						,Dest.[PackFilterValueUnitOfMeasure9] = Src.[PackFilterValueUnitOfMeasure9]
						,Dest.[PackIndicatorDigitUnitOfMeasure9] = Src.[PackIndicatorDigitUnitOfMeasure9]
						,Dest.[PackAddDateTime] = Src.[PackAddDateTime]
						,Dest.[PackAddUserCode] = Src.[PackAddUserCode]
						,Dest.[PackEditDateTime] = Src.[PackEditDateTime]
						,Dest.[PackEditUserCode] = Src.[PackEditUserCode]
						,Dest.[PackDiameterUnitOfMeasure1] = Src.[PackDiameterUnitOfMeasure1]
						,Dest.[PackThickNessUnitOfMeasure1] = Src.[PackThickNessUnitOfMeasure1]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[PackCode]
						,[PackDescription]
						,[PackUnitOfMeasure1]
						,[PackEachesPerCase]
						,[PackIsWarehouseQuantity1]
						,[PackReplenishmentUnitOfMeasure1]
						,[PackReplenishmentZone1]
						,[PackCartonizeUnitOfMeasure1]
						,[PackLengthUnitOfMeasure1]
						,[PackWidthUnitOfMeasure1]
						,[PackHeightUnitOfMeasure1]
						,[PackCubeUnitOfMeasure1]
						,[PackFilterValueUnitOfMeasure1]
						,[PackIndicatorDigitUnitOfMeasure1]
						,[PackUnitOfMeasure2]
						,[PackInnerPack]
						,[PackIsWarehouseQuantity2]
						,[PackReplenishmentUnitOfMeasure2]
						,[PackReplenishmentZone2]
						,[PackCartonizeUnitOfMeasure2]
						,[PackLengthUnitOfMeasure2]
						,[PackWidthUnitOfMeasure2]
						,[PackHeightUnitOfMeasure2]
						,[PackCubeUnitOfMeasure2]
						,[PackFilterValueUnitOfMeasure2]
						,[PackIndicatorDigitUnitOfMeasure2]
						,[PackUnitOfMeasure3]
						,[PackQuantity]
						,[PackIsWarehouseQuantity3]
						,[PackReplenishmentUnitOfMeasure3]
						,[PackReplenishmentZone3]
						,[PackCartonizeUnitOfMeasure3]
						,[PackLengthUnitOfMeasure3]
						,[PackWidthUnitOfMeasure3]
						,[PackHeightUnitOfMeasure3]
						,[PackCubeUnitOfMeasure3]
						,[PackFilterValueUnitOfMeasure3]
						,[PackIndicatorDigitUnitOfMeasure3]
						,[PackUnitOfMeasure4]
						,[PackEachesPerPallet]
						,[PackIsWarehouseQuantity4]
						,[PackReplenishmentUnitOfMeasure4]
						,[PackReplenishmentZone4]
						,[PackCartonizeUnitOfMeasure4]
						,[PackLengthUnitOfMeasure4]
						,[PackWidthUnitOfMeasure4]
						,[PackHeightUnitOfMeasure4]
						,[PackCubeUnitOfMeasure4]
						,[PackFilterValueUnitOfMeasure4]
						,[PackIndicatorDigitUnitOfMeasure4]
						,[PackPalletWoodLength]
						,[PackPalletWoodWidth]
						,[PackPalletWoodHeight]
						,[PackPalletTI]
						,[PackPalletHI]
						,[PackUnitOfMeasure5]
						,[PackCube]
						,[PackIsWarehouseQuantity5]
						,[PackFilterValueUnitOfMeasure5]
						,[PackIndicatorDigitUnitOfMeasure5]
						,[PackUnitOfMeasure6]
						,[PackGrossWeight]
						,[PackIsWarehouseQuantity6]
						,[PackFilterValueUnitOfMeasure6]
						,[PackIndicatorDigitUnitOfMeasure6]
						,[PackUnitOfMeasure7]
						,[PackNetWeight]
						,[PackIsWarehouseQuantity7]
						,[PackFilterValueUnitOfMeasure7]
						,[PackIndicatorDigitUnitOfMeasure7]
						,[PackUnitOfMeasure8]
						,[PackOtherUnit1]
						,[PackIsWarehouseQuantity8]
						,[PackReplenishmentUnitOfMeasure8]
						,[PackReplenishmentZone8]
						,[PackCartonizeUnitOfMeasure8]
						,[PackLengthUnitOfMeasure8]
						,[PackWidthUnitOfMeasure8]
						,[PackHeightUnitOfMeasure8]
						,[PackFilterValueUnitOfMeasure8]
						,[PackIndicatorDigitUnitOfMeasure8]
						,[PackUnitOfMeasure9]
						,[PackOtherUnit2]
						,[PackIsWarehouseQuantity9]
						,[PackReplenishmentUnitOfMeasure9]
						,[PackReplenishmentZone9]
						,[PackCartonizeUnitOfMeasure9]
						,[PackLengthUnitOfMeasure9]
						,[PackWidthUnitOfMeasure9]
						,[PackHeightUnitOfMeasure9]
						,[PackFilterValueUnitOfMeasure9]
						,[PackIndicatorDigitUnitOfMeasure9]
						,[PackAddDateTime]
						,[PackAddUserCode]
						,[PackEditDateTime]
						,[PackEditUserCode]
						,[PackDiameterUnitOfMeasure1]
						,[PackThickNessUnitOfMeasure1]
						)
					VALUES (
						Src.[PackCode]
						,Src.[PackDescription]
						,Src.[PackUnitOfMeasure1]
						,Src.[PackEachesPerCase]
						,Src.[PackIsWarehouseQuantity1]
						,Src.[PackReplenishmentUnitOfMeasure1]
						,Src.[PackReplenishmentZone1]
						,Src.[PackCartonizeUnitOfMeasure1]
						,Src.[PackLengthUnitOfMeasure1]
						,Src.[PackWidthUnitOfMeasure1]
						,Src.[PackHeightUnitOfMeasure1]
						,Src.[PackCubeUnitOfMeasure1]
						,Src.[PackFilterValueUnitOfMeasure1]
						,Src.[PackIndicatorDigitUnitOfMeasure1]
						,Src.[PackUnitOfMeasure2]
						,Src.[PackInnerPack]
						,Src.[PackIsWarehouseQuantity2]
						,Src.[PackReplenishmentUnitOfMeasure2]
						,Src.[PackReplenishmentZone2]
						,Src.[PackCartonizeUnitOfMeasure2]
						,Src.[PackLengthUnitOfMeasure2]
						,Src.[PackWidthUnitOfMeasure2]
						,Src.[PackHeightUnitOfMeasure2]
						,Src.[PackCubeUnitOfMeasure2]
						,Src.[PackFilterValueUnitOfMeasure2]
						,Src.[PackIndicatorDigitUnitOfMeasure2]
						,Src.[PackUnitOfMeasure3]
						,Src.[PackQuantity]
						,Src.[PackIsWarehouseQuantity3]
						,Src.[PackReplenishmentUnitOfMeasure3]
						,Src.[PackReplenishmentZone3]
						,Src.[PackCartonizeUnitOfMeasure3]
						,Src.[PackLengthUnitOfMeasure3]
						,Src.[PackWidthUnitOfMeasure3]
						,Src.[PackHeightUnitOfMeasure3]
						,Src.[PackCubeUnitOfMeasure3]
						,Src.[PackFilterValueUnitOfMeasure3]
						,Src.[PackIndicatorDigitUnitOfMeasure3]
						,Src.[PackUnitOfMeasure4]
						,Src.[PackEachesPerPallet]
						,Src.[PackIsWarehouseQuantity4]
						,Src.[PackReplenishmentUnitOfMeasure4]
						,Src.[PackReplenishmentZone4]
						,Src.[PackCartonizeUnitOfMeasure4]
						,Src.[PackLengthUnitOfMeasure4]
						,Src.[PackWidthUnitOfMeasure4]
						,Src.[PackHeightUnitOfMeasure4]
						,Src.[PackCubeUnitOfMeasure4]
						,Src.[PackFilterValueUnitOfMeasure4]
						,Src.[PackIndicatorDigitUnitOfMeasure4]
						,Src.[PackPalletWoodLength]
						,Src.[PackPalletWoodWidth]
						,Src.[PackPalletWoodHeight]
						,Src.[PackPalletTI]
						,Src.[PackPalletHI]
						,Src.[PackUnitOfMeasure5]
						,Src.[PackCube]
						,Src.[PackIsWarehouseQuantity5]
						,Src.[PackFilterValueUnitOfMeasure5]
						,Src.[PackIndicatorDigitUnitOfMeasure5]
						,Src.[PackUnitOfMeasure6]
						,Src.[PackGrossWeight]
						,Src.[PackIsWarehouseQuantity6]
						,Src.[PackFilterValueUnitOfMeasure6]
						,Src.[PackIndicatorDigitUnitOfMeasure6]
						,Src.[PackUnitOfMeasure7]
						,Src.[PackNetWeight]
						,Src.[PackIsWarehouseQuantity7]
						,Src.[PackFilterValueUnitOfMeasure7]
						,Src.[PackIndicatorDigitUnitOfMeasure7]
						,Src.[PackUnitOfMeasure8]
						,Src.[PackOtherUnit1]
						,Src.[PackIsWarehouseQuantity8]
						,Src.[PackReplenishmentUnitOfMeasure8]
						,Src.[PackReplenishmentZone8]
						,Src.[PackCartonizeUnitOfMeasure8]
						,Src.[PackLengthUnitOfMeasure8]
						,Src.[PackWidthUnitOfMeasure8]
						,Src.[PackHeightUnitOfMeasure8]
						,Src.[PackFilterValueUnitOfMeasure8]
						,Src.[PackIndicatorDigitUnitOfMeasure8]
						,Src.[PackUnitOfMeasure9]
						,Src.[PackOtherUnit2]
						,Src.[PackIsWarehouseQuantity9]
						,Src.[PackReplenishmentUnitOfMeasure9]
						,Src.[PackReplenishmentZone9]
						,Src.[PackCartonizeUnitOfMeasure9]
						,Src.[PackLengthUnitOfMeasure9]
						,Src.[PackWidthUnitOfMeasure9]
						,Src.[PackHeightUnitOfMeasure9]
						,Src.[PackFilterValueUnitOfMeasure9]
						,Src.[PackIndicatorDigitUnitOfMeasure9]
						,Src.[PackAddDateTime]
						,Src.[PackAddUserCode]
						,Src.[PackEditDateTime]
						,Src.[PackEditUserCode]
						,Src.[PackDiameterUnitOfMeasure1]
						,Src.[PackThickNessUnitOfMeasure1]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[PackCode] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[PackCode] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Packs Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Packs Dest WITH (NOLOCK) ON Src.PackCode = Dest.PackCode
					WHERE Dest.PackEditDateTime < Src.PackEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[PackDescription] = Src.[PackDescription]
					,Dest.[PackUnitOfMeasure1] = Src.[PackUnitOfMeasure1]
					,Dest.[PackEachesPerCase] = Src.[PackEachesPerCase]
					,Dest.[PackIsWarehouseQuantity1] = Src.[PackIsWarehouseQuantity1]
					,Dest.[PackReplenishmentUnitOfMeasure1] = Src.[PackReplenishmentUnitOfMeasure1]
					,Dest.[PackReplenishmentZone1] = Src.[PackReplenishmentZone1]
					,Dest.[PackCartonizeUnitOfMeasure1] = Src.[PackCartonizeUnitOfMeasure1]
					,Dest.[PackLengthUnitOfMeasure1] = Src.[PackLengthUnitOfMeasure1]
					,Dest.[PackWidthUnitOfMeasure1] = Src.[PackWidthUnitOfMeasure1]
					,Dest.[PackHeightUnitOfMeasure1] = Src.[PackHeightUnitOfMeasure1]
					,Dest.[PackCubeUnitOfMeasure1] = Src.[PackCubeUnitOfMeasure1]
					,Dest.[PackFilterValueUnitOfMeasure1] = Src.[PackFilterValueUnitOfMeasure1]
					,Dest.[PackIndicatorDigitUnitOfMeasure1] = Src.[PackIndicatorDigitUnitOfMeasure1]
					,Dest.[PackUnitOfMeasure2] = Src.[PackUnitOfMeasure2]
					,Dest.[PackInnerPack] = Src.[PackInnerPack]
					,Dest.[PackIsWarehouseQuantity2] = Src.[PackIsWarehouseQuantity2]
					,Dest.[PackReplenishmentUnitOfMeasure2] = Src.[PackReplenishmentUnitOfMeasure2]
					,Dest.[PackReplenishmentZone2] = Src.[PackReplenishmentZone2]
					,Dest.[PackCartonizeUnitOfMeasure2] = Src.[PackCartonizeUnitOfMeasure2]
					,Dest.[PackLengthUnitOfMeasure2] = Src.[PackLengthUnitOfMeasure2]
					,Dest.[PackWidthUnitOfMeasure2] = Src.[PackWidthUnitOfMeasure2]
					,Dest.[PackHeightUnitOfMeasure2] = Src.[PackHeightUnitOfMeasure2]
					,Dest.[PackCubeUnitOfMeasure2] = Src.[PackCubeUnitOfMeasure2]
					,Dest.[PackFilterValueUnitOfMeasure2] = Src.[PackFilterValueUnitOfMeasure2]
					,Dest.[PackIndicatorDigitUnitOfMeasure2] = Src.[PackIndicatorDigitUnitOfMeasure2]
					,Dest.[PackUnitOfMeasure3] = Src.[PackUnitOfMeasure3]
					,Dest.[PackQuantity] = Src.[PackQuantity]
					,Dest.[PackIsWarehouseQuantity3] = Src.[PackIsWarehouseQuantity3]
					,Dest.[PackReplenishmentUnitOfMeasure3] = Src.[PackReplenishmentUnitOfMeasure3]
					,Dest.[PackReplenishmentZone3] = Src.[PackReplenishmentZone3]
					,Dest.[PackCartonizeUnitOfMeasure3] = Src.[PackCartonizeUnitOfMeasure3]
					,Dest.[PackLengthUnitOfMeasure3] = Src.[PackLengthUnitOfMeasure3]
					,Dest.[PackWidthUnitOfMeasure3] = Src.[PackWidthUnitOfMeasure3]
					,Dest.[PackHeightUnitOfMeasure3] = Src.[PackHeightUnitOfMeasure3]
					,Dest.[PackCubeUnitOfMeasure3] = Src.[PackCubeUnitOfMeasure3]
					,Dest.[PackFilterValueUnitOfMeasure3] = Src.[PackFilterValueUnitOfMeasure3]
					,Dest.[PackIndicatorDigitUnitOfMeasure3] = Src.[PackIndicatorDigitUnitOfMeasure3]
					,Dest.[PackUnitOfMeasure4] = Src.[PackUnitOfMeasure4]
					,Dest.[PackEachesPerPallet] = Src.[PackEachesPerPallet]
					,Dest.[PackIsWarehouseQuantity4] = Src.[PackIsWarehouseQuantity4]
					,Dest.[PackReplenishmentUnitOfMeasure4] = Src.[PackReplenishmentUnitOfMeasure4]
					,Dest.[PackReplenishmentZone4] = Src.[PackReplenishmentZone4]
					,Dest.[PackCartonizeUnitOfMeasure4] = Src.[PackCartonizeUnitOfMeasure4]
					,Dest.[PackLengthUnitOfMeasure4] = Src.[PackLengthUnitOfMeasure4]
					,Dest.[PackWidthUnitOfMeasure4] = Src.[PackWidthUnitOfMeasure4]
					,Dest.[PackHeightUnitOfMeasure4] = Src.[PackHeightUnitOfMeasure4]
					,Dest.[PackCubeUnitOfMeasure4] = Src.[PackCubeUnitOfMeasure4]
					,Dest.[PackFilterValueUnitOfMeasure4] = Src.[PackFilterValueUnitOfMeasure4]
					,Dest.[PackIndicatorDigitUnitOfMeasure4] = Src.[PackIndicatorDigitUnitOfMeasure4]
					,Dest.[PackPalletWoodLength] = Src.[PackPalletWoodLength]
					,Dest.[PackPalletWoodWidth] = Src.[PackPalletWoodWidth]
					,Dest.[PackPalletWoodHeight] = Src.[PackPalletWoodHeight]
					,Dest.[PackPalletTI] = Src.[PackPalletTI]
					,Dest.[PackPalletHI] = Src.[PackPalletHI]
					,Dest.[PackUnitOfMeasure5] = Src.[PackUnitOfMeasure5]
					,Dest.[PackCube] = Src.[PackCube]
					,Dest.[PackIsWarehouseQuantity5] = Src.[PackIsWarehouseQuantity5]
					,Dest.[PackFilterValueUnitOfMeasure5] = Src.[PackFilterValueUnitOfMeasure5]
					,Dest.[PackIndicatorDigitUnitOfMeasure5] = Src.[PackIndicatorDigitUnitOfMeasure5]
					,Dest.[PackUnitOfMeasure6] = Src.[PackUnitOfMeasure6]
					,Dest.[PackGrossWeight] = Src.[PackGrossWeight]
					,Dest.[PackIsWarehouseQuantity6] = Src.[PackIsWarehouseQuantity6]
					,Dest.[PackFilterValueUnitOfMeasure6] = Src.[PackFilterValueUnitOfMeasure6]
					,Dest.[PackIndicatorDigitUnitOfMeasure6] = Src.[PackIndicatorDigitUnitOfMeasure6]
					,Dest.[PackUnitOfMeasure7] = Src.[PackUnitOfMeasure7]
					,Dest.[PackNetWeight] = Src.[PackNetWeight]
					,Dest.[PackIsWarehouseQuantity7] = Src.[PackIsWarehouseQuantity7]
					,Dest.[PackFilterValueUnitOfMeasure7] = Src.[PackFilterValueUnitOfMeasure7]
					,Dest.[PackIndicatorDigitUnitOfMeasure7] = Src.[PackIndicatorDigitUnitOfMeasure7]
					,Dest.[PackUnitOfMeasure8] = Src.[PackUnitOfMeasure8]
					,Dest.[PackOtherUnit1] = Src.[PackOtherUnit1]
					,Dest.[PackIsWarehouseQuantity8] = Src.[PackIsWarehouseQuantity8]
					,Dest.[PackReplenishmentUnitOfMeasure8] = Src.[PackReplenishmentUnitOfMeasure8]
					,Dest.[PackReplenishmentZone8] = Src.[PackReplenishmentZone8]
					,Dest.[PackCartonizeUnitOfMeasure8] = Src.[PackCartonizeUnitOfMeasure8]
					,Dest.[PackLengthUnitOfMeasure8] = Src.[PackLengthUnitOfMeasure8]
					,Dest.[PackWidthUnitOfMeasure8] = Src.[PackWidthUnitOfMeasure8]
					,Dest.[PackHeightUnitOfMeasure8] = Src.[PackHeightUnitOfMeasure8]
					,Dest.[PackFilterValueUnitOfMeasure8] = Src.[PackFilterValueUnitOfMeasure8]
					,Dest.[PackIndicatorDigitUnitOfMeasure8] = Src.[PackIndicatorDigitUnitOfMeasure8]
					,Dest.[PackUnitOfMeasure9] = Src.[PackUnitOfMeasure9]
					,Dest.[PackOtherUnit2] = Src.[PackOtherUnit2]
					,Dest.[PackIsWarehouseQuantity9] = Src.[PackIsWarehouseQuantity9]
					,Dest.[PackReplenishmentUnitOfMeasure9] = Src.[PackReplenishmentUnitOfMeasure9]
					,Dest.[PackReplenishmentZone9] = Src.[PackReplenishmentZone9]
					,Dest.[PackCartonizeUnitOfMeasure9] = Src.[PackCartonizeUnitOfMeasure9]
					,Dest.[PackLengthUnitOfMeasure9] = Src.[PackLengthUnitOfMeasure9]
					,Dest.[PackWidthUnitOfMeasure9] = Src.[PackWidthUnitOfMeasure9]
					,Dest.[PackHeightUnitOfMeasure9] = Src.[PackHeightUnitOfMeasure9]
					,Dest.[PackFilterValueUnitOfMeasure9] = Src.[PackFilterValueUnitOfMeasure9]
					,Dest.[PackIndicatorDigitUnitOfMeasure9] = Src.[PackIndicatorDigitUnitOfMeasure9]
					,Dest.[PackAddDateTime] = Src.[PackAddDateTime]
					,Dest.[PackAddUserCode] = Src.[PackAddUserCode]
					,Dest.[PackEditDateTime] = Src.[PackEditDateTime]
					,Dest.[PackEditUserCode] = Src.[PackEditUserCode]
					,Dest.[PackDiameterUnitOfMeasure1] = Src.[PackDiameterUnitOfMeasure1]
					,Dest.[PackThickNessUnitOfMeasure1] = Src.[PackThickNessUnitOfMeasure1]
				OUTPUT 'UPDATE'
					,CAST(Inserted.PackCode AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.PackCode AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Packs Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Packs Dest ON Dest.[PackCode] = Src.[PackCode]
				WHERE Dest.PackEditDateTime < Src.PackEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Packs Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Packs Dest WITH (NOLOCK) ON Dest.[PackCode] = Src.[PackCode]
					WHERE Dest.[PackCode] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Packs (
					[PackCode]
					,[PackDescription]
					,[PackUnitOfMeasure1]
					,[PackEachesPerCase]
					,[PackIsWarehouseQuantity1]
					,[PackReplenishmentUnitOfMeasure1]
					,[PackReplenishmentZone1]
					,[PackCartonizeUnitOfMeasure1]
					,[PackLengthUnitOfMeasure1]
					,[PackWidthUnitOfMeasure1]
					,[PackHeightUnitOfMeasure1]
					,[PackCubeUnitOfMeasure1]
					,[PackFilterValueUnitOfMeasure1]
					,[PackIndicatorDigitUnitOfMeasure1]
					,[PackUnitOfMeasure2]
					,[PackInnerPack]
					,[PackIsWarehouseQuantity2]
					,[PackReplenishmentUnitOfMeasure2]
					,[PackReplenishmentZone2]
					,[PackCartonizeUnitOfMeasure2]
					,[PackLengthUnitOfMeasure2]
					,[PackWidthUnitOfMeasure2]
					,[PackHeightUnitOfMeasure2]
					,[PackCubeUnitOfMeasure2]
					,[PackFilterValueUnitOfMeasure2]
					,[PackIndicatorDigitUnitOfMeasure2]
					,[PackUnitOfMeasure3]
					,[PackQuantity]
					,[PackIsWarehouseQuantity3]
					,[PackReplenishmentUnitOfMeasure3]
					,[PackReplenishmentZone3]
					,[PackCartonizeUnitOfMeasure3]
					,[PackLengthUnitOfMeasure3]
					,[PackWidthUnitOfMeasure3]
					,[PackHeightUnitOfMeasure3]
					,[PackCubeUnitOfMeasure3]
					,[PackFilterValueUnitOfMeasure3]
					,[PackIndicatorDigitUnitOfMeasure3]
					,[PackUnitOfMeasure4]
					,[PackEachesPerPallet]
					,[PackIsWarehouseQuantity4]
					,[PackReplenishmentUnitOfMeasure4]
					,[PackReplenishmentZone4]
					,[PackCartonizeUnitOfMeasure4]
					,[PackLengthUnitOfMeasure4]
					,[PackWidthUnitOfMeasure4]
					,[PackHeightUnitOfMeasure4]
					,[PackCubeUnitOfMeasure4]
					,[PackFilterValueUnitOfMeasure4]
					,[PackIndicatorDigitUnitOfMeasure4]
					,[PackPalletWoodLength]
					,[PackPalletWoodWidth]
					,[PackPalletWoodHeight]
					,[PackPalletTI]
					,[PackPalletHI]
					,[PackUnitOfMeasure5]
					,[PackCube]
					,[PackIsWarehouseQuantity5]
					,[PackFilterValueUnitOfMeasure5]
					,[PackIndicatorDigitUnitOfMeasure5]
					,[PackUnitOfMeasure6]
					,[PackGrossWeight]
					,[PackIsWarehouseQuantity6]
					,[PackFilterValueUnitOfMeasure6]
					,[PackIndicatorDigitUnitOfMeasure6]
					,[PackUnitOfMeasure7]
					,[PackNetWeight]
					,[PackIsWarehouseQuantity7]
					,[PackFilterValueUnitOfMeasure7]
					,[PackIndicatorDigitUnitOfMeasure7]
					,[PackUnitOfMeasure8]
					,[PackOtherUnit1]
					,[PackIsWarehouseQuantity8]
					,[PackReplenishmentUnitOfMeasure8]
					,[PackReplenishmentZone8]
					,[PackCartonizeUnitOfMeasure8]
					,[PackLengthUnitOfMeasure8]
					,[PackWidthUnitOfMeasure8]
					,[PackHeightUnitOfMeasure8]
					,[PackFilterValueUnitOfMeasure8]
					,[PackIndicatorDigitUnitOfMeasure8]
					,[PackUnitOfMeasure9]
					,[PackOtherUnit2]
					,[PackIsWarehouseQuantity9]
					,[PackReplenishmentUnitOfMeasure9]
					,[PackReplenishmentZone9]
					,[PackCartonizeUnitOfMeasure9]
					,[PackLengthUnitOfMeasure9]
					,[PackWidthUnitOfMeasure9]
					,[PackHeightUnitOfMeasure9]
					,[PackFilterValueUnitOfMeasure9]
					,[PackIndicatorDigitUnitOfMeasure9]
					,[PackAddDateTime]
					,[PackAddUserCode]
					,[PackEditDateTime]
					,[PackEditUserCode]
					,[PackDiameterUnitOfMeasure1]
					,[PackThickNessUnitOfMeasure1]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.PackCode AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[PackCode]
					,Src.[PackDescription]
					,Src.[PackUnitOfMeasure1]
					,Src.[PackEachesPerCase]
					,Src.[PackIsWarehouseQuantity1]
					,Src.[PackReplenishmentUnitOfMeasure1]
					,Src.[PackReplenishmentZone1]
					,Src.[PackCartonizeUnitOfMeasure1]
					,Src.[PackLengthUnitOfMeasure1]
					,Src.[PackWidthUnitOfMeasure1]
					,Src.[PackHeightUnitOfMeasure1]
					,Src.[PackCubeUnitOfMeasure1]
					,Src.[PackFilterValueUnitOfMeasure1]
					,Src.[PackIndicatorDigitUnitOfMeasure1]
					,Src.[PackUnitOfMeasure2]
					,Src.[PackInnerPack]
					,Src.[PackIsWarehouseQuantity2]
					,Src.[PackReplenishmentUnitOfMeasure2]
					,Src.[PackReplenishmentZone2]
					,Src.[PackCartonizeUnitOfMeasure2]
					,Src.[PackLengthUnitOfMeasure2]
					,Src.[PackWidthUnitOfMeasure2]
					,Src.[PackHeightUnitOfMeasure2]
					,Src.[PackCubeUnitOfMeasure2]
					,Src.[PackFilterValueUnitOfMeasure2]
					,Src.[PackIndicatorDigitUnitOfMeasure2]
					,Src.[PackUnitOfMeasure3]
					,Src.[PackQuantity]
					,Src.[PackIsWarehouseQuantity3]
					,Src.[PackReplenishmentUnitOfMeasure3]
					,Src.[PackReplenishmentZone3]
					,Src.[PackCartonizeUnitOfMeasure3]
					,Src.[PackLengthUnitOfMeasure3]
					,Src.[PackWidthUnitOfMeasure3]
					,Src.[PackHeightUnitOfMeasure3]
					,Src.[PackCubeUnitOfMeasure3]
					,Src.[PackFilterValueUnitOfMeasure3]
					,Src.[PackIndicatorDigitUnitOfMeasure3]
					,Src.[PackUnitOfMeasure4]
					,Src.[PackEachesPerPallet]
					,Src.[PackIsWarehouseQuantity4]
					,Src.[PackReplenishmentUnitOfMeasure4]
					,Src.[PackReplenishmentZone4]
					,Src.[PackCartonizeUnitOfMeasure4]
					,Src.[PackLengthUnitOfMeasure4]
					,Src.[PackWidthUnitOfMeasure4]
					,Src.[PackHeightUnitOfMeasure4]
					,Src.[PackCubeUnitOfMeasure4]
					,Src.[PackFilterValueUnitOfMeasure4]
					,Src.[PackIndicatorDigitUnitOfMeasure4]
					,Src.[PackPalletWoodLength]
					,Src.[PackPalletWoodWidth]
					,Src.[PackPalletWoodHeight]
					,Src.[PackPalletTI]
					,Src.[PackPalletHI]
					,Src.[PackUnitOfMeasure5]
					,Src.[PackCube]
					,Src.[PackIsWarehouseQuantity5]
					,Src.[PackFilterValueUnitOfMeasure5]
					,Src.[PackIndicatorDigitUnitOfMeasure5]
					,Src.[PackUnitOfMeasure6]
					,Src.[PackGrossWeight]
					,Src.[PackIsWarehouseQuantity6]
					,Src.[PackFilterValueUnitOfMeasure6]
					,Src.[PackIndicatorDigitUnitOfMeasure6]
					,Src.[PackUnitOfMeasure7]
					,Src.[PackNetWeight]
					,Src.[PackIsWarehouseQuantity7]
					,Src.[PackFilterValueUnitOfMeasure7]
					,Src.[PackIndicatorDigitUnitOfMeasure7]
					,Src.[PackUnitOfMeasure8]
					,Src.[PackOtherUnit1]
					,Src.[PackIsWarehouseQuantity8]
					,Src.[PackReplenishmentUnitOfMeasure8]
					,Src.[PackReplenishmentZone8]
					,Src.[PackCartonizeUnitOfMeasure8]
					,Src.[PackLengthUnitOfMeasure8]
					,Src.[PackWidthUnitOfMeasure8]
					,Src.[PackHeightUnitOfMeasure8]
					,Src.[PackFilterValueUnitOfMeasure8]
					,Src.[PackIndicatorDigitUnitOfMeasure8]
					,Src.[PackUnitOfMeasure9]
					,Src.[PackOtherUnit2]
					,Src.[PackIsWarehouseQuantity9]
					,Src.[PackReplenishmentUnitOfMeasure9]
					,Src.[PackReplenishmentZone9]
					,Src.[PackCartonizeUnitOfMeasure9]
					,Src.[PackLengthUnitOfMeasure9]
					,Src.[PackWidthUnitOfMeasure9]
					,Src.[PackHeightUnitOfMeasure9]
					,Src.[PackFilterValueUnitOfMeasure9]
					,Src.[PackIndicatorDigitUnitOfMeasure9]
					,Src.[PackAddDateTime]
					,Src.[PackAddUserCode]
					,Src.[PackEditDateTime]
					,Src.[PackEditUserCode]
					,Src.[PackDiameterUnitOfMeasure1]
					,Src.[PackThickNessUnitOfMeasure1]
				FROM [dbo].Packs Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Packs Dest WITH (NOLOCK) ON Src.[PackCode] = Dest.[PackCode]
				WHERE Dest.[PackCode] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Packs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Packs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Products
	SET @CurrentTableName = 'Products';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		SET @ProductArchiveAfterDays = ISNULL((
					SELECT FieldValue
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'ProductArchiveAfterDays'
					), 60);
		SET @MaxDateToArchiveData = DATEADD(DAY, @ProductArchiveAfterDays * - 1, GETUTCDATE());

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Products AS Dest
			USING (
				SELECT DISTINCT P.[CompanyIDStorer]
					,P.[ProductCode]
					,P.[ProductHazmatProductCode]
					,P.[ProductItemReference]
					,P.[ProductSerialNumberStart]
					,P.[ProductSerialNumberEnd]
					,P.[ProductSerialNumberNext]
					,P.[ProductDescription]
					,P.[ProductUserDefined01]
					,P.[ProductUserDefined02]
					,P.[ProductUserDefined03]
					,P.[ProductUserDefined04]
					,P.[ProductUserDefined05]
					,P.[ProductManufacturersCode]
					,P.[ProductRetailCode]
					,P.[AlternativeProductCode]
					,P.[PackCode]
					,P.[ProductStandardGrossWeight]
					,P.[ProductStandardNetWeight]
					,P.[ProductStandardCube]
					,P.[ProductTare]
					,P.[ProductClass]
					,P.[ProductActive]
					,P.[ProductGroup]
					,P.[ProductTariffCode]
					,P.[ProductUserDefined11]
					,P.[ProductUserDefined12]
					,P.[ProductUserDefined13]
					,P.[ProductUserDefined14]
					,P.[ProductUserDefined15]
					,P.[ProductLotAttributeLabel01]
					,P.[ProductLotAttributeLabel02]
					,P.[ProductLotAttributeLabel03]
					,P.[ProductLotAttributeLabel04]
					,P.[ProductLotAttributeLabel05]
					,P.[ProductLotAttributeLabel06]
					,P.[ProductLotAttributeLabel07]
					,P.[ProductLotAttributeLabel08]
					,P.[ProductLotAttributeLabel09]
					,P.[ProductLotAttributeLabel10]
					,P.[ProductPickCode]
					,P.[ProductStrategyCode]
					,P.[ProductCartonGroup]
					,P.[ProductPutCode]
					,P.[LocationIDPutaway]
					,P.[ProductPutawayZone]
					,P.[ProductInnerPack]
					,P.[ProductCube]
					,P.[ProductGrossWeight]
					,P.[ProductNetWeight]
					,P.[ProductABC]
					,P.[ProductCycleCountFrequency]
					,P.[ProductLastCycleCountDateTime]
					,P.[ProductReorderPoint]
					,P.[ProductReorderQuantity]
					,P.[ProductStandardOrderCost]
					,P.[ProductCarryCost]
					,P.[ProductPrice]
					,P.[ProductCost]
					,P.[ProductOnReceiptCopyPackCode]
					,P.[ProductReceiptHoldCode]
					,P.[ProductReceiptInspectionLocation]
					,P.[ProductRotateBy]
					,P.[ProductDateCodeDays]
					,P.[ProductDefaultRotation]
					,P.[ProductShippableContainer]
					,P.[ProductTareWeight]
					,P.[ProductLotStorageUnitDetailOtherLabel1]
					,P.[ProductLotStorageUnitDetailOtherLabel2]
					,P.[ProductLotStorageUnitDetailOtherLabel3]
					,P.[ProductAverageCaseWeight]
					,P.[ProductTolerancePercentage]
					,P.[ProductShelfLifeIndicator]
					,P.[ProductShelfLife]
					,P.[ProductTransportationMode]
					,P.[ProductGroup2]
					,P.[ProductUserDefined06]
					,P.[ProductUserDefined07]
					,P.[ProductUserDefined08]
					,P.[ProductUserDefined09]
					,P.[ProductUserDefined10]
					,P.[ProductUserDefined16]
					,P.[ProductUserDefined17]
					,P.[ProductUserDefined18]
					,P.[ProductUserDefined19]
					,P.[ProductUserDefined20]
					,P.[ProductMinimumShelfLiveOnRFPicking]
					,P.[ProductFreightClass]
					,P.[ProductShelfLifeCodeType]
					,P.[ProductShelfLifeOnReceiving]
					,P.[ProductLotValidationKey]
					,P.[ProductAllowConsolidation]
					,P.[ProductMinimumWaveQuantity]
					,P.[ProductBulkCartonGroup]
					,P.[ProductPickUnitOfMeasure]
					,P.[ProductEachCode]
					,P.[ProductCaseCode]
					,P.[ProductType]
					,P.[ProductConveyable]
					,P.[ProductFlowThroughItem]
					,CAST(P.[ProductNotes1] AS VARCHAR(MAX)) AS [ProductNotes1]
					,CAST(P.[ProductNotes2] AS VARCHAR(MAX)) AS [ProductNotes2]
					,P.[ProductVerifyLot4Lot5]
					,P.[ProductPutawayStrategyCode]
					,P.[LocationIDReturns]
					,P.[ProductLocationIDQualityCheck]
					,P.[ProductReceiptValidationTemplate]
					,P.[ProductType2]
					,P.[ProductStackLimit]
					,P.[ProductMaximumPalletesPerZone]
					,P.[ProductCycleCountDiscrepencyRule]
					,P.[ProductAddDateTime]
					,P.[ProductAddUserCode]
					,P.[ProductEditDateTime]
					,P.[ProductEditUserCode]
					,P.[ProductName]
					,CAST(P.[ProductUserDefinedLongText01] AS NVARCHAR(MAX)) AS [ProductUserDefinedLongText01]
					,CAST(P.[ProductUserDefinedLongText02] AS NVARCHAR(MAX)) AS [ProductUserDefinedLongText02]
					,CAST(P.[ProductUserDefinedLongText03] AS NVARCHAR(MAX)) AS [ProductUserDefinedLongText03]
					,CAST(P.[ProductUserDefinedLongText04] AS NVARCHAR(MAX)) AS [ProductUserDefinedLongText04]
					,CAST(P.[ProductUserDefinedLongText05] AS NVARCHAR(MAX)) AS [ProductUserDefinedLongText05]
					,P.[ProductDisplayProduct]
					,P.[ProductStatus]
					,P.[ProductUsesPalletCases]
					,P.[ProductRequiresDoubleCaseScan]
					,P.[ProductNewAllocationStrategy]
					,P.ProductMinimumWaveQty
					--,P.ProductAllowConsolidation
					,P.ProductAllowMultiLotLPN
				FROM dbo.Products P WITH (NOLOCK)
				LEFT OUTER JOIN Lots L WITH (NOLOCK) ON P.[ProductCode] = L.ProductCode
					AND P.[CompanyIDStorer] = L.CompanyIDStorer
				LEFT OUTER JOIN LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
				WHERE (
						LLLSU.LinkLotLocationStorageUnitQuantity = 0
						OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
						)
					AND CAST(ProductEditDateTime AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
				) AS Src
				ON (
						Dest.[ProductCode] = Src.[ProductCode]
						AND Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ProductHazmatProductCode] = Src.[ProductHazmatProductCode]
						,Dest.[ProductItemReference] = Src.[ProductItemReference]
						,Dest.[ProductSerialNumberStart] = Src.[ProductSerialNumberStart]
						,Dest.[ProductSerialNumberEnd] = Src.[ProductSerialNumberEnd]
						,Dest.[ProductSerialNumberNext] = Src.[ProductSerialNumberNext]
						,Dest.[ProductDescription] = Src.[ProductDescription]
						,Dest.[ProductUserDefined01] = Src.[ProductUserDefined01]
						,Dest.[ProductUserDefined02] = Src.[ProductUserDefined02]
						,Dest.[ProductUserDefined03] = Src.[ProductUserDefined03]
						,Dest.[ProductUserDefined04] = Src.[ProductUserDefined04]
						,Dest.[ProductUserDefined05] = Src.[ProductUserDefined05]
						,Dest.[ProductManufacturersCode] = Src.[ProductManufacturersCode]
						,Dest.[ProductRetailCode] = Src.[ProductRetailCode]
						,Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[ProductStandardGrossWeight] = Src.[ProductStandardGrossWeight]
						,Dest.[ProductStandardNetWeight] = Src.[ProductStandardNetWeight]
						,Dest.[ProductStandardCube] = Src.[ProductStandardCube]
						,Dest.[ProductTare] = Src.[ProductTare]
						,Dest.[ProductClass] = Src.[ProductClass]
						,Dest.[ProductActive] = Src.[ProductActive]
						,Dest.[ProductGroup] = Src.[ProductGroup]
						,Dest.[ProductTariffCode] = Src.[ProductTariffCode]
						,Dest.[ProductUserDefined11] = Src.[ProductUserDefined11]
						,Dest.[ProductUserDefined12] = Src.[ProductUserDefined12]
						,Dest.[ProductUserDefined13] = Src.[ProductUserDefined13]
						,Dest.[ProductUserDefined14] = Src.[ProductUserDefined14]
						,Dest.[ProductUserDefined15] = Src.[ProductUserDefined15]
						,Dest.[ProductLotAttributeLabel01] = Src.[ProductLotAttributeLabel01]
						,Dest.[ProductLotAttributeLabel02] = Src.[ProductLotAttributeLabel02]
						,Dest.[ProductLotAttributeLabel03] = Src.[ProductLotAttributeLabel03]
						,Dest.[ProductLotAttributeLabel04] = Src.[ProductLotAttributeLabel04]
						,Dest.[ProductLotAttributeLabel05] = Src.[ProductLotAttributeLabel05]
						,Dest.[ProductLotAttributeLabel06] = Src.[ProductLotAttributeLabel06]
						,Dest.[ProductLotAttributeLabel07] = Src.[ProductLotAttributeLabel07]
						,Dest.[ProductLotAttributeLabel08] = Src.[ProductLotAttributeLabel08]
						,Dest.[ProductLotAttributeLabel09] = Src.[ProductLotAttributeLabel09]
						,Dest.[ProductLotAttributeLabel10] = Src.[ProductLotAttributeLabel10]
						,Dest.[ProductPickCode] = Src.[ProductPickCode]
						,Dest.[ProductStrategyCode] = Src.[ProductStrategyCode]
						,Dest.[ProductCartonGroup] = Src.[ProductCartonGroup]
						,Dest.[ProductPutCode] = Src.[ProductPutCode]
						,Dest.[LocationIDPutaway] = Src.[LocationIDPutaway]
						,Dest.[ProductPutawayZone] = Src.[ProductPutawayZone]
						,Dest.[ProductInnerPack] = Src.[ProductInnerPack]
						,Dest.[ProductCube] = Src.[ProductCube]
						,Dest.[ProductGrossWeight] = Src.[ProductGrossWeight]
						,Dest.[ProductNetWeight] = Src.[ProductNetWeight]
						,Dest.[ProductABC] = Src.[ProductABC]
						,Dest.[ProductCycleCountFrequency] = Src.[ProductCycleCountFrequency]
						,Dest.[ProductLastCycleCountDateTime] = Src.[ProductLastCycleCountDateTime]
						,Dest.[ProductReorderPoint] = Src.[ProductReorderPoint]
						,Dest.[ProductReorderQuantity] = Src.[ProductReorderQuantity]
						,Dest.[ProductStandardOrderCost] = Src.[ProductStandardOrderCost]
						,Dest.[ProductCarryCost] = Src.[ProductCarryCost]
						,Dest.[ProductPrice] = Src.[ProductPrice]
						,Dest.[ProductCost] = Src.[ProductCost]
						,Dest.[ProductOnReceiptCopyPackCode] = Src.[ProductOnReceiptCopyPackCode]
						,Dest.[ProductReceiptHoldCode] = Src.[ProductReceiptHoldCode]
						,Dest.[ProductReceiptInspectionLocation] = Src.[ProductReceiptInspectionLocation]
						,Dest.[ProductRotateBy] = Src.[ProductRotateBy]
						,Dest.[ProductDateCodeDays] = Src.[ProductDateCodeDays]
						,Dest.[ProductDefaultRotation] = Src.[ProductDefaultRotation]
						,Dest.[ProductShippableContainer] = Src.[ProductShippableContainer]
						,Dest.[ProductTareWeight] = Src.[ProductTareWeight]
						,Dest.[ProductLotStorageUnitDetailOtherLabel1] = Src.[ProductLotStorageUnitDetailOtherLabel1]
						,Dest.[ProductLotStorageUnitDetailOtherLabel2] = Src.[ProductLotStorageUnitDetailOtherLabel2]
						,Dest.[ProductLotStorageUnitDetailOtherLabel3] = Src.[ProductLotStorageUnitDetailOtherLabel3]
						,Dest.[ProductAverageCaseWeight] = Src.[ProductAverageCaseWeight]
						,Dest.[ProductTolerancePercentage] = Src.[ProductTolerancePercentage]
						,Dest.[ProductShelfLifeIndicator] = Src.[ProductShelfLifeIndicator]
						,Dest.[ProductShelfLife] = Src.[ProductShelfLife]
						,Dest.[ProductTransportationMode] = Src.[ProductTransportationMode]
						,Dest.[ProductGroup2] = Src.[ProductGroup2]
						,Dest.[ProductUserDefined06] = Src.[ProductUserDefined06]
						,Dest.[ProductUserDefined07] = Src.[ProductUserDefined07]
						,Dest.[ProductUserDefined08] = Src.[ProductUserDefined08]
						,Dest.[ProductUserDefined09] = Src.[ProductUserDefined09]
						,Dest.[ProductUserDefined10] = Src.[ProductUserDefined10]
						,Dest.[ProductUserDefined16] = Src.[ProductUserDefined16]
						,Dest.[ProductUserDefined17] = Src.[ProductUserDefined17]
						,Dest.[ProductUserDefined18] = Src.[ProductUserDefined18]
						,Dest.[ProductUserDefined19] = Src.[ProductUserDefined19]
						,Dest.[ProductUserDefined20] = Src.[ProductUserDefined20]
						,Dest.[ProductMinimumShelfLiveOnRFPicking] = Src.[ProductMinimumShelfLiveOnRFPicking]
						,Dest.[ProductFreightClass] = Src.[ProductFreightClass]
						,Dest.[ProductShelfLifeCodeType] = Src.[ProductShelfLifeCodeType]
						,Dest.[ProductShelfLifeOnReceiving] = Src.[ProductShelfLifeOnReceiving]
						,Dest.[ProductLotValidationKey] = Src.[ProductLotValidationKey]
						,Dest.[ProductAllowConsolidation] = Src.[ProductAllowConsolidation]
						,Dest.[ProductMinimumWaveQuantity] = Src.[ProductMinimumWaveQuantity]
						,Dest.[ProductBulkCartonGroup] = Src.[ProductBulkCartonGroup]
						,Dest.[ProductPickUnitOfMeasure] = Src.[ProductPickUnitOfMeasure]
						,Dest.[ProductEachCode] = Src.[ProductEachCode]
						,Dest.[ProductCaseCode] = Src.[ProductCaseCode]
						,Dest.[ProductType] = Src.[ProductType]
						,Dest.[ProductConveyable] = Src.[ProductConveyable]
						,Dest.[ProductFlowThroughItem] = Src.[ProductFlowThroughItem]
						,Dest.[ProductNotes1] = Src.[ProductNotes1]
						,Dest.[ProductNotes2] = Src.[ProductNotes2]
						,Dest.[ProductVerifyLot4Lot5] = Src.[ProductVerifyLot4Lot5]
						,Dest.[ProductPutawayStrategyCode] = Src.[ProductPutawayStrategyCode]
						,Dest.[LocationIDReturns] = Src.[LocationIDReturns]
						,Dest.[ProductLocationIDQualityCheck] = Src.[ProductLocationIDQualityCheck]
						,Dest.[ProductReceiptValidationTemplate] = Src.[ProductReceiptValidationTemplate]
						,Dest.[ProductType2] = Src.[ProductType2]
						,Dest.[ProductStackLimit] = Src.[ProductStackLimit]
						,Dest.[ProductMaximumPalletesPerZone] = Src.[ProductMaximumPalletesPerZone]
						,Dest.[ProductCycleCountDiscrepencyRule] = Src.[ProductCycleCountDiscrepencyRule]
						,Dest.[ProductAddDateTime] = Src.[ProductAddDateTime]
						,Dest.[ProductAddUserCode] = Src.[ProductAddUserCode]
						,Dest.[ProductEditDateTime] = Src.[ProductEditDateTime]
						,Dest.[ProductEditUserCode] = Src.[ProductEditUserCode]
						,Dest.[ProductName] = Src.[ProductName]
						,Dest.[ProductUserDefinedLongText01] = Src.[ProductUserDefinedLongText01]
						,Dest.[ProductUserDefinedLongText02] = Src.[ProductUserDefinedLongText02]
						,Dest.[ProductUserDefinedLongText03] = Src.[ProductUserDefinedLongText03]
						,Dest.[ProductUserDefinedLongText04] = Src.[ProductUserDefinedLongText04]
						,Dest.[ProductUserDefinedLongText05] = Src.[ProductUserDefinedLongText05]
						,Dest.[ProductDisplayProduct] = Src.[ProductDisplayProduct]
						,Dest.[ProductStatus] = Src.[ProductStatus]
						,Dest.[ProductUsesPalletCases] = Src.[ProductUsesPalletCases]
						,Dest.[ProductRequiresDoubleCaseScan] = Src.[ProductRequiresDoubleCaseScan]
						,Dest.[ProductNewAllocationStrategy] = Src.[ProductNewAllocationStrategy]
						,Dest.ProductMinimumWaveQty = Src.ProductMinimumWaveQty
						--,Dest.ProductAllowConsolidation = Src.ProductAllowConsolidation
						,Dest.ProductAllowMultiLotLPN = Src.ProductAllowMultiLotLPN
			WHEN NOT MATCHED
				THEN
					INSERT (
						[CompanyIDStorer]
						,[ProductCode]
						,[ProductHazmatProductCode]
						,[ProductItemReference]
						,[ProductSerialNumberStart]
						,[ProductSerialNumberEnd]
						,[ProductSerialNumberNext]
						,[ProductDescription]
						,[ProductUserDefined01]
						,[ProductUserDefined02]
						,[ProductUserDefined03]
						,[ProductUserDefined04]
						,[ProductUserDefined05]
						,[ProductManufacturersCode]
						,[ProductRetailCode]
						,[AlternativeProductCode]
						,[PackCode]
						,[ProductStandardGrossWeight]
						,[ProductStandardNetWeight]
						,[ProductStandardCube]
						,[ProductTare]
						,[ProductClass]
						,[ProductActive]
						,[ProductGroup]
						,[ProductTariffCode]
						,[ProductUserDefined11]
						,[ProductUserDefined12]
						,[ProductUserDefined13]
						,[ProductUserDefined14]
						,[ProductUserDefined15]
						,[ProductLotAttributeLabel01]
						,[ProductLotAttributeLabel02]
						,[ProductLotAttributeLabel03]
						,[ProductLotAttributeLabel04]
						,[ProductLotAttributeLabel05]
						,[ProductLotAttributeLabel06]
						,[ProductLotAttributeLabel07]
						,[ProductLotAttributeLabel08]
						,[ProductLotAttributeLabel09]
						,[ProductLotAttributeLabel10]
						,[ProductPickCode]
						,[ProductStrategyCode]
						,[ProductCartonGroup]
						,[ProductPutCode]
						,[LocationIDPutaway]
						,[ProductPutawayZone]
						,[ProductInnerPack]
						,[ProductCube]
						,[ProductGrossWeight]
						,[ProductNetWeight]
						,[ProductABC]
						,[ProductCycleCountFrequency]
						,[ProductLastCycleCountDateTime]
						,[ProductReorderPoint]
						,[ProductReorderQuantity]
						,[ProductStandardOrderCost]
						,[ProductCarryCost]
						,[ProductPrice]
						,[ProductCost]
						,[ProductOnReceiptCopyPackCode]
						,[ProductReceiptHoldCode]
						,[ProductReceiptInspectionLocation]
						,[ProductRotateBy]
						,[ProductDateCodeDays]
						,[ProductDefaultRotation]
						,[ProductShippableContainer]
						,[ProductTareWeight]
						,[ProductLotStorageUnitDetailOtherLabel1]
						,[ProductLotStorageUnitDetailOtherLabel2]
						,[ProductLotStorageUnitDetailOtherLabel3]
						,[ProductAverageCaseWeight]
						,[ProductTolerancePercentage]
						,[ProductShelfLifeIndicator]
						,[ProductShelfLife]
						,[ProductTransportationMode]
						,[ProductGroup2]
						,[ProductUserDefined06]
						,[ProductUserDefined07]
						,[ProductUserDefined08]
						,[ProductUserDefined09]
						,[ProductUserDefined10]
						,[ProductUserDefined16]
						,[ProductUserDefined17]
						,[ProductUserDefined18]
						,[ProductUserDefined19]
						,[ProductUserDefined20]
						,[ProductMinimumShelfLiveOnRFPicking]
						,[ProductFreightClass]
						,[ProductShelfLifeCodeType]
						,[ProductShelfLifeOnReceiving]
						,[ProductLotValidationKey]
						,[ProductAllowConsolidation]
						,[ProductMinimumWaveQuantity]
						,[ProductBulkCartonGroup]
						,[ProductPickUnitOfMeasure]
						,[ProductEachCode]
						,[ProductCaseCode]
						,[ProductType]
						,[ProductConveyable]
						,[ProductFlowThroughItem]
						,[ProductNotes1]
						,[ProductNotes2]
						,[ProductVerifyLot4Lot5]
						,[ProductPutawayStrategyCode]
						,[LocationIDReturns]
						,[ProductLocationIDQualityCheck]
						,[ProductReceiptValidationTemplate]
						,[ProductType2]
						,[ProductStackLimit]
						,[ProductMaximumPalletesPerZone]
						,[ProductCycleCountDiscrepencyRule]
						,[ProductAddDateTime]
						,[ProductAddUserCode]
						,[ProductEditDateTime]
						,[ProductEditUserCode]
						,[ProductName]
						,[ProductUserDefinedLongText01]
						,[ProductUserDefinedLongText02]
						,[ProductUserDefinedLongText03]
						,[ProductUserDefinedLongText04]
						,[ProductUserDefinedLongText05]
						,[ProductDisplayProduct]
						,[ProductStatus]
						,[ProductUsesPalletCases]
						,[ProductRequiresDoubleCaseScan]
						,[ProductNewAllocationStrategy]
						,ProductMinimumWaveQty
						--,ProductAllowConsolidation
						,ProductAllowMultiLotLPN
						)
					VALUES (
						Src.[CompanyIDStorer]
						,Src.[ProductCode]
						,Src.[ProductHazmatProductCode]
						,Src.[ProductItemReference]
						,Src.[ProductSerialNumberStart]
						,Src.[ProductSerialNumberEnd]
						,Src.[ProductSerialNumberNext]
						,Src.[ProductDescription]
						,Src.[ProductUserDefined01]
						,Src.[ProductUserDefined02]
						,Src.[ProductUserDefined03]
						,Src.[ProductUserDefined04]
						,Src.[ProductUserDefined05]
						,Src.[ProductManufacturersCode]
						,Src.[ProductRetailCode]
						,Src.[AlternativeProductCode]
						,Src.[PackCode]
						,Src.[ProductStandardGrossWeight]
						,Src.[ProductStandardNetWeight]
						,Src.[ProductStandardCube]
						,Src.[ProductTare]
						,Src.[ProductClass]
						,Src.[ProductActive]
						,Src.[ProductGroup]
						,Src.[ProductTariffCode]
						,Src.[ProductUserDefined11]
						,Src.[ProductUserDefined12]
						,Src.[ProductUserDefined13]
						,Src.[ProductUserDefined14]
						,Src.[ProductUserDefined15]
						,Src.[ProductLotAttributeLabel01]
						,Src.[ProductLotAttributeLabel02]
						,Src.[ProductLotAttributeLabel03]
						,Src.[ProductLotAttributeLabel04]
						,Src.[ProductLotAttributeLabel05]
						,Src.[ProductLotAttributeLabel06]
						,Src.[ProductLotAttributeLabel07]
						,Src.[ProductLotAttributeLabel08]
						,Src.[ProductLotAttributeLabel09]
						,Src.[ProductLotAttributeLabel10]
						,Src.[ProductPickCode]
						,Src.[ProductStrategyCode]
						,Src.[ProductCartonGroup]
						,Src.[ProductPutCode]
						,Src.[LocationIDPutaway]
						,Src.[ProductPutawayZone]
						,Src.[ProductInnerPack]
						,Src.[ProductCube]
						,Src.[ProductGrossWeight]
						,Src.[ProductNetWeight]
						,Src.[ProductABC]
						,Src.[ProductCycleCountFrequency]
						,Src.[ProductLastCycleCountDateTime]
						,Src.[ProductReorderPoint]
						,Src.[ProductReorderQuantity]
						,Src.[ProductStandardOrderCost]
						,Src.[ProductCarryCost]
						,Src.[ProductPrice]
						,Src.[ProductCost]
						,Src.[ProductOnReceiptCopyPackCode]
						,Src.[ProductReceiptHoldCode]
						,Src.[ProductReceiptInspectionLocation]
						,Src.[ProductRotateBy]
						,Src.[ProductDateCodeDays]
						,Src.[ProductDefaultRotation]
						,Src.[ProductShippableContainer]
						,Src.[ProductTareWeight]
						,Src.[ProductLotStorageUnitDetailOtherLabel1]
						,Src.[ProductLotStorageUnitDetailOtherLabel2]
						,Src.[ProductLotStorageUnitDetailOtherLabel3]
						,Src.[ProductAverageCaseWeight]
						,Src.[ProductTolerancePercentage]
						,Src.[ProductShelfLifeIndicator]
						,Src.[ProductShelfLife]
						,Src.[ProductTransportationMode]
						,Src.[ProductGroup2]
						,Src.[ProductUserDefined06]
						,Src.[ProductUserDefined07]
						,Src.[ProductUserDefined08]
						,Src.[ProductUserDefined09]
						,Src.[ProductUserDefined10]
						,Src.[ProductUserDefined16]
						,Src.[ProductUserDefined17]
						,Src.[ProductUserDefined18]
						,Src.[ProductUserDefined19]
						,Src.[ProductUserDefined20]
						,Src.[ProductMinimumShelfLiveOnRFPicking]
						,Src.[ProductFreightClass]
						,Src.[ProductShelfLifeCodeType]
						,Src.[ProductShelfLifeOnReceiving]
						,Src.[ProductLotValidationKey]
						,Src.[ProductAllowConsolidation]
						,Src.[ProductMinimumWaveQuantity]
						,Src.[ProductBulkCartonGroup]
						,Src.[ProductPickUnitOfMeasure]
						,Src.[ProductEachCode]
						,Src.[ProductCaseCode]
						,Src.[ProductType]
						,Src.[ProductConveyable]
						,Src.[ProductFlowThroughItem]
						,Src.[ProductNotes1]
						,Src.[ProductNotes2]
						,Src.[ProductVerifyLot4Lot5]
						,Src.[ProductPutawayStrategyCode]
						,Src.[LocationIDReturns]
						,Src.[ProductLocationIDQualityCheck]
						,Src.[ProductReceiptValidationTemplate]
						,Src.[ProductType2]
						,Src.[ProductStackLimit]
						,Src.[ProductMaximumPalletesPerZone]
						,Src.[ProductCycleCountDiscrepencyRule]
						,Src.[ProductAddDateTime]
						,Src.[ProductAddUserCode]
						,Src.[ProductEditDateTime]
						,Src.[ProductEditUserCode]
						,Src.[ProductName]
						,Src.[ProductUserDefinedLongText01]
						,Src.[ProductUserDefinedLongText02]
						,Src.[ProductUserDefinedLongText03]
						,Src.[ProductUserDefinedLongText04]
						,Src.[ProductUserDefinedLongText05]
						,Src.[ProductDisplayProduct]
						,Src.[ProductStatus]
						,Src.[ProductUsesPalletCases]
						,Src.[ProductRequiresDoubleCaseScan]
						,Src.[ProductNewAllocationStrategy]
						,Src.ProductMinimumWaveQty
						--,Src.ProductAllowConsolidation
						,Src.ProductAllowMultiLotLPN
						)
			OUTPUT $ACTION
				,CAST(Inserted.[ProductCode] AS VARCHAR(50)) + CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[ProductCode] AS VARCHAR(50)) + CAST(Deleted.[CompanyIDStorer] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/

			WHILE EXISTS (
						SELECT 1
						FROM dbo.Products Src WITH (NOLOCK)
						LEFT OUTER JOIN Lots L WITH (NOLOCK) ON Src.[ProductCode] = L.ProductCode
							AND Src.[CompanyIDStorer] = L.CompanyIDStorer
						LEFT OUTER JOIN LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
						INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products Dest WITH (NOLOCK) ON Dest.[ProductCode] = Src.[ProductCode]
							AND Dest.[CompanyIDStorer] = Src.[CompanyIDStorer] 
						WHERE 
								(LLLSU.LinkLotLocationStorageUnitQuantity = 0
								OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL)
								
							AND CAST(Src.ProductEditDateTime AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
							AND Dest.[ProductEditDateTime] < Src.[ProductEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ProductHazmatProductCode] = Src.[ProductHazmatProductCode]
						,Dest.[ProductItemReference] = Src.[ProductItemReference]
						,Dest.[ProductSerialNumberStart] = Src.[ProductSerialNumberStart]
						,Dest.[ProductSerialNumberEnd] = Src.[ProductSerialNumberEnd]
						,Dest.[ProductSerialNumberNext] = Src.[ProductSerialNumberNext]
						,Dest.[ProductDescription] = Src.[ProductDescription]
						,Dest.[ProductUserDefined01] = Src.[ProductUserDefined01]
						,Dest.[ProductUserDefined02] = Src.[ProductUserDefined02]
						,Dest.[ProductUserDefined03] = Src.[ProductUserDefined03]
						,Dest.[ProductUserDefined04] = Src.[ProductUserDefined04]
						,Dest.[ProductUserDefined05] = Src.[ProductUserDefined05]
						,Dest.[ProductManufacturersCode] = Src.[ProductManufacturersCode]
						,Dest.[ProductRetailCode] = Src.[ProductRetailCode]
						,Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[ProductStandardGrossWeight] = Src.[ProductStandardGrossWeight]
						,Dest.[ProductStandardNetWeight] = Src.[ProductStandardNetWeight]
						,Dest.[ProductStandardCube] = Src.[ProductStandardCube]
						,Dest.[ProductTare] = Src.[ProductTare]
						,Dest.[ProductClass] = Src.[ProductClass]
						,Dest.[ProductActive] = Src.[ProductActive]
						,Dest.[ProductGroup] = Src.[ProductGroup]
						,Dest.[ProductTariffCode] = Src.[ProductTariffCode]
						,Dest.[ProductUserDefined11] = Src.[ProductUserDefined11]
						,Dest.[ProductUserDefined12] = Src.[ProductUserDefined12]
						,Dest.[ProductUserDefined13] = Src.[ProductUserDefined13]
						,Dest.[ProductUserDefined14] = Src.[ProductUserDefined14]
						,Dest.[ProductUserDefined15] = Src.[ProductUserDefined15]
						,Dest.[ProductLotAttributeLabel01] = Src.[ProductLotAttributeLabel01]
						,Dest.[ProductLotAttributeLabel02] = Src.[ProductLotAttributeLabel02]
						,Dest.[ProductLotAttributeLabel03] = Src.[ProductLotAttributeLabel03]
						,Dest.[ProductLotAttributeLabel04] = Src.[ProductLotAttributeLabel04]
						,Dest.[ProductLotAttributeLabel05] = Src.[ProductLotAttributeLabel05]
						,Dest.[ProductLotAttributeLabel06] = Src.[ProductLotAttributeLabel06]
						,Dest.[ProductLotAttributeLabel07] = Src.[ProductLotAttributeLabel07]
						,Dest.[ProductLotAttributeLabel08] = Src.[ProductLotAttributeLabel08]
						,Dest.[ProductLotAttributeLabel09] = Src.[ProductLotAttributeLabel09]
						,Dest.[ProductLotAttributeLabel10] = Src.[ProductLotAttributeLabel10]
						,Dest.[ProductPickCode] = Src.[ProductPickCode]
						,Dest.[ProductStrategyCode] = Src.[ProductStrategyCode]
						,Dest.[ProductCartonGroup] = Src.[ProductCartonGroup]
						,Dest.[ProductPutCode] = Src.[ProductPutCode]
						,Dest.[LocationIDPutaway] = Src.[LocationIDPutaway]
						,Dest.[ProductPutawayZone] = Src.[ProductPutawayZone]
						,Dest.[ProductInnerPack] = Src.[ProductInnerPack]
						,Dest.[ProductCube] = Src.[ProductCube]
						,Dest.[ProductGrossWeight] = Src.[ProductGrossWeight]
						,Dest.[ProductNetWeight] = Src.[ProductNetWeight]
						,Dest.[ProductABC] = Src.[ProductABC]
						,Dest.[ProductCycleCountFrequency] = Src.[ProductCycleCountFrequency]
						,Dest.[ProductLastCycleCountDateTime] = Src.[ProductLastCycleCountDateTime]
						,Dest.[ProductReorderPoint] = Src.[ProductReorderPoint]
						,Dest.[ProductReorderQuantity] = Src.[ProductReorderQuantity]
						,Dest.[ProductStandardOrderCost] = Src.[ProductStandardOrderCost]
						,Dest.[ProductCarryCost] = Src.[ProductCarryCost]
						,Dest.[ProductPrice] = Src.[ProductPrice]
						,Dest.[ProductCost] = Src.[ProductCost]
						,Dest.[ProductOnReceiptCopyPackCode] = Src.[ProductOnReceiptCopyPackCode]
						,Dest.[ProductReceiptHoldCode] = Src.[ProductReceiptHoldCode]
						,Dest.[ProductReceiptInspectionLocation] = Src.[ProductReceiptInspectionLocation]
						,Dest.[ProductRotateBy] = Src.[ProductRotateBy]
						,Dest.[ProductDateCodeDays] = Src.[ProductDateCodeDays]
						,Dest.[ProductDefaultRotation] = Src.[ProductDefaultRotation]
						,Dest.[ProductShippableContainer] = Src.[ProductShippableContainer]
						,Dest.[ProductTareWeight] = Src.[ProductTareWeight]
						,Dest.[ProductLotStorageUnitDetailOtherLabel1] = Src.[ProductLotStorageUnitDetailOtherLabel1]
						,Dest.[ProductLotStorageUnitDetailOtherLabel2] = Src.[ProductLotStorageUnitDetailOtherLabel2]
						,Dest.[ProductLotStorageUnitDetailOtherLabel3] = Src.[ProductLotStorageUnitDetailOtherLabel3]
						,Dest.[ProductAverageCaseWeight] = Src.[ProductAverageCaseWeight]
						,Dest.[ProductTolerancePercentage] = Src.[ProductTolerancePercentage]
						,Dest.[ProductShelfLifeIndicator] = Src.[ProductShelfLifeIndicator]
						,Dest.[ProductShelfLife] = Src.[ProductShelfLife]
						,Dest.[ProductTransportationMode] = Src.[ProductTransportationMode]
						,Dest.[ProductGroup2] = Src.[ProductGroup2]
						,Dest.[ProductUserDefined06] = Src.[ProductUserDefined06]
						,Dest.[ProductUserDefined07] = Src.[ProductUserDefined07]
						,Dest.[ProductUserDefined08] = Src.[ProductUserDefined08]
						,Dest.[ProductUserDefined09] = Src.[ProductUserDefined09]
						,Dest.[ProductUserDefined10] = Src.[ProductUserDefined10]
						,Dest.[ProductUserDefined16] = Src.[ProductUserDefined16]
						,Dest.[ProductUserDefined17] = Src.[ProductUserDefined17]
						,Dest.[ProductUserDefined18] = Src.[ProductUserDefined18]
						,Dest.[ProductUserDefined19] = Src.[ProductUserDefined19]
						,Dest.[ProductUserDefined20] = Src.[ProductUserDefined20]
						,Dest.[ProductMinimumShelfLiveOnRFPicking] = Src.[ProductMinimumShelfLiveOnRFPicking]
						,Dest.[ProductFreightClass] = Src.[ProductFreightClass]
						,Dest.[ProductShelfLifeCodeType] = Src.[ProductShelfLifeCodeType]
						,Dest.[ProductShelfLifeOnReceiving] = Src.[ProductShelfLifeOnReceiving]
						,Dest.[ProductLotValidationKey] = Src.[ProductLotValidationKey]
						,Dest.[ProductAllowConsolidation] = Src.[ProductAllowConsolidation]
						,Dest.[ProductMinimumWaveQuantity] = Src.[ProductMinimumWaveQuantity]
						,Dest.[ProductBulkCartonGroup] = Src.[ProductBulkCartonGroup]
						,Dest.[ProductPickUnitOfMeasure] = Src.[ProductPickUnitOfMeasure]
						,Dest.[ProductEachCode] = Src.[ProductEachCode]
						,Dest.[ProductCaseCode] = Src.[ProductCaseCode]
						,Dest.[ProductType] = Src.[ProductType]
						,Dest.[ProductConveyable] = Src.[ProductConveyable]
						,Dest.[ProductFlowThroughItem] = Src.[ProductFlowThroughItem]
						,Dest.[ProductNotes1] = Src.[ProductNotes1]
						,Dest.[ProductNotes2] = Src.[ProductNotes2]
						,Dest.[ProductVerifyLot4Lot5] = Src.[ProductVerifyLot4Lot5]
						,Dest.[ProductPutawayStrategyCode] = Src.[ProductPutawayStrategyCode]
						,Dest.[LocationIDReturns] = Src.[LocationIDReturns]
						,Dest.[ProductLocationIDQualityCheck] = Src.[ProductLocationIDQualityCheck]
						,Dest.[ProductReceiptValidationTemplate] = Src.[ProductReceiptValidationTemplate]
						,Dest.[ProductType2] = Src.[ProductType2]
						,Dest.[ProductStackLimit] = Src.[ProductStackLimit]
						,Dest.[ProductMaximumPalletesPerZone] = Src.[ProductMaximumPalletesPerZone]
						,Dest.[ProductCycleCountDiscrepencyRule] = Src.[ProductCycleCountDiscrepencyRule]
						,Dest.[ProductAddDateTime] = Src.[ProductAddDateTime]
						,Dest.[ProductAddUserCode] = Src.[ProductAddUserCode]
						,Dest.[ProductEditDateTime] = Src.[ProductEditDateTime]
						,Dest.[ProductEditUserCode] = Src.[ProductEditUserCode]
						,Dest.[ProductName] = Src.[ProductName]
						,Dest.[ProductUserDefinedLongText01] = Src.[ProductUserDefinedLongText01]
						,Dest.[ProductUserDefinedLongText02] = Src.[ProductUserDefinedLongText02]
						,Dest.[ProductUserDefinedLongText03] = Src.[ProductUserDefinedLongText03]
						,Dest.[ProductUserDefinedLongText04] = Src.[ProductUserDefinedLongText04]
						,Dest.[ProductUserDefinedLongText05] = Src.[ProductUserDefinedLongText05]
						,Dest.[ProductDisplayProduct] = Src.[ProductDisplayProduct]
						,Dest.[ProductStatus] = Src.[ProductStatus]
						,Dest.[ProductUsesPalletCases] = Src.[ProductUsesPalletCases]
						,Dest.[ProductRequiresDoubleCaseScan] = Src.[ProductRequiresDoubleCaseScan]
						,Dest.[ProductNewAllocationStrategy] = Src.[ProductNewAllocationStrategy]
						,Dest.ProductMinimumWaveQty = Src.ProductMinimumWaveQty
						--,Dest.ProductAllowConsolidation = Src.ProductAllowConsolidation
						,Dest.ProductAllowMultiLotLPN = Src.ProductAllowMultiLotLPN
				OUTPUT 'UPDATE'
					,CAST(Inserted.[ProductCode] AS VARCHAR(50)) + CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[ProductCode] AS VARCHAR(50)) + CAST(Deleted.[CompanyIDStorer] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
						FROM dbo.Products Src WITH (NOLOCK)
						LEFT OUTER JOIN Lots L WITH (NOLOCK) ON Src.[ProductCode] = L.ProductCode
							AND Src.[CompanyIDStorer] = L.CompanyIDStorer
						LEFT OUTER JOIN LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
						INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products Dest WITH (NOLOCK) ON Dest.[ProductCode] = Src.[ProductCode]
							AND Dest.[CompanyIDStorer] = Src.[CompanyIDStorer] WHERE (
								LLLSU.LinkLotLocationStorageUnitQuantity = 0
								OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
								)
							AND CAST(Src.ProductEditDateTime AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
							AND Dest.[ProductEditDateTime] < Src.[ProductEditDateTime];
			END;

			WHILE EXISTS (
							SELECT 1
							FROM dbo.Products Src WITH (NOLOCK)
							LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.[ProductCode] = L.ProductCode
								AND Src.[CompanyIDStorer] = L.CompanyIDStorer
							LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
							LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products Dest WITH (NOLOCK) ON Dest.[ProductCode] = Src.[ProductCode]
								AND Dest.[CompanyIDStorer] = Src.[CompanyIDStorer] 
							WHERE (
									LLLSU.LinkLotLocationStorageUnitQuantity = 0
									OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
									)
								AND CAST(Src.ProductEditDateTime AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
								AND Dest.[ProductCode] IS NULL
								AND Dest.[CompanyIDStorer] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Products (
						[CompanyIDStorer]
						,[ProductCode]
						,[ProductHazmatProductCode]
						,[ProductItemReference]
						,[ProductSerialNumberStart]
						,[ProductSerialNumberEnd]
						,[ProductSerialNumberNext]
						,[ProductDescription]
						,[ProductUserDefined01]
						,[ProductUserDefined02]
						,[ProductUserDefined03]
						,[ProductUserDefined04]
						,[ProductUserDefined05]
						,[ProductManufacturersCode]
						,[ProductRetailCode]
						,[AlternativeProductCode]
						,[PackCode]
						,[ProductStandardGrossWeight]
						,[ProductStandardNetWeight]
						,[ProductStandardCube]
						,[ProductTare]
						,[ProductClass]
						,[ProductActive]
						,[ProductGroup]
						,[ProductTariffCode]
						,[ProductUserDefined11]
						,[ProductUserDefined12]
						,[ProductUserDefined13]
						,[ProductUserDefined14]
						,[ProductUserDefined15]
						,[ProductLotAttributeLabel01]
						,[ProductLotAttributeLabel02]
						,[ProductLotAttributeLabel03]
						,[ProductLotAttributeLabel04]
						,[ProductLotAttributeLabel05]
						,[ProductLotAttributeLabel06]
						,[ProductLotAttributeLabel07]
						,[ProductLotAttributeLabel08]
						,[ProductLotAttributeLabel09]
						,[ProductLotAttributeLabel10]
						,[ProductPickCode]
						,[ProductStrategyCode]
						,[ProductCartonGroup]
						,[ProductPutCode]
						,[LocationIDPutaway]
						,[ProductPutawayZone]
						,[ProductInnerPack]
						,[ProductCube]
						,[ProductGrossWeight]
						,[ProductNetWeight]
						,[ProductABC]
						,[ProductCycleCountFrequency]
						,[ProductLastCycleCountDateTime]
						,[ProductReorderPoint]
						,[ProductReorderQuantity]
						,[ProductStandardOrderCost]
						,[ProductCarryCost]
						,[ProductPrice]
						,[ProductCost]
						,[ProductOnReceiptCopyPackCode]
						,[ProductReceiptHoldCode]
						,[ProductReceiptInspectionLocation]
						,[ProductRotateBy]
						,[ProductDateCodeDays]
						,[ProductDefaultRotation]
						,[ProductShippableContainer]
						,[ProductTareWeight]
						,[ProductLotStorageUnitDetailOtherLabel1]
						,[ProductLotStorageUnitDetailOtherLabel2]
						,[ProductLotStorageUnitDetailOtherLabel3]
						,[ProductAverageCaseWeight]
						,[ProductTolerancePercentage]
						,[ProductShelfLifeIndicator]
						,[ProductShelfLife]
						,[ProductTransportationMode]
						,[ProductGroup2]
						,[ProductUserDefined06]
						,[ProductUserDefined07]
						,[ProductUserDefined08]
						,[ProductUserDefined09]
						,[ProductUserDefined10]
						,[ProductUserDefined16]
						,[ProductUserDefined17]
						,[ProductUserDefined18]
						,[ProductUserDefined19]
						,[ProductUserDefined20]
						,[ProductMinimumShelfLiveOnRFPicking]
						,[ProductFreightClass]
						,[ProductShelfLifeCodeType]
						,[ProductShelfLifeOnReceiving]
						,[ProductLotValidationKey]
						,[ProductAllowConsolidation]
						,[ProductMinimumWaveQuantity]
						,[ProductBulkCartonGroup]
						,[ProductPickUnitOfMeasure]
						,[ProductEachCode]
						,[ProductCaseCode]
						,[ProductType]
						,[ProductConveyable]
						,[ProductFlowThroughItem]
						,[ProductNotes1]
						,[ProductNotes2]
						,[ProductVerifyLot4Lot5]
						,[ProductPutawayStrategyCode]
						,[LocationIDReturns]
						,[ProductLocationIDQualityCheck]
						,[ProductReceiptValidationTemplate]
						,[ProductType2]
						,[ProductStackLimit]
						,[ProductMaximumPalletesPerZone]
						,[ProductCycleCountDiscrepencyRule]
						,[ProductAddDateTime]
						,[ProductAddUserCode]
						,[ProductEditDateTime]
						,[ProductEditUserCode]
						,[ProductName]
						,[ProductUserDefinedLongText01]
						,[ProductUserDefinedLongText02]
						,[ProductUserDefinedLongText03]
						,[ProductUserDefinedLongText04]
						,[ProductUserDefinedLongText05]
						,[ProductDisplayProduct]
						,[ProductStatus]
						,[ProductUsesPalletCases]
						,[ProductRequiresDoubleCaseScan]
						,[ProductNewAllocationStrategy]
						,ProductMinimumWaveQty
						--,ProductAllowConsolidation
						,ProductAllowMultiLotLPN
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[ProductCode] AS VARCHAR(50)) + CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)					
				SELECT TOP (@BatchSizeForArchival) 
						Src.[CompanyIDStorer]
						,Src.[ProductCode]
						,Src.[ProductHazmatProductCode]
						,Src.[ProductItemReference]
						,Src.[ProductSerialNumberStart]
						,Src.[ProductSerialNumberEnd]
						,Src.[ProductSerialNumberNext]
						,Src.[ProductDescription]
						,Src.[ProductUserDefined01]
						,Src.[ProductUserDefined02]
						,Src.[ProductUserDefined03]
						,Src.[ProductUserDefined04]
						,Src.[ProductUserDefined05]
						,Src.[ProductManufacturersCode]
						,Src.[ProductRetailCode]
						,Src.[AlternativeProductCode]
						,Src.[PackCode]
						,Src.[ProductStandardGrossWeight]
						,Src.[ProductStandardNetWeight]
						,Src.[ProductStandardCube]
						,Src.[ProductTare]
						,Src.[ProductClass]
						,Src.[ProductActive]
						,Src.[ProductGroup]
						,Src.[ProductTariffCode]
						,Src.[ProductUserDefined11]
						,Src.[ProductUserDefined12]
						,Src.[ProductUserDefined13]
						,Src.[ProductUserDefined14]
						,Src.[ProductUserDefined15]
						,Src.[ProductLotAttributeLabel01]
						,Src.[ProductLotAttributeLabel02]
						,Src.[ProductLotAttributeLabel03]
						,Src.[ProductLotAttributeLabel04]
						,Src.[ProductLotAttributeLabel05]
						,Src.[ProductLotAttributeLabel06]
						,Src.[ProductLotAttributeLabel07]
						,Src.[ProductLotAttributeLabel08]
						,Src.[ProductLotAttributeLabel09]
						,Src.[ProductLotAttributeLabel10]
						,Src.[ProductPickCode]
						,Src.[ProductStrategyCode]
						,Src.[ProductCartonGroup]
						,Src.[ProductPutCode]
						,Src.[LocationIDPutaway]
						,Src.[ProductPutawayZone]
						,Src.[ProductInnerPack]
						,Src.[ProductCube]
						,Src.[ProductGrossWeight]
						,Src.[ProductNetWeight]
						,Src.[ProductABC]
						,Src.[ProductCycleCountFrequency]
						,Src.[ProductLastCycleCountDateTime]
						,Src.[ProductReorderPoint]
						,Src.[ProductReorderQuantity]
						,Src.[ProductStandardOrderCost]
						,Src.[ProductCarryCost]
						,Src.[ProductPrice]
						,Src.[ProductCost]
						,Src.[ProductOnReceiptCopyPackCode]
						,Src.[ProductReceiptHoldCode]
						,Src.[ProductReceiptInspectionLocation]
						,Src.[ProductRotateBy]
						,Src.[ProductDateCodeDays]
						,Src.[ProductDefaultRotation]
						,Src.[ProductShippableContainer]
						,Src.[ProductTareWeight]
						,Src.[ProductLotStorageUnitDetailOtherLabel1]
						,Src.[ProductLotStorageUnitDetailOtherLabel2]
						,Src.[ProductLotStorageUnitDetailOtherLabel3]
						,Src.[ProductAverageCaseWeight]
						,Src.[ProductTolerancePercentage]
						,Src.[ProductShelfLifeIndicator]
						,Src.[ProductShelfLife]
						,Src.[ProductTransportationMode]
						,Src.[ProductGroup2]
						,Src.[ProductUserDefined06]
						,Src.[ProductUserDefined07]
						,Src.[ProductUserDefined08]
						,Src.[ProductUserDefined09]
						,Src.[ProductUserDefined10]
						,Src.[ProductUserDefined16]
						,Src.[ProductUserDefined17]
						,Src.[ProductUserDefined18]
						,Src.[ProductUserDefined19]
						,Src.[ProductUserDefined20]
						,Src.[ProductMinimumShelfLiveOnRFPicking]
						,Src.[ProductFreightClass]
						,Src.[ProductShelfLifeCodeType]
						,Src.[ProductShelfLifeOnReceiving]
						,Src.[ProductLotValidationKey]
						,Src.[ProductAllowConsolidation]
						,Src.[ProductMinimumWaveQuantity]
						,Src.[ProductBulkCartonGroup]
						,Src.[ProductPickUnitOfMeasure]
						,Src.[ProductEachCode]
						,Src.[ProductCaseCode]
						,Src.[ProductType]
						,Src.[ProductConveyable]
						,Src.[ProductFlowThroughItem]
						,Src.[ProductNotes1]
						,Src.[ProductNotes2]
						,Src.[ProductVerifyLot4Lot5]
						,Src.[ProductPutawayStrategyCode]
						,Src.[LocationIDReturns]
						,Src.[ProductLocationIDQualityCheck]
						,Src.[ProductReceiptValidationTemplate]
						,Src.[ProductType2]
						,Src.[ProductStackLimit]
						,Src.[ProductMaximumPalletesPerZone]
						,Src.[ProductCycleCountDiscrepencyRule]
						,Src.[ProductAddDateTime]
						,Src.[ProductAddUserCode]
						,Src.[ProductEditDateTime]
						,Src.[ProductEditUserCode]
						,Src.[ProductName]
						,Src.[ProductUserDefinedLongText01]
						,Src.[ProductUserDefinedLongText02]
						,Src.[ProductUserDefinedLongText03]
						,Src.[ProductUserDefinedLongText04]
						,Src.[ProductUserDefinedLongText05]
						,Src.[ProductDisplayProduct]
						,Src.[ProductStatus]
						,Src.[ProductUsesPalletCases]
						,Src.[ProductRequiresDoubleCaseScan]
						,Src.[ProductNewAllocationStrategy]
						,Src.ProductMinimumWaveQty
						--,Src.ProductAllowConsolidation
						,Src.ProductAllowMultiLotLPN
							FROM dbo.Products Src WITH (NOLOCK)
							LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.[ProductCode] = L.ProductCode
								AND Src.[CompanyIDStorer] = L.CompanyIDStorer
							LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
							LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products Dest WITH (NOLOCK) ON Dest.[ProductCode] = Src.[ProductCode]
								AND Dest.[CompanyIDStorer] = Src.[CompanyIDStorer] 
							WHERE (
									LLLSU.LinkLotLocationStorageUnitQuantity = 0
									OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
									)
								AND CAST(Src.ProductEditDateTime AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
								AND Dest.[ProductCode] IS NULL
								AND Dest.[CompanyIDStorer] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Products: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Products` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Lots (Archival Logic for Lots is required)
	-----
	SET @CurrentTableName = 'Lots';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots AS Dest
			USING (
				SELECT L.[IDLot]
					,L.[CompanyIDStorer]
					,L.[ProductCode]
					,L.[LotEachesPerCase]
					,L.[LotInnerPack]
					,L.[LotQuantity]
					,L.[LotEachesPerPallet]
					,L.[LotCube]
					,L.[LotGrossWeight]
					,L.[LotNetWeight]
					,L.[LotOtherUnit1]
					,L.[LotOtherUnit2]
					,L.[LotQuantityPreallocated]
					,L.[LotQuantityAllocated]
					,L.[LotQuantityPicked]
					,L.[LotQuantityOnHold]
					,L.[LotStatus]
					,L.[LotArchiveQuantity]
					,L.[LotArchiveDateTime]
					,L.[LotAddDateTime]
					,L.[LotAddUserCode]
					,L.[LotEditDateTime]
					,L.[LotEditUserCode]
					,L.[LotGrossWeightPreallocated]
					,L.[LotNetWeightPreallocated]
					,L.[LotGrossWeightAllocated]
					,L.[LotNetWeightAllocated]
					,L.[LotGrossWeightPicked]
					,L.[LotNetWeightPicked]
				FROM dbo.Lots L WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON L.[ProductCode] = P.[ProductCode]
					AND L.[CompanyIDStorer] = P.[CompanyIDStorer]
				) AS Src
				ON (Dest.[IDLot] = Src.[IDLot])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[LotEachesPerCase] = Src.[LotEachesPerCase]
						,Dest.[LotInnerPack] = Src.[LotInnerPack]
						,Dest.[LotQuantity] = Src.[LotQuantity]
						,Dest.[LotEachesPerPallet] = Src.[LotEachesPerPallet]
						,Dest.[LotCube] = Src.[LotCube]
						,Dest.[LotGrossWeight] = Src.[LotGrossWeight]
						,Dest.[LotNetWeight] = Src.[LotNetWeight]
						,Dest.[LotOtherUnit1] = Src.[LotOtherUnit1]
						,Dest.[LotOtherUnit2] = Src.[LotOtherUnit2]
						,Dest.[LotQuantityPreallocated] = Src.[LotQuantityPreallocated]
						,Dest.[LotQuantityAllocated] = Src.[LotQuantityAllocated]
						,Dest.[LotQuantityPicked] = Src.[LotQuantityPicked]
						,Dest.[LotQuantityOnHold] = Src.[LotQuantityOnHold]
						,Dest.[LotStatus] = Src.[LotStatus]
						,Dest.[LotArchiveQuantity] = Src.[LotArchiveQuantity]
						,Dest.[LotArchiveDateTime] = Src.[LotArchiveDateTime]
						,Dest.[LotAddDateTime] = Src.[LotAddDateTime]
						,Dest.[LotAddUserCode] = Src.[LotAddUserCode]
						,Dest.[LotEditDateTime] = Src.[LotEditDateTime]
						,Dest.[LotEditUserCode] = Src.[LotEditUserCode]
						,Dest.[LotGrossWeightPreallocated] = Src.[LotGrossWeightPreallocated]
						,Dest.[LotNetWeightPreallocated] = Src.[LotNetWeightPreallocated]
						,Dest.[LotGrossWeightAllocated] = Src.[LotGrossWeightAllocated]
						,Dest.[LotNetWeightAllocated] = Src.[LotNetWeightAllocated]
						,Dest.[LotGrossWeightPicked] = Src.[LotGrossWeightPicked]
						,Dest.[LotNetWeightPicked] = Src.[LotNetWeightPicked]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDLot]
						,[CompanyIDStorer]
						,[ProductCode]
						,[LotEachesPerCase]
						,[LotInnerPack]
						,[LotQuantity]
						,[LotEachesPerPallet]
						,[LotCube]
						,[LotGrossWeight]
						,[LotNetWeight]
						,[LotOtherUnit1]
						,[LotOtherUnit2]
						,[LotQuantityPreallocated]
						,[LotQuantityAllocated]
						,[LotQuantityPicked]
						,[LotQuantityOnHold]
						,[LotStatus]
						,[LotArchiveQuantity]
						,[LotArchiveDateTime]
						,[LotAddDateTime]
						,[LotAddUserCode]
						,[LotEditDateTime]
						,[LotEditUserCode]
						,[LotGrossWeightPreallocated]
						,[LotNetWeightPreallocated]
						,[LotGrossWeightAllocated]
						,[LotNetWeightAllocated]
						,[LotGrossWeightPicked]
						,[LotNetWeightPicked]
						)
					VALUES (
						Src.[IDLot]
						,Src.[CompanyIDStorer]
						,Src.[ProductCode]
						,Src.[LotEachesPerCase]
						,Src.[LotInnerPack]
						,Src.[LotQuantity]
						,Src.[LotEachesPerPallet]
						,Src.[LotCube]
						,Src.[LotGrossWeight]
						,Src.[LotNetWeight]
						,Src.[LotOtherUnit1]
						,Src.[LotOtherUnit2]
						,Src.[LotQuantityPreallocated]
						,Src.[LotQuantityAllocated]
						,Src.[LotQuantityPicked]
						,Src.[LotQuantityOnHold]
						,Src.[LotStatus]
						,Src.[LotArchiveQuantity]
						,Src.[LotArchiveDateTime]
						,Src.[LotAddDateTime]
						,Src.[LotAddUserCode]
						,Src.[LotEditDateTime]
						,Src.[LotEditUserCode]
						,Src.[LotGrossWeightPreallocated]
						,Src.[LotNetWeightPreallocated]
						,Src.[LotGrossWeightAllocated]
						,Src.[LotNetWeightAllocated]
						,Src.[LotGrossWeightPicked]
						,Src.[LotNetWeightPicked]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDLot] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDLot] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/

			WHILE EXISTS (
					SELECT 1
					FROM dbo.Lots Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
						AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots Dest WITH (NOLOCK) ON Dest.[IDLot] = Src.[IDLot]
					WHERE Dest.[LotEditDateTime] < Src.[LotEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					,Dest.[ProductCode] = Src.[ProductCode]
					,Dest.[LotEachesPerCase] = Src.[LotEachesPerCase]
					,Dest.[LotInnerPack] = Src.[LotInnerPack]
					,Dest.[LotQuantity] = Src.[LotQuantity]
					,Dest.[LotEachesPerPallet] = Src.[LotEachesPerPallet]
					,Dest.[LotCube] = Src.[LotCube]
					,Dest.[LotGrossWeight] = Src.[LotGrossWeight]
					,Dest.[LotNetWeight] = Src.[LotNetWeight]
					,Dest.[LotOtherUnit1] = Src.[LotOtherUnit1]
					,Dest.[LotOtherUnit2] = Src.[LotOtherUnit2]
					,Dest.[LotQuantityPreallocated] = Src.[LotQuantityPreallocated]
					,Dest.[LotQuantityAllocated] = Src.[LotQuantityAllocated]
					,Dest.[LotQuantityPicked] = Src.[LotQuantityPicked]
					,Dest.[LotQuantityOnHold] = Src.[LotQuantityOnHold]
					,Dest.[LotStatus] = Src.[LotStatus]
					,Dest.[LotArchiveQuantity] = Src.[LotArchiveQuantity]
					,Dest.[LotArchiveDateTime] = Src.[LotArchiveDateTime]
					,Dest.[LotAddDateTime] = Src.[LotAddDateTime]
					,Dest.[LotAddUserCode] = Src.[LotAddUserCode]
					,Dest.[LotEditDateTime] = Src.[LotEditDateTime]
					,Dest.[LotEditUserCode] = Src.[LotEditUserCode]
					,Dest.[LotGrossWeightPreallocated] = Src.[LotGrossWeightPreallocated]
					,Dest.[LotNetWeightPreallocated] = Src.[LotNetWeightPreallocated]
					,Dest.[LotGrossWeightAllocated] = Src.[LotGrossWeightAllocated]
					,Dest.[LotNetWeightAllocated] = Src.[LotNetWeightAllocated]
					,Dest.[LotGrossWeightPicked] = Src.[LotGrossWeightPicked]
					,Dest.[LotNetWeightPicked] = Src.[LotNetWeightPicked]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDLot] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDLot] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.Lots Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
					AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots Dest WITH (NOLOCK) ON Dest.[IDLot] = Src.[IDLot]
				WHERE Dest.[LotEditDateTime] < Src.[LotEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.Lots Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
						AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots Dest WITH (NOLOCK) ON Dest.[IDLot] = Src.[IDLot]
					WHERE Dest.[IDLot] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots (
					[IDLot]
					,[CompanyIDStorer]
					,[ProductCode]
					,[LotEachesPerCase]
					,[LotInnerPack]
					,[LotQuantity]
					,[LotEachesPerPallet]
					,[LotCube]
					,[LotGrossWeight]
					,[LotNetWeight]
					,[LotOtherUnit1]
					,[LotOtherUnit2]
					,[LotQuantityPreallocated]
					,[LotQuantityAllocated]
					,[LotQuantityPicked]
					,[LotQuantityOnHold]
					,[LotStatus]
					,[LotArchiveQuantity]
					,[LotArchiveDateTime]
					,[LotAddDateTime]
					,[LotAddUserCode]
					,[LotEditDateTime]
					,[LotEditUserCode]
					,[LotGrossWeightPreallocated]
					,[LotNetWeightPreallocated]
					,[LotGrossWeightAllocated]
					,[LotNetWeightAllocated]
					,[LotGrossWeightPicked]
					,[LotNetWeightPicked]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDLot] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDLot]
					,Src.[CompanyIDStorer]
					,Src.[ProductCode]
					,Src.[LotEachesPerCase]
					,Src.[LotInnerPack]
					,Src.[LotQuantity]
					,Src.[LotEachesPerPallet]
					,Src.[LotCube]
					,Src.[LotGrossWeight]
					,Src.[LotNetWeight]
					,Src.[LotOtherUnit1]
					,Src.[LotOtherUnit2]
					,Src.[LotQuantityPreallocated]
					,Src.[LotQuantityAllocated]
					,Src.[LotQuantityPicked]
					,Src.[LotQuantityOnHold]
					,Src.[LotStatus]
					,Src.[LotArchiveQuantity]
					,Src.[LotArchiveDateTime]
					,Src.[LotAddDateTime]
					,Src.[LotAddUserCode]
					,Src.[LotEditDateTime]
					,Src.[LotEditUserCode]
					,Src.[LotGrossWeightPreallocated]
					,Src.[LotNetWeightPreallocated]
					,Src.[LotGrossWeightAllocated]
					,Src.[LotNetWeightAllocated]
					,Src.[LotGrossWeightPicked]
					,Src.[LotNetWeightPicked]
				FROM dbo.Lots Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
					AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots Dest WITH (NOLOCK) ON Dest.[IDLot] = Src.[IDLot]
				WHERE Dest.[IDLot] IS NULL;
			END;


			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Lots: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Lots` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----b) Deletion
	--ReceiptDetails
	SET @CurrentTableName = 'ReceiptDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptDetails AS Dest
			USING (
				SELECT RD.[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[ReceiptDetailExternalReceiptID]
					,[ReceiptDetailExternalLineNumber]
					,[CompanyIDStorer]
					,[ReceiptDetailPurchaseOrderCode]
					,[ReceiptDetailTariffCode]
					,[ProductCode]
					,[AlternativeProductCode]
					,[StorageUnitID]
					,[ReceiptDetailStatus]
					,[ReceiptDetailDateTimeReceived]
					,[ReceiptDetailQuantityExpected]
					,[ReceiptDetailQuantityAdjusted]
					,[ReceiptDetailQuantityReceived]
					,[ReceiptDetailUnitOfMeasure]
					,[PackCode]
					,[ReceiptDetailVesselCode]
					,[ReceiptDetailVoyageCode]
					,[ReceiptDetailCrossDockCode]
					,[ReceiptDetailContainerCode]
					,[LocationIDDestination]
					,[LotIDDestination]
					,[StorageUnitIDDestination]
					,[ReceiptDetailConditionCode]
					,[ReceiptDetailLotAttribute01]
					,[ReceiptDetailLotAttribute02]
					,[ReceiptDetailLotAttribute03]
					,[ReceiptDetailLotAttribute04]
					,[ReceiptDetailLotAttribute05]
					,[ReceiptDetailLotAttribute06]
					,[ReceiptDetailLotAttribute07]
					,[ReceiptDetailLotAttribute08]
					,[ReceiptDetailLotAttribute09]
					,[ReceiptDetailLotAttribute10]
					,[ReceiptDetailEachesPerCase]
					,[ReceiptDetailInnerPack]
					,[ReceiptDetailEachesPerPallet]
					,[ReceiptDetailCube]
					,[ReceiptDetailGrossWeight]
					,[ReceiptDetailNetWeight]
					,[ReceiptDetailOtherUnit1]
					,[ReceiptDetailOtherUnit2]
					,[ReceiptDetailUnitPrice]
					,[ReceiptDetailExtendedPrice]
					,[ReceiptDetailEffectiveDateTime]
					,[ReceiptDetailForteFlag]
					,[ReceiptDetailUserDefined01]
					,[ReceiptDetailUserDefined02]
					,[ReceiptDetailUserDefined03]
					,[ReceiptDetailUserDefined04]
					,[ReceiptDetailUserDefined05]
					,[ReceiptDetailNotes]
					,[ReceiptDetailReasonCode]
					,[ReceiptDetailPalletID]
					,[ReceiptDetailQuantityRejected]
					,[ReceiptDetailType]
					,[ReceiptDetailReturnType]
					,[ReceiptDetailReturnReason]
					,[ReceiptDetailReturnCondition]
					,[ReceiptDetailQualityCheckRequired]
					,[ReceiptDetailQualityQuantityInspected]
					,[ReceiptDetailQualityQuantityRejected]
					,[ReceiptDetailQualityCheckRejectReason]
					,[ReceiptDetailQualityCheckStatus]
					,[ReceiptDetailQualityCheckUser]
					,[ReceiptDetailQualityCheckAutoAdjust]
					,[ReceiptDetailExternalLot]
					,[ReceiptDetailRMA]
					,[ReceiptDetailPackingSlipQuantity]
					,[ReceiptDetailIPSKey]
					,[ReceiptDetailSupplierName]
					,[ReceiptDetailSupplierCode]
					,[ReceiptDetailMatchLot]
					,[ReceiptDetailAddDateTime]
					,[ReceiptDetailAddUserCode]
					,[ReceiptDetailEditDateTime]
					,[ReceiptDetailEditUserCode]
					,[ReceiptDetailUpcomingReceiptID]
					,[ReceiptDetailQuantityPreAllocated]
					,[ReceiptDetailTransit]
					,[ReceiptDetailChargeableWeight]
					,[ReceiptDetailUserDefined06]
					,[ReceiptDetailUserDefined07]
					,[ReceiptDetailUserDefined08]
					,[ReceiptDetailUserDefined09]
					,[ReceiptDetailUserDefined10]
					,[ReceiptDetailNotes2]
					,[ReceiptDetailNotes3]
					,[ReceiptDetailAutoHold]
					,[ReceiptDetailWarehousingNotes]
					,[ReceiptDetailExcludeFromReceiving]
					,[ReceiptDetailCustomerNotes]
					,[MatchLot]
					,[ReceiptDetailExternalUserDefinedString01]
					,[ReceiptDetailExternalUserDefinedString02]
					,[ReceiptDetailExternalUserDefinedString03]
					,[ReceiptDetailExternalUserDefinedString04]
					,[ReceiptDetailExternalUserDefinedString05]
					,[ReceiptDetailExternalUserDefinedString06]
					,[ReceiptDetailExternalUserDefinedString07]
					,[ReceiptDetailExternalUserDefinedString08]
					,[ReceiptDetailExternalUserDefinedString09]
					,[ReceiptDetailExternalUserDefinedString10]
					,[ReceiptDetailExternalUserDefinedString11]
					,[ReceiptDetailExternalUserDefinedString12]
					,[ReceiptDetailExternalUserDefinedString13]
					,[ReceiptDetailExternalUserDefinedString14]
					,[ReceiptDetailExternalUserDefinedString15]
					,[ReceiptDetailExternalUserDefinedDateTime01]
					,[ReceiptDetailExternalUserDefinedDateTime02]
					,[ReceiptDetailExternalUserDefinedDateTime03]
					,[ReceiptDetailExternalUserDefinedDateTime04]
					,[ReceiptDetailExternalUserDefinedDateTime05]
					,[ReceiptDetailExternalUserDefinedFloat01]
					,[ReceiptDetailExternalUserDefinedFloat02]
					,[ReceiptDetailExternalUserDefinedFloat03]
					,[ReceiptDetailExternalUserDefinedFloat04]
					,[ReceiptDetailExternalUserDefinedFloat05]
					,[ReceiptDetailExternalUserDefinedLookup01]
					,[ReceiptDetailExternalUserDefinedLookup02]
					,[ReceiptDetailExternalUserDefinedLookup03]
					,[ReceiptDetailExternalUserDefinedLookup04]
					,[ReceiptDetailExternalUserDefinedLookup05]
					,[ReceiptDetailExternalUserDefinedLookup06]
					,[ReceiptDetailExternalUserDefinedLookup07]
					,[ReceiptDetailExternalUserDefinedLookup08]
					,[ReceiptDetailExternalUserDefinedLookup09]
					,[ReceiptDetailExternalUserDefinedLookup10]
					,[ReceiptDetailTareWeight]
				FROM dbo.ReceiptDetails RD WITH (NOLOCK)
				INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON RD.ReceiptID = tmpReceiptIDs.ReceiptID
				) AS Src
				ON (
						Dest.[ReceiptID] = Src.[ReceiptID]
						AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ReceiptDetailExternalReceiptID] = Src.[ReceiptDetailExternalReceiptID]
						,Dest.[ReceiptDetailExternalLineNumber] = Src.[ReceiptDetailExternalLineNumber]
						,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[ReceiptDetailPurchaseOrderCode] = Src.[ReceiptDetailPurchaseOrderCode]
						,Dest.[ReceiptDetailTariffCode] = Src.[ReceiptDetailTariffCode]
						,Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
						,Dest.[StorageUnitID] = Src.[StorageUnitID]
						,Dest.[ReceiptDetailStatus] = Src.[ReceiptDetailStatus]
						,Dest.[ReceiptDetailDateTimeReceived] = Src.[ReceiptDetailDateTimeReceived]
						,Dest.[ReceiptDetailQuantityExpected] = Src.[ReceiptDetailQuantityExpected]
						,Dest.[ReceiptDetailQuantityAdjusted] = Src.[ReceiptDetailQuantityAdjusted]
						,Dest.[ReceiptDetailQuantityReceived] = Src.[ReceiptDetailQuantityReceived]
						,Dest.[ReceiptDetailUnitOfMeasure] = Src.[ReceiptDetailUnitOfMeasure]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[ReceiptDetailVesselCode] = Src.[ReceiptDetailVesselCode]
						,Dest.[ReceiptDetailVoyageCode] = Src.[ReceiptDetailVoyageCode]
						,Dest.[ReceiptDetailCrossDockCode] = Src.[ReceiptDetailCrossDockCode]
						,Dest.[ReceiptDetailContainerCode] = Src.[ReceiptDetailContainerCode]
						,Dest.[LocationIDDestination] = Src.[LocationIDDestination]
						,Dest.[LotIDDestination] = Src.[LotIDDestination]
						,Dest.[StorageUnitIDDestination] = Src.[StorageUnitIDDestination]
						,Dest.[ReceiptDetailConditionCode] = Src.[ReceiptDetailConditionCode]
						,Dest.[ReceiptDetailLotAttribute01] = Src.[ReceiptDetailLotAttribute01]
						,Dest.[ReceiptDetailLotAttribute02] = Src.[ReceiptDetailLotAttribute02]
						,Dest.[ReceiptDetailLotAttribute03] = Src.[ReceiptDetailLotAttribute03]
						,Dest.[ReceiptDetailLotAttribute04] = Src.[ReceiptDetailLotAttribute04]
						,Dest.[ReceiptDetailLotAttribute05] = Src.[ReceiptDetailLotAttribute05]
						,Dest.[ReceiptDetailLotAttribute06] = Src.[ReceiptDetailLotAttribute06]
						,Dest.[ReceiptDetailLotAttribute07] = Src.[ReceiptDetailLotAttribute07]
						,Dest.[ReceiptDetailLotAttribute08] = Src.[ReceiptDetailLotAttribute08]
						,Dest.[ReceiptDetailLotAttribute09] = Src.[ReceiptDetailLotAttribute09]
						,Dest.[ReceiptDetailLotAttribute10] = Src.[ReceiptDetailLotAttribute10]
						,Dest.[ReceiptDetailEachesPerCase] = Src.[ReceiptDetailEachesPerCase]
						,Dest.[ReceiptDetailInnerPack] = Src.[ReceiptDetailInnerPack]
						,Dest.[ReceiptDetailEachesPerPallet] = Src.[ReceiptDetailEachesPerPallet]
						,Dest.[ReceiptDetailCube] = Src.[ReceiptDetailCube]
						,Dest.[ReceiptDetailGrossWeight] = Src.[ReceiptDetailGrossWeight]
						,Dest.[ReceiptDetailNetWeight] = Src.[ReceiptDetailNetWeight]
						,Dest.[ReceiptDetailOtherUnit1] = Src.[ReceiptDetailOtherUnit1]
						,Dest.[ReceiptDetailOtherUnit2] = Src.[ReceiptDetailOtherUnit2]
						,Dest.[ReceiptDetailUnitPrice] = Src.[ReceiptDetailUnitPrice]
						,Dest.[ReceiptDetailExtendedPrice] = Src.[ReceiptDetailExtendedPrice]
						,Dest.[ReceiptDetailEffectiveDateTime] = Src.[ReceiptDetailEffectiveDateTime]
						,Dest.[ReceiptDetailForteFlag] = Src.[ReceiptDetailForteFlag]
						,Dest.[ReceiptDetailUserDefined01] = Src.[ReceiptDetailUserDefined01]
						,Dest.[ReceiptDetailUserDefined02] = Src.[ReceiptDetailUserDefined02]
						,Dest.[ReceiptDetailUserDefined03] = Src.[ReceiptDetailUserDefined03]
						,Dest.[ReceiptDetailUserDefined04] = Src.[ReceiptDetailUserDefined04]
						,Dest.[ReceiptDetailUserDefined05] = Src.[ReceiptDetailUserDefined05]
						,Dest.[ReceiptDetailNotes] = Src.[ReceiptDetailNotes]
						,Dest.[ReceiptDetailReasonCode] = Src.[ReceiptDetailReasonCode]
						,Dest.[ReceiptDetailPalletID] = Src.[ReceiptDetailPalletID]
						,Dest.[ReceiptDetailQuantityRejected] = Src.[ReceiptDetailQuantityRejected]
						,Dest.[ReceiptDetailType] = Src.[ReceiptDetailType]
						,Dest.[ReceiptDetailReturnType] = Src.[ReceiptDetailReturnType]
						,Dest.[ReceiptDetailReturnReason] = Src.[ReceiptDetailReturnReason]
						,Dest.[ReceiptDetailReturnCondition] = Src.[ReceiptDetailReturnCondition]
						,Dest.[ReceiptDetailQualityCheckRequired] = Src.[ReceiptDetailQualityCheckRequired]
						,Dest.[ReceiptDetailQualityQuantityInspected] = Src.[ReceiptDetailQualityQuantityInspected]
						,Dest.[ReceiptDetailQualityQuantityRejected] = Src.[ReceiptDetailQualityQuantityRejected]
						,Dest.[ReceiptDetailQualityCheckRejectReason] = Src.[ReceiptDetailQualityCheckRejectReason]
						,Dest.[ReceiptDetailQualityCheckStatus] = Src.[ReceiptDetailQualityCheckStatus]
						,Dest.[ReceiptDetailQualityCheckUser] = Src.[ReceiptDetailQualityCheckUser]
						,Dest.[ReceiptDetailQualityCheckAutoAdjust] = Src.[ReceiptDetailQualityCheckAutoAdjust]
						,Dest.[ReceiptDetailExternalLot] = Src.[ReceiptDetailExternalLot]
						,Dest.[ReceiptDetailRMA] = Src.[ReceiptDetailRMA]
						,Dest.[ReceiptDetailPackingSlipQuantity] = Src.[ReceiptDetailPackingSlipQuantity]
						,Dest.[ReceiptDetailIPSKey] = Src.[ReceiptDetailIPSKey]
						,Dest.[ReceiptDetailSupplierName] = Src.[ReceiptDetailSupplierName]
						,Dest.[ReceiptDetailSupplierCode] = Src.[ReceiptDetailSupplierCode]
						,Dest.[ReceiptDetailMatchLot] = Src.[ReceiptDetailMatchLot]
						,Dest.[ReceiptDetailAddDateTime] = Src.[ReceiptDetailAddDateTime]
						,Dest.[ReceiptDetailAddUserCode] = Src.[ReceiptDetailAddUserCode]
						,Dest.[ReceiptDetailEditDateTime] = Src.[ReceiptDetailEditDateTime]
						,Dest.[ReceiptDetailEditUserCode] = Src.[ReceiptDetailEditUserCode]
						,Dest.[ReceiptDetailUpcomingReceiptID] = Src.[ReceiptDetailUpcomingReceiptID]
						,Dest.[ReceiptDetailQuantityPreAllocated] = Src.[ReceiptDetailQuantityPreAllocated]
						,Dest.[ReceiptDetailTransit] = Src.[ReceiptDetailTransit]
						,Dest.[ReceiptDetailChargeableWeight] = Src.[ReceiptDetailChargeableWeight]
						,Dest.[ReceiptDetailUserDefined06] = Src.[ReceiptDetailUserDefined06]
						,Dest.[ReceiptDetailUserDefined07] = Src.[ReceiptDetailUserDefined07]
						,Dest.[ReceiptDetailUserDefined08] = Src.[ReceiptDetailUserDefined08]
						,Dest.[ReceiptDetailUserDefined09] = Src.[ReceiptDetailUserDefined09]
						,Dest.[ReceiptDetailUserDefined10] = Src.[ReceiptDetailUserDefined10]
						,Dest.[ReceiptDetailNotes2] = Src.[ReceiptDetailNotes2]
						,Dest.[ReceiptDetailNotes3] = Src.[ReceiptDetailNotes3]
						,Dest.[ReceiptDetailAutoHold] = Src.[ReceiptDetailAutoHold]
						,Dest.[ReceiptDetailWarehousingNotes] = Src.[ReceiptDetailWarehousingNotes]
						,Dest.[ReceiptDetailExcludeFromReceiving] = Src.[ReceiptDetailExcludeFromReceiving]
						,Dest.[ReceiptDetailCustomerNotes] = Src.[ReceiptDetailCustomerNotes]
						,Dest.[MatchLot] = Src.[MatchLot]
						,Dest.[ReceiptDetailExternalUserDefinedString01] = Src.[ReceiptDetailExternalUserDefinedString01]
						,Dest.[ReceiptDetailExternalUserDefinedString02] = Src.[ReceiptDetailExternalUserDefinedString02]
						,Dest.[ReceiptDetailExternalUserDefinedString03] = Src.[ReceiptDetailExternalUserDefinedString03]
						,Dest.[ReceiptDetailExternalUserDefinedString04] = Src.[ReceiptDetailExternalUserDefinedString04]
						,Dest.[ReceiptDetailExternalUserDefinedString05] = Src.[ReceiptDetailExternalUserDefinedString05]
						,Dest.[ReceiptDetailExternalUserDefinedString06] = Src.[ReceiptDetailExternalUserDefinedString06]
						,Dest.[ReceiptDetailExternalUserDefinedString07] = Src.[ReceiptDetailExternalUserDefinedString07]
						,Dest.[ReceiptDetailExternalUserDefinedString08] = Src.[ReceiptDetailExternalUserDefinedString08]
						,Dest.[ReceiptDetailExternalUserDefinedString09] = Src.[ReceiptDetailExternalUserDefinedString09]
						,Dest.[ReceiptDetailExternalUserDefinedString10] = Src.[ReceiptDetailExternalUserDefinedString10]
						,Dest.[ReceiptDetailExternalUserDefinedString11] = Src.[ReceiptDetailExternalUserDefinedString11]
						,Dest.[ReceiptDetailExternalUserDefinedString12] = Src.[ReceiptDetailExternalUserDefinedString12]
						,Dest.[ReceiptDetailExternalUserDefinedString13] = Src.[ReceiptDetailExternalUserDefinedString13]
						,Dest.[ReceiptDetailExternalUserDefinedString14] = Src.[ReceiptDetailExternalUserDefinedString14]
						,Dest.[ReceiptDetailExternalUserDefinedString15] = Src.[ReceiptDetailExternalUserDefinedString15]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime01] = Src.[ReceiptDetailExternalUserDefinedDateTime01]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime02] = Src.[ReceiptDetailExternalUserDefinedDateTime02]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime03] = Src.[ReceiptDetailExternalUserDefinedDateTime03]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime04] = Src.[ReceiptDetailExternalUserDefinedDateTime04]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime05] = Src.[ReceiptDetailExternalUserDefinedDateTime05]
						,Dest.[ReceiptDetailExternalUserDefinedFloat01] = Src.[ReceiptDetailExternalUserDefinedFloat01]
						,Dest.[ReceiptDetailExternalUserDefinedFloat02] = Src.[ReceiptDetailExternalUserDefinedFloat02]
						,Dest.[ReceiptDetailExternalUserDefinedFloat03] = Src.[ReceiptDetailExternalUserDefinedFloat03]
						,Dest.[ReceiptDetailExternalUserDefinedFloat04] = Src.[ReceiptDetailExternalUserDefinedFloat04]
						,Dest.[ReceiptDetailExternalUserDefinedFloat05] = Src.[ReceiptDetailExternalUserDefinedFloat05]
						,Dest.[ReceiptDetailExternalUserDefinedLookup01] = Src.[ReceiptDetailExternalUserDefinedLookup01]
						,Dest.[ReceiptDetailExternalUserDefinedLookup02] = Src.[ReceiptDetailExternalUserDefinedLookup02]
						,Dest.[ReceiptDetailExternalUserDefinedLookup03] = Src.[ReceiptDetailExternalUserDefinedLookup03]
						,Dest.[ReceiptDetailExternalUserDefinedLookup04] = Src.[ReceiptDetailExternalUserDefinedLookup04]
						,Dest.[ReceiptDetailExternalUserDefinedLookup05] = Src.[ReceiptDetailExternalUserDefinedLookup05]
						,Dest.[ReceiptDetailExternalUserDefinedLookup06] = Src.[ReceiptDetailExternalUserDefinedLookup06]
						,Dest.[ReceiptDetailExternalUserDefinedLookup07] = Src.[ReceiptDetailExternalUserDefinedLookup07]
						,Dest.[ReceiptDetailExternalUserDefinedLookup08] = Src.[ReceiptDetailExternalUserDefinedLookup08]
						,Dest.[ReceiptDetailExternalUserDefinedLookup09] = Src.[ReceiptDetailExternalUserDefinedLookup09]
						,Dest.[ReceiptDetailExternalUserDefinedLookup10] = Src.[ReceiptDetailExternalUserDefinedLookup10]
						,Dest.[ReceiptDetailTareWeight] = Src.[ReceiptDetailTareWeight]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[ReceiptID]
						,[ReceiptDetailLineNumber]
						,[ReceiptDetailExternalReceiptID]
						,[ReceiptDetailExternalLineNumber]
						,[CompanyIDStorer]
						,[ReceiptDetailPurchaseOrderCode]
						,[ReceiptDetailTariffCode]
						,[ProductCode]
						,[AlternativeProductCode]
						,[StorageUnitID]
						,[ReceiptDetailStatus]
						,[ReceiptDetailDateTimeReceived]
						,[ReceiptDetailQuantityExpected]
						,[ReceiptDetailQuantityAdjusted]
						,[ReceiptDetailQuantityReceived]
						,[ReceiptDetailUnitOfMeasure]
						,[PackCode]
						,[ReceiptDetailVesselCode]
						,[ReceiptDetailVoyageCode]
						,[ReceiptDetailCrossDockCode]
						,[ReceiptDetailContainerCode]
						,[LocationIDDestination]
						,[LotIDDestination]
						,[StorageUnitIDDestination]
						,[ReceiptDetailConditionCode]
						,[ReceiptDetailLotAttribute01]
						,[ReceiptDetailLotAttribute02]
						,[ReceiptDetailLotAttribute03]
						,[ReceiptDetailLotAttribute04]
						,[ReceiptDetailLotAttribute05]
						,[ReceiptDetailLotAttribute06]
						,[ReceiptDetailLotAttribute07]
						,[ReceiptDetailLotAttribute08]
						,[ReceiptDetailLotAttribute09]
						,[ReceiptDetailLotAttribute10]
						,[ReceiptDetailEachesPerCase]
						,[ReceiptDetailInnerPack]
						,[ReceiptDetailEachesPerPallet]
						,[ReceiptDetailCube]
						,[ReceiptDetailGrossWeight]
						,[ReceiptDetailNetWeight]
						,[ReceiptDetailOtherUnit1]
						,[ReceiptDetailOtherUnit2]
						,[ReceiptDetailUnitPrice]
						,[ReceiptDetailExtendedPrice]
						,[ReceiptDetailEffectiveDateTime]
						,[ReceiptDetailForteFlag]
						,[ReceiptDetailUserDefined01]
						,[ReceiptDetailUserDefined02]
						,[ReceiptDetailUserDefined03]
						,[ReceiptDetailUserDefined04]
						,[ReceiptDetailUserDefined05]
						,[ReceiptDetailNotes]
						,[ReceiptDetailReasonCode]
						,[ReceiptDetailPalletID]
						,[ReceiptDetailQuantityRejected]
						,[ReceiptDetailType]
						,[ReceiptDetailReturnType]
						,[ReceiptDetailReturnReason]
						,[ReceiptDetailReturnCondition]
						,[ReceiptDetailQualityCheckRequired]
						,[ReceiptDetailQualityQuantityInspected]
						,[ReceiptDetailQualityQuantityRejected]
						,[ReceiptDetailQualityCheckRejectReason]
						,[ReceiptDetailQualityCheckStatus]
						,[ReceiptDetailQualityCheckUser]
						,[ReceiptDetailQualityCheckAutoAdjust]
						,[ReceiptDetailExternalLot]
						,[ReceiptDetailRMA]
						,[ReceiptDetailPackingSlipQuantity]
						,[ReceiptDetailIPSKey]
						,[ReceiptDetailSupplierName]
						,[ReceiptDetailSupplierCode]
						,[ReceiptDetailMatchLot]
						,[ReceiptDetailAddDateTime]
						,[ReceiptDetailAddUserCode]
						,[ReceiptDetailEditDateTime]
						,[ReceiptDetailEditUserCode]
						,[ReceiptDetailUpcomingReceiptID]
						,[ReceiptDetailQuantityPreAllocated]
						,[ReceiptDetailTransit]
						,[ReceiptDetailChargeableWeight]
						,[ReceiptDetailUserDefined06]
						,[ReceiptDetailUserDefined07]
						,[ReceiptDetailUserDefined08]
						,[ReceiptDetailUserDefined09]
						,[ReceiptDetailUserDefined10]
						,[ReceiptDetailNotes2]
						,[ReceiptDetailNotes3]
						,[ReceiptDetailAutoHold]
						,[ReceiptDetailWarehousingNotes]
						,[ReceiptDetailExcludeFromReceiving]
						,[ReceiptDetailCustomerNotes]
						,[MatchLot]
						,[ReceiptDetailExternalUserDefinedString01]
						,[ReceiptDetailExternalUserDefinedString02]
						,[ReceiptDetailExternalUserDefinedString03]
						,[ReceiptDetailExternalUserDefinedString04]
						,[ReceiptDetailExternalUserDefinedString05]
						,[ReceiptDetailExternalUserDefinedString06]
						,[ReceiptDetailExternalUserDefinedString07]
						,[ReceiptDetailExternalUserDefinedString08]
						,[ReceiptDetailExternalUserDefinedString09]
						,[ReceiptDetailExternalUserDefinedString10]
						,[ReceiptDetailExternalUserDefinedString11]
						,[ReceiptDetailExternalUserDefinedString12]
						,[ReceiptDetailExternalUserDefinedString13]
						,[ReceiptDetailExternalUserDefinedString14]
						,[ReceiptDetailExternalUserDefinedString15]
						,[ReceiptDetailExternalUserDefinedDateTime01]
						,[ReceiptDetailExternalUserDefinedDateTime02]
						,[ReceiptDetailExternalUserDefinedDateTime03]
						,[ReceiptDetailExternalUserDefinedDateTime04]
						,[ReceiptDetailExternalUserDefinedDateTime05]
						,[ReceiptDetailExternalUserDefinedFloat01]
						,[ReceiptDetailExternalUserDefinedFloat02]
						,[ReceiptDetailExternalUserDefinedFloat03]
						,[ReceiptDetailExternalUserDefinedFloat04]
						,[ReceiptDetailExternalUserDefinedFloat05]
						,[ReceiptDetailExternalUserDefinedLookup01]
						,[ReceiptDetailExternalUserDefinedLookup02]
						,[ReceiptDetailExternalUserDefinedLookup03]
						,[ReceiptDetailExternalUserDefinedLookup04]
						,[ReceiptDetailExternalUserDefinedLookup05]
						,[ReceiptDetailExternalUserDefinedLookup06]
						,[ReceiptDetailExternalUserDefinedLookup07]
						,[ReceiptDetailExternalUserDefinedLookup08]
						,[ReceiptDetailExternalUserDefinedLookup09]
						,[ReceiptDetailExternalUserDefinedLookup10]
						,[ReceiptDetailTareWeight]
						)
					VALUES (
						Src.[ReceiptID]
						,Src.[ReceiptDetailLineNumber]
						,Src.[ReceiptDetailExternalReceiptID]
						,Src.[ReceiptDetailExternalLineNumber]
						,Src.[CompanyIDStorer]
						,Src.[ReceiptDetailPurchaseOrderCode]
						,Src.[ReceiptDetailTariffCode]
						,Src.[ProductCode]
						,Src.[AlternativeProductCode]
						,Src.[StorageUnitID]
						,Src.[ReceiptDetailStatus]
						,Src.[ReceiptDetailDateTimeReceived]
						,Src.[ReceiptDetailQuantityExpected]
						,Src.[ReceiptDetailQuantityAdjusted]
						,Src.[ReceiptDetailQuantityReceived]
						,Src.[ReceiptDetailUnitOfMeasure]
						,Src.[PackCode]
						,Src.[ReceiptDetailVesselCode]
						,Src.[ReceiptDetailVoyageCode]
						,Src.[ReceiptDetailCrossDockCode]
						,Src.[ReceiptDetailContainerCode]
						,Src.[LocationIDDestination]
						,Src.[LotIDDestination]
						,Src.[StorageUnitIDDestination]
						,Src.[ReceiptDetailConditionCode]
						,Src.[ReceiptDetailLotAttribute01]
						,Src.[ReceiptDetailLotAttribute02]
						,Src.[ReceiptDetailLotAttribute03]
						,Src.[ReceiptDetailLotAttribute04]
						,Src.[ReceiptDetailLotAttribute05]
						,Src.[ReceiptDetailLotAttribute06]
						,Src.[ReceiptDetailLotAttribute07]
						,Src.[ReceiptDetailLotAttribute08]
						,Src.[ReceiptDetailLotAttribute09]
						,Src.[ReceiptDetailLotAttribute10]
						,Src.[ReceiptDetailEachesPerCase]
						,Src.[ReceiptDetailInnerPack]
						,Src.[ReceiptDetailEachesPerPallet]
						,Src.[ReceiptDetailCube]
						,Src.[ReceiptDetailGrossWeight]
						,Src.[ReceiptDetailNetWeight]
						,Src.[ReceiptDetailOtherUnit1]
						,Src.[ReceiptDetailOtherUnit2]
						,Src.[ReceiptDetailUnitPrice]
						,Src.[ReceiptDetailExtendedPrice]
						,Src.[ReceiptDetailEffectiveDateTime]
						,Src.[ReceiptDetailForteFlag]
						,Src.[ReceiptDetailUserDefined01]
						,Src.[ReceiptDetailUserDefined02]
						,Src.[ReceiptDetailUserDefined03]
						,Src.[ReceiptDetailUserDefined04]
						,Src.[ReceiptDetailUserDefined05]
						,Src.[ReceiptDetailNotes]
						,Src.[ReceiptDetailReasonCode]
						,Src.[ReceiptDetailPalletID]
						,Src.[ReceiptDetailQuantityRejected]
						,Src.[ReceiptDetailType]
						,Src.[ReceiptDetailReturnType]
						,Src.[ReceiptDetailReturnReason]
						,Src.[ReceiptDetailReturnCondition]
						,Src.[ReceiptDetailQualityCheckRequired]
						,Src.[ReceiptDetailQualityQuantityInspected]
						,Src.[ReceiptDetailQualityQuantityRejected]
						,Src.[ReceiptDetailQualityCheckRejectReason]
						,Src.[ReceiptDetailQualityCheckStatus]
						,Src.[ReceiptDetailQualityCheckUser]
						,Src.[ReceiptDetailQualityCheckAutoAdjust]
						,Src.[ReceiptDetailExternalLot]
						,Src.[ReceiptDetailRMA]
						,Src.[ReceiptDetailPackingSlipQuantity]
						,Src.[ReceiptDetailIPSKey]
						,Src.[ReceiptDetailSupplierName]
						,Src.[ReceiptDetailSupplierCode]
						,Src.[ReceiptDetailMatchLot]
						,Src.[ReceiptDetailAddDateTime]
						,Src.[ReceiptDetailAddUserCode]
						,Src.[ReceiptDetailEditDateTime]
						,Src.[ReceiptDetailEditUserCode]
						,Src.[ReceiptDetailUpcomingReceiptID]
						,Src.[ReceiptDetailQuantityPreAllocated]
						,Src.[ReceiptDetailTransit]
						,Src.[ReceiptDetailChargeableWeight]
						,Src.[ReceiptDetailUserDefined06]
						,Src.[ReceiptDetailUserDefined07]
						,Src.[ReceiptDetailUserDefined08]
						,Src.[ReceiptDetailUserDefined09]
						,Src.[ReceiptDetailUserDefined10]
						,Src.[ReceiptDetailNotes2]
						,Src.[ReceiptDetailNotes3]
						,Src.[ReceiptDetailAutoHold]
						,Src.[ReceiptDetailWarehousingNotes]
						,Src.[ReceiptDetailExcludeFromReceiving]
						,Src.[ReceiptDetailCustomerNotes]
						,SRC.[MatchLot]
						,SRC.[ReceiptDetailExternalUserDefinedString01]
						,SRC.[ReceiptDetailExternalUserDefinedString02]
						,SRC.[ReceiptDetailExternalUserDefinedString03]
						,SRC.[ReceiptDetailExternalUserDefinedString04]
						,SRC.[ReceiptDetailExternalUserDefinedString05]
						,SRC.[ReceiptDetailExternalUserDefinedString06]
						,SRC.[ReceiptDetailExternalUserDefinedString07]
						,SRC.[ReceiptDetailExternalUserDefinedString08]
						,SRC.[ReceiptDetailExternalUserDefinedString09]
						,SRC.[ReceiptDetailExternalUserDefinedString10]
						,SRC.[ReceiptDetailExternalUserDefinedString11]
						,SRC.[ReceiptDetailExternalUserDefinedString12]
						,SRC.[ReceiptDetailExternalUserDefinedString13]
						,SRC.[ReceiptDetailExternalUserDefinedString14]
						,SRC.[ReceiptDetailExternalUserDefinedString15]
						,SRC.[ReceiptDetailExternalUserDefinedDateTime01]
						,SRC.[ReceiptDetailExternalUserDefinedDateTime02]
						,SRC.[ReceiptDetailExternalUserDefinedDateTime03]
						,SRC.[ReceiptDetailExternalUserDefinedDateTime04]
						,SRC.[ReceiptDetailExternalUserDefinedDateTime05]
						,SRC.[ReceiptDetailExternalUserDefinedFloat01]
						,SRC.[ReceiptDetailExternalUserDefinedFloat02]
						,SRC.[ReceiptDetailExternalUserDefinedFloat03]
						,SRC.[ReceiptDetailExternalUserDefinedFloat04]
						,SRC.[ReceiptDetailExternalUserDefinedFloat05]
						,SRC.[ReceiptDetailExternalUserDefinedLookup01]
						,SRC.[ReceiptDetailExternalUserDefinedLookup02]
						,SRC.[ReceiptDetailExternalUserDefinedLookup03]
						,SRC.[ReceiptDetailExternalUserDefinedLookup04]
						,SRC.[ReceiptDetailExternalUserDefinedLookup05]
						,SRC.[ReceiptDetailExternalUserDefinedLookup06]
						,SRC.[ReceiptDetailExternalUserDefinedLookup07]
						,SRC.[ReceiptDetailExternalUserDefinedLookup08]
						,SRC.[ReceiptDetailExternalUserDefinedLookup09]
						,SRC.[ReceiptDetailExternalUserDefinedLookup10]
						,Src.[ReceiptDetailTareWeight]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[ReceiptID] AS VARCHAR(50)) + CAST(Inserted.[ReceiptDetailLineNumber] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[ReceiptID] AS VARCHAR(50)) + CAST(Deleted.[ReceiptDetailLineNumber] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/

			WHILE EXISTS (
							SELECT 1
							FROM dbo.ReceiptDetails Src WITH (NOLOCK)
							INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
							INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptDetails Dest WITH (NOLOCK) ON Dest.[ReceiptID] = Src.[ReceiptID]
								AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
							WHERE Dest.[ReceiptDetailEditDateTime] < Src.[ReceiptDetailEditDateTime]
			
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ReceiptDetailExternalReceiptID] = Src.[ReceiptDetailExternalReceiptID]
						,Dest.[ReceiptDetailExternalLineNumber] = Src.[ReceiptDetailExternalLineNumber]
						,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[ReceiptDetailPurchaseOrderCode] = Src.[ReceiptDetailPurchaseOrderCode]
						,Dest.[ReceiptDetailTariffCode] = Src.[ReceiptDetailTariffCode]
						,Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
						,Dest.[StorageUnitID] = Src.[StorageUnitID]
						,Dest.[ReceiptDetailStatus] = Src.[ReceiptDetailStatus]
						,Dest.[ReceiptDetailDateTimeReceived] = Src.[ReceiptDetailDateTimeReceived]
						,Dest.[ReceiptDetailQuantityExpected] = Src.[ReceiptDetailQuantityExpected]
						,Dest.[ReceiptDetailQuantityAdjusted] = Src.[ReceiptDetailQuantityAdjusted]
						,Dest.[ReceiptDetailQuantityReceived] = Src.[ReceiptDetailQuantityReceived]
						,Dest.[ReceiptDetailUnitOfMeasure] = Src.[ReceiptDetailUnitOfMeasure]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[ReceiptDetailVesselCode] = Src.[ReceiptDetailVesselCode]
						,Dest.[ReceiptDetailVoyageCode] = Src.[ReceiptDetailVoyageCode]
						,Dest.[ReceiptDetailCrossDockCode] = Src.[ReceiptDetailCrossDockCode]
						,Dest.[ReceiptDetailContainerCode] = Src.[ReceiptDetailContainerCode]
						,Dest.[LocationIDDestination] = Src.[LocationIDDestination]
						,Dest.[LotIDDestination] = Src.[LotIDDestination]
						,Dest.[StorageUnitIDDestination] = Src.[StorageUnitIDDestination]
						,Dest.[ReceiptDetailConditionCode] = Src.[ReceiptDetailConditionCode]
						,Dest.[ReceiptDetailLotAttribute01] = Src.[ReceiptDetailLotAttribute01]
						,Dest.[ReceiptDetailLotAttribute02] = Src.[ReceiptDetailLotAttribute02]
						,Dest.[ReceiptDetailLotAttribute03] = Src.[ReceiptDetailLotAttribute03]
						,Dest.[ReceiptDetailLotAttribute04] = Src.[ReceiptDetailLotAttribute04]
						,Dest.[ReceiptDetailLotAttribute05] = Src.[ReceiptDetailLotAttribute05]
						,Dest.[ReceiptDetailLotAttribute06] = Src.[ReceiptDetailLotAttribute06]
						,Dest.[ReceiptDetailLotAttribute07] = Src.[ReceiptDetailLotAttribute07]
						,Dest.[ReceiptDetailLotAttribute08] = Src.[ReceiptDetailLotAttribute08]
						,Dest.[ReceiptDetailLotAttribute09] = Src.[ReceiptDetailLotAttribute09]
						,Dest.[ReceiptDetailLotAttribute10] = Src.[ReceiptDetailLotAttribute10]
						,Dest.[ReceiptDetailEachesPerCase] = Src.[ReceiptDetailEachesPerCase]
						,Dest.[ReceiptDetailInnerPack] = Src.[ReceiptDetailInnerPack]
						,Dest.[ReceiptDetailEachesPerPallet] = Src.[ReceiptDetailEachesPerPallet]
						,Dest.[ReceiptDetailCube] = Src.[ReceiptDetailCube]
						,Dest.[ReceiptDetailGrossWeight] = Src.[ReceiptDetailGrossWeight]
						,Dest.[ReceiptDetailNetWeight] = Src.[ReceiptDetailNetWeight]
						,Dest.[ReceiptDetailOtherUnit1] = Src.[ReceiptDetailOtherUnit1]
						,Dest.[ReceiptDetailOtherUnit2] = Src.[ReceiptDetailOtherUnit2]
						,Dest.[ReceiptDetailUnitPrice] = Src.[ReceiptDetailUnitPrice]
						,Dest.[ReceiptDetailExtendedPrice] = Src.[ReceiptDetailExtendedPrice]
						,Dest.[ReceiptDetailEffectiveDateTime] = Src.[ReceiptDetailEffectiveDateTime]
						,Dest.[ReceiptDetailForteFlag] = Src.[ReceiptDetailForteFlag]
						,Dest.[ReceiptDetailUserDefined01] = Src.[ReceiptDetailUserDefined01]
						,Dest.[ReceiptDetailUserDefined02] = Src.[ReceiptDetailUserDefined02]
						,Dest.[ReceiptDetailUserDefined03] = Src.[ReceiptDetailUserDefined03]
						,Dest.[ReceiptDetailUserDefined04] = Src.[ReceiptDetailUserDefined04]
						,Dest.[ReceiptDetailUserDefined05] = Src.[ReceiptDetailUserDefined05]
						,Dest.[ReceiptDetailNotes] = Src.[ReceiptDetailNotes]
						,Dest.[ReceiptDetailReasonCode] = Src.[ReceiptDetailReasonCode]
						,Dest.[ReceiptDetailPalletID] = Src.[ReceiptDetailPalletID]
						,Dest.[ReceiptDetailQuantityRejected] = Src.[ReceiptDetailQuantityRejected]
						,Dest.[ReceiptDetailType] = Src.[ReceiptDetailType]
						,Dest.[ReceiptDetailReturnType] = Src.[ReceiptDetailReturnType]
						,Dest.[ReceiptDetailReturnReason] = Src.[ReceiptDetailReturnReason]
						,Dest.[ReceiptDetailReturnCondition] = Src.[ReceiptDetailReturnCondition]
						,Dest.[ReceiptDetailQualityCheckRequired] = Src.[ReceiptDetailQualityCheckRequired]
						,Dest.[ReceiptDetailQualityQuantityInspected] = Src.[ReceiptDetailQualityQuantityInspected]
						,Dest.[ReceiptDetailQualityQuantityRejected] = Src.[ReceiptDetailQualityQuantityRejected]
						,Dest.[ReceiptDetailQualityCheckRejectReason] = Src.[ReceiptDetailQualityCheckRejectReason]
						,Dest.[ReceiptDetailQualityCheckStatus] = Src.[ReceiptDetailQualityCheckStatus]
						,Dest.[ReceiptDetailQualityCheckUser] = Src.[ReceiptDetailQualityCheckUser]
						,Dest.[ReceiptDetailQualityCheckAutoAdjust] = Src.[ReceiptDetailQualityCheckAutoAdjust]
						,Dest.[ReceiptDetailExternalLot] = Src.[ReceiptDetailExternalLot]
						,Dest.[ReceiptDetailRMA] = Src.[ReceiptDetailRMA]
						,Dest.[ReceiptDetailPackingSlipQuantity] = Src.[ReceiptDetailPackingSlipQuantity]
						,Dest.[ReceiptDetailIPSKey] = Src.[ReceiptDetailIPSKey]
						,Dest.[ReceiptDetailSupplierName] = Src.[ReceiptDetailSupplierName]
						,Dest.[ReceiptDetailSupplierCode] = Src.[ReceiptDetailSupplierCode]
						,Dest.[ReceiptDetailMatchLot] = Src.[ReceiptDetailMatchLot]
						,Dest.[ReceiptDetailAddDateTime] = Src.[ReceiptDetailAddDateTime]
						,Dest.[ReceiptDetailAddUserCode] = Src.[ReceiptDetailAddUserCode]
						,Dest.[ReceiptDetailEditDateTime] = Src.[ReceiptDetailEditDateTime]
						,Dest.[ReceiptDetailEditUserCode] = Src.[ReceiptDetailEditUserCode]
						,Dest.[ReceiptDetailUpcomingReceiptID] = Src.[ReceiptDetailUpcomingReceiptID]
						,Dest.[ReceiptDetailQuantityPreAllocated] = Src.[ReceiptDetailQuantityPreAllocated]
						,Dest.[ReceiptDetailTransit] = Src.[ReceiptDetailTransit]
						,Dest.[ReceiptDetailChargeableWeight] = Src.[ReceiptDetailChargeableWeight]
						,Dest.[ReceiptDetailUserDefined06] = Src.[ReceiptDetailUserDefined06]
						,Dest.[ReceiptDetailUserDefined07] = Src.[ReceiptDetailUserDefined07]
						,Dest.[ReceiptDetailUserDefined08] = Src.[ReceiptDetailUserDefined08]
						,Dest.[ReceiptDetailUserDefined09] = Src.[ReceiptDetailUserDefined09]
						,Dest.[ReceiptDetailUserDefined10] = Src.[ReceiptDetailUserDefined10]
						,Dest.[ReceiptDetailNotes2] = Src.[ReceiptDetailNotes2]
						,Dest.[ReceiptDetailNotes3] = Src.[ReceiptDetailNotes3]
						,Dest.[ReceiptDetailAutoHold] = Src.[ReceiptDetailAutoHold]
						,Dest.[ReceiptDetailWarehousingNotes] = Src.[ReceiptDetailWarehousingNotes]
						,Dest.[ReceiptDetailExcludeFromReceiving] = Src.[ReceiptDetailExcludeFromReceiving]
						,Dest.[ReceiptDetailCustomerNotes] = Src.[ReceiptDetailCustomerNotes]
						,Dest.[MatchLot] = Src.[MatchLot]
						,Dest.[ReceiptDetailExternalUserDefinedString01] = Src.[ReceiptDetailExternalUserDefinedString01]
						,Dest.[ReceiptDetailExternalUserDefinedString02] = Src.[ReceiptDetailExternalUserDefinedString02]
						,Dest.[ReceiptDetailExternalUserDefinedString03] = Src.[ReceiptDetailExternalUserDefinedString03]
						,Dest.[ReceiptDetailExternalUserDefinedString04] = Src.[ReceiptDetailExternalUserDefinedString04]
						,Dest.[ReceiptDetailExternalUserDefinedString05] = Src.[ReceiptDetailExternalUserDefinedString05]
						,Dest.[ReceiptDetailExternalUserDefinedString06] = Src.[ReceiptDetailExternalUserDefinedString06]
						,Dest.[ReceiptDetailExternalUserDefinedString07] = Src.[ReceiptDetailExternalUserDefinedString07]
						,Dest.[ReceiptDetailExternalUserDefinedString08] = Src.[ReceiptDetailExternalUserDefinedString08]
						,Dest.[ReceiptDetailExternalUserDefinedString09] = Src.[ReceiptDetailExternalUserDefinedString09]
						,Dest.[ReceiptDetailExternalUserDefinedString10] = Src.[ReceiptDetailExternalUserDefinedString10]
						,Dest.[ReceiptDetailExternalUserDefinedString11] = Src.[ReceiptDetailExternalUserDefinedString11]
						,Dest.[ReceiptDetailExternalUserDefinedString12] = Src.[ReceiptDetailExternalUserDefinedString12]
						,Dest.[ReceiptDetailExternalUserDefinedString13] = Src.[ReceiptDetailExternalUserDefinedString13]
						,Dest.[ReceiptDetailExternalUserDefinedString14] = Src.[ReceiptDetailExternalUserDefinedString14]
						,Dest.[ReceiptDetailExternalUserDefinedString15] = Src.[ReceiptDetailExternalUserDefinedString15]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime01] = Src.[ReceiptDetailExternalUserDefinedDateTime01]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime02] = Src.[ReceiptDetailExternalUserDefinedDateTime02]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime03] = Src.[ReceiptDetailExternalUserDefinedDateTime03]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime04] = Src.[ReceiptDetailExternalUserDefinedDateTime04]
						,Dest.[ReceiptDetailExternalUserDefinedDateTime05] = Src.[ReceiptDetailExternalUserDefinedDateTime05]
						,Dest.[ReceiptDetailExternalUserDefinedFloat01] = Src.[ReceiptDetailExternalUserDefinedFloat01]
						,Dest.[ReceiptDetailExternalUserDefinedFloat02] = Src.[ReceiptDetailExternalUserDefinedFloat02]
						,Dest.[ReceiptDetailExternalUserDefinedFloat03] = Src.[ReceiptDetailExternalUserDefinedFloat03]
						,Dest.[ReceiptDetailExternalUserDefinedFloat04] = Src.[ReceiptDetailExternalUserDefinedFloat04]
						,Dest.[ReceiptDetailExternalUserDefinedFloat05] = Src.[ReceiptDetailExternalUserDefinedFloat05]
						,Dest.[ReceiptDetailExternalUserDefinedLookup01] = Src.[ReceiptDetailExternalUserDefinedLookup01]
						,Dest.[ReceiptDetailExternalUserDefinedLookup02] = Src.[ReceiptDetailExternalUserDefinedLookup02]
						,Dest.[ReceiptDetailExternalUserDefinedLookup03] = Src.[ReceiptDetailExternalUserDefinedLookup03]
						,Dest.[ReceiptDetailExternalUserDefinedLookup04] = Src.[ReceiptDetailExternalUserDefinedLookup04]
						,Dest.[ReceiptDetailExternalUserDefinedLookup05] = Src.[ReceiptDetailExternalUserDefinedLookup05]
						,Dest.[ReceiptDetailExternalUserDefinedLookup06] = Src.[ReceiptDetailExternalUserDefinedLookup06]
						,Dest.[ReceiptDetailExternalUserDefinedLookup07] = Src.[ReceiptDetailExternalUserDefinedLookup07]
						,Dest.[ReceiptDetailExternalUserDefinedLookup08] = Src.[ReceiptDetailExternalUserDefinedLookup08]
						,Dest.[ReceiptDetailExternalUserDefinedLookup09] = Src.[ReceiptDetailExternalUserDefinedLookup09]
						,Dest.[ReceiptDetailExternalUserDefinedLookup10] = Src.[ReceiptDetailExternalUserDefinedLookup10]
						,Dest.[ReceiptDetailTareWeight] = Src.[ReceiptDetailTareWeight]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[ReceiptID] AS VARCHAR(50)) + CAST(Inserted.[ReceiptDetailLineNumber] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[ReceiptID] AS VARCHAR(50)) + CAST(Deleted.[ReceiptDetailLineNumber] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
							FROM dbo.ReceiptDetails Src WITH (NOLOCK)
							INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
							INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptDetails Dest WITH (NOLOCK) ON Dest.[ReceiptID] = Src.[ReceiptID]
								AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
							WHERE Dest.[ReceiptDetailEditDateTime] < Src.[ReceiptDetailEditDateTime];
			END;

			WHILE EXISTS (
							SELECT 1
							FROM dbo.ReceiptDetails Src WITH (NOLOCK)
							INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
							LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptDetails Dest WITH (NOLOCK) ON Dest.[ReceiptID] = Src.[ReceiptID]
								AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
							WHERE Dest.[ReceiptID] IS NULL
								AND Dest.[ReceiptDetailLineNumber] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptDetails (
					[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[ReceiptDetailExternalReceiptID]
					,[ReceiptDetailExternalLineNumber]
					,[CompanyIDStorer]
					,[ReceiptDetailPurchaseOrderCode]
					,[ReceiptDetailTariffCode]
					,[ProductCode]
					,[AlternativeProductCode]
					,[StorageUnitID]
					,[ReceiptDetailStatus]
					,[ReceiptDetailDateTimeReceived]
					,[ReceiptDetailQuantityExpected]
					,[ReceiptDetailQuantityAdjusted]
					,[ReceiptDetailQuantityReceived]
					,[ReceiptDetailUnitOfMeasure]
					,[PackCode]
					,[ReceiptDetailVesselCode]
					,[ReceiptDetailVoyageCode]
					,[ReceiptDetailCrossDockCode]
					,[ReceiptDetailContainerCode]
					,[LocationIDDestination]
					,[LotIDDestination]
					,[StorageUnitIDDestination]
					,[ReceiptDetailConditionCode]
					,[ReceiptDetailLotAttribute01]
					,[ReceiptDetailLotAttribute02]
					,[ReceiptDetailLotAttribute03]
					,[ReceiptDetailLotAttribute04]
					,[ReceiptDetailLotAttribute05]
					,[ReceiptDetailLotAttribute06]
					,[ReceiptDetailLotAttribute07]
					,[ReceiptDetailLotAttribute08]
					,[ReceiptDetailLotAttribute09]
					,[ReceiptDetailLotAttribute10]
					,[ReceiptDetailEachesPerCase]
					,[ReceiptDetailInnerPack]
					,[ReceiptDetailEachesPerPallet]
					,[ReceiptDetailCube]
					,[ReceiptDetailGrossWeight]
					,[ReceiptDetailNetWeight]
					,[ReceiptDetailOtherUnit1]
					,[ReceiptDetailOtherUnit2]
					,[ReceiptDetailUnitPrice]
					,[ReceiptDetailExtendedPrice]
					,[ReceiptDetailEffectiveDateTime]
					,[ReceiptDetailForteFlag]
					,[ReceiptDetailUserDefined01]
					,[ReceiptDetailUserDefined02]
					,[ReceiptDetailUserDefined03]
					,[ReceiptDetailUserDefined04]
					,[ReceiptDetailUserDefined05]
					,[ReceiptDetailNotes]
					,[ReceiptDetailReasonCode]
					,[ReceiptDetailPalletID]
					,[ReceiptDetailQuantityRejected]
					,[ReceiptDetailType]
					,[ReceiptDetailReturnType]
					,[ReceiptDetailReturnReason]
					,[ReceiptDetailReturnCondition]
					,[ReceiptDetailQualityCheckRequired]
					,[ReceiptDetailQualityQuantityInspected]
					,[ReceiptDetailQualityQuantityRejected]
					,[ReceiptDetailQualityCheckRejectReason]
					,[ReceiptDetailQualityCheckStatus]
					,[ReceiptDetailQualityCheckUser]
					,[ReceiptDetailQualityCheckAutoAdjust]
					,[ReceiptDetailExternalLot]
					,[ReceiptDetailRMA]
					,[ReceiptDetailPackingSlipQuantity]
					,[ReceiptDetailIPSKey]
					,[ReceiptDetailSupplierName]
					,[ReceiptDetailSupplierCode]
					,[ReceiptDetailMatchLot]
					,[ReceiptDetailAddDateTime]
					,[ReceiptDetailAddUserCode]
					,[ReceiptDetailEditDateTime]
					,[ReceiptDetailEditUserCode]
					,[ReceiptDetailUpcomingReceiptID]
					,[ReceiptDetailQuantityPreAllocated]
					,[ReceiptDetailTransit]
					,[ReceiptDetailChargeableWeight]
					,[ReceiptDetailUserDefined06]
					,[ReceiptDetailUserDefined07]
					,[ReceiptDetailUserDefined08]
					,[ReceiptDetailUserDefined09]
					,[ReceiptDetailUserDefined10]
					,[ReceiptDetailNotes2]
					,[ReceiptDetailNotes3]
					,[ReceiptDetailAutoHold]
					,[ReceiptDetailWarehousingNotes]
					,[ReceiptDetailExcludeFromReceiving]
					,[ReceiptDetailCustomerNotes]
					,[MatchLot]
					,[ReceiptDetailExternalUserDefinedString01]
					,[ReceiptDetailExternalUserDefinedString02]
					,[ReceiptDetailExternalUserDefinedString03]
					,[ReceiptDetailExternalUserDefinedString04]
					,[ReceiptDetailExternalUserDefinedString05]
					,[ReceiptDetailExternalUserDefinedString06]
					,[ReceiptDetailExternalUserDefinedString07]
					,[ReceiptDetailExternalUserDefinedString08]
					,[ReceiptDetailExternalUserDefinedString09]
					,[ReceiptDetailExternalUserDefinedString10]
					,[ReceiptDetailExternalUserDefinedString11]
					,[ReceiptDetailExternalUserDefinedString12]
					,[ReceiptDetailExternalUserDefinedString13]
					,[ReceiptDetailExternalUserDefinedString14]
					,[ReceiptDetailExternalUserDefinedString15]
					,[ReceiptDetailExternalUserDefinedDateTime01]
					,[ReceiptDetailExternalUserDefinedDateTime02]
					,[ReceiptDetailExternalUserDefinedDateTime03]
					,[ReceiptDetailExternalUserDefinedDateTime04]
					,[ReceiptDetailExternalUserDefinedDateTime05]
					,[ReceiptDetailExternalUserDefinedFloat01]
					,[ReceiptDetailExternalUserDefinedFloat02]
					,[ReceiptDetailExternalUserDefinedFloat03]
					,[ReceiptDetailExternalUserDefinedFloat04]
					,[ReceiptDetailExternalUserDefinedFloat05]
					,[ReceiptDetailExternalUserDefinedLookup01]
					,[ReceiptDetailExternalUserDefinedLookup02]
					,[ReceiptDetailExternalUserDefinedLookup03]
					,[ReceiptDetailExternalUserDefinedLookup04]
					,[ReceiptDetailExternalUserDefinedLookup05]
					,[ReceiptDetailExternalUserDefinedLookup06]
					,[ReceiptDetailExternalUserDefinedLookup07]
					,[ReceiptDetailExternalUserDefinedLookup08]
					,[ReceiptDetailExternalUserDefinedLookup09]
					,[ReceiptDetailExternalUserDefinedLookup10]
					,[ReceiptDetailTareWeight]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[ReceiptID] AS VARCHAR(50)) + CAST(Inserted.[ReceiptDetailLineNumber] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[ReceiptID]
					,Src.[ReceiptDetailLineNumber]
					,Src.[ReceiptDetailExternalReceiptID]
					,Src.[ReceiptDetailExternalLineNumber]
					,Src.[CompanyIDStorer]
					,Src.[ReceiptDetailPurchaseOrderCode]
					,Src.[ReceiptDetailTariffCode]
					,Src.[ProductCode]
					,Src.[AlternativeProductCode]
					,Src.[StorageUnitID]
					,Src.[ReceiptDetailStatus]
					,Src.[ReceiptDetailDateTimeReceived]
					,Src.[ReceiptDetailQuantityExpected]
					,Src.[ReceiptDetailQuantityAdjusted]
					,Src.[ReceiptDetailQuantityReceived]
					,Src.[ReceiptDetailUnitOfMeasure]
					,Src.[PackCode]
					,Src.[ReceiptDetailVesselCode]
					,Src.[ReceiptDetailVoyageCode]
					,Src.[ReceiptDetailCrossDockCode]
					,Src.[ReceiptDetailContainerCode]
					,Src.[LocationIDDestination]
					,Src.[LotIDDestination]
					,Src.[StorageUnitIDDestination]
					,Src.[ReceiptDetailConditionCode]
					,Src.[ReceiptDetailLotAttribute01]
					,Src.[ReceiptDetailLotAttribute02]
					,Src.[ReceiptDetailLotAttribute03]
					,Src.[ReceiptDetailLotAttribute04]
					,Src.[ReceiptDetailLotAttribute05]
					,Src.[ReceiptDetailLotAttribute06]
					,Src.[ReceiptDetailLotAttribute07]
					,Src.[ReceiptDetailLotAttribute08]
					,Src.[ReceiptDetailLotAttribute09]
					,Src.[ReceiptDetailLotAttribute10]
					,Src.[ReceiptDetailEachesPerCase]
					,Src.[ReceiptDetailInnerPack]
					,Src.[ReceiptDetailEachesPerPallet]
					,Src.[ReceiptDetailCube]
					,Src.[ReceiptDetailGrossWeight]
					,Src.[ReceiptDetailNetWeight]
					,Src.[ReceiptDetailOtherUnit1]
					,Src.[ReceiptDetailOtherUnit2]
					,Src.[ReceiptDetailUnitPrice]
					,Src.[ReceiptDetailExtendedPrice]
					,Src.[ReceiptDetailEffectiveDateTime]
					,Src.[ReceiptDetailForteFlag]
					,Src.[ReceiptDetailUserDefined01]
					,Src.[ReceiptDetailUserDefined02]
					,Src.[ReceiptDetailUserDefined03]
					,Src.[ReceiptDetailUserDefined04]
					,Src.[ReceiptDetailUserDefined05]
					,Src.[ReceiptDetailNotes]
					,Src.[ReceiptDetailReasonCode]
					,Src.[ReceiptDetailPalletID]
					,Src.[ReceiptDetailQuantityRejected]
					,Src.[ReceiptDetailType]
					,Src.[ReceiptDetailReturnType]
					,Src.[ReceiptDetailReturnReason]
					,Src.[ReceiptDetailReturnCondition]
					,Src.[ReceiptDetailQualityCheckRequired]
					,Src.[ReceiptDetailQualityQuantityInspected]
					,Src.[ReceiptDetailQualityQuantityRejected]
					,Src.[ReceiptDetailQualityCheckRejectReason]
					,Src.[ReceiptDetailQualityCheckStatus]
					,Src.[ReceiptDetailQualityCheckUser]
					,Src.[ReceiptDetailQualityCheckAutoAdjust]
					,Src.[ReceiptDetailExternalLot]
					,Src.[ReceiptDetailRMA]
					,Src.[ReceiptDetailPackingSlipQuantity]
					,Src.[ReceiptDetailIPSKey]
					,Src.[ReceiptDetailSupplierName]
					,Src.[ReceiptDetailSupplierCode]
					,Src.[ReceiptDetailMatchLot]
					,Src.[ReceiptDetailAddDateTime]
					,Src.[ReceiptDetailAddUserCode]
					,Src.[ReceiptDetailEditDateTime]
					,Src.[ReceiptDetailEditUserCode]
					,Src.[ReceiptDetailUpcomingReceiptID]
					,Src.[ReceiptDetailQuantityPreAllocated]
					,Src.[ReceiptDetailTransit]
					,Src.[ReceiptDetailChargeableWeight]
					,Src.[ReceiptDetailUserDefined06]
					,Src.[ReceiptDetailUserDefined07]
					,Src.[ReceiptDetailUserDefined08]
					,Src.[ReceiptDetailUserDefined09]
					,Src.[ReceiptDetailUserDefined10]
					,Src.[ReceiptDetailNotes2]
					,Src.[ReceiptDetailNotes3]
					,Src.[ReceiptDetailAutoHold]
					,Src.[ReceiptDetailWarehousingNotes]
					,Src.[ReceiptDetailExcludeFromReceiving]
					,Src.[ReceiptDetailCustomerNotes]
					,SRC.[MatchLot]
					,SRC.[ReceiptDetailExternalUserDefinedString01]
					,SRC.[ReceiptDetailExternalUserDefinedString02]
					,SRC.[ReceiptDetailExternalUserDefinedString03]
					,SRC.[ReceiptDetailExternalUserDefinedString04]
					,SRC.[ReceiptDetailExternalUserDefinedString05]
					,SRC.[ReceiptDetailExternalUserDefinedString06]
					,SRC.[ReceiptDetailExternalUserDefinedString07]
					,SRC.[ReceiptDetailExternalUserDefinedString08]
					,SRC.[ReceiptDetailExternalUserDefinedString09]
					,SRC.[ReceiptDetailExternalUserDefinedString10]
					,SRC.[ReceiptDetailExternalUserDefinedString11]
					,SRC.[ReceiptDetailExternalUserDefinedString12]
					,SRC.[ReceiptDetailExternalUserDefinedString13]
					,SRC.[ReceiptDetailExternalUserDefinedString14]
					,SRC.[ReceiptDetailExternalUserDefinedString15]
					,SRC.[ReceiptDetailExternalUserDefinedDateTime01]
					,SRC.[ReceiptDetailExternalUserDefinedDateTime02]
					,SRC.[ReceiptDetailExternalUserDefinedDateTime03]
					,SRC.[ReceiptDetailExternalUserDefinedDateTime04]
					,SRC.[ReceiptDetailExternalUserDefinedDateTime05]
					,SRC.[ReceiptDetailExternalUserDefinedFloat01]
					,SRC.[ReceiptDetailExternalUserDefinedFloat02]
					,SRC.[ReceiptDetailExternalUserDefinedFloat03]
					,SRC.[ReceiptDetailExternalUserDefinedFloat04]
					,SRC.[ReceiptDetailExternalUserDefinedFloat05]
					,SRC.[ReceiptDetailExternalUserDefinedLookup01]
					,SRC.[ReceiptDetailExternalUserDefinedLookup02]
					,SRC.[ReceiptDetailExternalUserDefinedLookup03]
					,SRC.[ReceiptDetailExternalUserDefinedLookup04]
					,SRC.[ReceiptDetailExternalUserDefinedLookup05]
					,SRC.[ReceiptDetailExternalUserDefinedLookup06]
					,SRC.[ReceiptDetailExternalUserDefinedLookup07]
					,SRC.[ReceiptDetailExternalUserDefinedLookup08]
					,SRC.[ReceiptDetailExternalUserDefinedLookup09]
					,SRC.[ReceiptDetailExternalUserDefinedLookup10]
					,Src.[ReceiptDetailTareWeight]
				FROM dbo.ReceiptDetails Src WITH (NOLOCK)
				INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptDetails Dest WITH (NOLOCK) ON Dest.[ReceiptID] = Src.[ReceiptID]
					AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
				WHERE Dest.[ReceiptID] IS NULL
					AND Dest.[ReceiptDetailLineNumber] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ReceiptDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ReceiptDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ReceiptParties
	SET @CurrentTableName = 'ReceiptParties';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptParties AS Dest
			USING (
				SELECT RP.[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[ReceiptPartySubPartyNumber]
					,[ReceiptPartyColliCode]
					,[ReceiptPartyNumberOfPackages]
					,[ReceiptPartyGrossWeight]
					,[ReceiptPartyNetWeight]
					,[ReceiptPartyVolume]
					,[ReceiptPartyTarra1Number]
					,[ReceiptPartyTarra1Weight]
					,[ReceiptPartyTarra2Number]
					,[ReceiptPartyTarra2Weight]
					,[ReceiptPartyProcessCode]
					,[ProductCode]
					,[ReceiptPartySearchID]
					,[ReceiptPartyStatus]
					,[ReceiptPartyAddDateTime]
					,[ReceiptPartyAddUserCode]
					,[ReceiptPartyEditDateTime]
					,[ReceiptPartyEditUserCode]
				FROM dbo.ReceiptParties RP WITH (NOLOCK)
				INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON RP.ReceiptID = tmpReceiptIDs.ReceiptID
				) AS Src
				ON (
						Dest.[ReceiptID] = Src.[ReceiptID]
						AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
						AND Dest.[ReceiptPartySubPartyNumber] = Src.[ReceiptPartySubPartyNumber]
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ReceiptPartyColliCode] = Src.[ReceiptPartyColliCode]
						,Dest.[ReceiptPartyNumberOfPackages] = Src.[ReceiptPartyNumberOfPackages]
						,Dest.[ReceiptPartyGrossWeight] = Src.[ReceiptPartyGrossWeight]
						,Dest.[ReceiptPartyNetWeight] = Src.[ReceiptPartyNetWeight]
						,Dest.[ReceiptPartyVolume] = Src.[ReceiptPartyVolume]
						,Dest.[ReceiptPartyTarra1Number] = Src.[ReceiptPartyTarra1Number]
						,Dest.[ReceiptPartyTarra1Weight] = Src.[ReceiptPartyTarra1Weight]
						,Dest.[ReceiptPartyTarra2Number] = Src.[ReceiptPartyTarra2Number]
						,Dest.[ReceiptPartyTarra2Weight] = Src.[ReceiptPartyTarra2Weight]
						,Dest.[ReceiptPartyProcessCode] = Src.[ReceiptPartyProcessCode]
						,Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[ReceiptPartySearchID] = Src.[ReceiptPartySearchID]
						,Dest.[ReceiptPartyStatus] = Src.[ReceiptPartyStatus]
						,Dest.[ReceiptPartyAddDateTime] = Src.[ReceiptPartyAddDateTime]
						,Dest.[ReceiptPartyAddUserCode] = Src.[ReceiptPartyAddUserCode]
						,Dest.[ReceiptPartyEditDateTime] = Src.[ReceiptPartyEditDateTime]
						,Dest.[ReceiptPartyEditUserCode] = Src.[ReceiptPartyEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[ReceiptID]
						,[ReceiptDetailLineNumber]
						,[ReceiptPartySubPartyNumber]
						,[ReceiptPartyColliCode]
						,[ReceiptPartyNumberOfPackages]
						,[ReceiptPartyGrossWeight]
						,[ReceiptPartyNetWeight]
						,[ReceiptPartyVolume]
						,[ReceiptPartyTarra1Number]
						,[ReceiptPartyTarra1Weight]
						,[ReceiptPartyTarra2Number]
						,[ReceiptPartyTarra2Weight]
						,[ReceiptPartyProcessCode]
						,[ProductCode]
						,[ReceiptPartySearchID]
						,[ReceiptPartyStatus]
						,[ReceiptPartyAddDateTime]
						,[ReceiptPartyAddUserCode]
						,[ReceiptPartyEditDateTime]
						,[ReceiptPartyEditUserCode]
						)
					VALUES (
						Src.[ReceiptID]
						,Src.[ReceiptDetailLineNumber]
						,Src.[ReceiptPartySubPartyNumber]
						,Src.[ReceiptPartyColliCode]
						,Src.[ReceiptPartyNumberOfPackages]
						,Src.[ReceiptPartyGrossWeight]
						,Src.[ReceiptPartyNetWeight]
						,Src.[ReceiptPartyVolume]
						,Src.[ReceiptPartyTarra1Number]
						,Src.[ReceiptPartyTarra1Weight]
						,Src.[ReceiptPartyTarra2Number]
						,Src.[ReceiptPartyTarra2Weight]
						,Src.[ReceiptPartyProcessCode]
						,Src.[ProductCode]
						,Src.[ReceiptPartySearchID]
						,Src.[ReceiptPartyStatus]
						,Src.[ReceiptPartyAddDateTime]
						,Src.[ReceiptPartyAddUserCode]
						,Src.[ReceiptPartyEditDateTime]
						,Src.[ReceiptPartyEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[ReceiptID] AS VARCHAR(50)) + CAST(Inserted.[ReceiptDetailLineNumber] AS VARCHAR(50)) + CAST(Inserted.[ReceiptPartySubPartyNumber] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[ReceiptID] AS VARCHAR(50)) + CAST(Deleted.[ReceiptDetailLineNumber] AS VARCHAR(50)) + CAST(Inserted.[ReceiptPartySubPartyNumber] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/

			WHILE EXISTS (
							SELECT 1
							FROM dbo.ReceiptParties Src WITH (NOLOCK)
							INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
							INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptParties Dest WITH (NOLOCK) ON Dest.[ReceiptID] = Src.[ReceiptID]
								AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
								AND Dest.[ReceiptPartySubPartyNumber] = Src.[ReceiptPartySubPartyNumber]
							WHERE Dest.[ReceiptPartyEditDateTime] < Src.[ReceiptPartyEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ReceiptPartyColliCode] = Src.[ReceiptPartyColliCode]
					,Dest.[ReceiptPartyNumberOfPackages] = Src.[ReceiptPartyNumberOfPackages]
					,Dest.[ReceiptPartyGrossWeight] = Src.[ReceiptPartyGrossWeight]
					,Dest.[ReceiptPartyNetWeight] = Src.[ReceiptPartyNetWeight]
					,Dest.[ReceiptPartyVolume] = Src.[ReceiptPartyVolume]
					,Dest.[ReceiptPartyTarra1Number] = Src.[ReceiptPartyTarra1Number]
					,Dest.[ReceiptPartyTarra1Weight] = Src.[ReceiptPartyTarra1Weight]
					,Dest.[ReceiptPartyTarra2Number] = Src.[ReceiptPartyTarra2Number]
					,Dest.[ReceiptPartyTarra2Weight] = Src.[ReceiptPartyTarra2Weight]
					,Dest.[ReceiptPartyProcessCode] = Src.[ReceiptPartyProcessCode]
					,Dest.[ProductCode] = Src.[ProductCode]
					,Dest.[ReceiptPartySearchID] = Src.[ReceiptPartySearchID]
					,Dest.[ReceiptPartyStatus] = Src.[ReceiptPartyStatus]
					,Dest.[ReceiptPartyAddDateTime] = Src.[ReceiptPartyAddDateTime]
					,Dest.[ReceiptPartyAddUserCode] = Src.[ReceiptPartyAddUserCode]
					,Dest.[ReceiptPartyEditDateTime] = Src.[ReceiptPartyEditDateTime]
					,Dest.[ReceiptPartyEditUserCode] = Src.[ReceiptPartyEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[ReceiptID] AS VARCHAR(50)) + CAST(Inserted.[ReceiptDetailLineNumber] AS VARCHAR(50)) + CAST(Inserted.[ReceiptPartySubPartyNumber] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[ReceiptID] AS VARCHAR(50)) + CAST(Deleted.[ReceiptDetailLineNumber] AS VARCHAR(50)) + CAST(Inserted.[ReceiptPartySubPartyNumber] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.ReceiptParties Src WITH (NOLOCK)
				INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptParties Dest WITH (NOLOCK) ON Dest.[ReceiptID] = Src.[ReceiptID]
					AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
					AND Dest.[ReceiptPartySubPartyNumber] = Src.[ReceiptPartySubPartyNumber]
				WHERE Dest.[ReceiptPartyEditDateTime] < Src.[ReceiptPartyEditDateTime]

			END;

			WHILE EXISTS (
						SELECT 1
						FROM dbo.ReceiptParties Src WITH (NOLOCK)
						INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
						LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptParties Dest WITH (NOLOCK) ON Dest.[ReceiptID] = Src.[ReceiptID]
							AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
							AND Dest.[ReceiptPartySubPartyNumber] = Src.[ReceiptPartySubPartyNumber]
						WHERE Dest.[ReceiptID] IS NULL
							AND Dest.[ReceiptID] IS NULL
							AND Dest.[ReceiptID] IS NULL

					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptParties (
					[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[ReceiptPartySubPartyNumber]
					,[ReceiptPartyColliCode]
					,[ReceiptPartyNumberOfPackages]
					,[ReceiptPartyGrossWeight]
					,[ReceiptPartyNetWeight]
					,[ReceiptPartyVolume]
					,[ReceiptPartyTarra1Number]
					,[ReceiptPartyTarra1Weight]
					,[ReceiptPartyTarra2Number]
					,[ReceiptPartyTarra2Weight]
					,[ReceiptPartyProcessCode]
					,[ProductCode]
					,[ReceiptPartySearchID]
					,[ReceiptPartyStatus]
					,[ReceiptPartyAddDateTime]
					,[ReceiptPartyAddUserCode]
					,[ReceiptPartyEditDateTime]
					,[ReceiptPartyEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[ReceiptID] AS VARCHAR(50)) + CAST(Inserted.[ReceiptDetailLineNumber] AS VARCHAR(50)) + CAST(Inserted.[ReceiptPartySubPartyNumber] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[ReceiptID]
					,Src.[ReceiptDetailLineNumber]
					,Src.[ReceiptPartySubPartyNumber]
					,Src.[ReceiptPartyColliCode]
					,Src.[ReceiptPartyNumberOfPackages]
					,Src.[ReceiptPartyGrossWeight]
					,Src.[ReceiptPartyNetWeight]
					,Src.[ReceiptPartyVolume]
					,Src.[ReceiptPartyTarra1Number]
					,Src.[ReceiptPartyTarra1Weight]
					,Src.[ReceiptPartyTarra2Number]
					,Src.[ReceiptPartyTarra2Weight]
					,Src.[ReceiptPartyProcessCode]
					,Src.[ProductCode]
					,Src.[ReceiptPartySearchID]
					,Src.[ReceiptPartyStatus]
					,Src.[ReceiptPartyAddDateTime]
					,Src.[ReceiptPartyAddUserCode]
					,Src.[ReceiptPartyEditDateTime]
					,Src.[ReceiptPartyEditUserCode]

				FROM dbo.ReceiptParties Src WITH (NOLOCK)
				INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptParties Dest WITH (NOLOCK) ON Dest.[ReceiptID] = Src.[ReceiptID]
					AND Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
					AND Dest.[ReceiptPartySubPartyNumber] = Src.[ReceiptPartySubPartyNumber]
				WHERE Dest.[ReceiptID] IS NULL
					AND Dest.[ReceiptID] IS NULL
					AND Dest.[ReceiptID] IS NULL;

			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ReceiptParties: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ReceiptParties` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ReceiptCaseDetails
	SET @CurrentTableName = 'ReceiptCaseDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptCaseDetails AS Dest
			USING (
				SELECT [IDReceiptCaseDetail]
					,RCD.[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[CompanyIDStorer]
					,[ProductCode]
					,[LotID]
					,[StorageUnitID]
					,[ReceiptCaseDetailPalletID]
					,[ReceiptCaseDetailStatus]
					,[ReceiptCaseDetailDateTimeReceived]
					,[ReceiptCaseDetailQuantityExpected]
					,[ReceiptCaseDetailQuantityAdjusted]
					,[ReceiptCaseDetailQuantityReceived]
					,[ReceiptCaseDetailQuantityRejected]
					,[ReceiptCaseDetailUnitOfMeasure]
					,[PackCode]
					,[LocationIDDestination]
					,[ReceiptCaseDetailLotAttribute01]
					,[ReceiptCaseDetailLotAttribute02]
					,[ReceiptCaseDetailLotAttribute03]
					,[ReceiptCaseDetailLotAttribute04]
					,[ReceiptCaseDetailLotAttribute05]
					,[ReceiptCaseDetailLotAttribute06]
					,[ReceiptCaseDetailLotAttribute07]
					,[ReceiptCaseDetailLotAttribute08]
					,[ReceiptCaseDetailLotAttribute09]
					,[ReceiptCaseDetailLotAttribute10]
					,[ReceiptCaseDetailReasonCode]
					,[ReceiptCaseDetailLotAttribute11]
					,[ReceiptCaseDetailLotAttribute12]
					,[ReceiptCaseDetailAddDateTime]
					,[ReceiptCaseDetailAddUserCode]
					,[ReceiptCaseDetailEditDateTime]
					,[ReceiptCaseDetailEditUserCode]
					,[ReceiptCaseDetailUserDefinedText01]
					,[ReceiptCaseDetailUserDefinedText02]
					,[ReceiptCaseDetailUserDefinedText03]
					,[ReceiptCaseDetailUserDefinedText04]
					,[ReceiptCaseDetailUserDefinedText05]
					,[ReceiptCaseDetailCaseID]
					,[ReceiptCaseDetailIsManual]
					,[ReceiptCaseDetailIsDamaged]
					,[ReceiptCaseDetailUserDefinedNumber01]
					,[ReceiptCaseDetailUserDefinedNumber02]
					,[ReceiptCaseDetailUserDefinedNumber03]
					,[ReceiptCaseDetailUserDefinedNumber04]
					,[ReceiptCaseDetailUserDefinedNumber05]
					,[ReceiptCaseDetailConfirmedNotAvailable]
					,[ReceiptCaseDetailIsAnonymous]
				FROM dbo.ReceiptCaseDetails RCD WITH (NOLOCK)
				INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON RCD.ReceiptID = tmpReceiptIDs.ReceiptID
				) AS Src
				ON (Dest.[IDReceiptCaseDetail] = Src.[IDReceiptCaseDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ReceiptID] = Src.[ReceiptID]
						,Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
						,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[LotID] = Src.[LotID]
						,Dest.[StorageUnitID] = Src.[StorageUnitID]
						,Dest.[ReceiptCaseDetailPalletID] = Src.[ReceiptCaseDetailPalletID]
						,Dest.[ReceiptCaseDetailStatus] = Src.[ReceiptCaseDetailStatus]
						,Dest.[ReceiptCaseDetailDateTimeReceived] = Src.[ReceiptCaseDetailDateTimeReceived]
						,Dest.[ReceiptCaseDetailQuantityExpected] = Src.[ReceiptCaseDetailQuantityExpected]
						,Dest.[ReceiptCaseDetailQuantityAdjusted] = Src.[ReceiptCaseDetailQuantityAdjusted]
						,Dest.[ReceiptCaseDetailQuantityReceived] = Src.[ReceiptCaseDetailQuantityReceived]
						,Dest.[ReceiptCaseDetailQuantityRejected] = Src.[ReceiptCaseDetailQuantityRejected]
						,Dest.[ReceiptCaseDetailUnitOfMeasure] = Src.[ReceiptCaseDetailUnitOfMeasure]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[LocationIDDestination] = Src.[LocationIDDestination]
						,Dest.[ReceiptCaseDetailLotAttribute01] = Src.[ReceiptCaseDetailLotAttribute01]
						,Dest.[ReceiptCaseDetailLotAttribute02] = Src.[ReceiptCaseDetailLotAttribute02]
						,Dest.[ReceiptCaseDetailLotAttribute03] = Src.[ReceiptCaseDetailLotAttribute03]
						,Dest.[ReceiptCaseDetailLotAttribute04] = Src.[ReceiptCaseDetailLotAttribute04]
						,Dest.[ReceiptCaseDetailLotAttribute05] = Src.[ReceiptCaseDetailLotAttribute05]
						,Dest.[ReceiptCaseDetailLotAttribute06] = Src.[ReceiptCaseDetailLotAttribute06]
						,Dest.[ReceiptCaseDetailLotAttribute07] = Src.[ReceiptCaseDetailLotAttribute07]
						,Dest.[ReceiptCaseDetailLotAttribute08] = Src.[ReceiptCaseDetailLotAttribute08]
						,Dest.[ReceiptCaseDetailLotAttribute09] = Src.[ReceiptCaseDetailLotAttribute09]
						,Dest.[ReceiptCaseDetailLotAttribute10] = Src.[ReceiptCaseDetailLotAttribute10]
						,Dest.[ReceiptCaseDetailReasonCode] = Src.[ReceiptCaseDetailReasonCode]
						,Dest.[ReceiptCaseDetailLotAttribute11] = Src.[ReceiptCaseDetailLotAttribute11]
						,Dest.[ReceiptCaseDetailLotAttribute12] = Src.[ReceiptCaseDetailLotAttribute12]
						,Dest.[ReceiptCaseDetailAddDateTime] = Src.[ReceiptCaseDetailAddDateTime]
						,Dest.[ReceiptCaseDetailAddUserCode] = Src.[ReceiptCaseDetailAddUserCode]
						,Dest.[ReceiptCaseDetailEditDateTime] = Src.[ReceiptCaseDetailEditDateTime]
						,Dest.[ReceiptCaseDetailEditUserCode] = Src.[ReceiptCaseDetailEditUserCode]
						,Dest.[ReceiptCaseDetailUserDefinedText01] = Src.[ReceiptCaseDetailUserDefinedText01]
						,Dest.[ReceiptCaseDetailUserDefinedText02] = Src.[ReceiptCaseDetailUserDefinedText02]
						,Dest.[ReceiptCaseDetailUserDefinedText03] = Src.[ReceiptCaseDetailUserDefinedText03]
						,Dest.[ReceiptCaseDetailUserDefinedText04] = Src.[ReceiptCaseDetailUserDefinedText04]
						,Dest.[ReceiptCaseDetailUserDefinedText05] = Src.[ReceiptCaseDetailUserDefinedText05]
						,Dest.[ReceiptCaseDetailCaseID] = Src.[ReceiptCaseDetailCaseID]
						,Dest.[ReceiptCaseDetailIsManual] = Src.[ReceiptCaseDetailIsManual]
						,Dest.[ReceiptCaseDetailIsDamaged] = Src.[ReceiptCaseDetailIsDamaged]
						,Dest.[ReceiptCaseDetailUserDefinedNumber01] = Src.[ReceiptCaseDetailUserDefinedNumber01]
						,Dest.[ReceiptCaseDetailUserDefinedNumber02] = Src.[ReceiptCaseDetailUserDefinedNumber02]
						,Dest.[ReceiptCaseDetailUserDefinedNumber03] = Src.[ReceiptCaseDetailUserDefinedNumber03]
						,Dest.[ReceiptCaseDetailUserDefinedNumber04] = Src.[ReceiptCaseDetailUserDefinedNumber04]
						,Dest.[ReceiptCaseDetailUserDefinedNumber05] = Src.[ReceiptCaseDetailUserDefinedNumber05]
						,Dest.[ReceiptCaseDetailConfirmedNotAvailable] = Src.[ReceiptCaseDetailConfirmedNotAvailable]
						,Dest.[ReceiptCaseDetailIsAnonymous] = Src.[ReceiptCaseDetailIsAnonymous]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDReceiptCaseDetail]
						,[ReceiptID]
						,[ReceiptDetailLineNumber]
						,[CompanyIDStorer]
						,[ProductCode]
						,[LotID]
						,[StorageUnitID]
						,[ReceiptCaseDetailPalletID]
						,[ReceiptCaseDetailStatus]
						,[ReceiptCaseDetailDateTimeReceived]
						,[ReceiptCaseDetailQuantityExpected]
						,[ReceiptCaseDetailQuantityAdjusted]
						,[ReceiptCaseDetailQuantityReceived]
						,[ReceiptCaseDetailQuantityRejected]
						,[ReceiptCaseDetailUnitOfMeasure]
						,[PackCode]
						,[LocationIDDestination]
						,[ReceiptCaseDetailLotAttribute01]
						,[ReceiptCaseDetailLotAttribute02]
						,[ReceiptCaseDetailLotAttribute03]
						,[ReceiptCaseDetailLotAttribute04]
						,[ReceiptCaseDetailLotAttribute05]
						,[ReceiptCaseDetailLotAttribute06]
						,[ReceiptCaseDetailLotAttribute07]
						,[ReceiptCaseDetailLotAttribute08]
						,[ReceiptCaseDetailLotAttribute09]
						,[ReceiptCaseDetailLotAttribute10]
						,[ReceiptCaseDetailReasonCode]
						,[ReceiptCaseDetailLotAttribute11]
						,[ReceiptCaseDetailLotAttribute12]
						,[ReceiptCaseDetailAddDateTime]
						,[ReceiptCaseDetailAddUserCode]
						,[ReceiptCaseDetailEditDateTime]
						,[ReceiptCaseDetailEditUserCode]
						,[ReceiptCaseDetailUserDefinedText01]
						,[ReceiptCaseDetailUserDefinedText02]
						,[ReceiptCaseDetailUserDefinedText03]
						,[ReceiptCaseDetailUserDefinedText04]
						,[ReceiptCaseDetailUserDefinedText05]
						,[ReceiptCaseDetailCaseID]
						,[ReceiptCaseDetailIsManual]
						,[ReceiptCaseDetailIsDamaged]
						,[ReceiptCaseDetailUserDefinedNumber01]
						,[ReceiptCaseDetailUserDefinedNumber02]
						,[ReceiptCaseDetailUserDefinedNumber03]
						,[ReceiptCaseDetailUserDefinedNumber04]
						,[ReceiptCaseDetailUserDefinedNumber05]
						,[ReceiptCaseDetailConfirmedNotAvailable]
						,[ReceiptCaseDetailIsAnonymous]
						)
					VALUES (
						Src.[IDReceiptCaseDetail]
						,Src.[ReceiptID]
						,Src.[ReceiptDetailLineNumber]
						,Src.[CompanyIDStorer]
						,Src.[ProductCode]
						,Src.[LotID]
						,Src.[StorageUnitID]
						,Src.[ReceiptCaseDetailPalletID]
						,Src.[ReceiptCaseDetailStatus]
						,Src.[ReceiptCaseDetailDateTimeReceived]
						,Src.[ReceiptCaseDetailQuantityExpected]
						,Src.[ReceiptCaseDetailQuantityAdjusted]
						,Src.[ReceiptCaseDetailQuantityReceived]
						,Src.[ReceiptCaseDetailQuantityRejected]
						,Src.[ReceiptCaseDetailUnitOfMeasure]
						,Src.[PackCode]
						,Src.[LocationIDDestination]
						,Src.[ReceiptCaseDetailLotAttribute01]
						,Src.[ReceiptCaseDetailLotAttribute02]
						,Src.[ReceiptCaseDetailLotAttribute03]
						,Src.[ReceiptCaseDetailLotAttribute04]
						,Src.[ReceiptCaseDetailLotAttribute05]
						,Src.[ReceiptCaseDetailLotAttribute06]
						,Src.[ReceiptCaseDetailLotAttribute07]
						,Src.[ReceiptCaseDetailLotAttribute08]
						,Src.[ReceiptCaseDetailLotAttribute09]
						,Src.[ReceiptCaseDetailLotAttribute10]
						,Src.[ReceiptCaseDetailReasonCode]
						,Src.[ReceiptCaseDetailLotAttribute11]
						,Src.[ReceiptCaseDetailLotAttribute12]
						,Src.[ReceiptCaseDetailAddDateTime]
						,Src.[ReceiptCaseDetailAddUserCode]
						,Src.[ReceiptCaseDetailEditDateTime]
						,Src.[ReceiptCaseDetailEditUserCode]
						,Src.[ReceiptCaseDetailUserDefinedText01]
						,Src.[ReceiptCaseDetailUserDefinedText02]
						,Src.[ReceiptCaseDetailUserDefinedText03]
						,Src.[ReceiptCaseDetailUserDefinedText04]
						,Src.[ReceiptCaseDetailUserDefinedText05]
						,Src.[ReceiptCaseDetailCaseID]
						,Src.[ReceiptCaseDetailIsManual]
						,Src.[ReceiptCaseDetailIsDamaged]
						,Src.[ReceiptCaseDetailUserDefinedNumber01]
						,Src.[ReceiptCaseDetailUserDefinedNumber02]
						,Src.[ReceiptCaseDetailUserDefinedNumber03]
						,Src.[ReceiptCaseDetailUserDefinedNumber04]
						,Src.[ReceiptCaseDetailUserDefinedNumber05]
						,Src.[ReceiptCaseDetailConfirmedNotAvailable]
						,Src.[ReceiptCaseDetailIsAnonymous]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDReceiptCaseDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDReceiptCaseDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ReceiptCaseDetails Src WITH (NOLOCK)
					INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptCaseDetails Dest WITH (NOLOCK) ON Src.IDReceiptCaseDetail = Dest.IDReceiptCaseDetail
					WHERE Dest.[ReceiptCaseDetailEditDateTime] < Src.[ReceiptCaseDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ReceiptID] = Src.[ReceiptID]
					,Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
					,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					,Dest.[ProductCode] = Src.[ProductCode]
					,Dest.[LotID] = Src.[LotID]
					,Dest.[StorageUnitID] = Src.[StorageUnitID]
					,Dest.[ReceiptCaseDetailPalletID] = Src.[ReceiptCaseDetailPalletID]
					,Dest.[ReceiptCaseDetailStatus] = Src.[ReceiptCaseDetailStatus]
					,Dest.[ReceiptCaseDetailDateTimeReceived] = Src.[ReceiptCaseDetailDateTimeReceived]
					,Dest.[ReceiptCaseDetailQuantityExpected] = Src.[ReceiptCaseDetailQuantityExpected]
					,Dest.[ReceiptCaseDetailQuantityAdjusted] = Src.[ReceiptCaseDetailQuantityAdjusted]
					,Dest.[ReceiptCaseDetailQuantityReceived] = Src.[ReceiptCaseDetailQuantityReceived]
					,Dest.[ReceiptCaseDetailQuantityRejected] = Src.[ReceiptCaseDetailQuantityRejected]
					,Dest.[ReceiptCaseDetailUnitOfMeasure] = Src.[ReceiptCaseDetailUnitOfMeasure]
					,Dest.[PackCode] = Src.[PackCode]
					,Dest.[LocationIDDestination] = Src.[LocationIDDestination]
					,Dest.[ReceiptCaseDetailLotAttribute01] = Src.[ReceiptCaseDetailLotAttribute01]
					,Dest.[ReceiptCaseDetailLotAttribute02] = Src.[ReceiptCaseDetailLotAttribute02]
					,Dest.[ReceiptCaseDetailLotAttribute03] = Src.[ReceiptCaseDetailLotAttribute03]
					,Dest.[ReceiptCaseDetailLotAttribute04] = Src.[ReceiptCaseDetailLotAttribute04]
					,Dest.[ReceiptCaseDetailLotAttribute05] = Src.[ReceiptCaseDetailLotAttribute05]
					,Dest.[ReceiptCaseDetailLotAttribute06] = Src.[ReceiptCaseDetailLotAttribute06]
					,Dest.[ReceiptCaseDetailLotAttribute07] = Src.[ReceiptCaseDetailLotAttribute07]
					,Dest.[ReceiptCaseDetailLotAttribute08] = Src.[ReceiptCaseDetailLotAttribute08]
					,Dest.[ReceiptCaseDetailLotAttribute09] = Src.[ReceiptCaseDetailLotAttribute09]
					,Dest.[ReceiptCaseDetailLotAttribute10] = Src.[ReceiptCaseDetailLotAttribute10]
					,Dest.[ReceiptCaseDetailReasonCode] = Src.[ReceiptCaseDetailReasonCode]
					,Dest.[ReceiptCaseDetailLotAttribute11] = Src.[ReceiptCaseDetailLotAttribute11]
					,Dest.[ReceiptCaseDetailLotAttribute12] = Src.[ReceiptCaseDetailLotAttribute12]
					,Dest.[ReceiptCaseDetailAddDateTime] = Src.[ReceiptCaseDetailAddDateTime]
					,Dest.[ReceiptCaseDetailAddUserCode] = Src.[ReceiptCaseDetailAddUserCode]
					,Dest.[ReceiptCaseDetailEditDateTime] = Src.[ReceiptCaseDetailEditDateTime]
					,Dest.[ReceiptCaseDetailEditUserCode] = Src.[ReceiptCaseDetailEditUserCode]
					,Dest.[ReceiptCaseDetailUserDefinedText01] = Src.[ReceiptCaseDetailUserDefinedText01]
					,Dest.[ReceiptCaseDetailUserDefinedText02] = Src.[ReceiptCaseDetailUserDefinedText02]
					,Dest.[ReceiptCaseDetailUserDefinedText03] = Src.[ReceiptCaseDetailUserDefinedText03]
					,Dest.[ReceiptCaseDetailUserDefinedText04] = Src.[ReceiptCaseDetailUserDefinedText04]
					,Dest.[ReceiptCaseDetailUserDefinedText05] = Src.[ReceiptCaseDetailUserDefinedText05]
					,Dest.[ReceiptCaseDetailCaseID] = Src.[ReceiptCaseDetailCaseID]
					,Dest.[ReceiptCaseDetailIsManual] = Src.[ReceiptCaseDetailIsManual]
					,Dest.[ReceiptCaseDetailIsDamaged] = Src.[ReceiptCaseDetailIsDamaged]
					,Dest.[ReceiptCaseDetailUserDefinedNumber01] = Src.[ReceiptCaseDetailUserDefinedNumber01]
					,Dest.[ReceiptCaseDetailUserDefinedNumber02] = Src.[ReceiptCaseDetailUserDefinedNumber02]
					,Dest.[ReceiptCaseDetailUserDefinedNumber03] = Src.[ReceiptCaseDetailUserDefinedNumber03]
					,Dest.[ReceiptCaseDetailUserDefinedNumber04] = Src.[ReceiptCaseDetailUserDefinedNumber04]
					,Dest.[ReceiptCaseDetailUserDefinedNumber05] = Src.[ReceiptCaseDetailUserDefinedNumber05]
					,Dest.[ReceiptCaseDetailConfirmedNotAvailable] = Src.[ReceiptCaseDetailConfirmedNotAvailable]
					,Dest.[ReceiptCaseDetailIsAnonymous] = Src.[ReceiptCaseDetailIsAnonymous]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDReceiptCaseDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDReceiptCaseDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ReceiptCaseDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptCaseDetails Dest ON Src.IDReceiptCaseDetail = Dest.IDReceiptCaseDetail
				WHERE Dest.[ReceiptCaseDetailEditDateTime] < Src.[ReceiptCaseDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ReceiptCaseDetails Src WITH (NOLOCK)
					INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptCaseDetails Dest WITH (NOLOCK) ON Src.IDReceiptCaseDetail = Dest.IDReceiptCaseDetail
					WHERE Dest.IDReceiptCaseDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptCaseDetails (
					[IDReceiptCaseDetail]
					,[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[CompanyIDStorer]
					,[ProductCode]
					,[LotID]
					,[StorageUnitID]
					,[ReceiptCaseDetailPalletID]
					,[ReceiptCaseDetailStatus]
					,[ReceiptCaseDetailDateTimeReceived]
					,[ReceiptCaseDetailQuantityExpected]
					,[ReceiptCaseDetailQuantityAdjusted]
					,[ReceiptCaseDetailQuantityReceived]
					,[ReceiptCaseDetailQuantityRejected]
					,[ReceiptCaseDetailUnitOfMeasure]
					,[PackCode]
					,[LocationIDDestination]
					,[ReceiptCaseDetailLotAttribute01]
					,[ReceiptCaseDetailLotAttribute02]
					,[ReceiptCaseDetailLotAttribute03]
					,[ReceiptCaseDetailLotAttribute04]
					,[ReceiptCaseDetailLotAttribute05]
					,[ReceiptCaseDetailLotAttribute06]
					,[ReceiptCaseDetailLotAttribute07]
					,[ReceiptCaseDetailLotAttribute08]
					,[ReceiptCaseDetailLotAttribute09]
					,[ReceiptCaseDetailLotAttribute10]
					,[ReceiptCaseDetailReasonCode]
					,[ReceiptCaseDetailLotAttribute11]
					,[ReceiptCaseDetailLotAttribute12]
					,[ReceiptCaseDetailAddDateTime]
					,[ReceiptCaseDetailAddUserCode]
					,[ReceiptCaseDetailEditDateTime]
					,[ReceiptCaseDetailEditUserCode]
					,[ReceiptCaseDetailUserDefinedText01]
					,[ReceiptCaseDetailUserDefinedText02]
					,[ReceiptCaseDetailUserDefinedText03]
					,[ReceiptCaseDetailUserDefinedText04]
					,[ReceiptCaseDetailUserDefinedText05]
					,[ReceiptCaseDetailCaseID]
					,[ReceiptCaseDetailIsManual]
					,[ReceiptCaseDetailIsDamaged]
					,[ReceiptCaseDetailUserDefinedNumber01]
					,[ReceiptCaseDetailUserDefinedNumber02]
					,[ReceiptCaseDetailUserDefinedNumber03]
					,[ReceiptCaseDetailUserDefinedNumber04]
					,[ReceiptCaseDetailUserDefinedNumber05]
					,[ReceiptCaseDetailConfirmedNotAvailable]
					,[ReceiptCaseDetailIsAnonymous]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDReceiptCaseDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDReceiptCaseDetail]
					,Src.[ReceiptID]
					,Src.[ReceiptDetailLineNumber]
					,Src.[CompanyIDStorer]
					,Src.[ProductCode]
					,Src.[LotID]
					,Src.[StorageUnitID]
					,Src.[ReceiptCaseDetailPalletID]
					,Src.[ReceiptCaseDetailStatus]
					,Src.[ReceiptCaseDetailDateTimeReceived]
					,Src.[ReceiptCaseDetailQuantityExpected]
					,Src.[ReceiptCaseDetailQuantityAdjusted]
					,Src.[ReceiptCaseDetailQuantityReceived]
					,Src.[ReceiptCaseDetailQuantityRejected]
					,Src.[ReceiptCaseDetailUnitOfMeasure]
					,Src.[PackCode]
					,Src.[LocationIDDestination]
					,Src.[ReceiptCaseDetailLotAttribute01]
					,Src.[ReceiptCaseDetailLotAttribute02]
					,Src.[ReceiptCaseDetailLotAttribute03]
					,Src.[ReceiptCaseDetailLotAttribute04]
					,Src.[ReceiptCaseDetailLotAttribute05]
					,Src.[ReceiptCaseDetailLotAttribute06]
					,Src.[ReceiptCaseDetailLotAttribute07]
					,Src.[ReceiptCaseDetailLotAttribute08]
					,Src.[ReceiptCaseDetailLotAttribute09]
					,Src.[ReceiptCaseDetailLotAttribute10]
					,Src.[ReceiptCaseDetailReasonCode]
					,Src.[ReceiptCaseDetailLotAttribute11]
					,Src.[ReceiptCaseDetailLotAttribute12]
					,Src.[ReceiptCaseDetailAddDateTime]
					,Src.[ReceiptCaseDetailAddUserCode]
					,Src.[ReceiptCaseDetailEditDateTime]
					,Src.[ReceiptCaseDetailEditUserCode]
					,Src.[ReceiptCaseDetailUserDefinedText01]
					,Src.[ReceiptCaseDetailUserDefinedText02]
					,Src.[ReceiptCaseDetailUserDefinedText03]
					,Src.[ReceiptCaseDetailUserDefinedText04]
					,Src.[ReceiptCaseDetailUserDefinedText05]
					,Src.[ReceiptCaseDetailCaseID]
					,Src.[ReceiptCaseDetailIsManual]
					,Src.[ReceiptCaseDetailIsDamaged]
					,Src.[ReceiptCaseDetailUserDefinedNumber01]
					,Src.[ReceiptCaseDetailUserDefinedNumber02]
					,Src.[ReceiptCaseDetailUserDefinedNumber03]
					,Src.[ReceiptCaseDetailUserDefinedNumber04]
					,Src.[ReceiptCaseDetailUserDefinedNumber05]
					,Src.[ReceiptCaseDetailConfirmedNotAvailable]
					,Src.[ReceiptCaseDetailIsAnonymous]
				FROM [dbo].ReceiptCaseDetails Src WITH (NOLOCK)
				INNER JOIN #tmpReceiptIDs tmpReceiptIDs ON Src.ReceiptID = tmpReceiptIDs.ReceiptID
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ReceiptCaseDetails Dest WITH (NOLOCK) ON Src.IDReceiptCaseDetail = Dest.IDReceiptCaseDetail
				WHERE Dest.IDReceiptCaseDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ReceiptCaseDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ReceiptCaseDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Orders
	SET @CurrentTableName = 'Orders';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		SET @OrderStatusIDsForArchival = ISNULL((
					SELECT FieldValue
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = '@OrderStatusIDsForArchival'
					), '19, 29, 96');
		SET @OrderArchiveAfterDays = ISNULL((
					SELECT FieldValue
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'OrderArchiveAfterDays'
					), 365);
		SET @MaxDateToArchiveData = DATEADD(DAY, @OrderArchiveAfterDays * - 1, GETUTCDATE());

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders AS Dest
			USING (
				SELECT DISTINCT O.[IDOrder]
					,O.[CompanyIDStorer]
					,O.[OrderExternalID]
					,O.[OrderDateTime]
					,O.[OrderDeliveryDateTime]
					,O.[OrderPriority]
					,O.[CompanyIDConsignee]
					,O.[OrderConsigneeContact1]
					,O.[OrderConsigneeContact2]
					,O.[OrderConsigneeCompany]
					,O.[OrderConsigneeAddress1]
					,O.[OrderConsigneeAddress2]
					,O.[OrderConsigneeAddress3]
					,O.[OrderConsigneeAddress4]
					,O.[OrderConsigneeCity]
					,O.[OrderConsigneeState]
					,O.[OrderConsigneeZipCode]
					,O.[OrderConsigneeCountry]
					,O.[OrderConsigneeIsoCountryCode]
					,O.[OrderConsigneePhone1]
					,O.[OrderConsigneePhone2]
					,O.[OrderConsigneeFax1]
					,O.[OrderConsigneeFax2]
					,O.[OrderConsigneeVATNumber]
					,O.[OrderBuyerPurchaseOrder]
					,O.[OrderBillToCode]
					,O.[OrderBillToContact1]
					,O.[OrderBillToContact2]
					,O.[OrderBillToCompany]
					,O.[OrderBillToAddress1]
					,O.[OrderBillToAddress2]
					,O.[OrderBillToAddress3]
					,O.[OrderBillToAddress4]
					,O.[OrderBillToCity]
					,O.[OrderBillToState]
					,O.[OrderBillToZipCode]
					,O.[OrderBillToCountry]
					,O.[OrderBillToIsoCountryCode]
					,O.[OrderBillToPhone1]
					,O.[OrderBillToPhone2]
					,O.[OrderBillToFax1]
					,O.[OrderBillToFax2]
					,O.[OrderBillToVATNumber]
					,O.[OrderIncoTerm]
					,O.[OrderPaymentTerm]
					,O.[OrderDoor]
					,O.[LocationIDSortation]
					,O.[OrderBatchFlag]
					,O.[OrderBulkCargonGroup]
					,O.[OrderRoute]
					,O.[OrderStop]
					,O.[OrderOpenQuantity]
					,O.[OrderStatusID]
					,O.[OrderDischargePlace]
					,O.[OrderDeliveryPlace]
					,O.[OrderIntermodalVehicle]
					,O.[OrderCountryOfOrigin]
					,O.[OrderCountryOfDestination]
					,O.[OrderUpdateSource]
					,O.[OrderTypeID]
					,O.[OrderOrderGroup]
					,O.[OrderEffectiveDateTime]
					,O.[OrderStage]
					,O.[OrderDocumentCode]
					,O.[OrderSplitOrders]
					,O.[OrderPalletIndicator]
					,O.[OrderContainerType]
					,O.[OrderContainerQuantity]
					,O.[OrderBilledContainerQuantity]
					,O.[OrderTransportationMode]
					,O.[OrderTransportationService]
					,O.[OrderExternalOrderCode2]
					,O.[OrderConsigneeEmail1]
					,O.[OrderConsigneeEmail2]
					,O.[OrderUserDefined01]
					,O.[OrderUserDefined02]
					,O.[OrderUserDefined03]
					,O.[OrderUserDefined04]
					,O.[OrderUserDefined05]
					,CAST(O.[OrderNotes2] AS VARCHAR(MAX)) AS [OrderNotes2]
					,O.[OrderItemNumber]
					,O.[OrderForteFlag]
					,O.[LoadID]
					,O.[OrderShipTogether]
					,O.[OrderDeliveryDateTime2]
					,O.[OrderRequestedShipmentDateTime]
					,O.[OrderActualShipmentDateTime]
					,O.[OrderOrderValue]
					,O.[OrderOrderHandlingType]
					,O.[OrderExternalLoadID]
					,O.[OrderDestinationCode]
					,O.[OrderReferenceNumber]
					,O.[OrderInTransitKey]
					,O.[OrderReceiptKey]
					,O.[OrderCaseLabelType]
					,O.[OrderLabelName]
					,O.[OrderStandardSSCCLabelName]
					,O.[OrderStandardGTINLabelName]
					,O.[OrderRFIDSSCCLabelName]
					,O.[OrderRFIDGTINLabelName]
					,O.[OrderIsRFID]
					,O.[OrderCarrierCode]
					,O.[OrderCarrierName]
					,O.[OrderCarrierAddress1]
					,O.[OrderCarrierAddress2]
					,O.[OrderCarrierCity]
					,O.[OrderCarrierState]
					,O.[OrderCarrierZip]
					,O.[OrderCarrierCountry]
					,O.[OrderCarrierPhone]
					,O.[OrderDriverName]
					,O.[OrderTrailerNumber]
					,O.[OrderTrailerOwner]
					,O.[OrderDepartureDateTime]
					,O.[OrderOrderBreak]
					,O.[OrderAddDateTime]
					,O.[OrderAddUserCode]
					,O.[OrderEditDateTime]
					,O.[OrderEditUserCode]
					,CAST(O.[OrderNotes] AS NVARCHAR(MAX)) AS [OrderNotes]
					,O.[OrderLastWaveID]
					,O.[OrderContainerCode]
					,O.[OrderUserDefined06]
					,O.[OrderUserDefined07]
					,O.[OrderUserDefined08]
					,O.[OrderUserDefined09]
					,O.[OrderUserDefined10]
					,O.[CompanyIDUnloading]
					,O.[OrderActualDepartureDateTime]
					,O.[OrderWaveCode]
					,O.[OrderBundleID]
					,O.[TransportIDReceipt]
					,O.[OrderEstimatedNumberOfPallets]
					,O.[OrderActualNumberOfPallets]
					,O.[OrderEstimatedNumberOfPalletsIsCalculated]
					,O.[OrderEstimatedNumberOfPalletsIsManualInput]
					,O.[PalletTypeCode]
					,O.[OrderVolume]
					,O.[OrderTag01]
					,O.[OrderTransportCompany]
					,O.[OrderDelivery]
					,O.[OrderPickUpDateTime]
					,O.[OrderUserDefinedDateTime01]
					,O.[OrderUserDefinedDateTime02]
					,O.[OrderUserDefinedDateTime03]
					,O.[OrderUserDefinedDateTime04]
					,O.[OrderUserDefinedDateTime05]
					,O.[OrderUserDefinedYesNo01]
					,O.[OrderUserDefinedYesNo02]
					,O.[OrderUserDefinedYesNo03]
					,O.[OrderUserDefinedYesNo04]
					,O.[OrderUserDefinedYesNo05]
					,O.[CompanyIDActualCarrier]
					,O.[CustomsTypeCode]
					,O.[OrderActualDeliveryDateTime]
					,O.[OrderCustomsNumber]
					,O.[OrderCustomsOK]
					,O.[OrderLastChequeNumber]
					,O.[OrderLicensePlate]
					,O.[OrderUserDefinedYesNo06]
					,O.[OrderUserDefinedYesNo07]
					,O.[OrderUserDefinedYesNo08]
					,O.[OrderUserDefinedYesNo09]
					,O.[OrderUserDefinedYesNo10]
					,CAST(O.[OrderInternalNotes] AS NVARCHAR(MAX)) AS [OrderInternalNotes]
					,CAST(O.[OrderWarehousingNotes] AS NVARCHAR(MAX)) AS [OrderWarehousingNotes]
					,O.[CompanyIDWarehouse]
					,O.[OrderDelayShipping]
					,CAST(O.[OrderCustomerNotes] AS NVARCHAR(MAX)) AS [OrderCustomerNotes]
					,O.[OrderSequenceNumber]
					,O.[OrderReadyForArchiving]
					,O.OrderAutoDockAssignedHow
					,O.OrderAutoDockAssignedSet
					,O.OrderAutoDockAssignedStep
					,O.OrderAutoDockAssignTime
					,O.OrderAutoDoorAssigned
					,O.OrderAutoPackAssigned
					,O.OrderAutoStageAssigned
					,O.OrderBatchOrderNumber
					,O.OrderBOLNumber
					,O.OrderBOLPrinted
					,O.OrderExternalUserDefinedDateTime01
					,O.OrderExternalUserDefinedDateTime02
					,O.OrderExternalUserDefinedDateTime03
					,O.OrderExternalUserDefinedDateTime04
					,O.OrderExternalUserDefinedDateTime05
					,O.OrderExternalUserDefinedFloat01
					,O.OrderExternalUserDefinedFloat02
					,O.OrderExternalUserDefinedFloat03
					,O.OrderExternalUserDefinedFloat04
					,O.OrderExternalUserDefinedFloat05
					,O.OrderExternalUserDefinedLookup01
					,O.OrderExternalUserDefinedLookup02
					,O.OrderExternalUserDefinedLookup03
					,O.OrderExternalUserDefinedLookup04
					,O.OrderExternalUserDefinedLookup05
					,O.OrderExternalUserDefinedLookup06
					,O.OrderExternalUserDefinedLookup07
					,O.OrderExternalUserDefinedLookup08
					,O.OrderExternalUserDefinedLookup09
					,O.OrderExternalUserDefinedLookup10
					,O.OrderExternalUserDefinedString01
					,O.OrderExternalUserDefinedString02
					,O.OrderExternalUserDefinedString03
					,O.OrderExternalUserDefinedString04
					,O.OrderExternalUserDefinedString05
					,O.OrderExternalUserDefinedString06
					,O.OrderExternalUserDefinedString07
					,O.OrderExternalUserDefinedString08
					,O.OrderExternalUserDefinedString09
					,O.OrderExternalUserDefinedString10
					,O.OrderExternalUserDefinedString11
					,O.OrderExternalUserDefinedString12
					,O.OrderExternalUserDefinedString13
					,O.OrderExternalUserDefinedString14
					,O.OrderExternalUserDefinedString15
					,O.OrderExternalUserDefinedString16
					,O.OrderExternalUserDefinedString17
					,O.OrderExternalUserDefinedString18
					,O.OrderExternalUserDefinedString19
					,O.OrderExternalUserDefinedString20
					,O.OrderExternalUserDefinedString21
					,O.OrderExternalUserDefinedString22
					,O.OrderExternalUserDefinedString23
					,O.OrderExternalUserDefinedString24
					,O.OrderExternalUserDefinedString25
					,O.OrderExternalUserDefinedString26
					,O.OrderExternalUserDefinedString27
					,O.OrderExternalUserDefinedString28
					,O.OrderExternalUserDefinedString29
					,O.OrderExternalUserDefinedString30
					,O.OrderExternalUserDefinedString31
					,O.OrderExternalUserDefinedString32
					,O.OrderExternalUserDefinedString33
					,O.OrderExternalUserDefinedString34
					,O.OrderExternalUserDefinedString35
					,O.OrderFreightChargeBaseAmount
					,O.OrderFreightCostBaseAmount
					,O.OrderHostProcessRequired
					,O.OrderPackingValTemplate
					,O.OrderPackNotes
					,O.OrderReferenceLID
					,O.OrderRequireOrderClose
					,O.OrderShipToGroup
					,O.OrderSPSAPIStrategyKey
					,O.OrderTotalPalletEstimate
					,O.OrderTotalRoutes
				FROM dbo.Orders O WITH (NOLOCK)
				INNER JOIN OrderDetails OD WITH (NOLOCK) ON O.IDOrder = OD.OrderID
				INNER JOIN Products P WITH (NOLOCK) ON P.[ProductCode] = OD.ProductCode
					AND P.[CompanyIDStorer] = OD.CompanyIDStorer
				LEFT OUTER JOIN Lots L WITH (NOLOCK) ON L.IDLot = OD.LotID
				LEFT OUTER JOIN LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
				WHERE (
						LLLSU.LinkLotLocationStorageUnitQuantity = 0
						OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
						)
					AND CAST(O.[OrderEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					AND O.[OrderStatusID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@OrderStatusIDsForArchival, ',')
						)
				) AS Src
				ON (Dest.[IDOrder] = Src.[IDOrder])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[OrderExternalID] = Src.[OrderExternalID]
						,Dest.[OrderDateTime] = Src.[OrderDateTime]
						,Dest.[OrderDeliveryDateTime] = Src.[OrderDeliveryDateTime]
						,Dest.[OrderPriority] = Src.[OrderPriority]
						,Dest.[CompanyIDConsignee] = Src.[CompanyIDConsignee]
						,Dest.[OrderConsigneeContact1] = Src.[OrderConsigneeContact1]
						,Dest.[OrderConsigneeContact2] = Src.[OrderConsigneeContact2]
						,Dest.[OrderConsigneeCompany] = Src.[OrderConsigneeCompany]
						,Dest.[OrderConsigneeAddress1] = Src.[OrderConsigneeAddress1]
						,Dest.[OrderConsigneeAddress2] = Src.[OrderConsigneeAddress2]
						,Dest.[OrderConsigneeAddress3] = Src.[OrderConsigneeAddress3]
						,Dest.[OrderConsigneeAddress4] = Src.[OrderConsigneeAddress4]
						,Dest.[OrderConsigneeCity] = Src.[OrderConsigneeCity]
						,Dest.[OrderConsigneeState] = Src.[OrderConsigneeState]
						,Dest.[OrderConsigneeZipCode] = Src.[OrderConsigneeZipCode]
						,Dest.[OrderConsigneeCountry] = Src.[OrderConsigneeCountry]
						,Dest.[OrderConsigneeIsoCountryCode] = Src.[OrderConsigneeIsoCountryCode]
						,Dest.[OrderConsigneePhone1] = Src.[OrderConsigneePhone1]
						,Dest.[OrderConsigneePhone2] = Src.[OrderConsigneePhone2]
						,Dest.[OrderConsigneeFax1] = Src.[OrderConsigneeFax1]
						,Dest.[OrderConsigneeFax2] = Src.[OrderConsigneeFax2]
						,Dest.[OrderConsigneeVATNumber] = Src.[OrderConsigneeVATNumber]
						,Dest.[OrderBuyerPurchaseOrder] = Src.[OrderBuyerPurchaseOrder]
						,Dest.[OrderBillToCode] = Src.[OrderBillToCode]
						,Dest.[OrderBillToContact1] = Src.[OrderBillToContact1]
						,Dest.[OrderBillToContact2] = Src.[OrderBillToContact2]
						,Dest.[OrderBillToCompany] = Src.[OrderBillToCompany]
						,Dest.[OrderBillToAddress1] = Src.[OrderBillToAddress1]
						,Dest.[OrderBillToAddress2] = Src.[OrderBillToAddress2]
						,Dest.[OrderBillToAddress3] = Src.[OrderBillToAddress3]
						,Dest.[OrderBillToAddress4] = Src.[OrderBillToAddress4]
						,Dest.[OrderBillToCity] = Src.[OrderBillToCity]
						,Dest.[OrderBillToState] = Src.[OrderBillToState]
						,Dest.[OrderBillToZipCode] = Src.[OrderBillToZipCode]
						,Dest.[OrderBillToCountry] = Src.[OrderBillToCountry]
						,Dest.[OrderBillToIsoCountryCode] = Src.[OrderBillToIsoCountryCode]
						,Dest.[OrderBillToPhone1] = Src.[OrderBillToPhone1]
						,Dest.[OrderBillToPhone2] = Src.[OrderBillToPhone2]
						,Dest.[OrderBillToFax1] = Src.[OrderBillToFax1]
						,Dest.[OrderBillToFax2] = Src.[OrderBillToFax2]
						,Dest.[OrderBillToVATNumber] = Src.[OrderBillToVATNumber]
						,Dest.[OrderIncoTerm] = Src.[OrderIncoTerm]
						,Dest.[OrderPaymentTerm] = Src.[OrderPaymentTerm]
						,Dest.[OrderDoor] = Src.[OrderDoor]
						,Dest.[LocationIDSortation] = Src.[LocationIDSortation]
						,Dest.[OrderBatchFlag] = Src.[OrderBatchFlag]
						,Dest.[OrderBulkCargonGroup] = Src.[OrderBulkCargonGroup]
						,Dest.[OrderRoute] = Src.[OrderRoute]
						,Dest.[OrderStop] = Src.[OrderStop]
						,Dest.[OrderOpenQuantity] = Src.[OrderOpenQuantity]
						,Dest.[OrderStatusID] = Src.[OrderStatusID]
						,Dest.[OrderDischargePlace] = Src.[OrderDischargePlace]
						,Dest.[OrderDeliveryPlace] = Src.[OrderDeliveryPlace]
						,Dest.[OrderIntermodalVehicle] = Src.[OrderIntermodalVehicle]
						,Dest.[OrderCountryOfOrigin] = Src.[OrderCountryOfOrigin]
						,Dest.[OrderCountryOfDestination] = Src.[OrderCountryOfDestination]
						,Dest.[OrderUpdateSource] = Src.[OrderUpdateSource]
						,Dest.[OrderTypeID] = Src.[OrderTypeID]
						,Dest.[OrderOrderGroup] = Src.[OrderOrderGroup]
						,Dest.[OrderEffectiveDateTime] = Src.[OrderEffectiveDateTime]
						,Dest.[OrderStage] = Src.[OrderStage]
						,Dest.[OrderDocumentCode] = Src.[OrderDocumentCode]
						,Dest.[OrderSplitOrders] = Src.[OrderSplitOrders]
						,Dest.[OrderPalletIndicator] = Src.[OrderPalletIndicator]
						,Dest.[OrderContainerType] = Src.[OrderContainerType]
						,Dest.[OrderContainerQuantity] = Src.[OrderContainerQuantity]
						,Dest.[OrderBilledContainerQuantity] = Src.[OrderBilledContainerQuantity]
						,Dest.[OrderTransportationMode] = Src.[OrderTransportationMode]
						,Dest.[OrderTransportationService] = Src.[OrderTransportationService]
						,Dest.[OrderExternalOrderCode2] = Src.[OrderExternalOrderCode2]
						,Dest.[OrderConsigneeEmail1] = Src.[OrderConsigneeEmail1]
						,Dest.[OrderConsigneeEmail2] = Src.[OrderConsigneeEmail2]
						,Dest.[OrderUserDefined01] = Src.[OrderUserDefined01]
						,Dest.[OrderUserDefined02] = Src.[OrderUserDefined02]
						,Dest.[OrderUserDefined03] = Src.[OrderUserDefined03]
						,Dest.[OrderUserDefined04] = Src.[OrderUserDefined04]
						,Dest.[OrderUserDefined05] = Src.[OrderUserDefined05]
						,Dest.[OrderNotes2] = Src.[OrderNotes2]
						,Dest.[OrderItemNumber] = Src.[OrderItemNumber]
						,Dest.[OrderForteFlag] = Src.[OrderForteFlag]
						,Dest.[LoadID] = Src.[LoadID]
						,Dest.[OrderShipTogether] = Src.[OrderShipTogether]
						,Dest.[OrderDeliveryDateTime2] = Src.[OrderDeliveryDateTime2]
						,Dest.[OrderRequestedShipmentDateTime] = Src.[OrderRequestedShipmentDateTime]
						,Dest.[OrderActualShipmentDateTime] = Src.[OrderActualShipmentDateTime]
						,Dest.[OrderOrderValue] = Src.[OrderOrderValue]
						,Dest.[OrderOrderHandlingType] = Src.[OrderOrderHandlingType]
						,Dest.[OrderExternalLoadID] = Src.[OrderExternalLoadID]
						,Dest.[OrderDestinationCode] = Src.[OrderDestinationCode]
						,Dest.[OrderReferenceNumber] = Src.[OrderReferenceNumber]
						,Dest.[OrderInTransitKey] = Src.[OrderInTransitKey]
						,Dest.[OrderReceiptKey] = Src.[OrderReceiptKey]
						,Dest.[OrderCaseLabelType] = Src.[OrderCaseLabelType]
						,Dest.[OrderLabelName] = Src.[OrderLabelName]
						,Dest.[OrderStandardSSCCLabelName] = Src.[OrderStandardSSCCLabelName]
						,Dest.[OrderStandardGTINLabelName] = Src.[OrderStandardGTINLabelName]
						,Dest.[OrderRFIDSSCCLabelName] = Src.[OrderRFIDSSCCLabelName]
						,Dest.[OrderRFIDGTINLabelName] = Src.[OrderRFIDGTINLabelName]
						,Dest.[OrderIsRFID] = Src.[OrderIsRFID]
						,Dest.[OrderCarrierCode] = Src.[OrderCarrierCode]
						,Dest.[OrderCarrierName] = Src.[OrderCarrierName]
						,Dest.[OrderCarrierAddress1] = Src.[OrderCarrierAddress1]
						,Dest.[OrderCarrierAddress2] = Src.[OrderCarrierAddress2]
						,Dest.[OrderCarrierCity] = Src.[OrderCarrierCity]
						,Dest.[OrderCarrierState] = Src.[OrderCarrierState]
						,Dest.[OrderCarrierZip] = Src.[OrderCarrierZip]
						,Dest.[OrderCarrierCountry] = Src.[OrderCarrierCountry]
						,Dest.[OrderCarrierPhone] = Src.[OrderCarrierPhone]
						,Dest.[OrderDriverName] = Src.[OrderDriverName]
						,Dest.[OrderTrailerNumber] = Src.[OrderTrailerNumber]
						,Dest.[OrderTrailerOwner] = Src.[OrderTrailerOwner]
						,Dest.[OrderDepartureDateTime] = Src.[OrderDepartureDateTime]
						,Dest.[OrderOrderBreak] = Src.[OrderOrderBreak]
						,Dest.[OrderAddDateTime] = Src.[OrderAddDateTime]
						,Dest.[OrderAddUserCode] = Src.[OrderAddUserCode]
						,Dest.[OrderEditDateTime] = Src.[OrderEditDateTime]
						,Dest.[OrderEditUserCode] = Src.[OrderEditUserCode]
						,Dest.[OrderNotes] = Src.[OrderNotes]
						,Dest.[OrderLastWaveID] = Src.[OrderLastWaveID]
						,Dest.[OrderContainerCode] = Src.[OrderContainerCode]
						,Dest.[OrderUserDefined06] = Src.[OrderUserDefined06]
						,Dest.[OrderUserDefined07] = Src.[OrderUserDefined07]
						,Dest.[OrderUserDefined08] = Src.[OrderUserDefined08]
						,Dest.[OrderUserDefined09] = Src.[OrderUserDefined09]
						,Dest.[OrderUserDefined10] = Src.[OrderUserDefined10]
						,Dest.[CompanyIDUnloading] = Src.[CompanyIDUnloading]
						,Dest.[OrderActualDepartureDateTime] = Src.[OrderActualDepartureDateTime]
						,Dest.[OrderWaveCode] = Src.[OrderWaveCode]
						,Dest.[OrderBundleID] = Src.[OrderBundleID]
						,Dest.[TransportIDReceipt] = Src.[TransportIDReceipt]
						,Dest.[OrderEstimatedNumberOfPallets] = Src.[OrderEstimatedNumberOfPallets]
						,Dest.[OrderActualNumberOfPallets] = Src.[OrderActualNumberOfPallets]
						,Dest.[OrderEstimatedNumberOfPalletsIsCalculated] = Src.[OrderEstimatedNumberOfPalletsIsCalculated]
						,Dest.[OrderEstimatedNumberOfPalletsIsManualInput] = Src.[OrderEstimatedNumberOfPalletsIsManualInput]
						,Dest.[PalletTypeCode] = Src.[PalletTypeCode]
						,Dest.[OrderVolume] = Src.[OrderVolume]
						,Dest.[OrderTag01] = Src.[OrderTag01]
						,Dest.[OrderTransportCompany] = Src.[OrderTransportCompany]
						,Dest.[OrderDelivery] = Src.[OrderDelivery]
						,Dest.[OrderPickUpDateTime] = Src.[OrderPickUpDateTime]
						,Dest.[OrderUserDefinedDateTime01] = Src.[OrderUserDefinedDateTime01]
						,Dest.[OrderUserDefinedDateTime02] = Src.[OrderUserDefinedDateTime02]
						,Dest.[OrderUserDefinedDateTime03] = Src.[OrderUserDefinedDateTime03]
						,Dest.[OrderUserDefinedDateTime04] = Src.[OrderUserDefinedDateTime04]
						,Dest.[OrderUserDefinedDateTime05] = Src.[OrderUserDefinedDateTime05]
						,Dest.[OrderUserDefinedYesNo01] = Src.[OrderUserDefinedYesNo01]
						,Dest.[OrderUserDefinedYesNo02] = Src.[OrderUserDefinedYesNo02]
						,Dest.[OrderUserDefinedYesNo03] = Src.[OrderUserDefinedYesNo03]
						,Dest.[OrderUserDefinedYesNo04] = Src.[OrderUserDefinedYesNo04]
						,Dest.[OrderUserDefinedYesNo05] = Src.[OrderUserDefinedYesNo05]
						,Dest.[CompanyIDActualCarrier] = Src.[CompanyIDActualCarrier]
						,Dest.[CustomsTypeCode] = Src.[CustomsTypeCode]
						,Dest.[OrderActualDeliveryDateTime] = Src.[OrderActualDeliveryDateTime]
						,Dest.[OrderCustomsNumber] = Src.[OrderCustomsNumber]
						,Dest.[OrderCustomsOK] = Src.[OrderCustomsOK]
						,Dest.[OrderLastChequeNumber] = Src.[OrderLastChequeNumber]
						,Dest.[OrderLicensePlate] = Src.[OrderLicensePlate]
						,Dest.[OrderUserDefinedYesNo06] = Src.[OrderUserDefinedYesNo06]
						,Dest.[OrderUserDefinedYesNo07] = Src.[OrderUserDefinedYesNo07]
						,Dest.[OrderUserDefinedYesNo08] = Src.[OrderUserDefinedYesNo08]
						,Dest.[OrderUserDefinedYesNo09] = Src.[OrderUserDefinedYesNo09]
						,Dest.[OrderUserDefinedYesNo10] = Src.[OrderUserDefinedYesNo10]
						,Dest.[OrderInternalNotes] = Src.[OrderInternalNotes]
						,Dest.[OrderWarehousingNotes] = Src.[OrderWarehousingNotes]
						,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
						,Dest.[OrderDelayShipping] = Src.[OrderDelayShipping]
						,Dest.[OrderCustomerNotes] = Src.[OrderCustomerNotes]
						,Dest.[OrderSequenceNumber] = Src.[OrderSequenceNumber]
						,Dest.[OrderReadyForArchiving] = Src.[OrderReadyForArchiving]
						,DEST.OrderAutoDockAssignedHow = Src.OrderAutoDockAssignedHow
						,DEST.OrderAutoDockAssignedSet = Src.OrderAutoDockAssignedSet
						,DEST.OrderAutoDockAssignedStep = Src.OrderAutoDockAssignedStep
						,DEST.OrderAutoDockAssignTime = Src.OrderAutoDockAssignTime
						,DEST.OrderAutoDoorAssigned = Src.OrderAutoDoorAssigned
						,DEST.OrderAutoPackAssigned = Src.OrderAutoPackAssigned
						,DEST.OrderAutoStageAssigned = Src.OrderAutoStageAssigned
						,DEST.OrderBatchOrderNumber = Src.OrderBatchOrderNumber
						,DEST.OrderBOLNumber = Src.OrderBOLNumber
						,DEST.OrderBOLPrinted = Src.OrderBOLPrinted
						,DEST.OrderExternalUserDefinedDateTime01 = Src.OrderExternalUserDefinedDateTime01
						,DEST.OrderExternalUserDefinedDateTime02 = Src.OrderExternalUserDefinedDateTime02
						,DEST.OrderExternalUserDefinedDateTime03 = Src.OrderExternalUserDefinedDateTime03
						,DEST.OrderExternalUserDefinedDateTime04 = Src.OrderExternalUserDefinedDateTime04
						,DEST.OrderExternalUserDefinedDateTime05 = Src.OrderExternalUserDefinedDateTime05
						,DEST.OrderExternalUserDefinedFloat01 = Src.OrderExternalUserDefinedFloat01
						,DEST.OrderExternalUserDefinedFloat02 = Src.OrderExternalUserDefinedFloat02
						,DEST.OrderExternalUserDefinedFloat03 = Src.OrderExternalUserDefinedFloat03
						,DEST.OrderExternalUserDefinedFloat04 = Src.OrderExternalUserDefinedFloat04
						,DEST.OrderExternalUserDefinedFloat05 = Src.OrderExternalUserDefinedFloat05
						,DEST.OrderExternalUserDefinedLookup01 = Src.OrderExternalUserDefinedLookup01
						,DEST.OrderExternalUserDefinedLookup02 = Src.OrderExternalUserDefinedLookup02
						,DEST.OrderExternalUserDefinedLookup03 = Src.OrderExternalUserDefinedLookup03
						,DEST.OrderExternalUserDefinedLookup04 = Src.OrderExternalUserDefinedLookup04
						,DEST.OrderExternalUserDefinedLookup05 = Src.OrderExternalUserDefinedLookup05
						,DEST.OrderExternalUserDefinedLookup06 = Src.OrderExternalUserDefinedLookup06
						,DEST.OrderExternalUserDefinedLookup07 = Src.OrderExternalUserDefinedLookup07
						,DEST.OrderExternalUserDefinedLookup08 = Src.OrderExternalUserDefinedLookup08
						,DEST.OrderExternalUserDefinedLookup09 = Src.OrderExternalUserDefinedLookup09
						,DEST.OrderExternalUserDefinedLookup10 = Src.OrderExternalUserDefinedLookup10
						,DEST.OrderExternalUserDefinedString01 = Src.OrderExternalUserDefinedString01
						,DEST.OrderExternalUserDefinedString02 = Src.OrderExternalUserDefinedString02
						,DEST.OrderExternalUserDefinedString03 = Src.OrderExternalUserDefinedString03
						,DEST.OrderExternalUserDefinedString04 = Src.OrderExternalUserDefinedString04
						,DEST.OrderExternalUserDefinedString05 = Src.OrderExternalUserDefinedString05
						,DEST.OrderExternalUserDefinedString06 = Src.OrderExternalUserDefinedString06
						,DEST.OrderExternalUserDefinedString07 = Src.OrderExternalUserDefinedString07
						,DEST.OrderExternalUserDefinedString08 = Src.OrderExternalUserDefinedString08
						,DEST.OrderExternalUserDefinedString09 = Src.OrderExternalUserDefinedString09
						,DEST.OrderExternalUserDefinedString10 = Src.OrderExternalUserDefinedString10
						,DEST.OrderExternalUserDefinedString11 = Src.OrderExternalUserDefinedString11
						,DEST.OrderExternalUserDefinedString12 = Src.OrderExternalUserDefinedString12
						,DEST.OrderExternalUserDefinedString13 = Src.OrderExternalUserDefinedString13
						,DEST.OrderExternalUserDefinedString14 = Src.OrderExternalUserDefinedString14
						,DEST.OrderExternalUserDefinedString15 = Src.OrderExternalUserDefinedString15
						,DEST.OrderExternalUserDefinedString16 = Src.OrderExternalUserDefinedString16
						,DEST.OrderExternalUserDefinedString17 = Src.OrderExternalUserDefinedString17
						,DEST.OrderExternalUserDefinedString18 = Src.OrderExternalUserDefinedString18
						,DEST.OrderExternalUserDefinedString19 = Src.OrderExternalUserDefinedString19
						,DEST.OrderExternalUserDefinedString20 = Src.OrderExternalUserDefinedString20
						,DEST.OrderExternalUserDefinedString21 = Src.OrderExternalUserDefinedString21
						,DEST.OrderExternalUserDefinedString22 = Src.OrderExternalUserDefinedString22
						,DEST.OrderExternalUserDefinedString23 = Src.OrderExternalUserDefinedString23
						,DEST.OrderExternalUserDefinedString24 = Src.OrderExternalUserDefinedString24
						,DEST.OrderExternalUserDefinedString25 = Src.OrderExternalUserDefinedString25
						,DEST.OrderExternalUserDefinedString26 = Src.OrderExternalUserDefinedString26
						,DEST.OrderExternalUserDefinedString27 = Src.OrderExternalUserDefinedString27
						,DEST.OrderExternalUserDefinedString28 = Src.OrderExternalUserDefinedString28
						,DEST.OrderExternalUserDefinedString29 = Src.OrderExternalUserDefinedString29
						,DEST.OrderExternalUserDefinedString30 = Src.OrderExternalUserDefinedString30
						,DEST.OrderExternalUserDefinedString31 = Src.OrderExternalUserDefinedString31
						,DEST.OrderExternalUserDefinedString32 = Src.OrderExternalUserDefinedString32
						,DEST.OrderExternalUserDefinedString33 = Src.OrderExternalUserDefinedString33
						,DEST.OrderExternalUserDefinedString34 = Src.OrderExternalUserDefinedString34
						,DEST.OrderExternalUserDefinedString35 = Src.OrderExternalUserDefinedString35
						,DEST.OrderFreightChargeBaseAmount = Src.OrderFreightChargeBaseAmount
						,DEST.OrderFreightCostBaseAmount = Src.OrderFreightCostBaseAmount
						,DEST.OrderHostProcessRequired = Src.OrderHostProcessRequired
						,DEST.OrderPackingValTemplate = Src.OrderPackingValTemplate
						,DEST.OrderPackNotes = Src.OrderPackNotes
						,DEST.OrderReferenceLID = Src.OrderReferenceLID
						,DEST.OrderRequireOrderClose = Src.OrderRequireOrderClose
						,DEST.OrderShipToGroup = Src.OrderShipToGroup
						,DEST.OrderSPSAPIStrategyKey = Src.OrderSPSAPIStrategyKey
						,DEST.OrderTotalPalletEstimate = Src.OrderTotalPalletEstimate
						,DEST.OrderTotalRoutes = Src.OrderTotalRoutes
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDOrder]
						,[CompanyIDStorer]
						,[OrderExternalID]
						,[OrderDateTime]
						,[OrderDeliveryDateTime]
						,[OrderPriority]
						,[CompanyIDConsignee]
						,[OrderConsigneeContact1]
						,[OrderConsigneeContact2]
						,[OrderConsigneeCompany]
						,[OrderConsigneeAddress1]
						,[OrderConsigneeAddress2]
						,[OrderConsigneeAddress3]
						,[OrderConsigneeAddress4]
						,[OrderConsigneeCity]
						,[OrderConsigneeState]
						,[OrderConsigneeZipCode]
						,[OrderConsigneeCountry]
						,[OrderConsigneeIsoCountryCode]
						,[OrderConsigneePhone1]
						,[OrderConsigneePhone2]
						,[OrderConsigneeFax1]
						,[OrderConsigneeFax2]
						,[OrderConsigneeVATNumber]
						,[OrderBuyerPurchaseOrder]
						,[OrderBillToCode]
						,[OrderBillToContact1]
						,[OrderBillToContact2]
						,[OrderBillToCompany]
						,[OrderBillToAddress1]
						,[OrderBillToAddress2]
						,[OrderBillToAddress3]
						,[OrderBillToAddress4]
						,[OrderBillToCity]
						,[OrderBillToState]
						,[OrderBillToZipCode]
						,[OrderBillToCountry]
						,[OrderBillToIsoCountryCode]
						,[OrderBillToPhone1]
						,[OrderBillToPhone2]
						,[OrderBillToFax1]
						,[OrderBillToFax2]
						,[OrderBillToVATNumber]
						,[OrderIncoTerm]
						,[OrderPaymentTerm]
						,[OrderDoor]
						,[LocationIDSortation]
						,[OrderBatchFlag]
						,[OrderBulkCargonGroup]
						,[OrderRoute]
						,[OrderStop]
						,[OrderOpenQuantity]
						,[OrderStatusID]
						,[OrderDischargePlace]
						,[OrderDeliveryPlace]
						,[OrderIntermodalVehicle]
						,[OrderCountryOfOrigin]
						,[OrderCountryOfDestination]
						,[OrderUpdateSource]
						,[OrderTypeID]
						,[OrderOrderGroup]
						,[OrderEffectiveDateTime]
						,[OrderStage]
						,[OrderDocumentCode]
						,[OrderSplitOrders]
						,[OrderPalletIndicator]
						,[OrderContainerType]
						,[OrderContainerQuantity]
						,[OrderBilledContainerQuantity]
						,[OrderTransportationMode]
						,[OrderTransportationService]
						,[OrderExternalOrderCode2]
						,[OrderConsigneeEmail1]
						,[OrderConsigneeEmail2]
						,[OrderUserDefined01]
						,[OrderUserDefined02]
						,[OrderUserDefined03]
						,[OrderUserDefined04]
						,[OrderUserDefined05]
						,[OrderNotes2]
						,[OrderItemNumber]
						,[OrderForteFlag]
						,[LoadID]
						,[OrderShipTogether]
						,[OrderDeliveryDateTime2]
						,[OrderRequestedShipmentDateTime]
						,[OrderActualShipmentDateTime]
						,[OrderOrderValue]
						,[OrderOrderHandlingType]
						,[OrderExternalLoadID]
						,[OrderDestinationCode]
						,[OrderReferenceNumber]
						,[OrderInTransitKey]
						,[OrderReceiptKey]
						,[OrderCaseLabelType]
						,[OrderLabelName]
						,[OrderStandardSSCCLabelName]
						,[OrderStandardGTINLabelName]
						,[OrderRFIDSSCCLabelName]
						,[OrderRFIDGTINLabelName]
						,[OrderIsRFID]
						,[OrderCarrierCode]
						,[OrderCarrierName]
						,[OrderCarrierAddress1]
						,[OrderCarrierAddress2]
						,[OrderCarrierCity]
						,[OrderCarrierState]
						,[OrderCarrierZip]
						,[OrderCarrierCountry]
						,[OrderCarrierPhone]
						,[OrderDriverName]
						,[OrderTrailerNumber]
						,[OrderTrailerOwner]
						,[OrderDepartureDateTime]
						,[OrderOrderBreak]
						,[OrderAddDateTime]
						,[OrderAddUserCode]
						,[OrderEditDateTime]
						,[OrderEditUserCode]
						,[OrderNotes]
						,[OrderLastWaveID]
						,[OrderContainerCode]
						,[OrderUserDefined06]
						,[OrderUserDefined07]
						,[OrderUserDefined08]
						,[OrderUserDefined09]
						,[OrderUserDefined10]
						,[CompanyIDUnloading]
						,[OrderActualDepartureDateTime]
						,[OrderWaveCode]
						,[OrderBundleID]
						,[TransportIDReceipt]
						,[OrderEstimatedNumberOfPallets]
						,[OrderActualNumberOfPallets]
						,[OrderEstimatedNumberOfPalletsIsCalculated]
						,[OrderEstimatedNumberOfPalletsIsManualInput]
						,[PalletTypeCode]
						,[OrderVolume]
						,[OrderTag01]
						,[OrderTransportCompany]
						,[OrderDelivery]
						,[OrderPickUpDateTime]
						,[OrderUserDefinedDateTime01]
						,[OrderUserDefinedDateTime02]
						,[OrderUserDefinedDateTime03]
						,[OrderUserDefinedDateTime04]
						,[OrderUserDefinedDateTime05]
						,[OrderUserDefinedYesNo01]
						,[OrderUserDefinedYesNo02]
						,[OrderUserDefinedYesNo03]
						,[OrderUserDefinedYesNo04]
						,[OrderUserDefinedYesNo05]
						,[CompanyIDActualCarrier]
						,[CustomsTypeCode]
						,[OrderActualDeliveryDateTime]
						,[OrderCustomsNumber]
						,[OrderCustomsOK]
						,[OrderLastChequeNumber]
						,[OrderLicensePlate]
						,[OrderUserDefinedYesNo06]
						,[OrderUserDefinedYesNo07]
						,[OrderUserDefinedYesNo08]
						,[OrderUserDefinedYesNo09]
						,[OrderUserDefinedYesNo10]
						,[OrderInternalNotes]
						,[OrderWarehousingNotes]
						,[CompanyIDWarehouse]
						,[OrderDelayShipping]
						,[OrderCustomerNotes]
						,[OrderSequenceNumber]
						,[OrderReadyForArchiving]
						,OrderAutoDockAssignedHow
						,OrderAutoDockAssignedSet
						,OrderAutoDockAssignedStep
						,OrderAutoDockAssignTime
						,OrderAutoDoorAssigned
						,OrderAutoPackAssigned
						,OrderAutoStageAssigned
						,OrderBatchOrderNumber
						,OrderBOLNumber
						,OrderBOLPrinted
						,OrderExternalUserDefinedDateTime01
						,OrderExternalUserDefinedDateTime02
						,OrderExternalUserDefinedDateTime03
						,OrderExternalUserDefinedDateTime04
						,OrderExternalUserDefinedDateTime05
						,OrderExternalUserDefinedFloat01
						,OrderExternalUserDefinedFloat02
						,OrderExternalUserDefinedFloat03
						,OrderExternalUserDefinedFloat04
						,OrderExternalUserDefinedFloat05
						,OrderExternalUserDefinedLookup01
						,OrderExternalUserDefinedLookup02
						,OrderExternalUserDefinedLookup03
						,OrderExternalUserDefinedLookup04
						,OrderExternalUserDefinedLookup05
						,OrderExternalUserDefinedLookup06
						,OrderExternalUserDefinedLookup07
						,OrderExternalUserDefinedLookup08
						,OrderExternalUserDefinedLookup09
						,OrderExternalUserDefinedLookup10
						,OrderExternalUserDefinedString01
						,OrderExternalUserDefinedString02
						,OrderExternalUserDefinedString03
						,OrderExternalUserDefinedString04
						,OrderExternalUserDefinedString05
						,OrderExternalUserDefinedString06
						,OrderExternalUserDefinedString07
						,OrderExternalUserDefinedString08
						,OrderExternalUserDefinedString09
						,OrderExternalUserDefinedString10
						,OrderExternalUserDefinedString11
						,OrderExternalUserDefinedString12
						,OrderExternalUserDefinedString13
						,OrderExternalUserDefinedString14
						,OrderExternalUserDefinedString15
						,OrderExternalUserDefinedString16
						,OrderExternalUserDefinedString17
						,OrderExternalUserDefinedString18
						,OrderExternalUserDefinedString19
						,OrderExternalUserDefinedString20
						,OrderExternalUserDefinedString21
						,OrderExternalUserDefinedString22
						,OrderExternalUserDefinedString23
						,OrderExternalUserDefinedString24
						,OrderExternalUserDefinedString25
						,OrderExternalUserDefinedString26
						,OrderExternalUserDefinedString27
						,OrderExternalUserDefinedString28
						,OrderExternalUserDefinedString29
						,OrderExternalUserDefinedString30
						,OrderExternalUserDefinedString31
						,OrderExternalUserDefinedString32
						,OrderExternalUserDefinedString33
						,OrderExternalUserDefinedString34
						,OrderExternalUserDefinedString35
						,OrderFreightChargeBaseAmount
						,OrderFreightCostBaseAmount
						,OrderHostProcessRequired
						,OrderPackingValTemplate
						,OrderPackNotes
						,OrderReferenceLID
						,OrderRequireOrderClose
						,OrderShipToGroup
						,OrderSPSAPIStrategyKey
						,OrderTotalPalletEstimate
						,OrderTotalRoutes
						)
					VALUES (
						Src.[IDOrder]
						,Src.[CompanyIDStorer]
						,Src.[OrderExternalID]
						,Src.[OrderDateTime]
						,Src.[OrderDeliveryDateTime]
						,Src.[OrderPriority]
						,Src.[CompanyIDConsignee]
						,Src.[OrderConsigneeContact1]
						,Src.[OrderConsigneeContact2]
						,Src.[OrderConsigneeCompany]
						,Src.[OrderConsigneeAddress1]
						,Src.[OrderConsigneeAddress2]
						,Src.[OrderConsigneeAddress3]
						,Src.[OrderConsigneeAddress4]
						,Src.[OrderConsigneeCity]
						,Src.[OrderConsigneeState]
						,Src.[OrderConsigneeZipCode]
						,Src.[OrderConsigneeCountry]
						,Src.[OrderConsigneeIsoCountryCode]
						,Src.[OrderConsigneePhone1]
						,Src.[OrderConsigneePhone2]
						,Src.[OrderConsigneeFax1]
						,Src.[OrderConsigneeFax2]
						,Src.[OrderConsigneeVATNumber]
						,Src.[OrderBuyerPurchaseOrder]
						,Src.[OrderBillToCode]
						,Src.[OrderBillToContact1]
						,Src.[OrderBillToContact2]
						,Src.[OrderBillToCompany]
						,Src.[OrderBillToAddress1]
						,Src.[OrderBillToAddress2]
						,Src.[OrderBillToAddress3]
						,Src.[OrderBillToAddress4]
						,Src.[OrderBillToCity]
						,Src.[OrderBillToState]
						,Src.[OrderBillToZipCode]
						,Src.[OrderBillToCountry]
						,Src.[OrderBillToIsoCountryCode]
						,Src.[OrderBillToPhone1]
						,Src.[OrderBillToPhone2]
						,Src.[OrderBillToFax1]
						,Src.[OrderBillToFax2]
						,Src.[OrderBillToVATNumber]
						,Src.[OrderIncoTerm]
						,Src.[OrderPaymentTerm]
						,Src.[OrderDoor]
						,Src.[LocationIDSortation]
						,Src.[OrderBatchFlag]
						,Src.[OrderBulkCargonGroup]
						,Src.[OrderRoute]
						,Src.[OrderStop]
						,Src.[OrderOpenQuantity]
						,Src.[OrderStatusID]
						,Src.[OrderDischargePlace]
						,Src.[OrderDeliveryPlace]
						,Src.[OrderIntermodalVehicle]
						,Src.[OrderCountryOfOrigin]
						,Src.[OrderCountryOfDestination]
						,Src.[OrderUpdateSource]
						,Src.[OrderTypeID]
						,Src.[OrderOrderGroup]
						,Src.[OrderEffectiveDateTime]
						,Src.[OrderStage]
						,Src.[OrderDocumentCode]
						,Src.[OrderSplitOrders]
						,Src.[OrderPalletIndicator]
						,Src.[OrderContainerType]
						,Src.[OrderContainerQuantity]
						,Src.[OrderBilledContainerQuantity]
						,Src.[OrderTransportationMode]
						,Src.[OrderTransportationService]
						,Src.[OrderExternalOrderCode2]
						,Src.[OrderConsigneeEmail1]
						,Src.[OrderConsigneeEmail2]
						,Src.[OrderUserDefined01]
						,Src.[OrderUserDefined02]
						,Src.[OrderUserDefined03]
						,Src.[OrderUserDefined04]
						,Src.[OrderUserDefined05]
						,Src.[OrderNotes2]
						,Src.[OrderItemNumber]
						,Src.[OrderForteFlag]
						,Src.[LoadID]
						,Src.[OrderShipTogether]
						,Src.[OrderDeliveryDateTime2]
						,Src.[OrderRequestedShipmentDateTime]
						,Src.[OrderActualShipmentDateTime]
						,Src.[OrderOrderValue]
						,Src.[OrderOrderHandlingType]
						,Src.[OrderExternalLoadID]
						,Src.[OrderDestinationCode]
						,Src.[OrderReferenceNumber]
						,Src.[OrderInTransitKey]
						,Src.[OrderReceiptKey]
						,Src.[OrderCaseLabelType]
						,Src.[OrderLabelName]
						,Src.[OrderStandardSSCCLabelName]
						,Src.[OrderStandardGTINLabelName]
						,Src.[OrderRFIDSSCCLabelName]
						,Src.[OrderRFIDGTINLabelName]
						,Src.[OrderIsRFID]
						,Src.[OrderCarrierCode]
						,Src.[OrderCarrierName]
						,Src.[OrderCarrierAddress1]
						,Src.[OrderCarrierAddress2]
						,Src.[OrderCarrierCity]
						,Src.[OrderCarrierState]
						,Src.[OrderCarrierZip]
						,Src.[OrderCarrierCountry]
						,Src.[OrderCarrierPhone]
						,Src.[OrderDriverName]
						,Src.[OrderTrailerNumber]
						,Src.[OrderTrailerOwner]
						,Src.[OrderDepartureDateTime]
						,Src.[OrderOrderBreak]
						,Src.[OrderAddDateTime]
						,Src.[OrderAddUserCode]
						,Src.[OrderEditDateTime]
						,Src.[OrderEditUserCode]
						,Src.[OrderNotes]
						,Src.[OrderLastWaveID]
						,Src.[OrderContainerCode]
						,Src.[OrderUserDefined06]
						,Src.[OrderUserDefined07]
						,Src.[OrderUserDefined08]
						,Src.[OrderUserDefined09]
						,Src.[OrderUserDefined10]
						,Src.[CompanyIDUnloading]
						,Src.[OrderActualDepartureDateTime]
						,Src.[OrderWaveCode]
						,Src.[OrderBundleID]
						,Src.[TransportIDReceipt]
						,Src.[OrderEstimatedNumberOfPallets]
						,Src.[OrderActualNumberOfPallets]
						,Src.[OrderEstimatedNumberOfPalletsIsCalculated]
						,Src.[OrderEstimatedNumberOfPalletsIsManualInput]
						,Src.[PalletTypeCode]
						,Src.[OrderVolume]
						,Src.[OrderTag01]
						,Src.[OrderTransportCompany]
						,Src.[OrderDelivery]
						,Src.[OrderPickUpDateTime]
						,Src.[OrderUserDefinedDateTime01]
						,Src.[OrderUserDefinedDateTime02]
						,Src.[OrderUserDefinedDateTime03]
						,Src.[OrderUserDefinedDateTime04]
						,Src.[OrderUserDefinedDateTime05]
						,Src.[OrderUserDefinedYesNo01]
						,Src.[OrderUserDefinedYesNo02]
						,Src.[OrderUserDefinedYesNo03]
						,Src.[OrderUserDefinedYesNo04]
						,Src.[OrderUserDefinedYesNo05]
						,Src.[CompanyIDActualCarrier]
						,Src.[CustomsTypeCode]
						,Src.[OrderActualDeliveryDateTime]
						,Src.[OrderCustomsNumber]
						,Src.[OrderCustomsOK]
						,Src.[OrderLastChequeNumber]
						,Src.[OrderLicensePlate]
						,Src.[OrderUserDefinedYesNo06]
						,Src.[OrderUserDefinedYesNo07]
						,Src.[OrderUserDefinedYesNo08]
						,Src.[OrderUserDefinedYesNo09]
						,Src.[OrderUserDefinedYesNo10]
						,Src.[OrderInternalNotes]
						,Src.[OrderWarehousingNotes]
						,Src.[CompanyIDWarehouse]
						,Src.[OrderDelayShipping]
						,Src.[OrderCustomerNotes]
						,Src.[OrderSequenceNumber]
						,Src.[OrderReadyForArchiving]
						,Src.OrderAutoDockAssignedHow
						,Src.OrderAutoDockAssignedSet
						,Src.OrderAutoDockAssignedStep
						,Src.OrderAutoDockAssignTime
						,Src.OrderAutoDoorAssigned
						,Src.OrderAutoPackAssigned
						,Src.OrderAutoStageAssigned
						,Src.OrderBatchOrderNumber
						,Src.OrderBOLNumber
						,Src.OrderBOLPrinted
						,Src.OrderExternalUserDefinedDateTime01
						,Src.OrderExternalUserDefinedDateTime02
						,Src.OrderExternalUserDefinedDateTime03
						,Src.OrderExternalUserDefinedDateTime04
						,Src.OrderExternalUserDefinedDateTime05
						,Src.OrderExternalUserDefinedFloat01
						,Src.OrderExternalUserDefinedFloat02
						,Src.OrderExternalUserDefinedFloat03
						,Src.OrderExternalUserDefinedFloat04
						,Src.OrderExternalUserDefinedFloat05
						,Src.OrderExternalUserDefinedLookup01
						,Src.OrderExternalUserDefinedLookup02
						,Src.OrderExternalUserDefinedLookup03
						,Src.OrderExternalUserDefinedLookup04
						,Src.OrderExternalUserDefinedLookup05
						,Src.OrderExternalUserDefinedLookup06
						,Src.OrderExternalUserDefinedLookup07
						,Src.OrderExternalUserDefinedLookup08
						,Src.OrderExternalUserDefinedLookup09
						,Src.OrderExternalUserDefinedLookup10
						,Src.OrderExternalUserDefinedString01
						,Src.OrderExternalUserDefinedString02
						,Src.OrderExternalUserDefinedString03
						,Src.OrderExternalUserDefinedString04
						,Src.OrderExternalUserDefinedString05
						,Src.OrderExternalUserDefinedString06
						,Src.OrderExternalUserDefinedString07
						,Src.OrderExternalUserDefinedString08
						,Src.OrderExternalUserDefinedString09
						,Src.OrderExternalUserDefinedString10
						,Src.OrderExternalUserDefinedString11
						,Src.OrderExternalUserDefinedString12
						,Src.OrderExternalUserDefinedString13
						,Src.OrderExternalUserDefinedString14
						,Src.OrderExternalUserDefinedString15
						,Src.OrderExternalUserDefinedString16
						,Src.OrderExternalUserDefinedString17
						,Src.OrderExternalUserDefinedString18
						,Src.OrderExternalUserDefinedString19
						,Src.OrderExternalUserDefinedString20
						,Src.OrderExternalUserDefinedString21
						,Src.OrderExternalUserDefinedString22
						,Src.OrderExternalUserDefinedString23
						,Src.OrderExternalUserDefinedString24
						,Src.OrderExternalUserDefinedString25
						,Src.OrderExternalUserDefinedString26
						,Src.OrderExternalUserDefinedString27
						,Src.OrderExternalUserDefinedString28
						,Src.OrderExternalUserDefinedString29
						,Src.OrderExternalUserDefinedString30
						,Src.OrderExternalUserDefinedString31
						,Src.OrderExternalUserDefinedString32
						,Src.OrderExternalUserDefinedString33
						,Src.OrderExternalUserDefinedString34
						,Src.OrderExternalUserDefinedString35
						,Src.OrderFreightChargeBaseAmount
						,Src.OrderFreightCostBaseAmount
						,Src.OrderHostProcessRequired
						,Src.OrderPackingValTemplate
						,Src.OrderPackNotes
						,Src.OrderReferenceLID
						,Src.OrderRequireOrderClose
						,Src.OrderShipToGroup
						,Src.OrderSPSAPIStrategyKey
						,Src.OrderTotalPalletEstimate
						,Src.OrderTotalRoutes
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDOrder] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDOrder] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM dbo.Orders Src WITH (NOLOCK)
					INNER JOIN OrderDetails OD WITH (NOLOCK) ON Src.IDOrder = OD.OrderID
					INNER JOIN Products P WITH (NOLOCK) ON P.[ProductCode] = OD.ProductCode
						AND P.[CompanyIDStorer] = OD.CompanyIDStorer
					LEFT OUTER JOIN Lots L WITH (NOLOCK) ON L.IDLot = OD.LotID
					LEFT OUTER JOIN LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders Dest WITH (NOLOCK) ON Src.IDOrder = Dest.IDOrder
					WHERE (
							LLLSU.LinkLotLocationStorageUnitQuantity = 0
							OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
							)
						AND CAST(Src.[OrderEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
						AND Src.[OrderStatusID] IN (
							SELECT LTRIM(RTRIM(Value))
							FROM string_split(@OrderStatusIDsForArchival, ',')
							)
						AND Dest.[OrderEditDateTime] < Src.[OrderEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					,Dest.[OrderExternalID] = Src.[OrderExternalID]
					,Dest.[OrderDateTime] = Src.[OrderDateTime]
					,Dest.[OrderDeliveryDateTime] = Src.[OrderDeliveryDateTime]
					,Dest.[OrderPriority] = Src.[OrderPriority]
					,Dest.[CompanyIDConsignee] = Src.[CompanyIDConsignee]
					,Dest.[OrderConsigneeContact1] = Src.[OrderConsigneeContact1]
					,Dest.[OrderConsigneeContact2] = Src.[OrderConsigneeContact2]
					,Dest.[OrderConsigneeCompany] = Src.[OrderConsigneeCompany]
					,Dest.[OrderConsigneeAddress1] = Src.[OrderConsigneeAddress1]
					,Dest.[OrderConsigneeAddress2] = Src.[OrderConsigneeAddress2]
					,Dest.[OrderConsigneeAddress3] = Src.[OrderConsigneeAddress3]
					,Dest.[OrderConsigneeAddress4] = Src.[OrderConsigneeAddress4]
					,Dest.[OrderConsigneeCity] = Src.[OrderConsigneeCity]
					,Dest.[OrderConsigneeState] = Src.[OrderConsigneeState]
					,Dest.[OrderConsigneeZipCode] = Src.[OrderConsigneeZipCode]
					,Dest.[OrderConsigneeCountry] = Src.[OrderConsigneeCountry]
					,Dest.[OrderConsigneeIsoCountryCode] = Src.[OrderConsigneeIsoCountryCode]
					,Dest.[OrderConsigneePhone1] = Src.[OrderConsigneePhone1]
					,Dest.[OrderConsigneePhone2] = Src.[OrderConsigneePhone2]
					,Dest.[OrderConsigneeFax1] = Src.[OrderConsigneeFax1]
					,Dest.[OrderConsigneeFax2] = Src.[OrderConsigneeFax2]
					,Dest.[OrderConsigneeVATNumber] = Src.[OrderConsigneeVATNumber]
					,Dest.[OrderBuyerPurchaseOrder] = Src.[OrderBuyerPurchaseOrder]
					,Dest.[OrderBillToCode] = Src.[OrderBillToCode]
					,Dest.[OrderBillToContact1] = Src.[OrderBillToContact1]
					,Dest.[OrderBillToContact2] = Src.[OrderBillToContact2]
					,Dest.[OrderBillToCompany] = Src.[OrderBillToCompany]
					,Dest.[OrderBillToAddress1] = Src.[OrderBillToAddress1]
					,Dest.[OrderBillToAddress2] = Src.[OrderBillToAddress2]
					,Dest.[OrderBillToAddress3] = Src.[OrderBillToAddress3]
					,Dest.[OrderBillToAddress4] = Src.[OrderBillToAddress4]
					,Dest.[OrderBillToCity] = Src.[OrderBillToCity]
					,Dest.[OrderBillToState] = Src.[OrderBillToState]
					,Dest.[OrderBillToZipCode] = Src.[OrderBillToZipCode]
					,Dest.[OrderBillToCountry] = Src.[OrderBillToCountry]
					,Dest.[OrderBillToIsoCountryCode] = Src.[OrderBillToIsoCountryCode]
					,Dest.[OrderBillToPhone1] = Src.[OrderBillToPhone1]
					,Dest.[OrderBillToPhone2] = Src.[OrderBillToPhone2]
					,Dest.[OrderBillToFax1] = Src.[OrderBillToFax1]
					,Dest.[OrderBillToFax2] = Src.[OrderBillToFax2]
					,Dest.[OrderBillToVATNumber] = Src.[OrderBillToVATNumber]
					,Dest.[OrderIncoTerm] = Src.[OrderIncoTerm]
					,Dest.[OrderPaymentTerm] = Src.[OrderPaymentTerm]
					,Dest.[OrderDoor] = Src.[OrderDoor]
					,Dest.[LocationIDSortation] = Src.[LocationIDSortation]
					,Dest.[OrderBatchFlag] = Src.[OrderBatchFlag]
					,Dest.[OrderBulkCargonGroup] = Src.[OrderBulkCargonGroup]
					,Dest.[OrderRoute] = Src.[OrderRoute]
					,Dest.[OrderStop] = Src.[OrderStop]
					,Dest.[OrderOpenQuantity] = Src.[OrderOpenQuantity]
					,Dest.[OrderStatusID] = Src.[OrderStatusID]
					,Dest.[OrderDischargePlace] = Src.[OrderDischargePlace]
					,Dest.[OrderDeliveryPlace] = Src.[OrderDeliveryPlace]
					,Dest.[OrderIntermodalVehicle] = Src.[OrderIntermodalVehicle]
					,Dest.[OrderCountryOfOrigin] = Src.[OrderCountryOfOrigin]
					,Dest.[OrderCountryOfDestination] = Src.[OrderCountryOfDestination]
					,Dest.[OrderUpdateSource] = Src.[OrderUpdateSource]
					,Dest.[OrderTypeID] = Src.[OrderTypeID]
					,Dest.[OrderOrderGroup] = Src.[OrderOrderGroup]
					,Dest.[OrderEffectiveDateTime] = Src.[OrderEffectiveDateTime]
					,Dest.[OrderStage] = Src.[OrderStage]
					,Dest.[OrderDocumentCode] = Src.[OrderDocumentCode]
					,Dest.[OrderSplitOrders] = Src.[OrderSplitOrders]
					,Dest.[OrderPalletIndicator] = Src.[OrderPalletIndicator]
					,Dest.[OrderContainerType] = Src.[OrderContainerType]
					,Dest.[OrderContainerQuantity] = Src.[OrderContainerQuantity]
					,Dest.[OrderBilledContainerQuantity] = Src.[OrderBilledContainerQuantity]
					,Dest.[OrderTransportationMode] = Src.[OrderTransportationMode]
					,Dest.[OrderTransportationService] = Src.[OrderTransportationService]
					,Dest.[OrderExternalOrderCode2] = Src.[OrderExternalOrderCode2]
					,Dest.[OrderConsigneeEmail1] = Src.[OrderConsigneeEmail1]
					,Dest.[OrderConsigneeEmail2] = Src.[OrderConsigneeEmail2]
					,Dest.[OrderUserDefined01] = Src.[OrderUserDefined01]
					,Dest.[OrderUserDefined02] = Src.[OrderUserDefined02]
					,Dest.[OrderUserDefined03] = Src.[OrderUserDefined03]
					,Dest.[OrderUserDefined04] = Src.[OrderUserDefined04]
					,Dest.[OrderUserDefined05] = Src.[OrderUserDefined05]
					,Dest.[OrderNotes2] = Src.[OrderNotes2]
					,Dest.[OrderItemNumber] = Src.[OrderItemNumber]
					,Dest.[OrderForteFlag] = Src.[OrderForteFlag]
					,Dest.[LoadID] = Src.[LoadID]
					,Dest.[OrderShipTogether] = Src.[OrderShipTogether]
					,Dest.[OrderDeliveryDateTime2] = Src.[OrderDeliveryDateTime2]
					,Dest.[OrderRequestedShipmentDateTime] = Src.[OrderRequestedShipmentDateTime]
					,Dest.[OrderActualShipmentDateTime] = Src.[OrderActualShipmentDateTime]
					,Dest.[OrderOrderValue] = Src.[OrderOrderValue]
					,Dest.[OrderOrderHandlingType] = Src.[OrderOrderHandlingType]
					,Dest.[OrderExternalLoadID] = Src.[OrderExternalLoadID]
					,Dest.[OrderDestinationCode] = Src.[OrderDestinationCode]
					,Dest.[OrderReferenceNumber] = Src.[OrderReferenceNumber]
					,Dest.[OrderInTransitKey] = Src.[OrderInTransitKey]
					,Dest.[OrderReceiptKey] = Src.[OrderReceiptKey]
					,Dest.[OrderCaseLabelType] = Src.[OrderCaseLabelType]
					,Dest.[OrderLabelName] = Src.[OrderLabelName]
					,Dest.[OrderStandardSSCCLabelName] = Src.[OrderStandardSSCCLabelName]
					,Dest.[OrderStandardGTINLabelName] = Src.[OrderStandardGTINLabelName]
					,Dest.[OrderRFIDSSCCLabelName] = Src.[OrderRFIDSSCCLabelName]
					,Dest.[OrderRFIDGTINLabelName] = Src.[OrderRFIDGTINLabelName]
					,Dest.[OrderIsRFID] = Src.[OrderIsRFID]
					,Dest.[OrderCarrierCode] = Src.[OrderCarrierCode]
					,Dest.[OrderCarrierName] = Src.[OrderCarrierName]
					,Dest.[OrderCarrierAddress1] = Src.[OrderCarrierAddress1]
					,Dest.[OrderCarrierAddress2] = Src.[OrderCarrierAddress2]
					,Dest.[OrderCarrierCity] = Src.[OrderCarrierCity]
					,Dest.[OrderCarrierState] = Src.[OrderCarrierState]
					,Dest.[OrderCarrierZip] = Src.[OrderCarrierZip]
					,Dest.[OrderCarrierCountry] = Src.[OrderCarrierCountry]
					,Dest.[OrderCarrierPhone] = Src.[OrderCarrierPhone]
					,Dest.[OrderDriverName] = Src.[OrderDriverName]
					,Dest.[OrderTrailerNumber] = Src.[OrderTrailerNumber]
					,Dest.[OrderTrailerOwner] = Src.[OrderTrailerOwner]
					,Dest.[OrderDepartureDateTime] = Src.[OrderDepartureDateTime]
					,Dest.[OrderOrderBreak] = Src.[OrderOrderBreak]
					,Dest.[OrderAddDateTime] = Src.[OrderAddDateTime]
					,Dest.[OrderAddUserCode] = Src.[OrderAddUserCode]
					,Dest.[OrderEditDateTime] = Src.[OrderEditDateTime]
					,Dest.[OrderEditUserCode] = Src.[OrderEditUserCode]
					,Dest.[OrderNotes] = Src.[OrderNotes]
					,Dest.[OrderLastWaveID] = Src.[OrderLastWaveID]
					,Dest.[OrderContainerCode] = Src.[OrderContainerCode]
					,Dest.[OrderUserDefined06] = Src.[OrderUserDefined06]
					,Dest.[OrderUserDefined07] = Src.[OrderUserDefined07]
					,Dest.[OrderUserDefined08] = Src.[OrderUserDefined08]
					,Dest.[OrderUserDefined09] = Src.[OrderUserDefined09]
					,Dest.[OrderUserDefined10] = Src.[OrderUserDefined10]
					,Dest.[CompanyIDUnloading] = Src.[CompanyIDUnloading]
					,Dest.[OrderActualDepartureDateTime] = Src.[OrderActualDepartureDateTime]
					,Dest.[OrderWaveCode] = Src.[OrderWaveCode]
					,Dest.[OrderBundleID] = Src.[OrderBundleID]
					,Dest.[TransportIDReceipt] = Src.[TransportIDReceipt]
					,Dest.[OrderEstimatedNumberOfPallets] = Src.[OrderEstimatedNumberOfPallets]
					,Dest.[OrderActualNumberOfPallets] = Src.[OrderActualNumberOfPallets]
					,Dest.[OrderEstimatedNumberOfPalletsIsCalculated] = Src.[OrderEstimatedNumberOfPalletsIsCalculated]
					,Dest.[OrderEstimatedNumberOfPalletsIsManualInput] = Src.[OrderEstimatedNumberOfPalletsIsManualInput]
					,Dest.[PalletTypeCode] = Src.[PalletTypeCode]
					,Dest.[OrderVolume] = Src.[OrderVolume]
					,Dest.[OrderTag01] = Src.[OrderTag01]
					,Dest.[OrderTransportCompany] = Src.[OrderTransportCompany]
					,Dest.[OrderDelivery] = Src.[OrderDelivery]
					,Dest.[OrderPickUpDateTime] = Src.[OrderPickUpDateTime]
					,Dest.[OrderUserDefinedDateTime01] = Src.[OrderUserDefinedDateTime01]
					,Dest.[OrderUserDefinedDateTime02] = Src.[OrderUserDefinedDateTime02]
					,Dest.[OrderUserDefinedDateTime03] = Src.[OrderUserDefinedDateTime03]
					,Dest.[OrderUserDefinedDateTime04] = Src.[OrderUserDefinedDateTime04]
					,Dest.[OrderUserDefinedDateTime05] = Src.[OrderUserDefinedDateTime05]
					,Dest.[OrderUserDefinedYesNo01] = Src.[OrderUserDefinedYesNo01]
					,Dest.[OrderUserDefinedYesNo02] = Src.[OrderUserDefinedYesNo02]
					,Dest.[OrderUserDefinedYesNo03] = Src.[OrderUserDefinedYesNo03]
					,Dest.[OrderUserDefinedYesNo04] = Src.[OrderUserDefinedYesNo04]
					,Dest.[OrderUserDefinedYesNo05] = Src.[OrderUserDefinedYesNo05]
					,Dest.[CompanyIDActualCarrier] = Src.[CompanyIDActualCarrier]
					,Dest.[CustomsTypeCode] = Src.[CustomsTypeCode]
					,Dest.[OrderActualDeliveryDateTime] = Src.[OrderActualDeliveryDateTime]
					,Dest.[OrderCustomsNumber] = Src.[OrderCustomsNumber]
					,Dest.[OrderCustomsOK] = Src.[OrderCustomsOK]
					,Dest.[OrderLastChequeNumber] = Src.[OrderLastChequeNumber]
					,Dest.[OrderLicensePlate] = Src.[OrderLicensePlate]
					,Dest.[OrderUserDefinedYesNo06] = Src.[OrderUserDefinedYesNo06]
					,Dest.[OrderUserDefinedYesNo07] = Src.[OrderUserDefinedYesNo07]
					,Dest.[OrderUserDefinedYesNo08] = Src.[OrderUserDefinedYesNo08]
					,Dest.[OrderUserDefinedYesNo09] = Src.[OrderUserDefinedYesNo09]
					,Dest.[OrderUserDefinedYesNo10] = Src.[OrderUserDefinedYesNo10]
					,Dest.[OrderInternalNotes] = Src.[OrderInternalNotes]
					,Dest.[OrderWarehousingNotes] = Src.[OrderWarehousingNotes]
					,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
					,Dest.[OrderDelayShipping] = Src.[OrderDelayShipping]
					,Dest.[OrderCustomerNotes] = Src.[OrderCustomerNotes]
					,Dest.[OrderSequenceNumber] = Src.[OrderSequenceNumber]
					,Dest.[OrderReadyForArchiving] = Src.[OrderReadyForArchiving]
					--,DEST.OrderAutoDockAssignedHow = Src.OrderAutoDockAssignedHow
					--,DEST.OrderAutoDockAssignedSet = Src.OrderAutoDockAssignedSet
					--,DEST.OrderAutoDockAssignedStep = Src.OrderAutoDockAssignedStep
					--,DEST.OrderAutoDockAssignTime = Src.OrderAutoDockAssignTime
					--,DEST.OrderAutoDoorAssigned = Src.OrderAutoDoorAssigned
					--,DEST.OrderAutoPackAssigned = Src.OrderAutoPackAssigned
					--,DEST.OrderAutoStageAssigned = Src.OrderAutoStageAssigned
					--,DEST.OrderBatchOrderNumber = Src.OrderBatchOrderNumber
					--,DEST.OrderBOLNumber = Src.OrderBOLNumber
					--,DEST.OrderBOLPrinted = Src.OrderBOLPrinted
					--,DEST.OrderExternalUserDefinedDateTime01 = Src.OrderExternalUserDefinedDateTime01
					--,DEST.OrderExternalUserDefinedDateTime02 = Src.OrderExternalUserDefinedDateTime02
					--,DEST.OrderExternalUserDefinedDateTime03 = Src.OrderExternalUserDefinedDateTime03
					--,DEST.OrderExternalUserDefinedDateTime04 = Src.OrderExternalUserDefinedDateTime04
					--,DEST.OrderExternalUserDefinedDateTime05 = Src.OrderExternalUserDefinedDateTime05
					--,DEST.OrderExternalUserDefinedFloat01 = Src.OrderExternalUserDefinedFloat01
					--,DEST.OrderExternalUserDefinedFloat02 = Src.OrderExternalUserDefinedFloat02
					--,DEST.OrderExternalUserDefinedFloat03 = Src.OrderExternalUserDefinedFloat03
					--,DEST.OrderExternalUserDefinedFloat04 = Src.OrderExternalUserDefinedFloat04
					--,DEST.OrderExternalUserDefinedFloat05 = Src.OrderExternalUserDefinedFloat05
					--,DEST.OrderExternalUserDefinedLookup01 = Src.OrderExternalUserDefinedLookup01
					--,DEST.OrderExternalUserDefinedLookup02 = Src.OrderExternalUserDefinedLookup02
					--,DEST.OrderExternalUserDefinedLookup03 = Src.OrderExternalUserDefinedLookup03
					--,DEST.OrderExternalUserDefinedLookup04 = Src.OrderExternalUserDefinedLookup04
					--,DEST.OrderExternalUserDefinedLookup05 = Src.OrderExternalUserDefinedLookup05
					--,DEST.OrderExternalUserDefinedLookup06 = Src.OrderExternalUserDefinedLookup06
					--,DEST.OrderExternalUserDefinedLookup07 = Src.OrderExternalUserDefinedLookup07
					--,DEST.OrderExternalUserDefinedLookup08 = Src.OrderExternalUserDefinedLookup08
					--,DEST.OrderExternalUserDefinedLookup09 = Src.OrderExternalUserDefinedLookup09
					--,DEST.OrderExternalUserDefinedLookup10 = Src.OrderExternalUserDefinedLookup10
					--,DEST.OrderExternalUserDefinedString01 = Src.OrderExternalUserDefinedString01
					--,DEST.OrderExternalUserDefinedString02 = Src.OrderExternalUserDefinedString02
					--,DEST.OrderExternalUserDefinedString03 = Src.OrderExternalUserDefinedString03
					--,DEST.OrderExternalUserDefinedString04 = Src.OrderExternalUserDefinedString04
					--,DEST.OrderExternalUserDefinedString05 = Src.OrderExternalUserDefinedString05
					--,DEST.OrderExternalUserDefinedString06 = Src.OrderExternalUserDefinedString06
					--,DEST.OrderExternalUserDefinedString07 = Src.OrderExternalUserDefinedString07
					--,DEST.OrderExternalUserDefinedString08 = Src.OrderExternalUserDefinedString08
					--,DEST.OrderExternalUserDefinedString09 = Src.OrderExternalUserDefinedString09
					--,DEST.OrderExternalUserDefinedString10 = Src.OrderExternalUserDefinedString10
					--,DEST.OrderExternalUserDefinedString11 = Src.OrderExternalUserDefinedString11
					--,DEST.OrderExternalUserDefinedString12 = Src.OrderExternalUserDefinedString12
					--,DEST.OrderExternalUserDefinedString13 = Src.OrderExternalUserDefinedString13
					--,DEST.OrderExternalUserDefinedString14 = Src.OrderExternalUserDefinedString14
					--,DEST.OrderExternalUserDefinedString15 = Src.OrderExternalUserDefinedString15
					--,DEST.OrderExternalUserDefinedString16 = Src.OrderExternalUserDefinedString16
					--,DEST.OrderExternalUserDefinedString17 = Src.OrderExternalUserDefinedString17
					--,DEST.OrderExternalUserDefinedString18 = Src.OrderExternalUserDefinedString18
					--,DEST.OrderExternalUserDefinedString19 = Src.OrderExternalUserDefinedString19
					--,DEST.OrderExternalUserDefinedString20 = Src.OrderExternalUserDefinedString20
					--,DEST.OrderExternalUserDefinedString21 = Src.OrderExternalUserDefinedString21
					--,DEST.OrderExternalUserDefinedString22 = Src.OrderExternalUserDefinedString22
					--,DEST.OrderExternalUserDefinedString23 = Src.OrderExternalUserDefinedString23
					--,DEST.OrderExternalUserDefinedString24 = Src.OrderExternalUserDefinedString24
					--,DEST.OrderExternalUserDefinedString25 = Src.OrderExternalUserDefinedString25
					--,DEST.OrderExternalUserDefinedString26 = Src.OrderExternalUserDefinedString26
					--,DEST.OrderExternalUserDefinedString27 = Src.OrderExternalUserDefinedString27
					--,DEST.OrderExternalUserDefinedString28 = Src.OrderExternalUserDefinedString28
					--,DEST.OrderExternalUserDefinedString29 = Src.OrderExternalUserDefinedString29
					--,DEST.OrderExternalUserDefinedString30 = Src.OrderExternalUserDefinedString30
					--,DEST.OrderExternalUserDefinedString31 = Src.OrderExternalUserDefinedString31
					--,DEST.OrderExternalUserDefinedString32 = Src.OrderExternalUserDefinedString32
					--,DEST.OrderExternalUserDefinedString33 = Src.OrderExternalUserDefinedString33
					--,DEST.OrderExternalUserDefinedString34 = Src.OrderExternalUserDefinedString34
					--,DEST.OrderExternalUserDefinedString35 = Src.OrderExternalUserDefinedString35
					--,DEST.OrderFreightChargeBaseAmount = Src.OrderFreightChargeBaseAmount
					--,DEST.OrderFreightCostBaseAmount = Src.OrderFreightCostBaseAmount
					--,DEST.OrderHostProcessRequired = Src.OrderHostProcessRequired
					--,DEST.OrderPackingValTemplate = Src.OrderPackingValTemplate
					--,DEST.OrderPackNotes = Src.OrderPackNotes
					--,DEST.OrderReferenceLID = Src.OrderReferenceLID
					--,DEST.OrderRequireOrderClose = Src.OrderRequireOrderClose
					--,DEST.OrderShipToGroup = Src.OrderShipToGroup
					--,DEST.OrderSPSAPIStrategyKey = Src.OrderSPSAPIStrategyKey
					--,DEST.OrderTotalPalletEstimate = Src.OrderTotalPalletEstimate
					--,DEST.OrderTotalRoutes = Src.OrderTotalRoutes
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDOrder AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDOrder AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.Orders Src WITH (NOLOCK)
				INNER JOIN OrderDetails OD WITH (NOLOCK) ON Src.IDOrder = OD.OrderID
				INNER JOIN Products P WITH (NOLOCK) ON P.[ProductCode] = OD.ProductCode
					AND P.[CompanyIDStorer] = OD.CompanyIDStorer
				LEFT OUTER JOIN Lots L WITH (NOLOCK) ON L.IDLot = OD.LotID
				LEFT OUTER JOIN LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders Dest WITH (NOLOCK) ON Src.IDOrder = Dest.IDOrder
				WHERE (
						LLLSU.LinkLotLocationStorageUnitQuantity = 0
						OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
						)
					AND CAST(Src.[OrderEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					AND Src.[OrderStatusID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@OrderStatusIDsForArchival, ',')
						)
					AND Dest.[OrderEditDateTime] < Src.[OrderEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.Orders Src WITH (NOLOCK)
					INNER JOIN OrderDetails OD WITH (NOLOCK) ON Src.IDOrder = OD.OrderID
					INNER JOIN Products P WITH (NOLOCK) ON P.[ProductCode] = OD.ProductCode
						AND P.[CompanyIDStorer] = OD.CompanyIDStorer
					LEFT OUTER JOIN Lots L WITH (NOLOCK) ON L.IDLot = OD.LotID
					LEFT OUTER JOIN LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders Dest WITH (NOLOCK) ON Src.IDOrder = Dest.IDOrder
					WHERE (
							LLLSU.LinkLotLocationStorageUnitQuantity = 0
							OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
							)
						AND CAST(Src.[OrderEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
						AND Src.[OrderStatusID] IN (
							SELECT LTRIM(RTRIM(Value))
							FROM string_split(@OrderStatusIDsForArchival, ',')
							)
						AND Dest.IDOrder IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders (
					[IDOrder]
					,[CompanyIDStorer]
					,[OrderExternalID]
					,[OrderDateTime]
					,[OrderDeliveryDateTime]
					,[OrderPriority]
					,[CompanyIDConsignee]
					,[OrderConsigneeContact1]
					,[OrderConsigneeContact2]
					,[OrderConsigneeCompany]
					,[OrderConsigneeAddress1]
					,[OrderConsigneeAddress2]
					,[OrderConsigneeAddress3]
					,[OrderConsigneeAddress4]
					,[OrderConsigneeCity]
					,[OrderConsigneeState]
					,[OrderConsigneeZipCode]
					,[OrderConsigneeCountry]
					,[OrderConsigneeIsoCountryCode]
					,[OrderConsigneePhone1]
					,[OrderConsigneePhone2]
					,[OrderConsigneeFax1]
					,[OrderConsigneeFax2]
					,[OrderConsigneeVATNumber]
					,[OrderBuyerPurchaseOrder]
					,[OrderBillToCode]
					,[OrderBillToContact1]
					,[OrderBillToContact2]
					,[OrderBillToCompany]
					,[OrderBillToAddress1]
					,[OrderBillToAddress2]
					,[OrderBillToAddress3]
					,[OrderBillToAddress4]
					,[OrderBillToCity]
					,[OrderBillToState]
					,[OrderBillToZipCode]
					,[OrderBillToCountry]
					,[OrderBillToIsoCountryCode]
					,[OrderBillToPhone1]
					,[OrderBillToPhone2]
					,[OrderBillToFax1]
					,[OrderBillToFax2]
					,[OrderBillToVATNumber]
					,[OrderIncoTerm]
					,[OrderPaymentTerm]
					,[OrderDoor]
					,[LocationIDSortation]
					,[OrderBatchFlag]
					,[OrderBulkCargonGroup]
					,[OrderRoute]
					,[OrderStop]
					,[OrderOpenQuantity]
					,[OrderStatusID]
					,[OrderDischargePlace]
					,[OrderDeliveryPlace]
					,[OrderIntermodalVehicle]
					,[OrderCountryOfOrigin]
					,[OrderCountryOfDestination]
					,[OrderUpdateSource]
					,[OrderTypeID]
					,[OrderOrderGroup]
					,[OrderEffectiveDateTime]
					,[OrderStage]
					,[OrderDocumentCode]
					,[OrderSplitOrders]
					,[OrderPalletIndicator]
					,[OrderContainerType]
					,[OrderContainerQuantity]
					,[OrderBilledContainerQuantity]
					,[OrderTransportationMode]
					,[OrderTransportationService]
					,[OrderExternalOrderCode2]
					,[OrderConsigneeEmail1]
					,[OrderConsigneeEmail2]
					,[OrderUserDefined01]
					,[OrderUserDefined02]
					,[OrderUserDefined03]
					,[OrderUserDefined04]
					,[OrderUserDefined05]
					,[OrderNotes2]
					,[OrderItemNumber]
					,[OrderForteFlag]
					,[LoadID]
					,[OrderShipTogether]
					,[OrderDeliveryDateTime2]
					,[OrderRequestedShipmentDateTime]
					,[OrderActualShipmentDateTime]
					,[OrderOrderValue]
					,[OrderOrderHandlingType]
					,[OrderExternalLoadID]
					,[OrderDestinationCode]
					,[OrderReferenceNumber]
					,[OrderInTransitKey]
					,[OrderReceiptKey]
					,[OrderCaseLabelType]
					,[OrderLabelName]
					,[OrderStandardSSCCLabelName]
					,[OrderStandardGTINLabelName]
					,[OrderRFIDSSCCLabelName]
					,[OrderRFIDGTINLabelName]
					,[OrderIsRFID]
					,[OrderCarrierCode]
					,[OrderCarrierName]
					,[OrderCarrierAddress1]
					,[OrderCarrierAddress2]
					,[OrderCarrierCity]
					,[OrderCarrierState]
					,[OrderCarrierZip]
					,[OrderCarrierCountry]
					,[OrderCarrierPhone]
					,[OrderDriverName]
					,[OrderTrailerNumber]
					,[OrderTrailerOwner]
					,[OrderDepartureDateTime]
					,[OrderOrderBreak]
					,[OrderAddDateTime]
					,[OrderAddUserCode]
					,[OrderEditDateTime]
					,[OrderEditUserCode]
					,[OrderNotes]
					,[OrderLastWaveID]
					,[OrderContainerCode]
					,[OrderUserDefined06]
					,[OrderUserDefined07]
					,[OrderUserDefined08]
					,[OrderUserDefined09]
					,[OrderUserDefined10]
					,[CompanyIDUnloading]
					,[OrderActualDepartureDateTime]
					,[OrderWaveCode]
					,[OrderBundleID]
					,[TransportIDReceipt]
					,[OrderEstimatedNumberOfPallets]
					,[OrderActualNumberOfPallets]
					,[OrderEstimatedNumberOfPalletsIsCalculated]
					,[OrderEstimatedNumberOfPalletsIsManualInput]
					,[PalletTypeCode]
					,[OrderVolume]
					,[OrderTag01]
					,[OrderTransportCompany]
					,[OrderDelivery]
					,[OrderPickUpDateTime]
					,[OrderUserDefinedDateTime01]
					,[OrderUserDefinedDateTime02]
					,[OrderUserDefinedDateTime03]
					,[OrderUserDefinedDateTime04]
					,[OrderUserDefinedDateTime05]
					,[OrderUserDefinedYesNo01]
					,[OrderUserDefinedYesNo02]
					,[OrderUserDefinedYesNo03]
					,[OrderUserDefinedYesNo04]
					,[OrderUserDefinedYesNo05]
					,[CompanyIDActualCarrier]
					,[CustomsTypeCode]
					,[OrderActualDeliveryDateTime]
					,[OrderCustomsNumber]
					,[OrderCustomsOK]
					,[OrderLastChequeNumber]
					,[OrderLicensePlate]
					,[OrderUserDefinedYesNo06]
					,[OrderUserDefinedYesNo07]
					,[OrderUserDefinedYesNo08]
					,[OrderUserDefinedYesNo09]
					,[OrderUserDefinedYesNo10]
					,[OrderInternalNotes]
					,[OrderWarehousingNotes]
					,[CompanyIDWarehouse]
					,[OrderDelayShipping]
					,[OrderCustomerNotes]
					,[OrderSequenceNumber]
					,[OrderReadyForArchiving]
					--,OrderAutoDockAssignedHow
					--,OrderAutoDockAssignedSet
					--,OrderAutoDockAssignedStep
					--,OrderAutoDockAssignTime
					--,OrderAutoDoorAssigned
					--,OrderAutoPackAssigned
					--,OrderAutoStageAssigned
					--,OrderBatchOrderNumber
					--,OrderBOLNumber
					--,OrderBOLPrinted
					--,OrderExternalUserDefinedDateTime01
					--,OrderExternalUserDefinedDateTime02
					--,OrderExternalUserDefinedDateTime03
					--,OrderExternalUserDefinedDateTime04
					--,OrderExternalUserDefinedDateTime05
					--,OrderExternalUserDefinedFloat01
					--,OrderExternalUserDefinedFloat02
					--,OrderExternalUserDefinedFloat03
					--,OrderExternalUserDefinedFloat04
					--,OrderExternalUserDefinedFloat05
					--,OrderExternalUserDefinedLookup01
					--,OrderExternalUserDefinedLookup02
					--,OrderExternalUserDefinedLookup03
					--,OrderExternalUserDefinedLookup04
					--,OrderExternalUserDefinedLookup05
					--,OrderExternalUserDefinedLookup06
					--,OrderExternalUserDefinedLookup07
					--,OrderExternalUserDefinedLookup08
					--,OrderExternalUserDefinedLookup09
					--,OrderExternalUserDefinedLookup10
					--,OrderExternalUserDefinedString01
					--,OrderExternalUserDefinedString02
					--,OrderExternalUserDefinedString03
					--,OrderExternalUserDefinedString04
					--,OrderExternalUserDefinedString05
					--,OrderExternalUserDefinedString06
					--,OrderExternalUserDefinedString07
					--,OrderExternalUserDefinedString08
					--,OrderExternalUserDefinedString09
					--,OrderExternalUserDefinedString10
					--,OrderExternalUserDefinedString11
					--,OrderExternalUserDefinedString12
					--,OrderExternalUserDefinedString13
					--,OrderExternalUserDefinedString14
					--,OrderExternalUserDefinedString15
					--,OrderExternalUserDefinedString16
					--,OrderExternalUserDefinedString17
					--,OrderExternalUserDefinedString18
					--,OrderExternalUserDefinedString19
					--,OrderExternalUserDefinedString20
					--,OrderExternalUserDefinedString21
					--,OrderExternalUserDefinedString22
					--,OrderExternalUserDefinedString23
					--,OrderExternalUserDefinedString24
					--,OrderExternalUserDefinedString25
					--,OrderExternalUserDefinedString26
					--,OrderExternalUserDefinedString27
					--,OrderExternalUserDefinedString28
					--,OrderExternalUserDefinedString29
					--,OrderExternalUserDefinedString30
					--,OrderExternalUserDefinedString31
					--,OrderExternalUserDefinedString32
					--,OrderExternalUserDefinedString33
					--,OrderExternalUserDefinedString34
					--,OrderExternalUserDefinedString35
					--,OrderFreightChargeBaseAmount
					--,OrderFreightCostBaseAmount
					--,OrderHostProcessRequired
					--,OrderPackingValTemplate
					--,OrderPackNotes
					--,OrderReferenceLID
					--,OrderRequireOrderClose
					--,OrderShipToGroup
					--,OrderSPSAPIStrategyKey
					--,OrderTotalPalletEstimate
					--,OrderTotalRoutes
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDOrder AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDOrder]
					,Src.[CompanyIDStorer]
					,Src.[OrderExternalID]
					,Src.[OrderDateTime]
					,Src.[OrderDeliveryDateTime]
					,Src.[OrderPriority]
					,Src.[CompanyIDConsignee]
					,Src.[OrderConsigneeContact1]
					,Src.[OrderConsigneeContact2]
					,Src.[OrderConsigneeCompany]
					,Src.[OrderConsigneeAddress1]
					,Src.[OrderConsigneeAddress2]
					,Src.[OrderConsigneeAddress3]
					,Src.[OrderConsigneeAddress4]
					,Src.[OrderConsigneeCity]
					,Src.[OrderConsigneeState]
					,Src.[OrderConsigneeZipCode]
					,Src.[OrderConsigneeCountry]
					,Src.[OrderConsigneeIsoCountryCode]
					,Src.[OrderConsigneePhone1]
					,Src.[OrderConsigneePhone2]
					,Src.[OrderConsigneeFax1]
					,Src.[OrderConsigneeFax2]
					,Src.[OrderConsigneeVATNumber]
					,Src.[OrderBuyerPurchaseOrder]
					,Src.[OrderBillToCode]
					,Src.[OrderBillToContact1]
					,Src.[OrderBillToContact2]
					,Src.[OrderBillToCompany]
					,Src.[OrderBillToAddress1]
					,Src.[OrderBillToAddress2]
					,Src.[OrderBillToAddress3]
					,Src.[OrderBillToAddress4]
					,Src.[OrderBillToCity]
					,Src.[OrderBillToState]
					,Src.[OrderBillToZipCode]
					,Src.[OrderBillToCountry]
					,Src.[OrderBillToIsoCountryCode]
					,Src.[OrderBillToPhone1]
					,Src.[OrderBillToPhone2]
					,Src.[OrderBillToFax1]
					,Src.[OrderBillToFax2]
					,Src.[OrderBillToVATNumber]
					,Src.[OrderIncoTerm]
					,Src.[OrderPaymentTerm]
					,Src.[OrderDoor]
					,Src.[LocationIDSortation]
					,Src.[OrderBatchFlag]
					,Src.[OrderBulkCargonGroup]
					,Src.[OrderRoute]
					,Src.[OrderStop]
					,Src.[OrderOpenQuantity]
					,Src.[OrderStatusID]
					,Src.[OrderDischargePlace]
					,Src.[OrderDeliveryPlace]
					,Src.[OrderIntermodalVehicle]
					,Src.[OrderCountryOfOrigin]
					,Src.[OrderCountryOfDestination]
					,Src.[OrderUpdateSource]
					,Src.[OrderTypeID]
					,Src.[OrderOrderGroup]
					,Src.[OrderEffectiveDateTime]
					,Src.[OrderStage]
					,Src.[OrderDocumentCode]
					,Src.[OrderSplitOrders]
					,Src.[OrderPalletIndicator]
					,Src.[OrderContainerType]
					,Src.[OrderContainerQuantity]
					,Src.[OrderBilledContainerQuantity]
					,Src.[OrderTransportationMode]
					,Src.[OrderTransportationService]
					,Src.[OrderExternalOrderCode2]
					,Src.[OrderConsigneeEmail1]
					,Src.[OrderConsigneeEmail2]
					,Src.[OrderUserDefined01]
					,Src.[OrderUserDefined02]
					,Src.[OrderUserDefined03]
					,Src.[OrderUserDefined04]
					,Src.[OrderUserDefined05]
					,Src.[OrderNotes2]
					,Src.[OrderItemNumber]
					,Src.[OrderForteFlag]
					,Src.[LoadID]
					,Src.[OrderShipTogether]
					,Src.[OrderDeliveryDateTime2]
					,Src.[OrderRequestedShipmentDateTime]
					,Src.[OrderActualShipmentDateTime]
					,Src.[OrderOrderValue]
					,Src.[OrderOrderHandlingType]
					,Src.[OrderExternalLoadID]
					,Src.[OrderDestinationCode]
					,Src.[OrderReferenceNumber]
					,Src.[OrderInTransitKey]
					,Src.[OrderReceiptKey]
					,Src.[OrderCaseLabelType]
					,Src.[OrderLabelName]
					,Src.[OrderStandardSSCCLabelName]
					,Src.[OrderStandardGTINLabelName]
					,Src.[OrderRFIDSSCCLabelName]
					,Src.[OrderRFIDGTINLabelName]
					,Src.[OrderIsRFID]
					,Src.[OrderCarrierCode]
					,Src.[OrderCarrierName]
					,Src.[OrderCarrierAddress1]
					,Src.[OrderCarrierAddress2]
					,Src.[OrderCarrierCity]
					,Src.[OrderCarrierState]
					,Src.[OrderCarrierZip]
					,Src.[OrderCarrierCountry]
					,Src.[OrderCarrierPhone]
					,Src.[OrderDriverName]
					,Src.[OrderTrailerNumber]
					,Src.[OrderTrailerOwner]
					,Src.[OrderDepartureDateTime]
					,Src.[OrderOrderBreak]
					,Src.[OrderAddDateTime]
					,Src.[OrderAddUserCode]
					,Src.[OrderEditDateTime]
					,Src.[OrderEditUserCode]
					,Src.[OrderNotes]
					,Src.[OrderLastWaveID]
					,Src.[OrderContainerCode]
					,Src.[OrderUserDefined06]
					,Src.[OrderUserDefined07]
					,Src.[OrderUserDefined08]
					,Src.[OrderUserDefined09]
					,Src.[OrderUserDefined10]
					,Src.[CompanyIDUnloading]
					,Src.[OrderActualDepartureDateTime]
					,Src.[OrderWaveCode]
					,Src.[OrderBundleID]
					,Src.[TransportIDReceipt]
					,Src.[OrderEstimatedNumberOfPallets]
					,Src.[OrderActualNumberOfPallets]
					,Src.[OrderEstimatedNumberOfPalletsIsCalculated]
					,Src.[OrderEstimatedNumberOfPalletsIsManualInput]
					,Src.[PalletTypeCode]
					,Src.[OrderVolume]
					,Src.[OrderTag01]
					,Src.[OrderTransportCompany]
					,Src.[OrderDelivery]
					,Src.[OrderPickUpDateTime]
					,Src.[OrderUserDefinedDateTime01]
					,Src.[OrderUserDefinedDateTime02]
					,Src.[OrderUserDefinedDateTime03]
					,Src.[OrderUserDefinedDateTime04]
					,Src.[OrderUserDefinedDateTime05]
					,Src.[OrderUserDefinedYesNo01]
					,Src.[OrderUserDefinedYesNo02]
					,Src.[OrderUserDefinedYesNo03]
					,Src.[OrderUserDefinedYesNo04]
					,Src.[OrderUserDefinedYesNo05]
					,Src.[CompanyIDActualCarrier]
					,Src.[CustomsTypeCode]
					,Src.[OrderActualDeliveryDateTime]
					,Src.[OrderCustomsNumber]
					,Src.[OrderCustomsOK]
					,Src.[OrderLastChequeNumber]
					,Src.[OrderLicensePlate]
					,Src.[OrderUserDefinedYesNo06]
					,Src.[OrderUserDefinedYesNo07]
					,Src.[OrderUserDefinedYesNo08]
					,Src.[OrderUserDefinedYesNo09]
					,Src.[OrderUserDefinedYesNo10]
					,Src.[OrderInternalNotes]
					,Src.[OrderWarehousingNotes]
					,Src.[CompanyIDWarehouse]
					,Src.[OrderDelayShipping]
					,Src.[OrderCustomerNotes]
					,Src.[OrderSequenceNumber]
					,Src.[OrderReadyForArchiving]
					--,Src.OrderAutoDockAssignedHow
					--,Src.OrderAutoDockAssignedSet
					--,Src.OrderAutoDockAssignedStep
					--,Src.OrderAutoDockAssignTime
					--,Src.OrderAutoDoorAssigned
					--,Src.OrderAutoPackAssigned
					--,Src.OrderAutoStageAssigned
					--,Src.OrderBatchOrderNumber
					--,Src.OrderBOLNumber
					--,Src.OrderBOLPrinted
					--,Src.OrderExternalUserDefinedDateTime01
					--,Src.OrderExternalUserDefinedDateTime02
					--,Src.OrderExternalUserDefinedDateTime03
					--,Src.OrderExternalUserDefinedDateTime04
					--,Src.OrderExternalUserDefinedDateTime05
					--,Src.OrderExternalUserDefinedFloat01
					--,Src.OrderExternalUserDefinedFloat02
					--,Src.OrderExternalUserDefinedFloat03
					--,Src.OrderExternalUserDefinedFloat04
					--,Src.OrderExternalUserDefinedFloat05
					--,Src.OrderExternalUserDefinedLookup01
					--,Src.OrderExternalUserDefinedLookup02
					--,Src.OrderExternalUserDefinedLookup03
					--,Src.OrderExternalUserDefinedLookup04
					--,Src.OrderExternalUserDefinedLookup05
					--,Src.OrderExternalUserDefinedLookup06
					--,Src.OrderExternalUserDefinedLookup07
					--,Src.OrderExternalUserDefinedLookup08
					--,Src.OrderExternalUserDefinedLookup09
					--,Src.OrderExternalUserDefinedLookup10
					--,Src.OrderExternalUserDefinedString01
					--,Src.OrderExternalUserDefinedString02
					--,Src.OrderExternalUserDefinedString03
					--,Src.OrderExternalUserDefinedString04
					--,Src.OrderExternalUserDefinedString05
					--,Src.OrderExternalUserDefinedString06
					--,Src.OrderExternalUserDefinedString07
					--,Src.OrderExternalUserDefinedString08
					--,Src.OrderExternalUserDefinedString09
					--,Src.OrderExternalUserDefinedString10
					--,Src.OrderExternalUserDefinedString11
					--,Src.OrderExternalUserDefinedString12
					--,Src.OrderExternalUserDefinedString13
					--,Src.OrderExternalUserDefinedString14
					--,Src.OrderExternalUserDefinedString15
					--,Src.OrderExternalUserDefinedString16
					--,Src.OrderExternalUserDefinedString17
					--,Src.OrderExternalUserDefinedString18
					--,Src.OrderExternalUserDefinedString19
					--,Src.OrderExternalUserDefinedString20
					--,Src.OrderExternalUserDefinedString21
					--,Src.OrderExternalUserDefinedString22
					--,Src.OrderExternalUserDefinedString23
					--,Src.OrderExternalUserDefinedString24
					--,Src.OrderExternalUserDefinedString25
					--,Src.OrderExternalUserDefinedString26
					--,Src.OrderExternalUserDefinedString27
					--,Src.OrderExternalUserDefinedString28
					--,Src.OrderExternalUserDefinedString29
					--,Src.OrderExternalUserDefinedString30
					--,Src.OrderExternalUserDefinedString31
					--,Src.OrderExternalUserDefinedString32
					--,Src.OrderExternalUserDefinedString33
					--,Src.OrderExternalUserDefinedString34
					--,Src.OrderExternalUserDefinedString35
					--,Src.OrderFreightChargeBaseAmount
					--,Src.OrderFreightCostBaseAmount
					--,Src.OrderHostProcessRequired
					--,Src.OrderPackingValTemplate
					--,Src.OrderPackNotes
					--,Src.OrderReferenceLID
					--,Src.OrderRequireOrderClose
					--,Src.OrderShipToGroup
					--,Src.OrderSPSAPIStrategyKey
					--,Src.OrderTotalPalletEstimate
					--,Src.OrderTotalRoutes
				FROM dbo.Orders Src WITH (NOLOCK)
				INNER JOIN OrderDetails OD WITH (NOLOCK) ON Src.IDOrder = OD.OrderID
				INNER JOIN Products P WITH (NOLOCK) ON P.[ProductCode] = OD.ProductCode
					AND P.[CompanyIDStorer] = OD.CompanyIDStorer
				LEFT OUTER JOIN Lots L WITH (NOLOCK) ON L.IDLot = OD.LotID
				LEFT OUTER JOIN LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK) ON L.IDLot = LLLSU.LotID
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders Dest WITH (NOLOCK) ON Src.IDOrder = Dest.IDOrder
				WHERE (
						LLLSU.LinkLotLocationStorageUnitQuantity = 0
						OR LLLSU.LinkLotLocationStorageUnitQuantity IS NULL
						)
					AND CAST(Src.[OrderEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					AND Src.[OrderStatusID] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@OrderStatusIDsForArchival, ',')
						)
					AND Dest.IDOrder IS NULL;
			END;

			IF OBJECT_ID('tempdb..#tmpOrderIDs') IS NOT NULL
			BEGIN
				TRUNCATE TABLE #tmpOrderIDs;
			END

			--ELSE
			--BEGIN
			--	CREATE TABLE #tmpOrderIDs (OrderID NVARCHAR(50));
			--END
			IF EXISTS (
					SELECT 1
					FROM #tmpTableVal
					)
			BEGIN
				INSERT INTO #tmpOrderIDs
				SELECT InsertedId AS OrderID
				FROM #tmpTableVal
				
				UNION
				
				SELECT DeletedId
				FROM #tmpTableVal;
			END

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Orders: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Orders` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--OrderDetails
	SET @CurrentTableName = 'OrderDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails AS Dest
			USING (
				SELECT OD.[OrderID]
					,OD.[OrderDetailLineNumber]
					,OD.[OrderDetailSystemID]
					,OD.[OrderDetailExternalOrderID]
					,OD.[OrderDetailExternalLineNumber]
					,OD.[ProductCode]
					,OD.[CompanyIDStorer]
					,OD.[OrderDetailManufacturerProductID]
					,OD.[OrderDetailRetailProductID]
					,OD.[OrderDetailAlternativeProductID]
					,OD.[OrderDetailOriginalQuantity]
					,OD.[OrderDetailOpenQuantity]
					,OD.[OrderDetailShippedQuantity]
					,OD.[OrderDetailAdjustedQuantity]
					,OD.[OrderDetailPreallocatedQuantity]
					,OD.[OrderDetailAllocatedQuantity]
					,OD.[OrderDetailPickedQuantity]
					,OD.[OrderDetailUnitOfMeasure]
					,OD.[PackCode]
					,OD.[OrderDetailPickCode]
					,OD.[OrderDetailCartonGroup]
					,OD.[LotID]
					,OD.[StorageUnitID]
					,OD.[OrderDetailFacility]
					,OD.[OrderDetailStatus]
					,OD.[OrderDetailUnitPrice]
					,OD.[OrderDetailTax01]
					,OD.[OrderDetailTax02]
					,OD.[OrderDetailExtendedPrice]
					,OD.[OrderDetailUpdateSource]
					,OD.[OrderDetailLotAttribute01]
					,OD.[OrderDetailLotAttribute02]
					,OD.[OrderDetailLotAttribute03]
					,OD.[OrderDetailLotAttribute04]
					,OD.[OrderDetailLotAttribute05]
					,OD.[OrderDetailLotAttribute06]
					,OD.[OrderDetailLotAttribute07]
					,OD.[OrderDetailLotAttribute08]
					,OD.[OrderDetailLotAttribute09]
					,OD.[OrderDetailLotAttribute10]
					,OD.[OrderDetailEffectiveDateTime]
					,OD.[OrderDetailForteFlag]
					,OD.[OrderDetailTariffCode]
					,OD.[OrderDetailUserDefined01]
					,OD.[OrderDetailUserDefined02]
					,OD.[OrderDetailUserDefined03]
					,OD.[OrderDetailUserDefined04]
					,OD.[OrderDetailUserDefined05]
					,OD.[OrderDetailNotes]
					,OD.[OrderDetailWorkOrderCode]
					,OD.[OrderDetailAllocateStrategyCode]
					,OD.[OrderDetailPreAllocateStrategyCode]
					,OD.[OrderDetailAllocateStrategyType]
					,OD.[OrderDetailProductRotation]
					,OD.[OrderDetailShelfLife]
					,OD.[OrderDetailRotation]
					,OD.[OrderDetailPalletID]
					,OD.[OrderDetailAllowSubstitution]
					,OD.[OrderDetailProductWeight]
					,OD.[OrderDetailProductCube]
					,OD.[OrderDetailOrginalCaseQuantity]
					,OD.[OrderDetailOriginalPalletQuantity]
					,OD.[OrderDetailOKToSubstitute]
					,OD.[OrderDetailIsSubstitute]
					,OD.[OrderDetailOriginalProductID]
					,OD.[OrderDetailOriginalLineNumber]
					,OD.[OrderDetailShipmentGroup01]
					,OD.[OrderDetailShipmentGroup02]
					,OD.[OrderDetailShipmentGroup03]
					,OD.[OrderDetailActualShipmentDateTime]
					,OD.[OrderDetailPickingInstructions]
					,OD.[OrderDetailQuantityInTransit]
					,OD.[OrderDetailExternalLotID]
					,OD.[OrderDetailBuyerPurchaseOrder]
					,OD.[OrderDetailAllowGenerateContainerDetail]
					,OD.[OrderDetailLabelName]
					,OD.[OrderDetailStandardSSCCLabelName]
					,OD.[OrderDetailStandardGTINLabelName]
					,OD.[OrderDetailRFIDSSCCLabelName]
					,OD.[OrderDetailRFIDGTINLabelName]
					,OD.[OrderDetailAddDateTime]
					,OD.[OrderDetailAddUserCode]
					,OD.[OrderDetailEditDateTime]
					,OD.[OrderDetailEditUserCode]
					,OD.[OrderDetailGrossWeight]
					,OD.[OrderDetailNetWeight]
					,OD.[OrderDetailPickedPallets]
					,OD.[OrderDetailLoadedPallets]
					,OD.[OrderDetailAmount]
					,OD.[OrderDetailCurrency]
					,OD.[OrderDetailPrice]
					,OD.[OrderDetailPricingUnit]
					,OD.[OrderDetailProductNetWeigth]
					,OD.[OrderDetailPallets]
					,OD.[OrderDetailUserDefinedNumber01]
					,OD.[OrderDetailUserDefinedNumber02]
					,OD.[OrderDetailUserDefinedNumber03]
					,OD.[OrderDetailUserDefinedNumber04]
					,OD.[OrderDetailUserDefinedNumber05]
					,OD.[OrderDetailLocationID]
					,OD.[OrderDetailUserDefined06]
					,OD.[OrderDetailUserDefined07]
					,OD.[OrderDetailUserDefined08]
					,OD.[OrderDetailUserDefined09]
					,OD.[OrderDetailUserDefined10]
					,OD.[OrderDetailNotes2]
					,OD.[OrderDetailNotes3]
					,OD.[OrderDetailTransit]
					,OD.[OrderDetailWidth]
					,OD.[OrderDetailHeight]
					,OD.[OrderDetailDiameter]
					,OD.[OrderDetailThickness]
					,OD.[OrderDetailVolume]
					,OD.[OrderDetailPackingDescription]
					,OD.[OrderDetailCustomerNotes]
					,OD.[OrderDetailWarehousingNotes]
				FROM dbo.OrderDetails OD WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON OD.OrderID = O.[IDOrder]
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON OD.[ProductCode] = P.[ProductCode]
					AND OD.[CompanyIDStorer] = P.[CompanyIDStorer]
				) AS Src
				ON (
						Dest.[OrderID] = Src.[OrderID]
						AND Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[OrderDetailSystemID] = Src.[OrderDetailSystemID]
						,Dest.[OrderDetailExternalOrderID] = Src.[OrderDetailExternalOrderID]
						,Dest.[OrderDetailExternalLineNumber] = Src.[OrderDetailExternalLineNumber]
						,Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[OrderDetailManufacturerProductID] = Src.[OrderDetailManufacturerProductID]
						,Dest.[OrderDetailRetailProductID] = Src.[OrderDetailRetailProductID]
						,Dest.[OrderDetailAlternativeProductID] = Src.[OrderDetailAlternativeProductID]
						,Dest.[OrderDetailOriginalQuantity] = Src.[OrderDetailOriginalQuantity]
						,Dest.[OrderDetailOpenQuantity] = Src.[OrderDetailOpenQuantity]
						,Dest.[OrderDetailShippedQuantity] = Src.[OrderDetailShippedQuantity]
						,Dest.[OrderDetailAdjustedQuantity] = Src.[OrderDetailAdjustedQuantity]
						,Dest.[OrderDetailPreallocatedQuantity] = Src.[OrderDetailPreallocatedQuantity]
						,Dest.[OrderDetailAllocatedQuantity] = Src.[OrderDetailAllocatedQuantity]
						,Dest.[OrderDetailPickedQuantity] = Src.[OrderDetailPickedQuantity]
						,Dest.[OrderDetailUnitOfMeasure] = Src.[OrderDetailUnitOfMeasure]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[OrderDetailPickCode] = Src.[OrderDetailPickCode]
						,Dest.[OrderDetailCartonGroup] = Src.[OrderDetailCartonGroup]
						,Dest.[LotID] = Src.[LotID]
						,Dest.[StorageUnitID] = Src.[StorageUnitID]
						,Dest.[OrderDetailFacility] = Src.[OrderDetailFacility]
						,Dest.[OrderDetailStatus] = Src.[OrderDetailStatus]
						,Dest.[OrderDetailUnitPrice] = Src.[OrderDetailUnitPrice]
						,Dest.[OrderDetailTax01] = Src.[OrderDetailTax01]
						,Dest.[OrderDetailTax02] = Src.[OrderDetailTax02]
						,Dest.[OrderDetailExtendedPrice] = Src.[OrderDetailExtendedPrice]
						,Dest.[OrderDetailUpdateSource] = Src.[OrderDetailUpdateSource]
						,Dest.[OrderDetailLotAttribute01] = Src.[OrderDetailLotAttribute01]
						,Dest.[OrderDetailLotAttribute02] = Src.[OrderDetailLotAttribute02]
						,Dest.[OrderDetailLotAttribute03] = Src.[OrderDetailLotAttribute03]
						,Dest.[OrderDetailLotAttribute04] = Src.[OrderDetailLotAttribute04]
						,Dest.[OrderDetailLotAttribute05] = Src.[OrderDetailLotAttribute05]
						,Dest.[OrderDetailLotAttribute06] = Src.[OrderDetailLotAttribute06]
						,Dest.[OrderDetailLotAttribute07] = Src.[OrderDetailLotAttribute07]
						,Dest.[OrderDetailLotAttribute08] = Src.[OrderDetailLotAttribute08]
						,Dest.[OrderDetailLotAttribute09] = Src.[OrderDetailLotAttribute09]
						,Dest.[OrderDetailLotAttribute10] = Src.[OrderDetailLotAttribute10]
						,Dest.[OrderDetailEffectiveDateTime] = Src.[OrderDetailEffectiveDateTime]
						,Dest.[OrderDetailForteFlag] = Src.[OrderDetailForteFlag]
						,Dest.[OrderDetailTariffCode] = Src.[OrderDetailTariffCode]
						,Dest.[OrderDetailUserDefined01] = Src.[OrderDetailUserDefined01]
						,Dest.[OrderDetailUserDefined02] = Src.[OrderDetailUserDefined02]
						,Dest.[OrderDetailUserDefined03] = Src.[OrderDetailUserDefined03]
						,Dest.[OrderDetailUserDefined04] = Src.[OrderDetailUserDefined04]
						,Dest.[OrderDetailUserDefined05] = Src.[OrderDetailUserDefined05]
						,Dest.[OrderDetailNotes] = Src.[OrderDetailNotes]
						,Dest.[OrderDetailWorkOrderCode] = Src.[OrderDetailWorkOrderCode]
						,Dest.[OrderDetailAllocateStrategyCode] = Src.[OrderDetailAllocateStrategyCode]
						,Dest.[OrderDetailPreAllocateStrategyCode] = Src.[OrderDetailPreAllocateStrategyCode]
						,Dest.[OrderDetailAllocateStrategyType] = Src.[OrderDetailAllocateStrategyType]
						,Dest.[OrderDetailProductRotation] = Src.[OrderDetailProductRotation]
						,Dest.[OrderDetailShelfLife] = Src.[OrderDetailShelfLife]
						,Dest.[OrderDetailRotation] = Src.[OrderDetailRotation]
						,Dest.[OrderDetailPalletID] = Src.[OrderDetailPalletID]
						,Dest.[OrderDetailAllowSubstitution] = Src.[OrderDetailAllowSubstitution]
						,Dest.[OrderDetailProductWeight] = Src.[OrderDetailProductWeight]
						,Dest.[OrderDetailProductCube] = Src.[OrderDetailProductCube]
						,Dest.[OrderDetailOrginalCaseQuantity] = Src.[OrderDetailOrginalCaseQuantity]
						,Dest.[OrderDetailOriginalPalletQuantity] = Src.[OrderDetailOriginalPalletQuantity]
						,Dest.[OrderDetailOKToSubstitute] = Src.[OrderDetailOKToSubstitute]
						,Dest.[OrderDetailIsSubstitute] = Src.[OrderDetailIsSubstitute]
						,Dest.[OrderDetailOriginalProductID] = Src.[OrderDetailOriginalProductID]
						,Dest.[OrderDetailOriginalLineNumber] = Src.[OrderDetailOriginalLineNumber]
						,Dest.[OrderDetailShipmentGroup01] = Src.[OrderDetailShipmentGroup01]
						,Dest.[OrderDetailShipmentGroup02] = Src.[OrderDetailShipmentGroup02]
						,Dest.[OrderDetailShipmentGroup03] = Src.[OrderDetailShipmentGroup03]
						,Dest.[OrderDetailActualShipmentDateTime] = Src.[OrderDetailActualShipmentDateTime]
						,Dest.[OrderDetailPickingInstructions] = Src.[OrderDetailPickingInstructions]
						,Dest.[OrderDetailQuantityInTransit] = Src.[OrderDetailQuantityInTransit]
						,Dest.[OrderDetailExternalLotID] = Src.[OrderDetailExternalLotID]
						,Dest.[OrderDetailBuyerPurchaseOrder] = Src.[OrderDetailBuyerPurchaseOrder]
						,Dest.[OrderDetailAllowGenerateContainerDetail] = Src.[OrderDetailAllowGenerateContainerDetail]
						,Dest.[OrderDetailLabelName] = Src.[OrderDetailLabelName]
						,Dest.[OrderDetailStandardSSCCLabelName] = Src.[OrderDetailStandardSSCCLabelName]
						,Dest.[OrderDetailStandardGTINLabelName] = Src.[OrderDetailStandardGTINLabelName]
						,Dest.[OrderDetailRFIDSSCCLabelName] = Src.[OrderDetailRFIDSSCCLabelName]
						,Dest.[OrderDetailRFIDGTINLabelName] = Src.[OrderDetailRFIDGTINLabelName]
						,Dest.[OrderDetailAddDateTime] = Src.[OrderDetailAddDateTime]
						,Dest.[OrderDetailAddUserCode] = Src.[OrderDetailAddUserCode]
						,Dest.[OrderDetailEditDateTime] = Src.[OrderDetailEditDateTime]
						,Dest.[OrderDetailEditUserCode] = Src.[OrderDetailEditUserCode]
						,Dest.[OrderDetailGrossWeight] = Src.[OrderDetailGrossWeight]
						,Dest.[OrderDetailNetWeight] = Src.[OrderDetailNetWeight]
						,Dest.[OrderDetailPickedPallets] = Src.[OrderDetailPickedPallets]
						,Dest.[OrderDetailLoadedPallets] = Src.[OrderDetailLoadedPallets]
						,Dest.[OrderDetailAmount] = Src.[OrderDetailAmount]
						,Dest.[OrderDetailCurrency] = Src.[OrderDetailCurrency]
						,Dest.[OrderDetailPrice] = Src.[OrderDetailPrice]
						,Dest.[OrderDetailPricingUnit] = Src.[OrderDetailPricingUnit]
						,Dest.[OrderDetailProductNetWeigth] = Src.[OrderDetailProductNetWeigth]
						,Dest.[OrderDetailPallets] = Src.[OrderDetailPallets]
						,Dest.[OrderDetailUserDefinedNumber01] = Src.[OrderDetailUserDefinedNumber01]
						,Dest.[OrderDetailUserDefinedNumber02] = Src.[OrderDetailUserDefinedNumber02]
						,Dest.[OrderDetailUserDefinedNumber03] = Src.[OrderDetailUserDefinedNumber03]
						,Dest.[OrderDetailUserDefinedNumber04] = Src.[OrderDetailUserDefinedNumber04]
						,Dest.[OrderDetailUserDefinedNumber05] = Src.[OrderDetailUserDefinedNumber05]
						,Dest.[OrderDetailLocationID] = Src.[OrderDetailLocationID]
						,Dest.[OrderDetailUserDefined06] = Src.[OrderDetailUserDefined06]
						,Dest.[OrderDetailUserDefined07] = Src.[OrderDetailUserDefined07]
						,Dest.[OrderDetailUserDefined08] = Src.[OrderDetailUserDefined08]
						,Dest.[OrderDetailUserDefined09] = Src.[OrderDetailUserDefined09]
						,Dest.[OrderDetailUserDefined10] = Src.[OrderDetailUserDefined10]
						,Dest.[OrderDetailNotes2] = Src.[OrderDetailNotes2]
						,Dest.[OrderDetailNotes3] = Src.[OrderDetailNotes3]
						,Dest.[OrderDetailTransit] = Src.[OrderDetailTransit]
						,Dest.[OrderDetailWidth] = Src.[OrderDetailWidth]
						,Dest.[OrderDetailHeight] = Src.[OrderDetailHeight]
						,Dest.[OrderDetailDiameter] = Src.[OrderDetailDiameter]
						,Dest.[OrderDetailThickness] = Src.[OrderDetailThickness]
						,Dest.[OrderDetailVolume] = Src.[OrderDetailVolume]
						,Dest.[OrderDetailPackingDescription] = Src.[OrderDetailPackingDescription]
						,Dest.[OrderDetailCustomerNotes] = Src.[OrderDetailCustomerNotes]
						,Dest.[OrderDetailWarehousingNotes] = Src.[OrderDetailWarehousingNotes]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[OrderID]
						,[OrderDetailLineNumber]
						,[OrderDetailSystemID]
						,[OrderDetailExternalOrderID]
						,[OrderDetailExternalLineNumber]
						,[ProductCode]
						,[CompanyIDStorer]
						,[OrderDetailManufacturerProductID]
						,[OrderDetailRetailProductID]
						,[OrderDetailAlternativeProductID]
						,[OrderDetailOriginalQuantity]
						,[OrderDetailOpenQuantity]
						,[OrderDetailShippedQuantity]
						,[OrderDetailAdjustedQuantity]
						,[OrderDetailPreallocatedQuantity]
						,[OrderDetailAllocatedQuantity]
						,[OrderDetailPickedQuantity]
						,[OrderDetailUnitOfMeasure]
						,[PackCode]
						,[OrderDetailPickCode]
						,[OrderDetailCartonGroup]
						,[LotID]
						,[StorageUnitID]
						,[OrderDetailFacility]
						,[OrderDetailStatus]
						,[OrderDetailUnitPrice]
						,[OrderDetailTax01]
						,[OrderDetailTax02]
						,[OrderDetailExtendedPrice]
						,[OrderDetailUpdateSource]
						,[OrderDetailLotAttribute01]
						,[OrderDetailLotAttribute02]
						,[OrderDetailLotAttribute03]
						,[OrderDetailLotAttribute04]
						,[OrderDetailLotAttribute05]
						,[OrderDetailLotAttribute06]
						,[OrderDetailLotAttribute07]
						,[OrderDetailLotAttribute08]
						,[OrderDetailLotAttribute09]
						,[OrderDetailLotAttribute10]
						,[OrderDetailEffectiveDateTime]
						,[OrderDetailForteFlag]
						,[OrderDetailTariffCode]
						,[OrderDetailUserDefined01]
						,[OrderDetailUserDefined02]
						,[OrderDetailUserDefined03]
						,[OrderDetailUserDefined04]
						,[OrderDetailUserDefined05]
						,[OrderDetailNotes]
						,[OrderDetailWorkOrderCode]
						,[OrderDetailAllocateStrategyCode]
						,[OrderDetailPreAllocateStrategyCode]
						,[OrderDetailAllocateStrategyType]
						,[OrderDetailProductRotation]
						,[OrderDetailShelfLife]
						,[OrderDetailRotation]
						,[OrderDetailPalletID]
						,[OrderDetailAllowSubstitution]
						,[OrderDetailProductWeight]
						,[OrderDetailProductCube]
						,[OrderDetailOrginalCaseQuantity]
						,[OrderDetailOriginalPalletQuantity]
						,[OrderDetailOKToSubstitute]
						,[OrderDetailIsSubstitute]
						,[OrderDetailOriginalProductID]
						,[OrderDetailOriginalLineNumber]
						,[OrderDetailShipmentGroup01]
						,[OrderDetailShipmentGroup02]
						,[OrderDetailShipmentGroup03]
						,[OrderDetailActualShipmentDateTime]
						,[OrderDetailPickingInstructions]
						,[OrderDetailQuantityInTransit]
						,[OrderDetailExternalLotID]
						,[OrderDetailBuyerPurchaseOrder]
						,[OrderDetailAllowGenerateContainerDetail]
						,[OrderDetailLabelName]
						,[OrderDetailStandardSSCCLabelName]
						,[OrderDetailStandardGTINLabelName]
						,[OrderDetailRFIDSSCCLabelName]
						,[OrderDetailRFIDGTINLabelName]
						,[OrderDetailAddDateTime]
						,[OrderDetailAddUserCode]
						,[OrderDetailEditDateTime]
						,[OrderDetailEditUserCode]
						,[OrderDetailGrossWeight]
						,[OrderDetailNetWeight]
						,[OrderDetailPickedPallets]
						,[OrderDetailLoadedPallets]
						,[OrderDetailAmount]
						,[OrderDetailCurrency]
						,[OrderDetailPrice]
						,[OrderDetailPricingUnit]
						,[OrderDetailProductNetWeigth]
						,[OrderDetailPallets]
						,[OrderDetailUserDefinedNumber01]
						,[OrderDetailUserDefinedNumber02]
						,[OrderDetailUserDefinedNumber03]
						,[OrderDetailUserDefinedNumber04]
						,[OrderDetailUserDefinedNumber05]
						,[OrderDetailLocationID]
						,[OrderDetailUserDefined06]
						,[OrderDetailUserDefined07]
						,[OrderDetailUserDefined08]
						,[OrderDetailUserDefined09]
						,[OrderDetailUserDefined10]
						,[OrderDetailNotes2]
						,[OrderDetailNotes3]
						,[OrderDetailTransit]
						,[OrderDetailWidth]
						,[OrderDetailHeight]
						,[OrderDetailDiameter]
						,[OrderDetailThickness]
						,[OrderDetailVolume]
						,[OrderDetailPackingDescription]
						,[OrderDetailCustomerNotes]
						,[OrderDetailWarehousingNotes]
						)
					VALUES (
						Src.[OrderID]
						,Src.[OrderDetailLineNumber]
						,Src.[OrderDetailSystemID]
						,Src.[OrderDetailExternalOrderID]
						,Src.[OrderDetailExternalLineNumber]
						,Src.[ProductCode]
						,Src.[CompanyIDStorer]
						,Src.[OrderDetailManufacturerProductID]
						,Src.[OrderDetailRetailProductID]
						,Src.[OrderDetailAlternativeProductID]
						,Src.[OrderDetailOriginalQuantity]
						,Src.[OrderDetailOpenQuantity]
						,Src.[OrderDetailShippedQuantity]
						,Src.[OrderDetailAdjustedQuantity]
						,Src.[OrderDetailPreallocatedQuantity]
						,Src.[OrderDetailAllocatedQuantity]
						,Src.[OrderDetailPickedQuantity]
						,Src.[OrderDetailUnitOfMeasure]
						,Src.[PackCode]
						,Src.[OrderDetailPickCode]
						,Src.[OrderDetailCartonGroup]
						,Src.[LotID]
						,Src.[StorageUnitID]
						,Src.[OrderDetailFacility]
						,Src.[OrderDetailStatus]
						,Src.[OrderDetailUnitPrice]
						,Src.[OrderDetailTax01]
						,Src.[OrderDetailTax02]
						,Src.[OrderDetailExtendedPrice]
						,Src.[OrderDetailUpdateSource]
						,Src.[OrderDetailLotAttribute01]
						,Src.[OrderDetailLotAttribute02]
						,Src.[OrderDetailLotAttribute03]
						,Src.[OrderDetailLotAttribute04]
						,Src.[OrderDetailLotAttribute05]
						,Src.[OrderDetailLotAttribute06]
						,Src.[OrderDetailLotAttribute07]
						,Src.[OrderDetailLotAttribute08]
						,Src.[OrderDetailLotAttribute09]
						,Src.[OrderDetailLotAttribute10]
						,Src.[OrderDetailEffectiveDateTime]
						,Src.[OrderDetailForteFlag]
						,Src.[OrderDetailTariffCode]
						,Src.[OrderDetailUserDefined01]
						,Src.[OrderDetailUserDefined02]
						,Src.[OrderDetailUserDefined03]
						,Src.[OrderDetailUserDefined04]
						,Src.[OrderDetailUserDefined05]
						,Src.[OrderDetailNotes]
						,Src.[OrderDetailWorkOrderCode]
						,Src.[OrderDetailAllocateStrategyCode]
						,Src.[OrderDetailPreAllocateStrategyCode]
						,Src.[OrderDetailAllocateStrategyType]
						,Src.[OrderDetailProductRotation]
						,Src.[OrderDetailShelfLife]
						,Src.[OrderDetailRotation]
						,Src.[OrderDetailPalletID]
						,Src.[OrderDetailAllowSubstitution]
						,Src.[OrderDetailProductWeight]
						,Src.[OrderDetailProductCube]
						,Src.[OrderDetailOrginalCaseQuantity]
						,Src.[OrderDetailOriginalPalletQuantity]
						,Src.[OrderDetailOKToSubstitute]
						,Src.[OrderDetailIsSubstitute]
						,Src.[OrderDetailOriginalProductID]
						,Src.[OrderDetailOriginalLineNumber]
						,Src.[OrderDetailShipmentGroup01]
						,Src.[OrderDetailShipmentGroup02]
						,Src.[OrderDetailShipmentGroup03]
						,Src.[OrderDetailActualShipmentDateTime]
						,Src.[OrderDetailPickingInstructions]
						,Src.[OrderDetailQuantityInTransit]
						,Src.[OrderDetailExternalLotID]
						,Src.[OrderDetailBuyerPurchaseOrder]
						,Src.[OrderDetailAllowGenerateContainerDetail]
						,Src.[OrderDetailLabelName]
						,Src.[OrderDetailStandardSSCCLabelName]
						,Src.[OrderDetailStandardGTINLabelName]
						,Src.[OrderDetailRFIDSSCCLabelName]
						,Src.[OrderDetailRFIDGTINLabelName]
						,Src.[OrderDetailAddDateTime]
						,Src.[OrderDetailAddUserCode]
						,Src.[OrderDetailEditDateTime]
						,Src.[OrderDetailEditUserCode]
						,Src.[OrderDetailGrossWeight]
						,Src.[OrderDetailNetWeight]
						,Src.[OrderDetailPickedPallets]
						,Src.[OrderDetailLoadedPallets]
						,Src.[OrderDetailAmount]
						,Src.[OrderDetailCurrency]
						,Src.[OrderDetailPrice]
						,Src.[OrderDetailPricingUnit]
						,Src.[OrderDetailProductNetWeigth]
						,Src.[OrderDetailPallets]
						,Src.[OrderDetailUserDefinedNumber01]
						,Src.[OrderDetailUserDefinedNumber02]
						,Src.[OrderDetailUserDefinedNumber03]
						,Src.[OrderDetailUserDefinedNumber04]
						,Src.[OrderDetailUserDefinedNumber05]
						,Src.[OrderDetailLocationID]
						,Src.[OrderDetailUserDefined06]
						,Src.[OrderDetailUserDefined07]
						,Src.[OrderDetailUserDefined08]
						,Src.[OrderDetailUserDefined09]
						,Src.[OrderDetailUserDefined10]
						,Src.[OrderDetailNotes2]
						,Src.[OrderDetailNotes3]
						,Src.[OrderDetailTransit]
						,Src.[OrderDetailWidth]
						,Src.[OrderDetailHeight]
						,Src.[OrderDetailDiameter]
						,Src.[OrderDetailThickness]
						,Src.[OrderDetailVolume]
						,Src.[OrderDetailPackingDescription]
						,Src.[OrderDetailCustomerNotes]
						,Src.[OrderDetailWarehousingNotes]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[OrderID] AS VARCHAR(50)) + CAST(Inserted.[OrderDetailLineNumber] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[OrderID] AS VARCHAR(50)) + CAST(Deleted.[OrderDetailLineNumber] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM dbo.OrderDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON Src.OrderID = O.[IDOrder]
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
						AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails Dest WITH (NOLOCK) ON Dest.[OrderID] = Src.[OrderID]
						AND Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
					WHERE Dest.OrderDetailEditDateTime < Src.OrderDetailEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[OrderDetailSystemID] = Src.[OrderDetailSystemID]
					,Dest.[OrderDetailExternalOrderID] = Src.[OrderDetailExternalOrderID]
					,Dest.[OrderDetailExternalLineNumber] = Src.[OrderDetailExternalLineNumber]
					,Dest.[ProductCode] = Src.[ProductCode]
					,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					,Dest.[OrderDetailManufacturerProductID] = Src.[OrderDetailManufacturerProductID]
					,Dest.[OrderDetailRetailProductID] = Src.[OrderDetailRetailProductID]
					,Dest.[OrderDetailAlternativeProductID] = Src.[OrderDetailAlternativeProductID]
					,Dest.[OrderDetailOriginalQuantity] = Src.[OrderDetailOriginalQuantity]
					,Dest.[OrderDetailOpenQuantity] = Src.[OrderDetailOpenQuantity]
					,Dest.[OrderDetailShippedQuantity] = Src.[OrderDetailShippedQuantity]
					,Dest.[OrderDetailAdjustedQuantity] = Src.[OrderDetailAdjustedQuantity]
					,Dest.[OrderDetailPreallocatedQuantity] = Src.[OrderDetailPreallocatedQuantity]
					,Dest.[OrderDetailAllocatedQuantity] = Src.[OrderDetailAllocatedQuantity]
					,Dest.[OrderDetailPickedQuantity] = Src.[OrderDetailPickedQuantity]
					,Dest.[OrderDetailUnitOfMeasure] = Src.[OrderDetailUnitOfMeasure]
					,Dest.[PackCode] = Src.[PackCode]
					,Dest.[OrderDetailPickCode] = Src.[OrderDetailPickCode]
					,Dest.[OrderDetailCartonGroup] = Src.[OrderDetailCartonGroup]
					,Dest.[LotID] = Src.[LotID]
					,Dest.[StorageUnitID] = Src.[StorageUnitID]
					,Dest.[OrderDetailFacility] = Src.[OrderDetailFacility]
					,Dest.[OrderDetailStatus] = Src.[OrderDetailStatus]
					,Dest.[OrderDetailUnitPrice] = Src.[OrderDetailUnitPrice]
					,Dest.[OrderDetailTax01] = Src.[OrderDetailTax01]
					,Dest.[OrderDetailTax02] = Src.[OrderDetailTax02]
					,Dest.[OrderDetailExtendedPrice] = Src.[OrderDetailExtendedPrice]
					,Dest.[OrderDetailUpdateSource] = Src.[OrderDetailUpdateSource]
					,Dest.[OrderDetailLotAttribute01] = Src.[OrderDetailLotAttribute01]
					,Dest.[OrderDetailLotAttribute02] = Src.[OrderDetailLotAttribute02]
					,Dest.[OrderDetailLotAttribute03] = Src.[OrderDetailLotAttribute03]
					,Dest.[OrderDetailLotAttribute04] = Src.[OrderDetailLotAttribute04]
					,Dest.[OrderDetailLotAttribute05] = Src.[OrderDetailLotAttribute05]
					,Dest.[OrderDetailLotAttribute06] = Src.[OrderDetailLotAttribute06]
					,Dest.[OrderDetailLotAttribute07] = Src.[OrderDetailLotAttribute07]
					,Dest.[OrderDetailLotAttribute08] = Src.[OrderDetailLotAttribute08]
					,Dest.[OrderDetailLotAttribute09] = Src.[OrderDetailLotAttribute09]
					,Dest.[OrderDetailLotAttribute10] = Src.[OrderDetailLotAttribute10]
					,Dest.[OrderDetailEffectiveDateTime] = Src.[OrderDetailEffectiveDateTime]
					,Dest.[OrderDetailForteFlag] = Src.[OrderDetailForteFlag]
					,Dest.[OrderDetailTariffCode] = Src.[OrderDetailTariffCode]
					,Dest.[OrderDetailUserDefined01] = Src.[OrderDetailUserDefined01]
					,Dest.[OrderDetailUserDefined02] = Src.[OrderDetailUserDefined02]
					,Dest.[OrderDetailUserDefined03] = Src.[OrderDetailUserDefined03]
					,Dest.[OrderDetailUserDefined04] = Src.[OrderDetailUserDefined04]
					,Dest.[OrderDetailUserDefined05] = Src.[OrderDetailUserDefined05]
					,Dest.[OrderDetailNotes] = Src.[OrderDetailNotes]
					,Dest.[OrderDetailWorkOrderCode] = Src.[OrderDetailWorkOrderCode]
					,Dest.[OrderDetailAllocateStrategyCode] = Src.[OrderDetailAllocateStrategyCode]
					,Dest.[OrderDetailPreAllocateStrategyCode] = Src.[OrderDetailPreAllocateStrategyCode]
					,Dest.[OrderDetailAllocateStrategyType] = Src.[OrderDetailAllocateStrategyType]
					,Dest.[OrderDetailProductRotation] = Src.[OrderDetailProductRotation]
					,Dest.[OrderDetailShelfLife] = Src.[OrderDetailShelfLife]
					,Dest.[OrderDetailRotation] = Src.[OrderDetailRotation]
					,Dest.[OrderDetailPalletID] = Src.[OrderDetailPalletID]
					,Dest.[OrderDetailAllowSubstitution] = Src.[OrderDetailAllowSubstitution]
					,Dest.[OrderDetailProductWeight] = Src.[OrderDetailProductWeight]
					,Dest.[OrderDetailProductCube] = Src.[OrderDetailProductCube]
					,Dest.[OrderDetailOrginalCaseQuantity] = Src.[OrderDetailOrginalCaseQuantity]
					,Dest.[OrderDetailOriginalPalletQuantity] = Src.[OrderDetailOriginalPalletQuantity]
					,Dest.[OrderDetailOKToSubstitute] = Src.[OrderDetailOKToSubstitute]
					,Dest.[OrderDetailIsSubstitute] = Src.[OrderDetailIsSubstitute]
					,Dest.[OrderDetailOriginalProductID] = Src.[OrderDetailOriginalProductID]
					,Dest.[OrderDetailOriginalLineNumber] = Src.[OrderDetailOriginalLineNumber]
					,Dest.[OrderDetailShipmentGroup01] = Src.[OrderDetailShipmentGroup01]
					,Dest.[OrderDetailShipmentGroup02] = Src.[OrderDetailShipmentGroup02]
					,Dest.[OrderDetailShipmentGroup03] = Src.[OrderDetailShipmentGroup03]
					,Dest.[OrderDetailActualShipmentDateTime] = Src.[OrderDetailActualShipmentDateTime]
					,Dest.[OrderDetailPickingInstructions] = Src.[OrderDetailPickingInstructions]
					,Dest.[OrderDetailQuantityInTransit] = Src.[OrderDetailQuantityInTransit]
					,Dest.[OrderDetailExternalLotID] = Src.[OrderDetailExternalLotID]
					,Dest.[OrderDetailBuyerPurchaseOrder] = Src.[OrderDetailBuyerPurchaseOrder]
					,Dest.[OrderDetailAllowGenerateContainerDetail] = Src.[OrderDetailAllowGenerateContainerDetail]
					,Dest.[OrderDetailLabelName] = Src.[OrderDetailLabelName]
					,Dest.[OrderDetailStandardSSCCLabelName] = Src.[OrderDetailStandardSSCCLabelName]
					,Dest.[OrderDetailStandardGTINLabelName] = Src.[OrderDetailStandardGTINLabelName]
					,Dest.[OrderDetailRFIDSSCCLabelName] = Src.[OrderDetailRFIDSSCCLabelName]
					,Dest.[OrderDetailRFIDGTINLabelName] = Src.[OrderDetailRFIDGTINLabelName]
					,Dest.[OrderDetailAddDateTime] = Src.[OrderDetailAddDateTime]
					,Dest.[OrderDetailAddUserCode] = Src.[OrderDetailAddUserCode]
					,Dest.[OrderDetailEditDateTime] = Src.[OrderDetailEditDateTime]
					,Dest.[OrderDetailEditUserCode] = Src.[OrderDetailEditUserCode]
					,Dest.[OrderDetailGrossWeight] = Src.[OrderDetailGrossWeight]
					,Dest.[OrderDetailNetWeight] = Src.[OrderDetailNetWeight]
					,Dest.[OrderDetailPickedPallets] = Src.[OrderDetailPickedPallets]
					,Dest.[OrderDetailLoadedPallets] = Src.[OrderDetailLoadedPallets]
					,Dest.[OrderDetailAmount] = Src.[OrderDetailAmount]
					,Dest.[OrderDetailCurrency] = Src.[OrderDetailCurrency]
					,Dest.[OrderDetailPrice] = Src.[OrderDetailPrice]
					,Dest.[OrderDetailPricingUnit] = Src.[OrderDetailPricingUnit]
					,Dest.[OrderDetailProductNetWeigth] = Src.[OrderDetailProductNetWeigth]
					,Dest.[OrderDetailPallets] = Src.[OrderDetailPallets]
					,Dest.[OrderDetailUserDefinedNumber01] = Src.[OrderDetailUserDefinedNumber01]
					,Dest.[OrderDetailUserDefinedNumber02] = Src.[OrderDetailUserDefinedNumber02]
					,Dest.[OrderDetailUserDefinedNumber03] = Src.[OrderDetailUserDefinedNumber03]
					,Dest.[OrderDetailUserDefinedNumber04] = Src.[OrderDetailUserDefinedNumber04]
					,Dest.[OrderDetailUserDefinedNumber05] = Src.[OrderDetailUserDefinedNumber05]
					,Dest.[OrderDetailLocationID] = Src.[OrderDetailLocationID]
					,Dest.[OrderDetailUserDefined06] = Src.[OrderDetailUserDefined06]
					,Dest.[OrderDetailUserDefined07] = Src.[OrderDetailUserDefined07]
					,Dest.[OrderDetailUserDefined08] = Src.[OrderDetailUserDefined08]
					,Dest.[OrderDetailUserDefined09] = Src.[OrderDetailUserDefined09]
					,Dest.[OrderDetailUserDefined10] = Src.[OrderDetailUserDefined10]
					,Dest.[OrderDetailNotes2] = Src.[OrderDetailNotes2]
					,Dest.[OrderDetailNotes3] = Src.[OrderDetailNotes3]
					,Dest.[OrderDetailTransit] = Src.[OrderDetailTransit]
					,Dest.[OrderDetailWidth] = Src.[OrderDetailWidth]
					,Dest.[OrderDetailHeight] = Src.[OrderDetailHeight]
					,Dest.[OrderDetailDiameter] = Src.[OrderDetailDiameter]
					,Dest.[OrderDetailThickness] = Src.[OrderDetailThickness]
					,Dest.[OrderDetailVolume] = Src.[OrderDetailVolume]
					,Dest.[OrderDetailPackingDescription] = Src.[OrderDetailPackingDescription]
					,Dest.[OrderDetailCustomerNotes] = Src.[OrderDetailCustomerNotes]
					,Dest.[OrderDetailWarehousingNotes] = Src.[OrderDetailWarehousingNotes]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[OrderID] AS VARCHAR(50)) + CAST(Inserted.[OrderDetailLineNumber] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[OrderID] AS VARCHAR(50)) + CAST(Deleted.[OrderDetailLineNumber] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.OrderDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON Src.OrderID = O.[IDOrder]
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
					AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails Dest WITH (NOLOCK) ON Dest.[OrderID] = Src.[OrderID]
					AND Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
				WHERE Dest.OrderDetailEditDateTime < Src.OrderDetailEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.OrderDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON Src.OrderID = O.[IDOrder]
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
						AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails Dest WITH (NOLOCK) ON Dest.[OrderID] = Src.[OrderID]
						AND Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
					WHERE Dest.[OrderID] IS NULL
						AND Dest.[OrderDetailLineNumber] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails (
					[OrderID]
					,[OrderDetailLineNumber]
					,[OrderDetailSystemID]
					,[OrderDetailExternalOrderID]
					,[OrderDetailExternalLineNumber]
					,[ProductCode]
					,[CompanyIDStorer]
					,[OrderDetailManufacturerProductID]
					,[OrderDetailRetailProductID]
					,[OrderDetailAlternativeProductID]
					,[OrderDetailOriginalQuantity]
					,[OrderDetailOpenQuantity]
					,[OrderDetailShippedQuantity]
					,[OrderDetailAdjustedQuantity]
					,[OrderDetailPreallocatedQuantity]
					,[OrderDetailAllocatedQuantity]
					,[OrderDetailPickedQuantity]
					,[OrderDetailUnitOfMeasure]
					,[PackCode]
					,[OrderDetailPickCode]
					,[OrderDetailCartonGroup]
					,[LotID]
					,[StorageUnitID]
					,[OrderDetailFacility]
					,[OrderDetailStatus]
					,[OrderDetailUnitPrice]
					,[OrderDetailTax01]
					,[OrderDetailTax02]
					,[OrderDetailExtendedPrice]
					,[OrderDetailUpdateSource]
					,[OrderDetailLotAttribute01]
					,[OrderDetailLotAttribute02]
					,[OrderDetailLotAttribute03]
					,[OrderDetailLotAttribute04]
					,[OrderDetailLotAttribute05]
					,[OrderDetailLotAttribute06]
					,[OrderDetailLotAttribute07]
					,[OrderDetailLotAttribute08]
					,[OrderDetailLotAttribute09]
					,[OrderDetailLotAttribute10]
					,[OrderDetailEffectiveDateTime]
					,[OrderDetailForteFlag]
					,[OrderDetailTariffCode]
					,[OrderDetailUserDefined01]
					,[OrderDetailUserDefined02]
					,[OrderDetailUserDefined03]
					,[OrderDetailUserDefined04]
					,[OrderDetailUserDefined05]
					,[OrderDetailNotes]
					,[OrderDetailWorkOrderCode]
					,[OrderDetailAllocateStrategyCode]
					,[OrderDetailPreAllocateStrategyCode]
					,[OrderDetailAllocateStrategyType]
					,[OrderDetailProductRotation]
					,[OrderDetailShelfLife]
					,[OrderDetailRotation]
					,[OrderDetailPalletID]
					,[OrderDetailAllowSubstitution]
					,[OrderDetailProductWeight]
					,[OrderDetailProductCube]
					,[OrderDetailOrginalCaseQuantity]
					,[OrderDetailOriginalPalletQuantity]
					,[OrderDetailOKToSubstitute]
					,[OrderDetailIsSubstitute]
					,[OrderDetailOriginalProductID]
					,[OrderDetailOriginalLineNumber]
					,[OrderDetailShipmentGroup01]
					,[OrderDetailShipmentGroup02]
					,[OrderDetailShipmentGroup03]
					,[OrderDetailActualShipmentDateTime]
					,[OrderDetailPickingInstructions]
					,[OrderDetailQuantityInTransit]
					,[OrderDetailExternalLotID]
					,[OrderDetailBuyerPurchaseOrder]
					,[OrderDetailAllowGenerateContainerDetail]
					,[OrderDetailLabelName]
					,[OrderDetailStandardSSCCLabelName]
					,[OrderDetailStandardGTINLabelName]
					,[OrderDetailRFIDSSCCLabelName]
					,[OrderDetailRFIDGTINLabelName]
					,[OrderDetailAddDateTime]
					,[OrderDetailAddUserCode]
					,[OrderDetailEditDateTime]
					,[OrderDetailEditUserCode]
					,[OrderDetailGrossWeight]
					,[OrderDetailNetWeight]
					,[OrderDetailPickedPallets]
					,[OrderDetailLoadedPallets]
					,[OrderDetailAmount]
					,[OrderDetailCurrency]
					,[OrderDetailPrice]
					,[OrderDetailPricingUnit]
					,[OrderDetailProductNetWeigth]
					,[OrderDetailPallets]
					,[OrderDetailUserDefinedNumber01]
					,[OrderDetailUserDefinedNumber02]
					,[OrderDetailUserDefinedNumber03]
					,[OrderDetailUserDefinedNumber04]
					,[OrderDetailUserDefinedNumber05]
					,[OrderDetailLocationID]
					,[OrderDetailUserDefined06]
					,[OrderDetailUserDefined07]
					,[OrderDetailUserDefined08]
					,[OrderDetailUserDefined09]
					,[OrderDetailUserDefined10]
					,[OrderDetailNotes2]
					,[OrderDetailNotes3]
					,[OrderDetailTransit]
					,[OrderDetailWidth]
					,[OrderDetailHeight]
					,[OrderDetailDiameter]
					,[OrderDetailThickness]
					,[OrderDetailVolume]
					,[OrderDetailPackingDescription]
					,[OrderDetailCustomerNotes]
					,[OrderDetailWarehousingNotes]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[OrderID] AS VARCHAR(50)) + CAST(Inserted.[OrderDetailLineNumber] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[OrderID]
					,Src.[OrderDetailLineNumber]
					,Src.[OrderDetailSystemID]
					,Src.[OrderDetailExternalOrderID]
					,Src.[OrderDetailExternalLineNumber]
					,Src.[ProductCode]
					,Src.[CompanyIDStorer]
					,Src.[OrderDetailManufacturerProductID]
					,Src.[OrderDetailRetailProductID]
					,Src.[OrderDetailAlternativeProductID]
					,Src.[OrderDetailOriginalQuantity]
					,Src.[OrderDetailOpenQuantity]
					,Src.[OrderDetailShippedQuantity]
					,Src.[OrderDetailAdjustedQuantity]
					,Src.[OrderDetailPreallocatedQuantity]
					,Src.[OrderDetailAllocatedQuantity]
					,Src.[OrderDetailPickedQuantity]
					,Src.[OrderDetailUnitOfMeasure]
					,Src.[PackCode]
					,Src.[OrderDetailPickCode]
					,Src.[OrderDetailCartonGroup]
					,Src.[LotID]
					,Src.[StorageUnitID]
					,Src.[OrderDetailFacility]
					,Src.[OrderDetailStatus]
					,Src.[OrderDetailUnitPrice]
					,Src.[OrderDetailTax01]
					,Src.[OrderDetailTax02]
					,Src.[OrderDetailExtendedPrice]
					,Src.[OrderDetailUpdateSource]
					,Src.[OrderDetailLotAttribute01]
					,Src.[OrderDetailLotAttribute02]
					,Src.[OrderDetailLotAttribute03]
					,Src.[OrderDetailLotAttribute04]
					,Src.[OrderDetailLotAttribute05]
					,Src.[OrderDetailLotAttribute06]
					,Src.[OrderDetailLotAttribute07]
					,Src.[OrderDetailLotAttribute08]
					,Src.[OrderDetailLotAttribute09]
					,Src.[OrderDetailLotAttribute10]
					,Src.[OrderDetailEffectiveDateTime]
					,Src.[OrderDetailForteFlag]
					,Src.[OrderDetailTariffCode]
					,Src.[OrderDetailUserDefined01]
					,Src.[OrderDetailUserDefined02]
					,Src.[OrderDetailUserDefined03]
					,Src.[OrderDetailUserDefined04]
					,Src.[OrderDetailUserDefined05]
					,Src.[OrderDetailNotes]
					,Src.[OrderDetailWorkOrderCode]
					,Src.[OrderDetailAllocateStrategyCode]
					,Src.[OrderDetailPreAllocateStrategyCode]
					,Src.[OrderDetailAllocateStrategyType]
					,Src.[OrderDetailProductRotation]
					,Src.[OrderDetailShelfLife]
					,Src.[OrderDetailRotation]
					,Src.[OrderDetailPalletID]
					,Src.[OrderDetailAllowSubstitution]
					,Src.[OrderDetailProductWeight]
					,Src.[OrderDetailProductCube]
					,Src.[OrderDetailOrginalCaseQuantity]
					,Src.[OrderDetailOriginalPalletQuantity]
					,Src.[OrderDetailOKToSubstitute]
					,Src.[OrderDetailIsSubstitute]
					,Src.[OrderDetailOriginalProductID]
					,Src.[OrderDetailOriginalLineNumber]
					,Src.[OrderDetailShipmentGroup01]
					,Src.[OrderDetailShipmentGroup02]
					,Src.[OrderDetailShipmentGroup03]
					,Src.[OrderDetailActualShipmentDateTime]
					,Src.[OrderDetailPickingInstructions]
					,Src.[OrderDetailQuantityInTransit]
					,Src.[OrderDetailExternalLotID]
					,Src.[OrderDetailBuyerPurchaseOrder]
					,Src.[OrderDetailAllowGenerateContainerDetail]
					,Src.[OrderDetailLabelName]
					,Src.[OrderDetailStandardSSCCLabelName]
					,Src.[OrderDetailStandardGTINLabelName]
					,Src.[OrderDetailRFIDSSCCLabelName]
					,Src.[OrderDetailRFIDGTINLabelName]
					,Src.[OrderDetailAddDateTime]
					,Src.[OrderDetailAddUserCode]
					,Src.[OrderDetailEditDateTime]
					,Src.[OrderDetailEditUserCode]
					,Src.[OrderDetailGrossWeight]
					,Src.[OrderDetailNetWeight]
					,Src.[OrderDetailPickedPallets]
					,Src.[OrderDetailLoadedPallets]
					,Src.[OrderDetailAmount]
					,Src.[OrderDetailCurrency]
					,Src.[OrderDetailPrice]
					,Src.[OrderDetailPricingUnit]
					,Src.[OrderDetailProductNetWeigth]
					,Src.[OrderDetailPallets]
					,Src.[OrderDetailUserDefinedNumber01]
					,Src.[OrderDetailUserDefinedNumber02]
					,Src.[OrderDetailUserDefinedNumber03]
					,Src.[OrderDetailUserDefinedNumber04]
					,Src.[OrderDetailUserDefinedNumber05]
					,Src.[OrderDetailLocationID]
					,Src.[OrderDetailUserDefined06]
					,Src.[OrderDetailUserDefined07]
					,Src.[OrderDetailUserDefined08]
					,Src.[OrderDetailUserDefined09]
					,Src.[OrderDetailUserDefined10]
					,Src.[OrderDetailNotes2]
					,Src.[OrderDetailNotes3]
					,Src.[OrderDetailTransit]
					,Src.[OrderDetailWidth]
					,Src.[OrderDetailHeight]
					,Src.[OrderDetailDiameter]
					,Src.[OrderDetailThickness]
					,Src.[OrderDetailVolume]
					,Src.[OrderDetailPackingDescription]
					,Src.[OrderDetailCustomerNotes]
					,Src.[OrderDetailWarehousingNotes]
				FROM dbo.OrderDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON Src.OrderID = O.[IDOrder]
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
					AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails Dest WITH (NOLOCK) ON Dest.[OrderID] = Src.[OrderID]
					AND Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
				WHERE Dest.[OrderID] IS NULL
					AND Dest.[OrderDetailLineNumber] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') OrderDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `OrderDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--PickDetails
	SET @CurrentTableName = 'PickDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.PickDetails AS Dest
			USING (
				SELECT PD.[IDPickDetail]
					,PD.[PickDetailCaseID]
					,PD.[PickDetailHeaderCode]
					,PD.[OrderID]
					,PD.[OrderDetailLineNumber]
					,PD.[LotID]
					,PD.[AlternativeProductCode]
					,PD.[PickDetailUnitOfMeasure]
					,PD.[PickDetailUnitOfMeasureQuantity]
					,PD.[PickDetailQuantity]
					,PD.[PickDetailQuantityMoved]
					,PD.[PickDetailStatus]
					,PD.[PickDetailDropID]
					,PD.[LocationID]
					,PD.[StorageUnitID]
					,PD.[PackCode]
					,PD.[PickDetailUpdateSource]
					,PD.[PickDetailCartonGroup]
					,PD.[PickDetailCartonType]
					,PD.[LocationIDTarget]
					,PD.[PickDetailReplenish]
					,PD.[PickDetailReplenishZone]
					,PD.[PickDetailCartonize]
					,PD.[PickDetailPickMethod]
					,PD.[PickDetailWaveCode]
					,PD.[PickDetailEffectiveDateTime]
					,PD.[PickDetailForteFlag]
					,PD.[LocationIDSource]
					,PD.[PickDetailTrackingID]
					,PD.[PickDetailFreightCharges]
					,PD.[PickDetailIntermodalVehicle]
					,PD.[PickDetailLoadID]
					,PD.[PickDetailStopNumber]
					,PD.[PickDetailDoor]
					,PD.[PickDetailRoute]
					,PD.[LocationIDSortation]
					,PD.[PickDetailSortationStation]
					,PD.[PickDetailBatchCartonID]
					,PD.[PickDetailIsClosed]
					,PD.[PickDetailQualityCheckStatus]
					,PD.[PickDetailUserDefined01]
					,PD.[PickDetailUserDefined02]
					,PD.[PickDetailUserDefined03]
					,PD.[PickDetailPickingNotes]
					,PD.[PickDetailReceiptID]
					,PD.[PickDetailCrossDocked]
					,PD.[PickDetailSequenceNumber]
					,PD.[PickDetailLabelType]
					,PD.[PickDetailCompanyPrefix]
					,PD.[PickDetailSerialReference]
					,PD.[PickDetailAddDateTime]
					,PD.[PickDetailAddUserCode]
					,PD.[PickDetailEditDateTime]
					,PD.[PickDetailEditUserCode]
					,PD.[PickDetailPalletID]
					,PD.[PickDetailUserDefinedText01]
					,PD.[PickDetailUserDefinedText02]
					,PD.[PickDetailUserDefinedText03]
					,PD.[PickDetailUserDefinedText04]
					,PD.[PickDetailUserDefinedText05]
					,PD.[PickDetailUserDefinedNumber01]
					,PD.[PickDetailUserDefinedNumber02]
					,PD.[PickDetailUserDefinedNumber03]
					,PD.[PickDetailUserDefinedNumber04]
					,PD.[PickDetailUserDefinedNumber05]
					,PD.[PickDetailIsManual]
					,PD.[PickDetailIsDamaged]
					,PD.[PickDetailUnitQuantity]
					,PD.[PickDetailConfirmedNotAvailable]
					,PD.[PickDetailDamagedBeforePicking]
					,PD.[PickDetailReceiptDetailLineNumber]
					,PD.[PickDetailPalletIDTarget]
				FROM dbo.PickDetails PD WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails OD WITH (NOLOCK) ON OD.OrderID = PD.[OrderID]
					AND OD.[OrderDetailLineNumber] = PD.[OrderDetailLineNumber]
				) AS Src
				ON (Dest.[IDPickDetail] = Src.[IDPickDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[PickDetailCaseID] = Src.[PickDetailCaseID]
						,Dest.[PickDetailHeaderCode] = Src.[PickDetailHeaderCode]
						,Dest.[OrderID] = Src.[OrderID]
						,Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
						,Dest.[LotID] = Src.[LotID]
						,Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
						,Dest.[PickDetailUnitOfMeasure] = Src.[PickDetailUnitOfMeasure]
						,Dest.[PickDetailUnitOfMeasureQuantity] = Src.[PickDetailUnitOfMeasureQuantity]
						,Dest.[PickDetailQuantity] = Src.[PickDetailQuantity]
						,Dest.[PickDetailQuantityMoved] = Src.[PickDetailQuantityMoved]
						,Dest.[PickDetailStatus] = Src.[PickDetailStatus]
						,Dest.[PickDetailDropID] = Src.[PickDetailDropID]
						,Dest.[LocationID] = Src.[LocationID]
						,Dest.[StorageUnitID] = Src.[StorageUnitID]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[PickDetailUpdateSource] = Src.[PickDetailUpdateSource]
						,Dest.[PickDetailCartonGroup] = Src.[PickDetailCartonGroup]
						,Dest.[PickDetailCartonType] = Src.[PickDetailCartonType]
						,Dest.[LocationIDTarget] = Src.[LocationIDTarget]
						,Dest.[PickDetailReplenish] = Src.[PickDetailReplenish]
						,Dest.[PickDetailReplenishZone] = Src.[PickDetailReplenishZone]
						,Dest.[PickDetailCartonize] = Src.[PickDetailCartonize]
						,Dest.[PickDetailPickMethod] = Src.[PickDetailPickMethod]
						,Dest.[PickDetailWaveCode] = Src.[PickDetailWaveCode]
						,Dest.[PickDetailEffectiveDateTime] = Src.[PickDetailEffectiveDateTime]
						,Dest.[PickDetailForteFlag] = Src.[PickDetailForteFlag]
						,Dest.[LocationIDSource] = Src.[LocationIDSource]
						,Dest.[PickDetailTrackingID] = Src.[PickDetailTrackingID]
						,Dest.[PickDetailFreightCharges] = Src.[PickDetailFreightCharges]
						,Dest.[PickDetailIntermodalVehicle] = Src.[PickDetailIntermodalVehicle]
						,Dest.[PickDetailLoadID] = Src.[PickDetailLoadID]
						,Dest.[PickDetailStopNumber] = Src.[PickDetailStopNumber]
						,Dest.[PickDetailDoor] = Src.[PickDetailDoor]
						,Dest.[PickDetailRoute] = Src.[PickDetailRoute]
						,Dest.[LocationIDSortation] = Src.[LocationIDSortation]
						,Dest.[PickDetailSortationStation] = Src.[PickDetailSortationStation]
						,Dest.[PickDetailBatchCartonID] = Src.[PickDetailBatchCartonID]
						,Dest.[PickDetailIsClosed] = Src.[PickDetailIsClosed]
						,Dest.[PickDetailQualityCheckStatus] = Src.[PickDetailQualityCheckStatus]
						,Dest.[PickDetailUserDefined01] = Src.[PickDetailUserDefined01]
						,Dest.[PickDetailUserDefined02] = Src.[PickDetailUserDefined02]
						,Dest.[PickDetailUserDefined03] = Src.[PickDetailUserDefined03]
						,Dest.[PickDetailPickingNotes] = Src.[PickDetailPickingNotes]
						,Dest.[PickDetailReceiptID] = Src.[PickDetailReceiptID]
						,Dest.[PickDetailCrossDocked] = Src.[PickDetailCrossDocked]
						,Dest.[PickDetailSequenceNumber] = Src.[PickDetailSequenceNumber]
						,Dest.[PickDetailLabelType] = Src.[PickDetailLabelType]
						,Dest.[PickDetailCompanyPrefix] = Src.[PickDetailCompanyPrefix]
						,Dest.[PickDetailSerialReference] = Src.[PickDetailSerialReference]
						,Dest.[PickDetailAddDateTime] = Src.[PickDetailAddDateTime]
						,Dest.[PickDetailAddUserCode] = Src.[PickDetailAddUserCode]
						,Dest.[PickDetailEditDateTime] = Src.[PickDetailEditDateTime]
						,Dest.[PickDetailEditUserCode] = Src.[PickDetailEditUserCode]
						,Dest.[PickDetailPalletID] = Src.[PickDetailPalletID]
						,Dest.[PickDetailUserDefinedText01] = Src.[PickDetailUserDefinedText01]
						,Dest.[PickDetailUserDefinedText02] = Src.[PickDetailUserDefinedText02]
						,Dest.[PickDetailUserDefinedText03] = Src.[PickDetailUserDefinedText03]
						,Dest.[PickDetailUserDefinedText04] = Src.[PickDetailUserDefinedText04]
						,Dest.[PickDetailUserDefinedText05] = Src.[PickDetailUserDefinedText05]
						,Dest.[PickDetailUserDefinedNumber01] = Src.[PickDetailUserDefinedNumber01]
						,Dest.[PickDetailUserDefinedNumber02] = Src.[PickDetailUserDefinedNumber02]
						,Dest.[PickDetailUserDefinedNumber03] = Src.[PickDetailUserDefinedNumber03]
						,Dest.[PickDetailUserDefinedNumber04] = Src.[PickDetailUserDefinedNumber04]
						,Dest.[PickDetailUserDefinedNumber05] = Src.[PickDetailUserDefinedNumber05]
						,Dest.[PickDetailIsManual] = Src.[PickDetailIsManual]
						,Dest.[PickDetailIsDamaged] = Src.[PickDetailIsDamaged]
						,Dest.[PickDetailUnitQuantity] = Src.[PickDetailUnitQuantity]
						,Dest.[PickDetailConfirmedNotAvailable] = Src.[PickDetailConfirmedNotAvailable]
						,Dest.[PickDetailDamagedBeforePicking] = Src.[PickDetailDamagedBeforePicking]
						,Dest.[PickDetailReceiptDetailLineNumber] = Src.[PickDetailReceiptDetailLineNumber]
						,Dest.[PickDetailPalletIDTarget] = Src.[PickDetailPalletIDTarget]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDPickDetail]
						,[PickDetailCaseID]
						,[PickDetailHeaderCode]
						,[OrderID]
						,[OrderDetailLineNumber]
						,[LotID]
						,[AlternativeProductCode]
						,[PickDetailUnitOfMeasure]
						,[PickDetailUnitOfMeasureQuantity]
						,[PickDetailQuantity]
						,[PickDetailQuantityMoved]
						,[PickDetailStatus]
						,[PickDetailDropID]
						,[LocationID]
						,[StorageUnitID]
						,[PackCode]
						,[PickDetailUpdateSource]
						,[PickDetailCartonGroup]
						,[PickDetailCartonType]
						,[LocationIDTarget]
						,[PickDetailReplenish]
						,[PickDetailReplenishZone]
						,[PickDetailCartonize]
						,[PickDetailPickMethod]
						,[PickDetailWaveCode]
						,[PickDetailEffectiveDateTime]
						,[PickDetailForteFlag]
						,[LocationIDSource]
						,[PickDetailTrackingID]
						,[PickDetailFreightCharges]
						,[PickDetailIntermodalVehicle]
						,[PickDetailLoadID]
						,[PickDetailStopNumber]
						,[PickDetailDoor]
						,[PickDetailRoute]
						,[LocationIDSortation]
						,[PickDetailSortationStation]
						,[PickDetailBatchCartonID]
						,[PickDetailIsClosed]
						,[PickDetailQualityCheckStatus]
						,[PickDetailUserDefined01]
						,[PickDetailUserDefined02]
						,[PickDetailUserDefined03]
						,[PickDetailPickingNotes]
						,[PickDetailReceiptID]
						,[PickDetailCrossDocked]
						,[PickDetailSequenceNumber]
						,[PickDetailLabelType]
						,[PickDetailCompanyPrefix]
						,[PickDetailSerialReference]
						,[PickDetailAddDateTime]
						,[PickDetailAddUserCode]
						,[PickDetailEditDateTime]
						,[PickDetailEditUserCode]
						,[PickDetailPalletID]
						,[PickDetailUserDefinedText01]
						,[PickDetailUserDefinedText02]
						,[PickDetailUserDefinedText03]
						,[PickDetailUserDefinedText04]
						,[PickDetailUserDefinedText05]
						,[PickDetailUserDefinedNumber01]
						,[PickDetailUserDefinedNumber02]
						,[PickDetailUserDefinedNumber03]
						,[PickDetailUserDefinedNumber04]
						,[PickDetailUserDefinedNumber05]
						,[PickDetailIsManual]
						,[PickDetailIsDamaged]
						,[PickDetailUnitQuantity]
						,[PickDetailConfirmedNotAvailable]
						,[PickDetailDamagedBeforePicking]
						,[PickDetailReceiptDetailLineNumber]
						,[PickDetailPalletIDTarget]
						)
					VALUES (
						Src.[IDPickDetail]
						,Src.[PickDetailCaseID]
						,Src.[PickDetailHeaderCode]
						,Src.[OrderID]
						,Src.[OrderDetailLineNumber]
						,Src.[LotID]
						,Src.[AlternativeProductCode]
						,Src.[PickDetailUnitOfMeasure]
						,Src.[PickDetailUnitOfMeasureQuantity]
						,Src.[PickDetailQuantity]
						,Src.[PickDetailQuantityMoved]
						,Src.[PickDetailStatus]
						,Src.[PickDetailDropID]
						,Src.[LocationID]
						,Src.[StorageUnitID]
						,Src.[PackCode]
						,Src.[PickDetailUpdateSource]
						,Src.[PickDetailCartonGroup]
						,Src.[PickDetailCartonType]
						,Src.[LocationIDTarget]
						,Src.[PickDetailReplenish]
						,Src.[PickDetailReplenishZone]
						,Src.[PickDetailCartonize]
						,Src.[PickDetailPickMethod]
						,Src.[PickDetailWaveCode]
						,Src.[PickDetailEffectiveDateTime]
						,Src.[PickDetailForteFlag]
						,Src.[LocationIDSource]
						,Src.[PickDetailTrackingID]
						,Src.[PickDetailFreightCharges]
						,Src.[PickDetailIntermodalVehicle]
						,Src.[PickDetailLoadID]
						,Src.[PickDetailStopNumber]
						,Src.[PickDetailDoor]
						,Src.[PickDetailRoute]
						,Src.[LocationIDSortation]
						,Src.[PickDetailSortationStation]
						,Src.[PickDetailBatchCartonID]
						,Src.[PickDetailIsClosed]
						,Src.[PickDetailQualityCheckStatus]
						,Src.[PickDetailUserDefined01]
						,Src.[PickDetailUserDefined02]
						,Src.[PickDetailUserDefined03]
						,Src.[PickDetailPickingNotes]
						,Src.[PickDetailReceiptID]
						,Src.[PickDetailCrossDocked]
						,Src.[PickDetailSequenceNumber]
						,Src.[PickDetailLabelType]
						,Src.[PickDetailCompanyPrefix]
						,Src.[PickDetailSerialReference]
						,Src.[PickDetailAddDateTime]
						,Src.[PickDetailAddUserCode]
						,Src.[PickDetailEditDateTime]
						,Src.[PickDetailEditUserCode]
						,Src.[PickDetailPalletID]
						,Src.[PickDetailUserDefinedText01]
						,Src.[PickDetailUserDefinedText02]
						,Src.[PickDetailUserDefinedText03]
						,Src.[PickDetailUserDefinedText04]
						,Src.[PickDetailUserDefinedText05]
						,Src.[PickDetailUserDefinedNumber01]
						,Src.[PickDetailUserDefinedNumber02]
						,Src.[PickDetailUserDefinedNumber03]
						,Src.[PickDetailUserDefinedNumber04]
						,Src.[PickDetailUserDefinedNumber05]
						,Src.[PickDetailIsManual]
						,Src.[PickDetailIsDamaged]
						,Src.[PickDetailUnitQuantity]
						,Src.[PickDetailConfirmedNotAvailable]
						,Src.[PickDetailDamagedBeforePicking]
						,Src.[PickDetailReceiptDetailLineNumber]
						,Src.[PickDetailPalletIDTarget]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDPickDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDPickDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM dbo.PickDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails OD WITH (NOLOCK) ON OD.OrderID = Src.[OrderID]
						AND OD.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.PickDetails Dest WITH (NOLOCK) ON Src.IDPickDetail = Dest.IDPickDetail
					WHERE Dest.[PickDetailEditDateTime] < Src.[PickDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[PickDetailCaseID] = Src.[PickDetailCaseID]
					,Dest.[PickDetailHeaderCode] = Src.[PickDetailHeaderCode]
					,Dest.[OrderID] = Src.[OrderID]
					,Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
					,Dest.[LotID] = Src.[LotID]
					,Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
					,Dest.[PickDetailUnitOfMeasure] = Src.[PickDetailUnitOfMeasure]
					,Dest.[PickDetailUnitOfMeasureQuantity] = Src.[PickDetailUnitOfMeasureQuantity]
					,Dest.[PickDetailQuantity] = Src.[PickDetailQuantity]
					,Dest.[PickDetailQuantityMoved] = Src.[PickDetailQuantityMoved]
					,Dest.[PickDetailStatus] = Src.[PickDetailStatus]
					,Dest.[PickDetailDropID] = Src.[PickDetailDropID]
					,Dest.[LocationID] = Src.[LocationID]
					,Dest.[StorageUnitID] = Src.[StorageUnitID]
					,Dest.[PackCode] = Src.[PackCode]
					,Dest.[PickDetailUpdateSource] = Src.[PickDetailUpdateSource]
					,Dest.[PickDetailCartonGroup] = Src.[PickDetailCartonGroup]
					,Dest.[PickDetailCartonType] = Src.[PickDetailCartonType]
					,Dest.[LocationIDTarget] = Src.[LocationIDTarget]
					,Dest.[PickDetailReplenish] = Src.[PickDetailReplenish]
					,Dest.[PickDetailReplenishZone] = Src.[PickDetailReplenishZone]
					,Dest.[PickDetailCartonize] = Src.[PickDetailCartonize]
					,Dest.[PickDetailPickMethod] = Src.[PickDetailPickMethod]
					,Dest.[PickDetailWaveCode] = Src.[PickDetailWaveCode]
					,Dest.[PickDetailEffectiveDateTime] = Src.[PickDetailEffectiveDateTime]
					,Dest.[PickDetailForteFlag] = Src.[PickDetailForteFlag]
					,Dest.[LocationIDSource] = Src.[LocationIDSource]
					,Dest.[PickDetailTrackingID] = Src.[PickDetailTrackingID]
					,Dest.[PickDetailFreightCharges] = Src.[PickDetailFreightCharges]
					,Dest.[PickDetailIntermodalVehicle] = Src.[PickDetailIntermodalVehicle]
					,Dest.[PickDetailLoadID] = Src.[PickDetailLoadID]
					,Dest.[PickDetailStopNumber] = Src.[PickDetailStopNumber]
					,Dest.[PickDetailDoor] = Src.[PickDetailDoor]
					,Dest.[PickDetailRoute] = Src.[PickDetailRoute]
					,Dest.[LocationIDSortation] = Src.[LocationIDSortation]
					,Dest.[PickDetailSortationStation] = Src.[PickDetailSortationStation]
					,Dest.[PickDetailBatchCartonID] = Src.[PickDetailBatchCartonID]
					,Dest.[PickDetailIsClosed] = Src.[PickDetailIsClosed]
					,Dest.[PickDetailQualityCheckStatus] = Src.[PickDetailQualityCheckStatus]
					,Dest.[PickDetailUserDefined01] = Src.[PickDetailUserDefined01]
					,Dest.[PickDetailUserDefined02] = Src.[PickDetailUserDefined02]
					,Dest.[PickDetailUserDefined03] = Src.[PickDetailUserDefined03]
					,Dest.[PickDetailPickingNotes] = Src.[PickDetailPickingNotes]
					,Dest.[PickDetailReceiptID] = Src.[PickDetailReceiptID]
					,Dest.[PickDetailCrossDocked] = Src.[PickDetailCrossDocked]
					,Dest.[PickDetailSequenceNumber] = Src.[PickDetailSequenceNumber]
					,Dest.[PickDetailLabelType] = Src.[PickDetailLabelType]
					,Dest.[PickDetailCompanyPrefix] = Src.[PickDetailCompanyPrefix]
					,Dest.[PickDetailSerialReference] = Src.[PickDetailSerialReference]
					,Dest.[PickDetailAddDateTime] = Src.[PickDetailAddDateTime]
					,Dest.[PickDetailAddUserCode] = Src.[PickDetailAddUserCode]
					,Dest.[PickDetailEditDateTime] = Src.[PickDetailEditDateTime]
					,Dest.[PickDetailEditUserCode] = Src.[PickDetailEditUserCode]
					,Dest.[PickDetailPalletID] = Src.[PickDetailPalletID]
					,Dest.[PickDetailUserDefinedText01] = Src.[PickDetailUserDefinedText01]
					,Dest.[PickDetailUserDefinedText02] = Src.[PickDetailUserDefinedText02]
					,Dest.[PickDetailUserDefinedText03] = Src.[PickDetailUserDefinedText03]
					,Dest.[PickDetailUserDefinedText04] = Src.[PickDetailUserDefinedText04]
					,Dest.[PickDetailUserDefinedText05] = Src.[PickDetailUserDefinedText05]
					,Dest.[PickDetailUserDefinedNumber01] = Src.[PickDetailUserDefinedNumber01]
					,Dest.[PickDetailUserDefinedNumber02] = Src.[PickDetailUserDefinedNumber02]
					,Dest.[PickDetailUserDefinedNumber03] = Src.[PickDetailUserDefinedNumber03]
					,Dest.[PickDetailUserDefinedNumber04] = Src.[PickDetailUserDefinedNumber04]
					,Dest.[PickDetailUserDefinedNumber05] = Src.[PickDetailUserDefinedNumber05]
					,Dest.[PickDetailIsManual] = Src.[PickDetailIsManual]
					,Dest.[PickDetailIsDamaged] = Src.[PickDetailIsDamaged]
					,Dest.[PickDetailUnitQuantity] = Src.[PickDetailUnitQuantity]
					,Dest.[PickDetailConfirmedNotAvailable] = Src.[PickDetailConfirmedNotAvailable]
					,Dest.[PickDetailDamagedBeforePicking] = Src.[PickDetailDamagedBeforePicking]
					,Dest.[PickDetailReceiptDetailLineNumber] = Src.[PickDetailReceiptDetailLineNumber]
					,Dest.[PickDetailPalletIDTarget] = Src.[PickDetailPalletIDTarget]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDPickDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDPickDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.PickDetails SRC WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails OD WITH (NOLOCK) ON OD.OrderID = Src.[OrderID]
					AND OD.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.PickDetails Dest ON Src.IDPickDetail = Dest.IDPickDetail
				WHERE Dest.[PickDetailEditDateTime] < Src.[PickDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.PickDetails SRC WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails OD WITH (NOLOCK) ON SRC.OrderID = OD.[OrderID]
						AND OD.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.PickDetails Dest WITH (NOLOCK) ON Src.IDPickDetail = Dest.IDPickDetail
					WHERE Dest.IDPickDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.PickDetails (
					[IDPickDetail]
					,[PickDetailCaseID]
					,[PickDetailHeaderCode]
					,[OrderID]
					,[OrderDetailLineNumber]
					,[LotID]
					,[AlternativeProductCode]
					,[PickDetailUnitOfMeasure]
					,[PickDetailUnitOfMeasureQuantity]
					,[PickDetailQuantity]
					,[PickDetailQuantityMoved]
					,[PickDetailStatus]
					,[PickDetailDropID]
					,[LocationID]
					,[StorageUnitID]
					,[PackCode]
					,[PickDetailUpdateSource]
					,[PickDetailCartonGroup]
					,[PickDetailCartonType]
					,[LocationIDTarget]
					,[PickDetailReplenish]
					,[PickDetailReplenishZone]
					,[PickDetailCartonize]
					,[PickDetailPickMethod]
					,[PickDetailWaveCode]
					,[PickDetailEffectiveDateTime]
					,[PickDetailForteFlag]
					,[LocationIDSource]
					,[PickDetailTrackingID]
					,[PickDetailFreightCharges]
					,[PickDetailIntermodalVehicle]
					,[PickDetailLoadID]
					,[PickDetailStopNumber]
					,[PickDetailDoor]
					,[PickDetailRoute]
					,[LocationIDSortation]
					,[PickDetailSortationStation]
					,[PickDetailBatchCartonID]
					,[PickDetailIsClosed]
					,[PickDetailQualityCheckStatus]
					,[PickDetailUserDefined01]
					,[PickDetailUserDefined02]
					,[PickDetailUserDefined03]
					,[PickDetailPickingNotes]
					,[PickDetailReceiptID]
					,[PickDetailCrossDocked]
					,[PickDetailSequenceNumber]
					,[PickDetailLabelType]
					,[PickDetailCompanyPrefix]
					,[PickDetailSerialReference]
					,[PickDetailAddDateTime]
					,[PickDetailAddUserCode]
					,[PickDetailEditDateTime]
					,[PickDetailEditUserCode]
					,[PickDetailPalletID]
					,[PickDetailUserDefinedText01]
					,[PickDetailUserDefinedText02]
					,[PickDetailUserDefinedText03]
					,[PickDetailUserDefinedText04]
					,[PickDetailUserDefinedText05]
					,[PickDetailUserDefinedNumber01]
					,[PickDetailUserDefinedNumber02]
					,[PickDetailUserDefinedNumber03]
					,[PickDetailUserDefinedNumber04]
					,[PickDetailUserDefinedNumber05]
					,[PickDetailIsManual]
					,[PickDetailIsDamaged]
					,[PickDetailUnitQuantity]
					,[PickDetailConfirmedNotAvailable]
					,[PickDetailDamagedBeforePicking]
					,[PickDetailReceiptDetailLineNumber]
					,[PickDetailPalletIDTarget]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDPickDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDPickDetail]
					,Src.[PickDetailCaseID]
					,Src.[PickDetailHeaderCode]
					,Src.[OrderID]
					,Src.[OrderDetailLineNumber]
					,Src.[LotID]
					,Src.[AlternativeProductCode]
					,Src.[PickDetailUnitOfMeasure]
					,Src.[PickDetailUnitOfMeasureQuantity]
					,Src.[PickDetailQuantity]
					,Src.[PickDetailQuantityMoved]
					,Src.[PickDetailStatus]
					,Src.[PickDetailDropID]
					,Src.[LocationID]
					,Src.[StorageUnitID]
					,Src.[PackCode]
					,Src.[PickDetailUpdateSource]
					,Src.[PickDetailCartonGroup]
					,Src.[PickDetailCartonType]
					,Src.[LocationIDTarget]
					,Src.[PickDetailReplenish]
					,Src.[PickDetailReplenishZone]
					,Src.[PickDetailCartonize]
					,Src.[PickDetailPickMethod]
					,Src.[PickDetailWaveCode]
					,Src.[PickDetailEffectiveDateTime]
					,Src.[PickDetailForteFlag]
					,Src.[LocationIDSource]
					,Src.[PickDetailTrackingID]
					,Src.[PickDetailFreightCharges]
					,Src.[PickDetailIntermodalVehicle]
					,Src.[PickDetailLoadID]
					,Src.[PickDetailStopNumber]
					,Src.[PickDetailDoor]
					,Src.[PickDetailRoute]
					,Src.[LocationIDSortation]
					,Src.[PickDetailSortationStation]
					,Src.[PickDetailBatchCartonID]
					,Src.[PickDetailIsClosed]
					,Src.[PickDetailQualityCheckStatus]
					,Src.[PickDetailUserDefined01]
					,Src.[PickDetailUserDefined02]
					,Src.[PickDetailUserDefined03]
					,Src.[PickDetailPickingNotes]
					,Src.[PickDetailReceiptID]
					,Src.[PickDetailCrossDocked]
					,Src.[PickDetailSequenceNumber]
					,Src.[PickDetailLabelType]
					,Src.[PickDetailCompanyPrefix]
					,Src.[PickDetailSerialReference]
					,Src.[PickDetailAddDateTime]
					,Src.[PickDetailAddUserCode]
					,Src.[PickDetailEditDateTime]
					,Src.[PickDetailEditUserCode]
					,Src.[PickDetailPalletID]
					,Src.[PickDetailUserDefinedText01]
					,Src.[PickDetailUserDefinedText02]
					,Src.[PickDetailUserDefinedText03]
					,Src.[PickDetailUserDefinedText04]
					,Src.[PickDetailUserDefinedText05]
					,Src.[PickDetailUserDefinedNumber01]
					,Src.[PickDetailUserDefinedNumber02]
					,Src.[PickDetailUserDefinedNumber03]
					,Src.[PickDetailUserDefinedNumber04]
					,Src.[PickDetailUserDefinedNumber05]
					,Src.[PickDetailIsManual]
					,Src.[PickDetailIsDamaged]
					,Src.[PickDetailUnitQuantity]
					,Src.[PickDetailConfirmedNotAvailable]
					,Src.[PickDetailDamagedBeforePicking]
					,Src.[PickDetailReceiptDetailLineNumber]
					,Src.[PickDetailPalletIDTarget]
				FROM [dbo].PickDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.OrderDetails OD WITH (NOLOCK) ON SRC.OrderID = OD.[OrderID]
					AND OD.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.PickDetails Dest WITH (NOLOCK) ON Src.IDPickDetail = Dest.IDPickDetail
				WHERE Dest.IDPickDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') PickDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `PickDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Loads
	SET @CurrentTableName = 'Loads';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Loads AS Dest
			USING (
				SELECT [IDLoad]
					,[LoadRouteID]
					,[LoadDoor]
					,[LoadStatusID]
					,[LoadDepartureDateTime]
					,[LoadCarrierID]
					,[LoadTrailerID]
					,[LoadTotalCube]
					,[LoadTotalWeight]
					,[LoadTotalUnits]
					,[LoadExpectedCube]
					,[LoadExpectedWeight]
					,[LoadExpectedUnits]
					,[LoadCost]
					,[LoadValue]
					,[LoadExternalID]
					,[LoadBeginLoadDateTime]
					,[LoadEndLoadDateTime]
					,[LoadWareHouseID]
					,[LoadLoadSequence]
					,[LoadAddDateTime]
					,[LoadAddUserCode]
					,[LoadEditDateTime]
					,[LoadEditUserCode]
				FROM dbo.Loads WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDLoad] = Src.[IDLoad])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[LoadRouteID] = Src.[LoadRouteID]
						,Dest.[LoadDoor] = Src.[LoadDoor]
						,Dest.[LoadStatusID] = Src.[LoadStatusID]
						,Dest.[LoadDepartureDateTime] = Src.[LoadDepartureDateTime]
						,Dest.[LoadCarrierID] = Src.[LoadCarrierID]
						,Dest.[LoadTrailerID] = Src.[LoadTrailerID]
						,Dest.[LoadTotalCube] = Src.[LoadTotalCube]
						,Dest.[LoadTotalWeight] = Src.[LoadTotalWeight]
						,Dest.[LoadTotalUnits] = Src.[LoadTotalUnits]
						,Dest.[LoadExpectedCube] = Src.[LoadExpectedCube]
						,Dest.[LoadExpectedWeight] = Src.[LoadExpectedWeight]
						,Dest.[LoadExpectedUnits] = Src.[LoadExpectedUnits]
						,Dest.[LoadCost] = Src.[LoadCost]
						,Dest.[LoadValue] = Src.[LoadValue]
						,Dest.[LoadExternalID] = Src.[LoadExternalID]
						,Dest.[LoadBeginLoadDateTime] = Src.[LoadBeginLoadDateTime]
						,Dest.[LoadEndLoadDateTime] = Src.[LoadEndLoadDateTime]
						,Dest.[LoadWareHouseID] = Src.[LoadWareHouseID]
						,Dest.[LoadLoadSequence] = Src.[LoadLoadSequence]
						,Dest.[LoadAddDateTime] = Src.[LoadAddDateTime]
						,Dest.[LoadAddUserCode] = Src.[LoadAddUserCode]
						,Dest.[LoadEditDateTime] = Src.[LoadEditDateTime]
						,Dest.[LoadEditUserCode] = Src.[LoadEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDLoad]
						,[LoadRouteID]
						,[LoadDoor]
						,[LoadStatusID]
						,[LoadDepartureDateTime]
						,[LoadCarrierID]
						,[LoadTrailerID]
						,[LoadTotalCube]
						,[LoadTotalWeight]
						,[LoadTotalUnits]
						,[LoadExpectedCube]
						,[LoadExpectedWeight]
						,[LoadExpectedUnits]
						,[LoadCost]
						,[LoadValue]
						,[LoadExternalID]
						,[LoadBeginLoadDateTime]
						,[LoadEndLoadDateTime]
						,[LoadWareHouseID]
						,[LoadLoadSequence]
						,[LoadAddDateTime]
						,[LoadAddUserCode]
						,[LoadEditDateTime]
						,[LoadEditUserCode]
						)
					VALUES (
						Src.[IDLoad]
						,Src.[LoadRouteID]
						,Src.[LoadDoor]
						,Src.[LoadStatusID]
						,Src.[LoadDepartureDateTime]
						,Src.[LoadCarrierID]
						,Src.[LoadTrailerID]
						,Src.[LoadTotalCube]
						,Src.[LoadTotalWeight]
						,Src.[LoadTotalUnits]
						,Src.[LoadExpectedCube]
						,Src.[LoadExpectedWeight]
						,Src.[LoadExpectedUnits]
						,Src.[LoadCost]
						,Src.[LoadValue]
						,Src.[LoadExternalID]
						,Src.[LoadBeginLoadDateTime]
						,Src.[LoadEndLoadDateTime]
						,Src.[LoadWareHouseID]
						,Src.[LoadLoadSequence]
						,Src.[LoadAddDateTime]
						,Src.[LoadAddUserCode]
						,Src.[LoadEditDateTime]
						,Src.[LoadEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDLoad] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDLoad] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Loads Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Loads Dest WITH (NOLOCK) ON Src.IDLoad = Dest.IDLoad
					WHERE Dest.[LoadEditDateTime] < Src.[LoadEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[LoadRouteID] = Src.[LoadRouteID]
					,Dest.[LoadDoor] = Src.[LoadDoor]
					,Dest.[LoadStatusID] = Src.[LoadStatusID]
					,Dest.[LoadDepartureDateTime] = Src.[LoadDepartureDateTime]
					,Dest.[LoadCarrierID] = Src.[LoadCarrierID]
					,Dest.[LoadTrailerID] = Src.[LoadTrailerID]
					,Dest.[LoadTotalCube] = Src.[LoadTotalCube]
					,Dest.[LoadTotalWeight] = Src.[LoadTotalWeight]
					,Dest.[LoadTotalUnits] = Src.[LoadTotalUnits]
					,Dest.[LoadExpectedCube] = Src.[LoadExpectedCube]
					,Dest.[LoadExpectedWeight] = Src.[LoadExpectedWeight]
					,Dest.[LoadExpectedUnits] = Src.[LoadExpectedUnits]
					,Dest.[LoadCost] = Src.[LoadCost]
					,Dest.[LoadValue] = Src.[LoadValue]
					,Dest.[LoadExternalID] = Src.[LoadExternalID]
					,Dest.[LoadBeginLoadDateTime] = Src.[LoadBeginLoadDateTime]
					,Dest.[LoadEndLoadDateTime] = Src.[LoadEndLoadDateTime]
					,Dest.[LoadWareHouseID] = Src.[LoadWareHouseID]
					,Dest.[LoadLoadSequence] = Src.[LoadLoadSequence]
					,Dest.[LoadAddDateTime] = Src.[LoadAddDateTime]
					,Dest.[LoadAddUserCode] = Src.[LoadAddUserCode]
					,Dest.[LoadEditDateTime] = Src.[LoadEditDateTime]
					,Dest.[LoadEditUserCode] = Src.[LoadEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDLoad AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDLoad AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Loads Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Loads Dest ON Src.IDLoad = Dest.IDLoad
				WHERE Dest.[LoadEditDateTime] < Src.[LoadEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Loads Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Loads Dest WITH (NOLOCK) ON Src.IDLoad = Dest.IDLoad
					WHERE Dest.IDLoad IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Loads (
					[IDLoad]
					,[LoadRouteID]
					,[LoadDoor]
					,[LoadStatusID]
					,[LoadDepartureDateTime]
					,[LoadCarrierID]
					,[LoadTrailerID]
					,[LoadTotalCube]
					,[LoadTotalWeight]
					,[LoadTotalUnits]
					,[LoadExpectedCube]
					,[LoadExpectedWeight]
					,[LoadExpectedUnits]
					,[LoadCost]
					,[LoadValue]
					,[LoadExternalID]
					,[LoadBeginLoadDateTime]
					,[LoadEndLoadDateTime]
					,[LoadWareHouseID]
					,[LoadLoadSequence]
					,[LoadAddDateTime]
					,[LoadAddUserCode]
					,[LoadEditDateTime]
					,[LoadEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDLoad AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDLoad]
					,Src.[LoadRouteID]
					,Src.[LoadDoor]
					,Src.[LoadStatusID]
					,Src.[LoadDepartureDateTime]
					,Src.[LoadCarrierID]
					,Src.[LoadTrailerID]
					,Src.[LoadTotalCube]
					,Src.[LoadTotalWeight]
					,Src.[LoadTotalUnits]
					,Src.[LoadExpectedCube]
					,Src.[LoadExpectedWeight]
					,Src.[LoadExpectedUnits]
					,Src.[LoadCost]
					,Src.[LoadValue]
					,Src.[LoadExternalID]
					,Src.[LoadBeginLoadDateTime]
					,Src.[LoadEndLoadDateTime]
					,Src.[LoadWareHouseID]
					,Src.[LoadLoadSequence]
					,Src.[LoadAddDateTime]
					,Src.[LoadAddUserCode]
					,Src.[LoadEditDateTime]
					,Src.[LoadEditUserCode]
				FROM [dbo].Loads Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Loads Dest WITH (NOLOCK) ON Src.IDLoad = Dest.IDLoad
				WHERE Dest.IDLoad IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Loads: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Loads` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--LoadStops
	SET @CurrentTableName = 'LoadStops';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStops AS Dest
			USING (
				SELECT [IDLoadStop]
					,[LoadID]
					,[LoadStopStopNumber]
					,[LoadStopStatus]
					,[LoadStopAddDateTime]
					,[LoadStopAddUserCode]
					,[LoadStopEditDateTime]
					,[LoadStopEditUserCode]
				FROM dbo.LoadStops WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDLoadStop] = Src.[IDLoadStop])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[LoadID] = Src.[LoadID]
						,Dest.[LoadStopStopNumber] = Src.[LoadStopStopNumber]
						,Dest.[LoadStopStatus] = Src.[LoadStopStatus]
						,Dest.[LoadStopAddDateTime] = Src.[LoadStopAddDateTime]
						,Dest.[LoadStopAddUserCode] = Src.[LoadStopAddUserCode]
						,Dest.[LoadStopEditDateTime] = Src.[LoadStopEditDateTime]
						,Dest.[LoadStopEditUserCode] = Src.[LoadStopEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDLoadStop]
						,[LoadID]
						,[LoadStopStopNumber]
						,[LoadStopStatus]
						,[LoadStopAddDateTime]
						,[LoadStopAddUserCode]
						,[LoadStopEditDateTime]
						,[LoadStopEditUserCode]
						)
					VALUES (
						Src.[IDLoadStop]
						,Src.[LoadID]
						,Src.[LoadStopStopNumber]
						,Src.[LoadStopStatus]
						,Src.[LoadStopAddDateTime]
						,Src.[LoadStopAddUserCode]
						,Src.[LoadStopEditDateTime]
						,Src.[LoadStopEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDLoadStop] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDLoadStop] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].LoadStops Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStops Dest WITH (NOLOCK) ON Src.IDLoadStop = Dest.IDLoadStop
					WHERE Dest.[LoadStopEditDateTime] < Src.[LoadStopEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[LoadID] = Src.[LoadID]
					,Dest.[LoadStopStopNumber] = Src.[LoadStopStopNumber]
					,Dest.[LoadStopStatus] = Src.[LoadStopStatus]
					,Dest.[LoadStopAddDateTime] = Src.[LoadStopAddDateTime]
					,Dest.[LoadStopAddUserCode] = Src.[LoadStopAddUserCode]
					,Dest.[LoadStopEditDateTime] = Src.[LoadStopEditDateTime]
					,Dest.[LoadStopEditUserCode] = Src.[LoadStopEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDLoadStop AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDLoadStop AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].LoadStops Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStops Dest ON Src.IDLoadStop = Dest.IDLoadStop
				WHERE Dest.[LoadStopEditDateTime] < Src.[LoadStopEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].LoadStops Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStops Dest WITH (NOLOCK) ON Src.IDLoadStop = Dest.IDLoadStop
					WHERE Dest.IDLoadStop IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStops (
					[IDLoadStop]
					,[LoadID]
					,[LoadStopStopNumber]
					,[LoadStopStatus]
					,[LoadStopAddDateTime]
					,[LoadStopAddUserCode]
					,[LoadStopEditDateTime]
					,[LoadStopEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDLoadStop AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDLoadStop]
					,Src.[LoadID]
					,Src.[LoadStopStopNumber]
					,Src.[LoadStopStatus]
					,Src.[LoadStopAddDateTime]
					,Src.[LoadStopAddUserCode]
					,Src.[LoadStopEditDateTime]
					,Src.[LoadStopEditUserCode]
				FROM [dbo].LoadStops Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadStops Dest WITH (NOLOCK) ON Src.IDLoadStop = Dest.IDLoadStop
				WHERE Dest.IDLoadStop IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') LoadStops: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `LoadStops` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--LoadOrderDetails
	SET @CurrentTableName = 'LoadOrderDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadOrderDetails AS Dest
			USING (
				SELECT [IDLoadOrderDetail]
					,[LoadStopID]
					,[CompanyIDStorer]
					,[OrderID]
					,[LoadOrderDetailTransshipmentContainerID]
					,[CompanyIDCustomer]
					,[LoadOrderDetailOutUnits]
					,[LoadOrderDetailOutUnitCube]
					,[LoadOrderDetailOutUnitWeight]
					,[LoadOrderDetailExternalShipmentID]
					,[LoadOrderDetailExternalOrderID]
					,[LoadOrderDetailTotalCost]
					,[LoadOrderDetailTotalValue]
					,[LoadOrderDetailOrderHandlingType]
					,[LoadOrderDetailFlowOrderID]
					,[LoadOrderDetailCaseID]
					,[LoadOrderDetailOrignalAdvancedShippingNoticeID]
					,[LoadOrderDetailAddDateTime]
					,[LoadOrderDetailAddUserCode]
					,[LoadOrderDetailEditDateTime]
					,[LoadOrderDetailEditUserCode]
				FROM dbo.LoadOrderDetails WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDLoadOrderDetail] = Src.[IDLoadOrderDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[LoadStopID] = Src.[LoadStopID]
						,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[OrderID] = Src.[OrderID]
						,Dest.[LoadOrderDetailTransshipmentContainerID] = Src.[LoadOrderDetailTransshipmentContainerID]
						,Dest.[CompanyIDCustomer] = Src.[CompanyIDCustomer]
						,Dest.[LoadOrderDetailOutUnits] = Src.[LoadOrderDetailOutUnits]
						,Dest.[LoadOrderDetailOutUnitCube] = Src.[LoadOrderDetailOutUnitCube]
						,Dest.[LoadOrderDetailOutUnitWeight] = Src.[LoadOrderDetailOutUnitWeight]
						,Dest.[LoadOrderDetailExternalShipmentID] = Src.[LoadOrderDetailExternalShipmentID]
						,Dest.[LoadOrderDetailExternalOrderID] = Src.[LoadOrderDetailExternalOrderID]
						,Dest.[LoadOrderDetailTotalCost] = Src.[LoadOrderDetailTotalCost]
						,Dest.[LoadOrderDetailTotalValue] = Src.[LoadOrderDetailTotalValue]
						,Dest.[LoadOrderDetailOrderHandlingType] = Src.[LoadOrderDetailOrderHandlingType]
						,Dest.[LoadOrderDetailFlowOrderID] = Src.[LoadOrderDetailFlowOrderID]
						,Dest.[LoadOrderDetailCaseID] = Src.[LoadOrderDetailCaseID]
						,Dest.[LoadOrderDetailOrignalAdvancedShippingNoticeID] = Src.[LoadOrderDetailOrignalAdvancedShippingNoticeID]
						,Dest.[LoadOrderDetailAddDateTime] = Src.[LoadOrderDetailAddDateTime]
						,Dest.[LoadOrderDetailAddUserCode] = Src.[LoadOrderDetailAddUserCode]
						,Dest.[LoadOrderDetailEditDateTime] = Src.[LoadOrderDetailEditDateTime]
						,Dest.[LoadOrderDetailEditUserCode] = Src.[LoadOrderDetailEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDLoadOrderDetail]
						,[LoadStopID]
						,[CompanyIDStorer]
						,[OrderID]
						,[LoadOrderDetailTransshipmentContainerID]
						,[CompanyIDCustomer]
						,[LoadOrderDetailOutUnits]
						,[LoadOrderDetailOutUnitCube]
						,[LoadOrderDetailOutUnitWeight]
						,[LoadOrderDetailExternalShipmentID]
						,[LoadOrderDetailExternalOrderID]
						,[LoadOrderDetailTotalCost]
						,[LoadOrderDetailTotalValue]
						,[LoadOrderDetailOrderHandlingType]
						,[LoadOrderDetailFlowOrderID]
						,[LoadOrderDetailCaseID]
						,[LoadOrderDetailOrignalAdvancedShippingNoticeID]
						,[LoadOrderDetailAddDateTime]
						,[LoadOrderDetailAddUserCode]
						,[LoadOrderDetailEditDateTime]
						,[LoadOrderDetailEditUserCode]
						)
					VALUES (
						Src.[IDLoadOrderDetail]
						,Src.[LoadStopID]
						,Src.[CompanyIDStorer]
						,Src.[OrderID]
						,Src.[LoadOrderDetailTransshipmentContainerID]
						,Src.[CompanyIDCustomer]
						,Src.[LoadOrderDetailOutUnits]
						,Src.[LoadOrderDetailOutUnitCube]
						,Src.[LoadOrderDetailOutUnitWeight]
						,Src.[LoadOrderDetailExternalShipmentID]
						,Src.[LoadOrderDetailExternalOrderID]
						,Src.[LoadOrderDetailTotalCost]
						,Src.[LoadOrderDetailTotalValue]
						,Src.[LoadOrderDetailOrderHandlingType]
						,Src.[LoadOrderDetailFlowOrderID]
						,Src.[LoadOrderDetailCaseID]
						,Src.[LoadOrderDetailOrignalAdvancedShippingNoticeID]
						,Src.[LoadOrderDetailAddDateTime]
						,Src.[LoadOrderDetailAddUserCode]
						,Src.[LoadOrderDetailEditDateTime]
						,Src.[LoadOrderDetailEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDLoadOrderDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDLoadOrderDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].LoadOrderDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadOrderDetails Dest WITH (NOLOCK) ON Src.IDLoadOrderDetail = Dest.IDLoadOrderDetail
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON Dest.OrderID = O.IDOrder
					WHERE Dest.LoadOrderDetailEditDateTime < Src.LoadOrderDetailEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[LoadStopID] = Src.[LoadStopID]
					,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					,Dest.[OrderID] = Src.[OrderID]
					,Dest.[LoadOrderDetailTransshipmentContainerID] = Src.[LoadOrderDetailTransshipmentContainerID]
					,Dest.[CompanyIDCustomer] = Src.[CompanyIDCustomer]
					,Dest.[LoadOrderDetailOutUnits] = Src.[LoadOrderDetailOutUnits]
					,Dest.[LoadOrderDetailOutUnitCube] = Src.[LoadOrderDetailOutUnitCube]
					,Dest.[LoadOrderDetailOutUnitWeight] = Src.[LoadOrderDetailOutUnitWeight]
					,Dest.[LoadOrderDetailExternalShipmentID] = Src.[LoadOrderDetailExternalShipmentID]
					,Dest.[LoadOrderDetailExternalOrderID] = Src.[LoadOrderDetailExternalOrderID]
					,Dest.[LoadOrderDetailTotalCost] = Src.[LoadOrderDetailTotalCost]
					,Dest.[LoadOrderDetailTotalValue] = Src.[LoadOrderDetailTotalValue]
					,Dest.[LoadOrderDetailOrderHandlingType] = Src.[LoadOrderDetailOrderHandlingType]
					,Dest.[LoadOrderDetailFlowOrderID] = Src.[LoadOrderDetailFlowOrderID]
					,Dest.[LoadOrderDetailCaseID] = Src.[LoadOrderDetailCaseID]
					,Dest.[LoadOrderDetailOrignalAdvancedShippingNoticeID] = Src.[LoadOrderDetailOrignalAdvancedShippingNoticeID]
					,Dest.[LoadOrderDetailAddDateTime] = Src.[LoadOrderDetailAddDateTime]
					,Dest.[LoadOrderDetailAddUserCode] = Src.[LoadOrderDetailAddUserCode]
					,Dest.[LoadOrderDetailEditDateTime] = Src.[LoadOrderDetailEditDateTime]
					,Dest.[LoadOrderDetailEditUserCode] = Src.[LoadOrderDetailEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDLoadOrderDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDLoadOrderDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].LoadOrderDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadOrderDetails Dest ON Src.IDLoadOrderDetail = Dest.IDLoadOrderDetail
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON Dest.OrderID = O.IDOrder
				WHERE Dest.LoadOrderDetailEditDateTime < Src.LoadOrderDetailEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].LoadOrderDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON Src.OrderID = O.IDOrder
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadOrderDetails Dest WITH (NOLOCK) ON Src.IDLoadOrderDetail = Dest.IDLoadOrderDetail
					WHERE Dest.IDLoadOrderDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadOrderDetails (
					[IDLoadOrderDetail]
					,[LoadStopID]
					,[CompanyIDStorer]
					,[OrderID]
					,[LoadOrderDetailTransshipmentContainerID]
					,[CompanyIDCustomer]
					,[LoadOrderDetailOutUnits]
					,[LoadOrderDetailOutUnitCube]
					,[LoadOrderDetailOutUnitWeight]
					,[LoadOrderDetailExternalShipmentID]
					,[LoadOrderDetailExternalOrderID]
					,[LoadOrderDetailTotalCost]
					,[LoadOrderDetailTotalValue]
					,[LoadOrderDetailOrderHandlingType]
					,[LoadOrderDetailFlowOrderID]
					,[LoadOrderDetailCaseID]
					,[LoadOrderDetailOrignalAdvancedShippingNoticeID]
					,[LoadOrderDetailAddDateTime]
					,[LoadOrderDetailAddUserCode]
					,[LoadOrderDetailEditDateTime]
					,[LoadOrderDetailEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDLoadOrderDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDLoadOrderDetail]
					,Src.[LoadStopID]
					,Src.[CompanyIDStorer]
					,Src.[OrderID]
					,Src.[LoadOrderDetailTransshipmentContainerID]
					,Src.[CompanyIDCustomer]
					,Src.[LoadOrderDetailOutUnits]
					,Src.[LoadOrderDetailOutUnitCube]
					,Src.[LoadOrderDetailOutUnitWeight]
					,Src.[LoadOrderDetailExternalShipmentID]
					,Src.[LoadOrderDetailExternalOrderID]
					,Src.[LoadOrderDetailTotalCost]
					,Src.[LoadOrderDetailTotalValue]
					,Src.[LoadOrderDetailOrderHandlingType]
					,Src.[LoadOrderDetailFlowOrderID]
					,Src.[LoadOrderDetailCaseID]
					,Src.[LoadOrderDetailOrignalAdvancedShippingNoticeID]
					,Src.[LoadOrderDetailAddDateTime]
					,Src.[LoadOrderDetailAddUserCode]
					,Src.[LoadOrderDetailEditDateTime]
					,Src.[LoadOrderDetailEditUserCode]
				FROM [dbo].LoadOrderDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Orders O WITH (NOLOCK) ON Src.OrderID = O.IDOrder
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LoadOrderDetails Dest WITH (NOLOCK) ON Src.IDLoadOrderDetail = Dest.IDLoadOrderDetail
				WHERE Dest.IDLoadOrderDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') LoadOrderDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `LoadOrderDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----b) Deletion
	-- 06 Interface Documents
	----a) Archival
	SET @ArchiveAfterDays = NULL;
	SET @MaxDateToArchiveData = NULL;
	SET @CountOfRowsAvailableForArchival = NULL;
	SET @CurrentTableName = 'InterfaceDocuments';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		SET @InterfaceDocumentArchiveAfterDays = ISNULL((
					SELECT CAST(FieldValue AS FLOAT)
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'InterfaceDocumentArchiveAfterDays'
					), 365);
		SET @MaxDateToArchiveData = DATEADD(day, - 1 * @InterfaceDocumentArchiveAfterDays, GETUTCDATE());
		SET @CountOfRowsAvailableForArchival = 0;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceDocuments AS Dest
			USING (
				SELECT [InterfaceDocumentInterfaceCode]
					,[InterfaceDocumentReference]
					,[InterfaceDocumentStatus]
					,[InterfaceDocumentRunID]
					,[InterfaceDocumentType]
					,[InterfaceDocumentWasSent]
					,[InterfaceDocumentFileName]
					,[InterfaceDocumentAddDateTime]
					,[InterfaceDocumentAddUserCode]
					,[InterfaceDocumentEditDateTime]
					,[InterfaceDocumentEditUserCode]
					,[InterfaceDocumentIMSSource]
					,[InterfaceDocumentIMSCategory]
					,[InterfaceDocumentInfoText01]
					,[InterfaceDocumentInfoText02]
					,[InterfaceDocumentInfoText03]
					,[InterfaceDocumentInfoText04]
					,[InterfaceDocumentInfoText05]
					,[InterfaceDocumentInfoDate01]
					,[InterfaceDocumentInfoDate02]
					,[InterfaceDocumentInfoDate03]
					,[InterfaceDocumentInfoDate04]
					,[InterfaceDocumentInfoDate05]
					,[InterfaceDocumentCountryCode]
					,[InterfaceDocumentErrorMessage]
				FROM dbo.InterfaceDocuments WITH (NOLOCK)
				WHERE [InterfaceDocumentType] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@InterfaceDocumentTypesForArchival, ',')
						)
					AND [InterfaceDocumentEditDateTime] <= @MaxDateToArchiveData
				) AS Src
				ON (
						Dest.[InterfaceDocumentInterfaceCode] = Src.[InterfaceDocumentInterfaceCode]
						AND Dest.[InterfaceDocumentReference] = Src.[InterfaceDocumentReference]
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[InterfaceDocumentStatus] = Src.[InterfaceDocumentStatus]
						,Dest.[InterfaceDocumentRunID] = Src.[InterfaceDocumentRunID]
						,Dest.[InterfaceDocumentType] = Src.[InterfaceDocumentType]
						,Dest.[InterfaceDocumentWasSent] = Src.[InterfaceDocumentWasSent]
						,Dest.[InterfaceDocumentFileName] = Src.[InterfaceDocumentFileName]
						,Dest.[InterfaceDocumentAddDateTime] = Src.[InterfaceDocumentAddDateTime]
						,Dest.[InterfaceDocumentAddUserCode] = Src.[InterfaceDocumentAddUserCode]
						,Dest.[InterfaceDocumentEditDateTime] = Src.[InterfaceDocumentEditDateTime]
						,Dest.[InterfaceDocumentEditUserCode] = Src.[InterfaceDocumentEditUserCode]
						,Dest.[InterfaceDocumentIMSSource] = Src.[InterfaceDocumentIMSSource]
						,Dest.[InterfaceDocumentIMSCategory] = Src.[InterfaceDocumentIMSCategory]
						,Dest.[InterfaceDocumentInfoText01] = Src.[InterfaceDocumentInfoText01]
						,Dest.[InterfaceDocumentInfoText02] = Src.[InterfaceDocumentInfoText02]
						,Dest.[InterfaceDocumentInfoText03] = Src.[InterfaceDocumentInfoText03]
						,Dest.[InterfaceDocumentInfoText04] = Src.[InterfaceDocumentInfoText04]
						,Dest.[InterfaceDocumentInfoText05] = Src.[InterfaceDocumentInfoText05]
						,Dest.[InterfaceDocumentInfoDate01] = Src.[InterfaceDocumentInfoDate01]
						,Dest.[InterfaceDocumentInfoDate02] = Src.[InterfaceDocumentInfoDate02]
						,Dest.[InterfaceDocumentInfoDate03] = Src.[InterfaceDocumentInfoDate03]
						,Dest.[InterfaceDocumentInfoDate04] = Src.[InterfaceDocumentInfoDate04]
						,Dest.[InterfaceDocumentInfoDate05] = Src.[InterfaceDocumentInfoDate05]
						,Dest.[InterfaceDocumentCountryCode] = Src.[InterfaceDocumentCountryCode]
						,Dest.[InterfaceDocumentErrorMessage] = Src.[InterfaceDocumentErrorMessage]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[InterfaceDocumentInterfaceCode]
						,[InterfaceDocumentReference]
						,[InterfaceDocumentStatus]
						,[InterfaceDocumentRunID]
						,[InterfaceDocumentType]
						,[InterfaceDocumentWasSent]
						,[InterfaceDocumentFileName]
						,[InterfaceDocumentAddDateTime]
						,[InterfaceDocumentAddUserCode]
						,[InterfaceDocumentEditDateTime]
						,[InterfaceDocumentEditUserCode]
						,[InterfaceDocumentIMSSource]
						,[InterfaceDocumentIMSCategory]
						,[InterfaceDocumentInfoText01]
						,[InterfaceDocumentInfoText02]
						,[InterfaceDocumentInfoText03]
						,[InterfaceDocumentInfoText04]
						,[InterfaceDocumentInfoText05]
						,[InterfaceDocumentInfoDate01]
						,[InterfaceDocumentInfoDate02]
						,[InterfaceDocumentInfoDate03]
						,[InterfaceDocumentInfoDate04]
						,[InterfaceDocumentInfoDate05]
						,[InterfaceDocumentCountryCode]
						,[InterfaceDocumentErrorMessage]
						)
					VALUES (
						Src.[InterfaceDocumentInterfaceCode]
						,Src.[InterfaceDocumentReference]
						,Src.[InterfaceDocumentStatus]
						,Src.[InterfaceDocumentRunID]
						,Src.[InterfaceDocumentType]
						,Src.[InterfaceDocumentWasSent]
						,Src.[InterfaceDocumentFileName]
						,Src.[InterfaceDocumentAddDateTime]
						,Src.[InterfaceDocumentAddUserCode]
						,Src.[InterfaceDocumentEditDateTime]
						,Src.[InterfaceDocumentEditUserCode]
						,Src.[InterfaceDocumentIMSSource]
						,Src.[InterfaceDocumentIMSCategory]
						,Src.[InterfaceDocumentInfoText01]
						,Src.[InterfaceDocumentInfoText02]
						,Src.[InterfaceDocumentInfoText03]
						,Src.[InterfaceDocumentInfoText04]
						,Src.[InterfaceDocumentInfoText05]
						,Src.[InterfaceDocumentInfoDate01]
						,Src.[InterfaceDocumentInfoDate02]
						,Src.[InterfaceDocumentInfoDate03]
						,Src.[InterfaceDocumentInfoDate04]
						,Src.[InterfaceDocumentInfoDate05]
						,Src.[InterfaceDocumentCountryCode]
						,Src.[InterfaceDocumentErrorMessage]
						);
					*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].InterfaceDocuments Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceDocuments Dest WITH (NOLOCK) ON Dest.[InterfaceDocumentInterfaceCode] = Src.[InterfaceDocumentInterfaceCode]
						AND Dest.[InterfaceDocumentReference] = Src.[InterfaceDocumentReference]
					WHERE Dest.[InterfaceDocumentEditDateTime] < Src.[InterfaceDocumentEditDateTime]
						AND Src.[InterfaceDocumentType] IN (
							SELECT LTRIM(RTRIM(Value))
							FROM string_split(@InterfaceDocumentTypesForArchival, ',')
							)
						AND Src.[InterfaceDocumentEditDateTime] <= @MaxDateToArchiveData
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[InterfaceDocumentStatus] = Src.[InterfaceDocumentStatus]
					,Dest.[InterfaceDocumentRunID] = Src.[InterfaceDocumentRunID]
					,Dest.[InterfaceDocumentType] = Src.[InterfaceDocumentType]
					,Dest.[InterfaceDocumentWasSent] = Src.[InterfaceDocumentWasSent]
					,Dest.[InterfaceDocumentFileName] = Src.[InterfaceDocumentFileName]
					,Dest.[InterfaceDocumentAddDateTime] = Src.[InterfaceDocumentAddDateTime]
					,Dest.[InterfaceDocumentAddUserCode] = Src.[InterfaceDocumentAddUserCode]
					,Dest.[InterfaceDocumentEditDateTime] = Src.[InterfaceDocumentEditDateTime]
					,Dest.[InterfaceDocumentEditUserCode] = Src.[InterfaceDocumentEditUserCode]
					,Dest.[InterfaceDocumentIMSSource] = Src.[InterfaceDocumentIMSSource]
					,Dest.[InterfaceDocumentIMSCategory] = Src.[InterfaceDocumentIMSCategory]
					,Dest.[InterfaceDocumentInfoText01] = Src.[InterfaceDocumentInfoText01]
					,Dest.[InterfaceDocumentInfoText02] = Src.[InterfaceDocumentInfoText02]
					,Dest.[InterfaceDocumentInfoText03] = Src.[InterfaceDocumentInfoText03]
					,Dest.[InterfaceDocumentInfoText04] = Src.[InterfaceDocumentInfoText04]
					,Dest.[InterfaceDocumentInfoText05] = Src.[InterfaceDocumentInfoText05]
					,Dest.[InterfaceDocumentInfoDate01] = Src.[InterfaceDocumentInfoDate01]
					,Dest.[InterfaceDocumentInfoDate02] = Src.[InterfaceDocumentInfoDate02]
					,Dest.[InterfaceDocumentInfoDate03] = Src.[InterfaceDocumentInfoDate03]
					,Dest.[InterfaceDocumentInfoDate04] = Src.[InterfaceDocumentInfoDate04]
					,Dest.[InterfaceDocumentInfoDate05] = Src.[InterfaceDocumentInfoDate05]
					,Dest.[InterfaceDocumentCountryCode] = Src.[InterfaceDocumentCountryCode]
					,Dest.[InterfaceDocumentErrorMessage] = Src.[InterfaceDocumentErrorMessage]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[InterfaceDocumentInterfaceCode] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[InterfaceDocumentInterfaceCode] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].InterfaceDocuments Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceDocuments Dest ON Dest.[InterfaceDocumentInterfaceCode] = Src.[InterfaceDocumentInterfaceCode]
					AND Dest.[InterfaceDocumentReference] = Src.[InterfaceDocumentReference]
				WHERE Dest.[InterfaceDocumentEditDateTime] < Src.[InterfaceDocumentEditDateTime]
					AND Src.[InterfaceDocumentType] IN (
						SELECT LTRIM(RTRIM(Value))
						FROM string_split(@InterfaceDocumentTypesForArchival, ',')
						)
					AND Src.[InterfaceDocumentEditDateTime] <= @MaxDateToArchiveData;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].InterfaceDocuments Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceDocuments Dest WITH (NOLOCK) ON Dest.[InterfaceDocumentInterfaceCode] = Src.[InterfaceDocumentInterfaceCode]
						AND Dest.[InterfaceDocumentReference] = Src.[InterfaceDocumentReference]
					WHERE Dest.[InterfaceDocumentInterfaceCode] IS NULL
						AND Dest.[InterfaceDocumentReference] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceDocuments (
					[InterfaceDocumentInterfaceCode]
					,[InterfaceDocumentReference]
					,[InterfaceDocumentStatus]
					,[InterfaceDocumentRunID]
					,[InterfaceDocumentType]
					,[InterfaceDocumentWasSent]
					,[InterfaceDocumentFileName]
					,[InterfaceDocumentAddDateTime]
					,[InterfaceDocumentAddUserCode]
					,[InterfaceDocumentEditDateTime]
					,[InterfaceDocumentEditUserCode]
					,[InterfaceDocumentIMSSource]
					,[InterfaceDocumentIMSCategory]
					,[InterfaceDocumentInfoText01]
					,[InterfaceDocumentInfoText02]
					,[InterfaceDocumentInfoText03]
					,[InterfaceDocumentInfoText04]
					,[InterfaceDocumentInfoText05]
					,[InterfaceDocumentInfoDate01]
					,[InterfaceDocumentInfoDate02]
					,[InterfaceDocumentInfoDate03]
					,[InterfaceDocumentInfoDate04]
					,[InterfaceDocumentInfoDate05]
					,[InterfaceDocumentCountryCode]
					,[InterfaceDocumentErrorMessage]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[InterfaceDocumentInterfaceCode] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[InterfaceDocumentInterfaceCode]
					,Src.[InterfaceDocumentReference]
					,Src.[InterfaceDocumentStatus]
					,Src.[InterfaceDocumentRunID]
					,Src.[InterfaceDocumentType]
					,Src.[InterfaceDocumentWasSent]
					,Src.[InterfaceDocumentFileName]
					,Src.[InterfaceDocumentAddDateTime]
					,Src.[InterfaceDocumentAddUserCode]
					,Src.[InterfaceDocumentEditDateTime]
					,Src.[InterfaceDocumentEditUserCode]
					,Src.[InterfaceDocumentIMSSource]
					,Src.[InterfaceDocumentIMSCategory]
					,Src.[InterfaceDocumentInfoText01]
					,Src.[InterfaceDocumentInfoText02]
					,Src.[InterfaceDocumentInfoText03]
					,Src.[InterfaceDocumentInfoText04]
					,Src.[InterfaceDocumentInfoText05]
					,Src.[InterfaceDocumentInfoDate01]
					,Src.[InterfaceDocumentInfoDate02]
					,Src.[InterfaceDocumentInfoDate03]
					,Src.[InterfaceDocumentInfoDate04]
					,Src.[InterfaceDocumentInfoDate05]
					,Src.[InterfaceDocumentCountryCode]
					,Src.[InterfaceDocumentErrorMessage]
				FROM [dbo].InterfaceDocuments Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceDocuments Dest WITH (NOLOCK) ON Dest.[InterfaceDocumentInterfaceCode] = Src.[InterfaceDocumentInterfaceCode]
					AND Dest.[InterfaceDocumentReference] = Src.[InterfaceDocumentReference]
				WHERE Dest.[InterfaceDocumentInterfaceCode] IS NULL
					AND Dest.[InterfaceDocumentReference] IS NULL;
			END;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `InterfaceDocuments` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	-- 07 Tasks
	----a) Archival
	--TaskCategories
	SET @CurrentTableName = 'TaskCategories';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories AS Dest
			USING (
				SELECT [IDTaskCategory]
					,[TaskCategoryAddDateTime]
					,[TaskCategoryEditDateTime]
					,[TaskCategoryAddUserCode]
					,[TaskCategoryEditUserCode]
					,[TaskCategoryName]
				FROM dbo.TaskCategories WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDTaskCategory] = Src.[IDTaskCategory])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[TaskCategoryAddDateTime] = Src.[TaskCategoryAddDateTime]
						,Dest.[TaskCategoryEditDateTime] = Src.[TaskCategoryEditDateTime]
						,Dest.[TaskCategoryAddUserCode] = Src.[TaskCategoryAddUserCode]
						,Dest.[TaskCategoryEditUserCode] = Src.[TaskCategoryEditUserCode]
						,Dest.[TaskCategoryName] = Src.[TaskCategoryName]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDTaskCategory]
						,[TaskCategoryAddDateTime]
						,[TaskCategoryEditDateTime]
						,[TaskCategoryAddUserCode]
						,[TaskCategoryEditUserCode]
						,[TaskCategoryName]
						)
					VALUES (
						Src.[IDTaskCategory]
						,Src.[TaskCategoryAddDateTime]
						,Src.[TaskCategoryEditDateTime]
						,Src.[TaskCategoryAddUserCode]
						,Src.[TaskCategoryEditUserCode]
						,Src.[TaskCategoryName]
						);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].TaskCategories Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest WITH (NOLOCK) ON Src.IDTaskCategory = Dest.IDTaskCategory
					WHERE Dest.TaskCategoryEditDateTime < Src.TaskCategoryEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[TaskCategoryAddDateTime] = Src.[TaskCategoryAddDateTime]
					,Dest.[TaskCategoryEditDateTime] = Src.[TaskCategoryEditDateTime]
					,Dest.[TaskCategoryAddUserCode] = Src.[TaskCategoryAddUserCode]
					,Dest.[TaskCategoryEditUserCode] = Src.[TaskCategoryEditUserCode]
					,Dest.[TaskCategoryName] = Src.[TaskCategoryName]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDTaskCategory AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDTaskCategory AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].TaskCategories Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest ON Src.IDTaskCategory = Dest.IDTaskCategory
				WHERE Dest.TaskCategoryEditDateTime < Src.TaskCategoryEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].TaskCategories Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest WITH (NOLOCK) ON Src.IDTaskCategory = Dest.IDTaskCategory
					WHERE Dest.IDTaskCategory IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories (
					[IDTaskCategory]
					,[TaskCategoryAddDateTime]
					,[TaskCategoryEditDateTime]
					,[TaskCategoryAddUserCode]
					,[TaskCategoryEditUserCode]
					,[TaskCategoryName]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDTaskCategory AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDTaskCategory]
					,Src.[TaskCategoryAddDateTime]
					,Src.[TaskCategoryEditDateTime]
					,Src.[TaskCategoryAddUserCode]
					,Src.[TaskCategoryEditUserCode]
					,Src.[TaskCategoryName]
				FROM [dbo].TaskCategories Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TaskCategories Dest WITH (NOLOCK) ON Src.IDTaskCategory = Dest.IDTaskCategory
				WHERE Dest.IDTaskCategory IS NULL;
			END;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `TaskCategories` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Tasks
	SET @CurrentTableName = 'Tasks';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks AS Dest
			USING (
				SELECT [IDTask]
					,[TaskAddDateTime]
					,[TaskEditDateTime]
					,[TaskAddUserCode]
					,[TaskEditUserCode]
					,[TaskCategoryID]
					,[TaskActivationDateTime]
					,[TaskSubject]
					,[TaskBody]
					,[TaskCompletionDateTime]
				FROM dbo.Tasks WITH (NOLOCK)
				WHERE [TaskCompletionDateTime] IS NOT NULL
					AND [TaskEditDateTime] <= @MaxDateToArchiveData
				) AS Src
				ON (Dest.[IDTask] = Src.[IDTask])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[TaskAddDateTime] = Src.[TaskAddDateTime]
						,Dest.[TaskEditDateTime] = Src.[TaskEditDateTime]
						,Dest.[TaskAddUserCode] = Src.[TaskAddUserCode]
						,Dest.[TaskEditUserCode] = Src.[TaskEditUserCode]
						,Dest.[TaskCategoryID] = Src.[TaskCategoryID]
						,Dest.[TaskActivationDateTime] = Src.[TaskActivationDateTime]
						,Dest.[TaskSubject] = Src.[TaskSubject]
						,Dest.[TaskBody] = Src.[TaskBody]
						,Dest.[TaskCompletionDateTime] = Src.[TaskCompletionDateTime]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDTask]
						,[TaskAddDateTime]
						,[TaskEditDateTime]
						,[TaskAddUserCode]
						,[TaskEditUserCode]
						,[TaskCategoryID]
						,[TaskActivationDateTime]
						,[TaskSubject]
						,[TaskBody]
						,[TaskCompletionDateTime]
						)
					VALUES (
						Src.[IDTask]
						,Src.[TaskAddDateTime]
						,Src.[TaskEditDateTime]
						,Src.[TaskAddUserCode]
						,Src.[TaskEditUserCode]
						,Src.[TaskCategoryID]
						,Src.[TaskActivationDateTime]
						,Src.[TaskSubject]
						,Src.[TaskBody]
						,Src.[TaskCompletionDateTime]
						);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Tasks Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks Dest WITH (NOLOCK) ON Src.IDTask = Dest.IDTask
					WHERE Src.[TaskCompletionDateTime] IS NOT NULL
						AND Src.[TaskEditDateTime] <= @MaxDateToArchiveData
						AND Dest.[TaskEditDateTime] < Src.[TaskEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[TaskAddDateTime] = Src.[TaskAddDateTime]
					,Dest.[TaskEditDateTime] = Src.[TaskEditDateTime]
					,Dest.[TaskAddUserCode] = Src.[TaskAddUserCode]
					,Dest.[TaskEditUserCode] = Src.[TaskEditUserCode]
					,Dest.[TaskCategoryID] = Src.[TaskCategoryID]
					,Dest.[TaskActivationDateTime] = Src.[TaskActivationDateTime]
					,Dest.[TaskSubject] = Src.[TaskSubject]
					,Dest.[TaskBody] = Src.[TaskBody]
					,Dest.[TaskCompletionDateTime] = Src.[TaskCompletionDateTime]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDTask AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDTask AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Tasks Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks Dest ON Src.IDTask = Dest.IDTask
				WHERE Src.[TaskCompletionDateTime] IS NOT NULL
					AND Src.[TaskEditDateTime] <= @MaxDateToArchiveData
					AND Dest.[TaskEditDateTime] < Src.[TaskEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Tasks Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks Dest WITH (NOLOCK) ON Src.IDTask = Dest.IDTask
					WHERE Src.[TaskCompletionDateTime] IS NOT NULL
						AND Src.[TaskEditDateTime] <= @MaxDateToArchiveData
						AND Dest.IDTask IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks (
					[IDTask]
					,[TaskAddDateTime]
					,[TaskEditDateTime]
					,[TaskAddUserCode]
					,[TaskEditUserCode]
					,[TaskCategoryID]
					,[TaskActivationDateTime]
					,[TaskSubject]
					,[TaskBody]
					,[TaskCompletionDateTime]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDTask AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDTask]
					,Src.[TaskAddDateTime]
					,Src.[TaskEditDateTime]
					,Src.[TaskAddUserCode]
					,Src.[TaskEditUserCode]
					,Src.[TaskCategoryID]
					,Src.[TaskActivationDateTime]
					,Src.[TaskSubject]
					,Src.[TaskBody]
					,Src.[TaskCompletionDateTime]
				FROM [dbo].Tasks Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Tasks Dest WITH (NOLOCK) ON Src.IDTask = Dest.IDTask
				WHERE Src.[TaskCompletionDateTime] IS NOT NULL
					AND Src.[TaskEditDateTime] <= @MaxDateToArchiveData
					AND Dest.IDTask IS NULL;
			END;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Tasks` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----b) Deletion
	-- 08 Shipping Data
	----a) Archival
	--InternalCSSpecifications
	--InternalCSSpecifications (Archival)
	SET @ArchiveAfterDays = NULL;
	SET @MaxDateToArchiveData = NULL;
	SET @CountOfRowsAvailableForArchival = NULL;
	SET @CurrentTableName = 'InternalCSSpecifications';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		SET @InternalCSSpecificationArchiveAfterDays = ISNULL((
					SELECT CAST(FieldValue AS FLOAT)
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'InternalCSSpecificationArchiveAfterDays'
					), 365);
		SET @MaxDateToArchiveData = DATEADD(day, - 1 * @InternalCSSpecificationArchiveAfterDays, GETUTCDATE());
		SET @CountOfRowsAvailableForArchival = 0;
			--IF @CountOfRowsAvailableForArchival > 0
			--BEGIN
			--	SET @TotRowCount = 0;
			--	SET @LogDate = GETUTCDATE();
			--	SET @Remarks = 'Started archival Of data from `InternalCSSpecifications` in `' + @DataBase + '`. No. of rows to be archiveded: ' + LTRIM(STR(@CountOfRowsAvailableForArchival));
			--	EXECUTE pArchiveLogs @Remarks
			--		,@SourceProcName
			--		,NULL
			--		,NULL
			--		,NULL
			--		,NULL
			--		,@LogDate
			--		,@HostName
			--		,@UserName
			--		,'Info'
			--		,@RunID;
			--	SELECT TOP 100 [InternalCSSpecifications].IDInternalCSSpecification AS [ID]
			--		,[InternalCSSpecifications].InternalCSSpecificationAddDateTime AS [AddDateTime]
			--		,[InternalCSSpecifications].InternalCSSpecificationAddUserCode AS [AddUserCode]
			--		,[InternalCSSpecifications].InternalCSSpecificationCargoReleaseOrderDataChanged AS [CargoReleaseOrderDataChanged]
			--		,[InternalCSSpecifications].InternalCSSpecificationCargoReleaseOrderDone AS [CargoReleaseOrderDone]
			--		,[InternalCSSpecifications].CargoReleaseOrderID AS [CargoReleaseOrderID]
			--		,[InternalCSSpecifications].InternalCSSpecificationCargoReleaseOrderMerged AS [CargoReleaseOrderMerged]
			--		,[InternalCSSpecifications].CSHeaderNumber AS [CSHeaderNumber]
			--		,[InternalCSSpecifications].CSSpecificationSequence AS [CSSpecificationSequence]
			--		,[InternalCSSpecifications].InternalCSSpecificationCustomsClearanceOrderDataChanged AS [CustomsClearanceOrderDataChanged]
			--		,[InternalCSSpecifications].InternalCSSpecificationCustomsClearanceOrderDataChangedSecondLeg AS [CustomsClearanceOrderDataChangedSecondLeg]
			--		,[InternalCSSpecifications].CustomsClearanceOrderDetailID AS [CustomsClearanceOrderDetailID]
			--		,[InternalCSSpecifications].CustomsClearanceOrderDetailIDSecondLeg AS [CustomsClearanceOrderDetailIDSecondLeg]
			--		,[InternalCSSpecifications].InternalCSSpecificationCustomsClearanceOrderDone AS [CustomsClearanceOrderDone]
			--		,[InternalCSSpecifications].InternalCSSpecificationCustomsClearanceOrderDoneSecondLeg AS [CustomsClearanceOrderDoneSecondLeg]
			--		,[InternalCSSpecifications].CustomsClearanceOrderID AS [CustomsClearanceOrderID]
			--		,[InternalCSSpecifications].CustomsClearanceOrderIDSecondLeg AS [CustomsClearanceOrderIDSecondLeg]
			--		,[InternalCSSpecifications].InternalCSSpecificationCustomsClearanceOrderMerged AS [CustomsClearanceOrderMerged]
			--		,[InternalCSSpecifications].InternalCSSpecificationCustomsClearanceOrderMergedSecondLeg AS [CustomsClearanceOrderMergedSecondLeg]
			--		,[InternalCSSpecifications].CustomsClearanceOrderSubDetailID AS [CustomsClearanceOrderSubDetailID]
			--		,[InternalCSSpecifications].CustomsClearanceOrderSubDetailIDSecondLeg AS [CustomsClearanceOrderSubDetailIDSecondLeg]
			--		,[InternalCSSpecifications].InternalCSSpecificationDocumentOrderDataChanged AS [DocumentOrderDataChanged]
			--		,[InternalCSSpecifications].InternalCSSpecificationDocumentOrderDone AS [DocumentOrderDone]
			--		,[InternalCSSpecifications].DocumentOrderID AS [DocumentOrderID]
			--		,[InternalCSSpecifications].InternalCSSpecificationDocumentOrderMerged AS [DocumentOrderMerged]
			--		,[InternalCSSpecifications].InternalCSSpecificationEditDateTime AS [EditDateTime]
			--		,[InternalCSSpecifications].InternalCSSpecificationEditUserCode AS [EditUserCode]
			--		,[InternalCSSpecifications].InternalCSSpecificationFirstVisited AS [FirstVisited]
			--		,[InternalCSSpecifications].POHeaderConsigneeCode AS [POHeaderConsigneeCode]
			--		,[InternalCSSpecifications].POHeaderConsigneeCountryCode AS [POHeaderConsigneeCountryCode]
			--		,[InternalCSSpecifications].POHeaderNumber AS [POHeaderNumber]
			--		,[InternalCSSpecifications].POSpecificationSequence AS [POSpecificationSequence]
			--		,[InternalCSSpecifications].InternalCSSpecificationShipmentDataChanged AS [ShipmentDataChanged]
			--		,[InternalCSSpecifications].InternalCSSpecificationShipmentDataChangedSecondLeg AS [ShipmentDataChangedSecondLeg]
			--		,[InternalCSSpecifications].ShipmentDetailID AS [ShipmentDetailID]
			--		,[InternalCSSpecifications].ShipmentDetailIDSecondLeg AS [ShipmentDetailIDSecondLeg]
			--		,[InternalCSSpecifications].InternalCSSpecificationShipmentDone AS [ShipmentDone]
			--		,[InternalCSSpecifications].InternalCSSpecificationShipmentDoneSecondLeg AS [ShipmentDoneSecondLeg]
			--		,[InternalCSSpecifications].ShipmentID AS [ShipmentID]
			--		,[InternalCSSpecifications].ShipmentIDSecondLeg AS [ShipmentIDSecondLeg]
			--		,[InternalCSSpecifications].InternalCSSpecificationShipmentMerged AS [ShipmentMerged]
			--		,[InternalCSSpecifications].InternalCSSpecificationShipmentMergedSecondLeg AS [ShipmentMergedSecondLeg]
			--		,[InternalCSSpecifications].SOHeaderNumber AS [SOHeaderNumber]
			--		,[InternalCSSpecifications].SubContextCode AS [SubContextCode]
			--		,[InternalCSSpecifications].InternalCSSpecificationTransportDataChanged AS [TransportDataChanged]
			--		,[InternalCSSpecifications].InternalCSSpecificationTransportDataChangedSecondLeg AS [TransportDataChangedSecondLeg]
			--		,[InternalCSSpecifications].InternalCSSpecificationTransportDone AS [TransportDone]
			--		,[InternalCSSpecifications].InternalCSSpecificationTransportDoneSecondLeg AS [TransportDoneSecondLeg]
			--		,[InternalCSSpecifications].TransportID AS [TransportID]
			--		,[InternalCSSpecifications].TransportIDSecondLeg AS [TransportIDSecondLeg]
			--		,[InternalCSSpecifications].InternalCSSpecificationTransportMerged AS [TransportMerged]
			--		,[InternalCSSpecifications].InternalCSSpecificationTransportMergedSecondLeg AS [TransportMergedSecondLeg]
			--		,[InternalCSSpecifications].TransportStopID AS [TransportStopID]
			--		,[InternalCSSpecifications].TransportStopIDSecondLeg AS [TransportStopIDSecondLeg]
			--		,[InternalCSSpecifications].InternalCSSpecificationWarehouseOrderDataChanged AS [WarehouseOrderDataChanged]
			--		,[InternalCSSpecifications].InternalCSSpecificationWarehouseOrderDetailDone AS [WarehouseOrderDetailDone]
			--		,[InternalCSSpecifications].WarehouseOrderDetailID AS [WarehouseOrderDetailID]
			--		,[InternalCSSpecifications].InternalCSSpecificationWarehouseOrderDone AS [WarehouseOrderDone]
			--		,[InternalCSSpecifications].WarehouseOrderID AS [WarehouseOrderID]
			--		,[InternalCSSpecifications].InternalCSSpecificationWarehouseOrderMerged AS [WarehouseOrderMerged]
			--	FROM InternalCSSpecifications WITH (NOLOCK)
			--	LEFT JOIN DocumentOrders [InternalCSSpecifications_DocumentOrder] WITH (NOLOCK) ON InternalCSSpecifications.DocumentOrderID = InternalCSSpecifications_DocumentOrder.IDDocumentOrder
			--	LEFT JOIN CustomsClearanceOrders [InternalCSSpecifications_CustomsClearanceOrder] WITH (NOLOCK) ON InternalCSSpecifications.CustomsClearanceOrderID = InternalCSSpecifications_CustomsClearanceOrder.IDCustomsClearanceOrder
			--	LEFT JOIN CargoReleaseOrders [InternalCSSpecifications_CargoReleaseOrder] WITH (NOLOCK) ON InternalCSSpecifications.CargoReleaseOrderID = InternalCSSpecifications_CargoReleaseOrder.IDCargoReleaseOrder
			--	LEFT JOIN Shipments [InternalCSSpecifications_Shipment] WITH (NOLOCK) ON InternalCSSpecifications.ShipmentID = InternalCSSpecifications_Shipment.IDShipment
			--	LEFT JOIN Transports [InternalCSSpecifications_Transport] WITH (NOLOCK) ON InternalCSSpecifications.TransportID = InternalCSSpecifications_Transport.IDTransport
			--	LEFT JOIN WarehouseOrders [InternalCSSpecifications_WarehouseOrder] WITH (NOLOCK) ON InternalCSSpecifications.WarehouseOrderID = InternalCSSpecifications_WarehouseOrder.IDWarehouseOrder
			--	LEFT JOIN CustomsClearanceOrders [InternalCSSpecifications_CustomsClearanceOrderSecondLeg] WITH (NOLOCK) ON InternalCSSpecifications.CustomsClearanceOrderIDSecondLeg = InternalCSSpecifications_CustomsClearanceOrderSecondLeg.IDCustomsClearanceOrder
			--	LEFT JOIN Shipments [InternalCSSpecifications_ShipmentSecondLeg] WITH (NOLOCK) ON InternalCSSpecifications.ShipmentIDSecondLeg = InternalCSSpecifications_ShipmentSecondLeg.IDShipment
			--	LEFT JOIN Transports [InternalCSSpecifications_TransportSecondLeg] WITH (NOLOCK) ON InternalCSSpecifications.TransportIDSecondLeg = InternalCSSpecifications_TransportSecondLeg.IDTransport
			--	LEFT JOIN SOSpecificationPOSpecifications [InternalCSSpecifications_SOSpecificationPOSpecification] WITH (NOLOCK) ON InternalCSSpecifications.POHeaderConsigneeCode = InternalCSSpecifications_SOSpecificationPOSpecification.POHeaderConsigneeCode
			--		AND InternalCSSpecifications.POHeaderConsigneeCountryCode = InternalCSSpecifications_SOSpecificationPOSpecification.POHeaderConsigneeCountryCode
			--		AND InternalCSSpecifications.POHeaderNumber = InternalCSSpecifications_SOSpecificationPOSpecification.POHeaderNumber
			--		AND InternalCSSpecifications.POSpecificationSequence = InternalCSSpecifications_SOSpecificationPOSpecification.POSpecificationSequence
			--		AND InternalCSSpecifications.SOHeaderNumber = InternalCSSpecifications_SOSpecificationPOSpecification.SOHeaderNumber
			--		AND InternalCSSpecifications.CSSpecificationSequence = InternalCSSpecifications_SOSpecificationPOSpecification.SOSpecificationSequence
			--	LEFT JOIN SOSpecifications [InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification] WITH (NOLOCK) ON InternalCSSpecifications_SOSpecificationPOSpecification.SOSpecificationSequence = InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification.SOSpecificationSequence
			--		AND InternalCSSpecifications_SOSpecificationPOSpecification.SOHeaderNumber = InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification.SOHeaderNumber
			--	LEFT JOIN SOHeaders [InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification_SOHeader] WITH (NOLOCK) ON InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification.SOHeaderNumber = InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification_SOHeader.SOHeaderNumber
			--	WHERE (
			--			(
			--				[InternalCSSpecifications_DocumentOrder].DocumentOrderEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationDocumentOrderDone = 1
			--				)
			--			OR [InternalCSSpecifications].DocumentOrderID IS NULL
			--			)
			--		AND (
			--			(
			--				[InternalCSSpecifications_CustomsClearanceOrder].CustomsClearanceOrderEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationCustomsClearanceOrderDone = 1
			--				)
			--			OR [InternalCSSpecifications].CustomsClearanceOrderID IS NULL
			--			)
			--		AND (
			--			(
			--				[InternalCSSpecifications_CargoReleaseOrder].CargoReleaseOrderEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationCargoReleaseOrderDone = 1
			--				)
			--			OR [InternalCSSpecifications].CargoReleaseOrderID IS NULL
			--			)
			--		AND (
			--			(
			--				[InternalCSSpecifications_Shipment].ShipmentEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationShipmentDone = 1
			--				)
			--			OR [InternalCSSpecifications].ShipmentID IS NULL
			--			)
			--		AND (
			--			(
			--				[InternalCSSpecifications_Transport].TransportEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationTransportDone = 1
			--				)
			--			OR [InternalCSSpecifications].TransportID IS NULL
			--			)
			--		AND (
			--			(
			--				[InternalCSSpecifications_WarehouseOrder].WarehouseOrderEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationWarehouseOrderDone = 1
			--				)
			--			OR [InternalCSSpecifications].WarehouseOrderID IS NULL
			--			)
			--		AND (
			--			(
			--				[InternalCSSpecifications_CustomsClearanceOrderSecondLeg].CustomsClearanceOrderEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationCustomsClearanceOrderDoneSecondLeg = 1
			--				)
			--			OR [InternalCSSpecifications].CustomsClearanceOrderIDSecondLeg IS NULL
			--			)
			--		AND (
			--			(
			--				[InternalCSSpecifications_ShipmentSecondLeg].ShipmentEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationShipmentDoneSecondLeg = 1
			--				)
			--			OR [InternalCSSpecifications].ShipmentIDSecondLeg IS NULL
			--			)
			--		AND (
			--			(
			--				[InternalCSSpecifications_TransportSecondLeg].TransportEditDateTime < @MaxDateToArchiveData
			--				AND [InternalCSSpecifications].InternalCSSpecificationTransportDoneSecondLeg = 1
			--				)
			--			OR [InternalCSSpecifications].TransportIDSecondLeg IS NULL
			--			)
			--		AND [InternalCSSpecifications].CSHeaderNumber IS NULL
			--		AND (
			--			[InternalCSSpecifications_SOSpecificationPOSpecification].SOSpecificationPOSpecificationEditDateTime < @MaxDateToArchiveData
			--			OR [InternalCSSpecifications_SOSpecificationPOSpecification].SOSpecificationPOSpecificationEditDateTime IS NULL
			--			)
			--		AND (
			--			[InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification].SOSpecificationEditDateTime < @MaxDateToArchiveData
			--			OR [InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification].SOSpecificationEditDateTime IS NULL
			--			)
			--		AND (
			--			[InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification_SOHeader].SOHeaderEditDateTime < @MaxDateToArchiveData
			--			OR [InternalCSSpecifications_SOSpecificationPOSpecification_SOSpecification_SOHeader].SOHeaderEditDateTime IS NULL
			--			)
			--		AND [InternalCSSpecifications].InternalCSSpecificationEditDateTime < @MaxDateToArchiveData;
			--END;
	END

	-- 09 enmModule
	----
	----Transports
	----TransportStatuses
	SET @CurrentTableName = 'TransportStatuses';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStatuses AS Dest
			USING (
				SELECT [IDTransportStatus]
					,[TransportStatusName]
					,[TransportStatusDisplayName]
					,[TransportStatusNumber]
					,[TransportStatusNotes]
					,[TransportStatusViewAccessRight]
					,[TransportStatusEditAccessRight]
					,[TransportStatusStatusChangeAccessRight]
					,[TransportStatusActionName]
					,[TransportStatusActionTooltip]
					,[TransportStatusAddDateTime]
					,[TransportStatusEditDateTime]
					,[TransportStatusAddUserCode]
					,[TransportStatusEditUserCode]
					,[TransportStatusRequiresValidation]
					,[TransportStatusAllowReceiptSelection]
					,[TransportStatusAllowOrderSelection]
					,[TransportStatusReadyForMatrixBilling]
					,[TransportStatusReadyForWaitingTimeBilling]
					,[TransportStatusRecalculateForReceiptChange]
					,[TransportStatusRecalculateForOrderChange]
					,[TransportStatusReceiptActionName]
					,[TransportStatusReceiptActionTooltip]
					,[TransportStatusConfirmCustomsAccessRight]
					,[TransportStatusAddRemarkAccessRight]
					,[TransportStatusModule]
					,[TransportStatusAllowPriceCalculation]
					,[TransportStatusShowPriceToCustomer]
					,[TransportStatusSetMessage]
					,[TransportStatusAllowManualPriceCalculation]
					,[TransportStatusReadyForInvoicing]
					,[TransportStatusReadyForBilling]
					,[TransportStatusOrderActionName]
					,[TransportStatusOrderActionTooltip]
					,[TransportStatusActionIsRarelyUsed]
					,[TransportStatusActionType]
					,[TransportStatusCancelled]
					,[TransportStatusChangeAllActionName]
					,[TransportStatusChangeAllActionTooltip]
					,[TransportStatusChangeAllConfirmationMessage]
					,[TransportStatusConfirmationMessage]
					,[TransportStatusDone]
					,[TransportStatusGoBackToListingAfterChange]
					,[TransportStatusListingActionName]
					,[TransportStatusListingActionTooltip]
					,[TransportStatusListingConfirmationMessage]
					,[TransportStatusMaximumChangedItemsAtOnce]
					,[TransportStatusModuleUpdateType]
					,[TransportStatusWarningLevel]
				FROM dbo.TransportStatuses WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDTransportStatus] = Src.[IDTransportStatus])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[TransportStatusName] = Src.[TransportStatusName]
						,Dest.[TransportStatusDisplayName] = Src.[TransportStatusDisplayName]
						,Dest.[TransportStatusNumber] = Src.[TransportStatusNumber]
						,Dest.[TransportStatusNotes] = Src.[TransportStatusNotes]
						,Dest.[TransportStatusViewAccessRight] = Src.[TransportStatusViewAccessRight]
						,Dest.[TransportStatusEditAccessRight] = Src.[TransportStatusEditAccessRight]
						,Dest.[TransportStatusStatusChangeAccessRight] = Src.[TransportStatusStatusChangeAccessRight]
						,Dest.[TransportStatusActionName] = Src.[TransportStatusActionName]
						,Dest.[TransportStatusActionTooltip] = Src.[TransportStatusActionTooltip]
						,Dest.[TransportStatusAddDateTime] = Src.[TransportStatusAddDateTime]
						,Dest.[TransportStatusEditDateTime] = Src.[TransportStatusEditDateTime]
						,Dest.[TransportStatusAddUserCode] = Src.[TransportStatusAddUserCode]
						,Dest.[TransportStatusEditUserCode] = Src.[TransportStatusEditUserCode]
						,Dest.[TransportStatusRequiresValidation] = Src.[TransportStatusRequiresValidation]
						,Dest.[TransportStatusAllowReceiptSelection] = Src.[TransportStatusAllowReceiptSelection]
						,Dest.[TransportStatusAllowOrderSelection] = Src.[TransportStatusAllowOrderSelection]
						,Dest.[TransportStatusReadyForMatrixBilling] = Src.[TransportStatusReadyForMatrixBilling]
						,Dest.[TransportStatusReadyForWaitingTimeBilling] = Src.[TransportStatusReadyForWaitingTimeBilling]
						,Dest.[TransportStatusRecalculateForReceiptChange] = Src.[TransportStatusRecalculateForReceiptChange]
						,Dest.[TransportStatusRecalculateForOrderChange] = Src.[TransportStatusRecalculateForOrderChange]
						,Dest.[TransportStatusReceiptActionName] = Src.[TransportStatusReceiptActionName]
						,Dest.[TransportStatusReceiptActionTooltip] = Src.[TransportStatusReceiptActionTooltip]
						,Dest.[TransportStatusConfirmCustomsAccessRight] = Src.[TransportStatusConfirmCustomsAccessRight]
						,Dest.[TransportStatusAddRemarkAccessRight] = Src.[TransportStatusAddRemarkAccessRight]
						,Dest.[TransportStatusModule] = Src.[TransportStatusModule]
						,Dest.[TransportStatusAllowPriceCalculation] = Src.[TransportStatusAllowPriceCalculation]
						,Dest.[TransportStatusShowPriceToCustomer] = Src.[TransportStatusShowPriceToCustomer]
						,Dest.[TransportStatusSetMessage] = Src.[TransportStatusSetMessage]
						,Dest.[TransportStatusAllowManualPriceCalculation] = Src.[TransportStatusAllowManualPriceCalculation]
						,Dest.[TransportStatusReadyForInvoicing] = Src.[TransportStatusReadyForInvoicing]
						,Dest.[TransportStatusReadyForBilling] = Src.[TransportStatusReadyForBilling]
						,Dest.[TransportStatusOrderActionName] = Src.[TransportStatusOrderActionName]
						,Dest.[TransportStatusOrderActionTooltip] = Src.[TransportStatusOrderActionTooltip]
						,Dest.[TransportStatusActionIsRarelyUsed] = Src.[TransportStatusActionIsRarelyUsed]
						,Dest.[TransportStatusActionType] = Src.[TransportStatusActionType]
						,Dest.[TransportStatusCancelled] = Src.[TransportStatusCancelled]
						,Dest.[TransportStatusChangeAllActionName] = Src.[TransportStatusChangeAllActionName]
						,Dest.[TransportStatusChangeAllActionTooltip] = Src.[TransportStatusChangeAllActionTooltip]
						,Dest.[TransportStatusChangeAllConfirmationMessage] = Src.[TransportStatusChangeAllConfirmationMessage]
						,Dest.[TransportStatusConfirmationMessage] = Src.[TransportStatusConfirmationMessage]
						,Dest.[TransportStatusDone] = Src.[TransportStatusDone]
						,Dest.[TransportStatusGoBackToListingAfterChange] = Src.[TransportStatusGoBackToListingAfterChange]
						,Dest.[TransportStatusListingActionName] = Src.[TransportStatusListingActionName]
						,Dest.[TransportStatusListingActionTooltip] = Src.[TransportStatusListingActionTooltip]
						,Dest.[TransportStatusListingConfirmationMessage] = Src.[TransportStatusListingConfirmationMessage]
						,Dest.[TransportStatusMaximumChangedItemsAtOnce] = Src.[TransportStatusMaximumChangedItemsAtOnce]
						,Dest.[TransportStatusModuleUpdateType] = Src.[TransportStatusModuleUpdateType]
						,Dest.[TransportStatusWarningLevel] = Src.[TransportStatusWarningLevel]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDTransportStatus]
						,[TransportStatusName]
						,[TransportStatusDisplayName]
						,[TransportStatusNumber]
						,[TransportStatusNotes]
						,[TransportStatusViewAccessRight]
						,[TransportStatusEditAccessRight]
						,[TransportStatusStatusChangeAccessRight]
						,[TransportStatusActionName]
						,[TransportStatusActionTooltip]
						,[TransportStatusAddDateTime]
						,[TransportStatusEditDateTime]
						,[TransportStatusAddUserCode]
						,[TransportStatusEditUserCode]
						,[TransportStatusRequiresValidation]
						,[TransportStatusAllowReceiptSelection]
						,[TransportStatusAllowOrderSelection]
						,[TransportStatusReadyForMatrixBilling]
						,[TransportStatusReadyForWaitingTimeBilling]
						,[TransportStatusRecalculateForReceiptChange]
						,[TransportStatusRecalculateForOrderChange]
						,[TransportStatusReceiptActionName]
						,[TransportStatusReceiptActionTooltip]
						,[TransportStatusConfirmCustomsAccessRight]
						,[TransportStatusAddRemarkAccessRight]
						,[TransportStatusModule]
						,[TransportStatusAllowPriceCalculation]
						,[TransportStatusShowPriceToCustomer]
						,[TransportStatusSetMessage]
						,[TransportStatusAllowManualPriceCalculation]
						,[TransportStatusReadyForInvoicing]
						,[TransportStatusReadyForBilling]
						,[TransportStatusOrderActionName]
						,[TransportStatusOrderActionTooltip]
						,[TransportStatusActionIsRarelyUsed]
						,[TransportStatusActionType]
						,[TransportStatusCancelled]
						,[TransportStatusChangeAllActionName]
						,[TransportStatusChangeAllActionTooltip]
						,[TransportStatusChangeAllConfirmationMessage]
						,[TransportStatusConfirmationMessage]
						,[TransportStatusDone]
						,[TransportStatusGoBackToListingAfterChange]
						,[TransportStatusListingActionName]
						,[TransportStatusListingActionTooltip]
						,[TransportStatusListingConfirmationMessage]
						,[TransportStatusMaximumChangedItemsAtOnce]
						,[TransportStatusModuleUpdateType]
						,[TransportStatusWarningLevel]
						)
					VALUES (
						Src.[IDTransportStatus]
						,Src.[TransportStatusName]
						,Src.[TransportStatusDisplayName]
						,Src.[TransportStatusNumber]
						,Src.[TransportStatusNotes]
						,Src.[TransportStatusViewAccessRight]
						,Src.[TransportStatusEditAccessRight]
						,Src.[TransportStatusStatusChangeAccessRight]
						,Src.[TransportStatusActionName]
						,Src.[TransportStatusActionTooltip]
						,Src.[TransportStatusAddDateTime]
						,Src.[TransportStatusEditDateTime]
						,Src.[TransportStatusAddUserCode]
						,Src.[TransportStatusEditUserCode]
						,Src.[TransportStatusRequiresValidation]
						,Src.[TransportStatusAllowReceiptSelection]
						,Src.[TransportStatusAllowOrderSelection]
						,Src.[TransportStatusReadyForMatrixBilling]
						,Src.[TransportStatusReadyForWaitingTimeBilling]
						,Src.[TransportStatusRecalculateForReceiptChange]
						,Src.[TransportStatusRecalculateForOrderChange]
						,Src.[TransportStatusReceiptActionName]
						,Src.[TransportStatusReceiptActionTooltip]
						,Src.[TransportStatusConfirmCustomsAccessRight]
						,Src.[TransportStatusAddRemarkAccessRight]
						,Src.[TransportStatusModule]
						,Src.[TransportStatusAllowPriceCalculation]
						,Src.[TransportStatusShowPriceToCustomer]
						,Src.[TransportStatusSetMessage]
						,Src.[TransportStatusAllowManualPriceCalculation]
						,Src.[TransportStatusReadyForInvoicing]
						,Src.[TransportStatusReadyForBilling]
						,Src.[TransportStatusOrderActionName]
						,Src.[TransportStatusOrderActionTooltip]
						,Src.[TransportStatusActionIsRarelyUsed]
						,Src.[TransportStatusActionType]
						,Src.[TransportStatusCancelled]
						,Src.[TransportStatusChangeAllActionName]
						,Src.[TransportStatusChangeAllActionTooltip]
						,Src.[TransportStatusChangeAllConfirmationMessage]
						,Src.[TransportStatusConfirmationMessage]
						,Src.[TransportStatusDone]
						,Src.[TransportStatusGoBackToListingAfterChange]
						,Src.[TransportStatusListingActionName]
						,Src.[TransportStatusListingActionTooltip]
						,Src.[TransportStatusListingConfirmationMessage]
						,Src.[TransportStatusMaximumChangedItemsAtOnce]
						,Src.[TransportStatusModuleUpdateType]
						,Src.[TransportStatusWarningLevel]
						);
						*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].TransportStatuses Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStatuses Dest WITH (NOLOCK) ON Src.IDTransportStatus = Dest.IDTransportStatus
					WHERE Dest.[TransportStatusEditDateTime] < Src.[TransportStatusEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[TransportStatusName] = Src.[TransportStatusName]
					,Dest.[TransportStatusDisplayName] = Src.[TransportStatusDisplayName]
					,Dest.[TransportStatusNumber] = Src.[TransportStatusNumber]
					,Dest.[TransportStatusNotes] = Src.[TransportStatusNotes]
					,Dest.[TransportStatusViewAccessRight] = Src.[TransportStatusViewAccessRight]
					,Dest.[TransportStatusEditAccessRight] = Src.[TransportStatusEditAccessRight]
					,Dest.[TransportStatusStatusChangeAccessRight] = Src.[TransportStatusStatusChangeAccessRight]
					,Dest.[TransportStatusActionName] = Src.[TransportStatusActionName]
					,Dest.[TransportStatusActionTooltip] = Src.[TransportStatusActionTooltip]
					,Dest.[TransportStatusAddDateTime] = Src.[TransportStatusAddDateTime]
					,Dest.[TransportStatusEditDateTime] = Src.[TransportStatusEditDateTime]
					,Dest.[TransportStatusAddUserCode] = Src.[TransportStatusAddUserCode]
					,Dest.[TransportStatusEditUserCode] = Src.[TransportStatusEditUserCode]
					,Dest.[TransportStatusRequiresValidation] = Src.[TransportStatusRequiresValidation]
					,Dest.[TransportStatusAllowReceiptSelection] = Src.[TransportStatusAllowReceiptSelection]
					,Dest.[TransportStatusAllowOrderSelection] = Src.[TransportStatusAllowOrderSelection]
					,Dest.[TransportStatusReadyForMatrixBilling] = Src.[TransportStatusReadyForMatrixBilling]
					,Dest.[TransportStatusReadyForWaitingTimeBilling] = Src.[TransportStatusReadyForWaitingTimeBilling]
					,Dest.[TransportStatusRecalculateForReceiptChange] = Src.[TransportStatusRecalculateForReceiptChange]
					,Dest.[TransportStatusRecalculateForOrderChange] = Src.[TransportStatusRecalculateForOrderChange]
					,Dest.[TransportStatusReceiptActionName] = Src.[TransportStatusReceiptActionName]
					,Dest.[TransportStatusReceiptActionTooltip] = Src.[TransportStatusReceiptActionTooltip]
					,Dest.[TransportStatusConfirmCustomsAccessRight] = Src.[TransportStatusConfirmCustomsAccessRight]
					,Dest.[TransportStatusAddRemarkAccessRight] = Src.[TransportStatusAddRemarkAccessRight]
					,Dest.[TransportStatusModule] = Src.[TransportStatusModule]
					,Dest.[TransportStatusAllowPriceCalculation] = Src.[TransportStatusAllowPriceCalculation]
					,Dest.[TransportStatusShowPriceToCustomer] = Src.[TransportStatusShowPriceToCustomer]
					,Dest.[TransportStatusSetMessage] = Src.[TransportStatusSetMessage]
					,Dest.[TransportStatusAllowManualPriceCalculation] = Src.[TransportStatusAllowManualPriceCalculation]
					,Dest.[TransportStatusReadyForInvoicing] = Src.[TransportStatusReadyForInvoicing]
					,Dest.[TransportStatusReadyForBilling] = Src.[TransportStatusReadyForBilling]
					,Dest.[TransportStatusOrderActionName] = Src.[TransportStatusOrderActionName]
					,Dest.[TransportStatusOrderActionTooltip] = Src.[TransportStatusOrderActionTooltip]
					,Dest.[TransportStatusActionIsRarelyUsed] = Src.[TransportStatusActionIsRarelyUsed]
					,Dest.[TransportStatusActionType] = Src.[TransportStatusActionType]
					,Dest.[TransportStatusCancelled] = Src.[TransportStatusCancelled]
					,Dest.[TransportStatusChangeAllActionName] = Src.[TransportStatusChangeAllActionName]
					,Dest.[TransportStatusChangeAllActionTooltip] = Src.[TransportStatusChangeAllActionTooltip]
					,Dest.[TransportStatusChangeAllConfirmationMessage] = Src.[TransportStatusChangeAllConfirmationMessage]
					,Dest.[TransportStatusConfirmationMessage] = Src.[TransportStatusConfirmationMessage]
					,Dest.[TransportStatusDone] = Src.[TransportStatusDone]
					,Dest.[TransportStatusGoBackToListingAfterChange] = Src.[TransportStatusGoBackToListingAfterChange]
					,Dest.[TransportStatusListingActionName] = Src.[TransportStatusListingActionName]
					,Dest.[TransportStatusListingActionTooltip] = Src.[TransportStatusListingActionTooltip]
					,Dest.[TransportStatusListingConfirmationMessage] = Src.[TransportStatusListingConfirmationMessage]
					,Dest.[TransportStatusMaximumChangedItemsAtOnce] = Src.[TransportStatusMaximumChangedItemsAtOnce]
					,Dest.[TransportStatusModuleUpdateType] = Src.[TransportStatusModuleUpdateType]
					,Dest.[TransportStatusWarningLevel] = Src.[TransportStatusWarningLevel]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDTransportStatus AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDTransportStatus AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].TransportStatuses Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStatuses Dest ON Src.IDTransportStatus = Dest.IDTransportStatus
				WHERE Dest.[TransportStatusEditDateTime] < Src.[TransportStatusEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].TransportStatuses Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStatuses Dest WITH (NOLOCK) ON Src.IDTransportStatus = Dest.IDTransportStatus
					WHERE Dest.IDTransportStatus IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStatuses (
					[IDTransportStatus]
					,[TransportStatusName]
					,[TransportStatusDisplayName]
					,[TransportStatusNumber]
					,[TransportStatusNotes]
					,[TransportStatusViewAccessRight]
					,[TransportStatusEditAccessRight]
					,[TransportStatusStatusChangeAccessRight]
					,[TransportStatusActionName]
					,[TransportStatusActionTooltip]
					,[TransportStatusAddDateTime]
					,[TransportStatusEditDateTime]
					,[TransportStatusAddUserCode]
					,[TransportStatusEditUserCode]
					,[TransportStatusRequiresValidation]
					,[TransportStatusAllowReceiptSelection]
					,[TransportStatusAllowOrderSelection]
					,[TransportStatusReadyForMatrixBilling]
					,[TransportStatusReadyForWaitingTimeBilling]
					,[TransportStatusRecalculateForReceiptChange]
					,[TransportStatusRecalculateForOrderChange]
					,[TransportStatusReceiptActionName]
					,[TransportStatusReceiptActionTooltip]
					,[TransportStatusConfirmCustomsAccessRight]
					,[TransportStatusAddRemarkAccessRight]
					,[TransportStatusModule]
					,[TransportStatusAllowPriceCalculation]
					,[TransportStatusShowPriceToCustomer]
					,[TransportStatusSetMessage]
					,[TransportStatusAllowManualPriceCalculation]
					,[TransportStatusReadyForInvoicing]
					,[TransportStatusReadyForBilling]
					,[TransportStatusOrderActionName]
					,[TransportStatusOrderActionTooltip]
					,[TransportStatusActionIsRarelyUsed]
					,[TransportStatusActionType]
					,[TransportStatusCancelled]
					,[TransportStatusChangeAllActionName]
					,[TransportStatusChangeAllActionTooltip]
					,[TransportStatusChangeAllConfirmationMessage]
					,[TransportStatusConfirmationMessage]
					,[TransportStatusDone]
					,[TransportStatusGoBackToListingAfterChange]
					,[TransportStatusListingActionName]
					,[TransportStatusListingActionTooltip]
					,[TransportStatusListingConfirmationMessage]
					,[TransportStatusMaximumChangedItemsAtOnce]
					,[TransportStatusModuleUpdateType]
					,[TransportStatusWarningLevel]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDTransportStatus AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDTransportStatus]
					,Src.[TransportStatusName]
					,Src.[TransportStatusDisplayName]
					,Src.[TransportStatusNumber]
					,Src.[TransportStatusNotes]
					,Src.[TransportStatusViewAccessRight]
					,Src.[TransportStatusEditAccessRight]
					,Src.[TransportStatusStatusChangeAccessRight]
					,Src.[TransportStatusActionName]
					,Src.[TransportStatusActionTooltip]
					,Src.[TransportStatusAddDateTime]
					,Src.[TransportStatusEditDateTime]
					,Src.[TransportStatusAddUserCode]
					,Src.[TransportStatusEditUserCode]
					,Src.[TransportStatusRequiresValidation]
					,Src.[TransportStatusAllowReceiptSelection]
					,Src.[TransportStatusAllowOrderSelection]
					,Src.[TransportStatusReadyForMatrixBilling]
					,Src.[TransportStatusReadyForWaitingTimeBilling]
					,Src.[TransportStatusRecalculateForReceiptChange]
					,Src.[TransportStatusRecalculateForOrderChange]
					,Src.[TransportStatusReceiptActionName]
					,Src.[TransportStatusReceiptActionTooltip]
					,Src.[TransportStatusConfirmCustomsAccessRight]
					,Src.[TransportStatusAddRemarkAccessRight]
					,Src.[TransportStatusModule]
					,Src.[TransportStatusAllowPriceCalculation]
					,Src.[TransportStatusShowPriceToCustomer]
					,Src.[TransportStatusSetMessage]
					,Src.[TransportStatusAllowManualPriceCalculation]
					,Src.[TransportStatusReadyForInvoicing]
					,Src.[TransportStatusReadyForBilling]
					,Src.[TransportStatusOrderActionName]
					,Src.[TransportStatusOrderActionTooltip]
					,Src.[TransportStatusActionIsRarelyUsed]
					,Src.[TransportStatusActionType]
					,Src.[TransportStatusCancelled]
					,Src.[TransportStatusChangeAllActionName]
					,Src.[TransportStatusChangeAllActionTooltip]
					,Src.[TransportStatusChangeAllConfirmationMessage]
					,Src.[TransportStatusConfirmationMessage]
					,Src.[TransportStatusDone]
					,Src.[TransportStatusGoBackToListingAfterChange]
					,Src.[TransportStatusListingActionName]
					,Src.[TransportStatusListingActionTooltip]
					,Src.[TransportStatusListingConfirmationMessage]
					,Src.[TransportStatusMaximumChangedItemsAtOnce]
					,Src.[TransportStatusModuleUpdateType]
					,Src.[TransportStatusWarningLevel]
				FROM [dbo].TransportStatuses Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStatuses Dest WITH (NOLOCK) ON Src.IDTransportStatus = Dest.IDTransportStatus
				WHERE Dest.IDTransportStatus IS NULL;
			END;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `TransportStatuses` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----DataEntryDefinitions
	SET @CurrentTableName = 'DataEntryDefinitions';
	/*
	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
	BEGIN TRY
		BEGIN TRANSACTION;

		MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.DataEntryDefinitions AS Dest
		USING (
			SELECT [IDDataEntryDefinition]
				,[DataEntryDefinitionDataEntryType]
				,[DataEntryDefinitionName]
				,[DataEntryDefinitionDescription]
				,[DataEntryDefinitionAddDateTime]
				,[DataEntryDefinitionAddUserCode]
				,[DataEntryDefinitionEditDateTime]
				,[DataEntryDefinitionEditUserCode]
				,[DataEntryDefinitionUserDependent]
				,[DataEntryDefinitionCompanyDependent]
				,[DataEntryDefinitionNotes]
				,[DataEntryDefinitionUpdateIfExists]
				,[DataEntryDefinitionBatchInterfacing]
				,[DataEntryDefinitionDeletionDays]
				,[DataEntryDefinitionCustomizationScript]
				,[DataEntryDefinitionValidateExcelFile]
				,[DataEntryDefinitionAutoSaveHeader]
				,[DataEntryDefinitionImportInterface]
				,[DataEntryDefinitionTag]
				,[DataEntryDefinitionImportInterfaceLocationCode]
				,[DataEntryDefinitionExportFileLocation]
				,[DataEntryDefinitionCollapseGrandChildLevel]
				,[DataEntryDefinitionDynamicFormLayout]
				,[DataEntryDefinitionDynamicFormLayoutDetails]
				,[DataEntryDefinitionEditAllLevelsAtOnce]
				,[DataEntryDefinitionShowReadOnlyFieldsAsLabels]
			FROM dbo.DataEntryDefinitions WITH (NOLOCK)
			) AS Src
			ON (Dest.[IDDataEntryDefinition] = Src.[IDDataEntryDefinition])
		WHEN MATCHED
			THEN
				UPDATE
				SET Dest.[DataEntryDefinitionDataEntryType] = Src.[DataEntryDefinitionDataEntryType]
					,Dest.[DataEntryDefinitionName] = Src.[DataEntryDefinitionName]
					,Dest.[DataEntryDefinitionDescription] = Src.[DataEntryDefinitionDescription]
					,Dest.[DataEntryDefinitionAddDateTime] = Src.[DataEntryDefinitionAddDateTime]
					,Dest.[DataEntryDefinitionAddUserCode] = Src.[DataEntryDefinitionAddUserCode]
					,Dest.[DataEntryDefinitionEditDateTime] = Src.[DataEntryDefinitionEditDateTime]
					,Dest.[DataEntryDefinitionEditUserCode] = Src.[DataEntryDefinitionEditUserCode]
					,Dest.[DataEntryDefinitionUserDependent] = Src.[DataEntryDefinitionUserDependent]
					,Dest.[DataEntryDefinitionCompanyDependent] = Src.[DataEntryDefinitionCompanyDependent]
					,Dest.[DataEntryDefinitionNotes] = Src.[DataEntryDefinitionNotes]
					,Dest.[DataEntryDefinitionUpdateIfExists] = Src.[DataEntryDefinitionUpdateIfExists]
					,Dest.[DataEntryDefinitionBatchInterfacing] = Src.[DataEntryDefinitionBatchInterfacing]
					,Dest.[DataEntryDefinitionDeletionDays] = Src.[DataEntryDefinitionDeletionDays]
					,Dest.[DataEntryDefinitionCustomizationScript] = Src.[DataEntryDefinitionCustomizationScript]
					,Dest.[DataEntryDefinitionValidateExcelFile] = Src.[DataEntryDefinitionValidateExcelFile]
					,Dest.[DataEntryDefinitionAutoSaveHeader] = Src.[DataEntryDefinitionAutoSaveHeader]
					,Dest.[DataEntryDefinitionImportInterface] = Src.[DataEntryDefinitionImportInterface]
					,Dest.[DataEntryDefinitionTag] = Src.[DataEntryDefinitionTag]
					,Dest.[DataEntryDefinitionImportInterfaceLocationCode] = Src.[DataEntryDefinitionImportInterfaceLocationCode]
					,Dest.[DataEntryDefinitionExportFileLocation] = Src.[DataEntryDefinitionExportFileLocation]
					,Dest.[DataEntryDefinitionCollapseGrandChildLevel] = Src.[DataEntryDefinitionCollapseGrandChildLevel]
					,Dest.[DataEntryDefinitionDynamicFormLayout] = Src.[DataEntryDefinitionDynamicFormLayout]
					,Dest.[DataEntryDefinitionDynamicFormLayoutDetails] = Src.[DataEntryDefinitionDynamicFormLayoutDetails]
					,Dest.[DataEntryDefinitionEditAllLevelsAtOnce] = Src.[DataEntryDefinitionEditAllLevelsAtOnce]
					,Dest.[DataEntryDefinitionShowReadOnlyFieldsAsLabels] = Src.[DataEntryDefinitionShowReadOnlyFieldsAsLabels]
		WHEN NOT MATCHED
			THEN
				INSERT (
					[IDDataEntryDefinition]
					,[DataEntryDefinitionDataEntryType]
					,[DataEntryDefinitionName]
					,[DataEntryDefinitionDescription]
					,[DataEntryDefinitionAddDateTime]
					,[DataEntryDefinitionAddUserCode]
					,[DataEntryDefinitionEditDateTime]
					,[DataEntryDefinitionEditUserCode]
					,[DataEntryDefinitionUserDependent]
					,[DataEntryDefinitionCompanyDependent]
					,[DataEntryDefinitionNotes]
					,[DataEntryDefinitionUpdateIfExists]
					,[DataEntryDefinitionBatchInterfacing]
					,[DataEntryDefinitionDeletionDays]
					,[DataEntryDefinitionCustomizationScript]
					,[DataEntryDefinitionValidateExcelFile]
					,[DataEntryDefinitionAutoSaveHeader]
					,[DataEntryDefinitionImportInterface]
					,[DataEntryDefinitionTag]
					,[DataEntryDefinitionImportInterfaceLocationCode]
					,[DataEntryDefinitionExportFileLocation]
					,[DataEntryDefinitionCollapseGrandChildLevel]
					,[DataEntryDefinitionDynamicFormLayout]
					,[DataEntryDefinitionDynamicFormLayoutDetails]
					,[DataEntryDefinitionEditAllLevelsAtOnce]
					,[DataEntryDefinitionShowReadOnlyFieldsAsLabels]
					)
				VALUES (
					Src.[IDDataEntryDefinition]
					,Src.[DataEntryDefinitionDataEntryType]
					,Src.[DataEntryDefinitionName]
					,Src.[DataEntryDefinitionDescription]
					,Src.[DataEntryDefinitionAddDateTime]
					,Src.[DataEntryDefinitionAddUserCode]
					,Src.[DataEntryDefinitionEditDateTime]
					,Src.[DataEntryDefinitionEditUserCode]
					,Src.[DataEntryDefinitionUserDependent]
					,Src.[DataEntryDefinitionCompanyDependent]
					,Src.[DataEntryDefinitionNotes]
					,Src.[DataEntryDefinitionUpdateIfExists]
					,Src.[DataEntryDefinitionBatchInterfacing]
					,Src.[DataEntryDefinitionDeletionDays]
					,Src.[DataEntryDefinitionCustomizationScript]
					,Src.[DataEntryDefinitionValidateExcelFile]
					,Src.[DataEntryDefinitionAutoSaveHeader]
					,Src.[DataEntryDefinitionImportInterface]
					,Src.[DataEntryDefinitionTag]
					,Src.[DataEntryDefinitionImportInterfaceLocationCode]
					,Src.[DataEntryDefinitionExportFileLocation]
					,Src.[DataEntryDefinitionCollapseGrandChildLevel]
					,Src.[DataEntryDefinitionDynamicFormLayout]
					,Src.[DataEntryDefinitionDynamicFormLayoutDetails]
					,Src.[DataEntryDefinitionEditAllLevelsAtOnce]
					,Src.[DataEntryDefinitionShowReadOnlyFieldsAsLabels]
					);

		COMMIT TRANSACTION;
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION;

		SET @TypeOfError = ERROR_SEVERITY();
		SET @ErrorNumber = ERROR_NUMBER();
		SET @ErrorMessage = ERROR_MESSAGE();
		SET @LineNumber = ERROR_LINE();
		SET @LogDate = GETUTCDATE();
		SET @Remarks = 'Error while archiving from `DataEntryDefinitions` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

		EXEC pArchiveLogs @Remarks
			,@SourceProcName
			,@TypeOfError
			,@ErrorNumber
			,@ErrorMessage
			,@LineNumber
			,@LogDate
			,@HostName
			,@UserName
			,'Error'
			,@RunID

		RAISERROR (
				@ErrorMessage
				,@TypeOfError
				,- 1
				);
	END CATCH;
END
*/
	--DataEntryDefinitions
	SET @CurrentTableName = 'DataEntryDefinitions';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		IF OBJECT_ID('tempdb..#DataEntryDefinitions') IS NOT NULL
		BEGIN
			DROP TABLE #DataEntryDefinitions;
		END;

		CREATE TABLE #DataEntryDefinitions (
			SlNo INT IDENTITY(1, 1)
			,IDDataEntryDefinition UNIQUEIDENTIFIER
			,DataEntryDefinitionDataEntryType VARCHAR(50)
			);

		IF OBJECT_ID('tempdb..#DataEntryDefinitionsGrouped') IS NOT NULL
		BEGIN
			DROP TABLE #DataEntryDefinitionsGrouped;
		END;

		CREATE TABLE #DataEntryDefinitionsGrouped (
			SlNo INT IDENTITY(1, 1)
			,DataEntryDefinitionDataEntryType VARCHAR(50)
			,NoOfRowsAvailable INT DEFAULT 0
			,NoOfRowsInserted INT DEFAULT 0
			,NoOfRowsUpdated INT DEFAULT 0
			,NoOfRowsUnchanged INT DEFAULT 0
			);

		--IF OBJECT_ID('tempdb..#TempTableMergeRowStatus') IS NOT NULL
		--BEGIN
		--	DROP TABLE #TempTableMergeRowStatus;
		--END;
		--CREATE TABLE #TempTableMergeRowStatus (
		--	Inserted INT
		--	,Updated INT
		--	,Unchanged INT
		--	,Descr NVARCHAR(100)
		--	);
		IF OBJECT_ID('tempdb..#TempTableMergeRowStatus') IS NOT NULL
		BEGIN
			TRUNCATE TABLE #TempTableMergeRowStatus;
		END;

		INSERT INTO #DataEntryDefinitions (
			IDDataEntryDefinition
			,DataEntryDefinitionDataEntryType
			)
		SELECT [DataEntryDefinitions].IDDataEntryDefinition
			,DataEntryDefinitionDataEntryType
		FROM DataEntryDefinitions WITH (NOLOCK)

		--WHERE [DataEntryDefinitions].DataEntryDefinitionDataEntryType
		--IN (SELECT LTRIM(RTRIM([Value]))  FROM string_split(@DataEntryDefinitionDataEntryType, ','))
		----WHERE (
		----		[DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'ValueAddedService'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Issue'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'WarehouseOrder'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'CustomsClearanceOrder'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'DocumentOrder'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'CargoReleaseOrder'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'ManualShipment'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Shipment'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Transport'
		----		)
		--	AND [DataEntryDefinitions].DataEntryDefinitionDeletionDays IS NOT NULL;
		INSERT INTO #DataEntryDefinitionsGrouped (
			DataEntryDefinitionDataEntryType
			,NoOfRowsAvailable
			)
		SELECT DataEntryDefinitionDataEntryType
			,COUNT(1) AS NoOfRowsAvailable
		FROM DataEntryDefinitions WITH (NOLOCK)
		--WHERE [DataEntryDefinitions].DataEntryDefinitionDataEntryType
		--IN (SELECT LTRIM(RTRIM([Value]))  FROM string_split(@DataEntryDefinitionDataEntryType, ','))
		----WHERE (
		----		[DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'ValueAddedService'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Issue'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'WarehouseOrder'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'CustomsClearanceOrder'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'DocumentOrder'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'CargoReleaseOrder'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'ManualShipment'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Shipment'
		----		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Transport'
		----		)
		--	AND [DataEntryDefinitions].DataEntryDefinitionDeletionDays IS NOT NULL
		GROUP BY [DataEntryDefinitions].DataEntryDefinitionDataEntryType;

		TRUNCATE TABLE #tmpTableVal;

		--Archiving DataEntryDefinitions
		/*
		MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.[DataEntryDefinitions] Dest
		USING (
			SELECT [DataEntryDefinitions].IDDataEntryDefinition
				,[DataEntryDefinitions].DataEntryDefinitionAddDateTime
				,[DataEntryDefinitions].DataEntryDefinitionAddUserCode
				,[DataEntryDefinitions].DataEntryDefinitionAutoSaveHeader
				,[DataEntryDefinitions].DataEntryDefinitionBatchInterfacing
				,[DataEntryDefinitions].DataEntryDefinitionCollapseGrandChildLevel
				,[DataEntryDefinitions].DataEntryDefinitionCompanyDependent
				,[DataEntryDefinitions].DataEntryDefinitionCustomizationScript
				,[DataEntryDefinitions].DataEntryDefinitionDataEntryType
				,[DataEntryDefinitions].DataEntryDefinitionTag
				,[DataEntryDefinitions].DataEntryDefinitionDeletionDays
				,[DataEntryDefinitions].DataEntryDefinitionDescription
				,[DataEntryDefinitions].DataEntryDefinitionDynamicFormLayout
				,[DataEntryDefinitions].DataEntryDefinitionDynamicFormLayoutDetails
				,[DataEntryDefinitions].DataEntryDefinitionEditAllLevelsAtOnce
				,[DataEntryDefinitions].DataEntryDefinitionEditDateTime
				,[DataEntryDefinitions].DataEntryDefinitionEditUserCode
				,[DataEntryDefinitions].DataEntryDefinitionExportFileLocation
				,[DataEntryDefinitions].DataEntryDefinitionImportInterface
				,[DataEntryDefinitions].DataEntryDefinitionImportInterfaceLocationCode
				,[DataEntryDefinitions].DataEntryDefinitionName
				,[DataEntryDefinitions].DataEntryDefinitionNotes
				,[DataEntryDefinitions].DataEntryDefinitionShowReadOnlyFieldsAsLabels
				,[DataEntryDefinitions].DataEntryDefinitionUpdateIfExists
				,[DataEntryDefinitions].DataEntryDefinitionUserDependent
				,[DataEntryDefinitions].DataEntryDefinitionValidateExcelFile
			FROM DataEntryDefinitions WITH (NOLOCK)
				--WHERE [DataEntryDefinitions].DataEntryDefinitionDataEntryType
				--IN (SELECT LTRIM(RTRIM([Value]))  FROM string_split(@DataEntryDefinitionDataEntryType, ','))
				--	--WHERE (
				--	--		[DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'ValueAddedService'
				--	--		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Issue'
				--	--		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'WarehouseOrder'
				--	--		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'CustomsClearanceOrder'
				--	--		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'DocumentOrder'
				--	--		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'CargoReleaseOrder'
				--	--		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'ManualShipment'
				--	--		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Shipment'
				--	--		OR [DataEntryDefinitions].DataEntryDefinitionDataEntryType = 'Transport'
				--	--		)
				--		AND [DataEntryDefinitions].DataEntryDefinitionDeletionDays IS NOT NULL
			) Src
			ON (Src.IDDataEntryDefinition = Dest.IDDataEntryDefinition)
		WHEN NOT MATCHED
			THEN
				INSERT (
					IDDataEntryDefinition
					,DataEntryDefinitionAddDateTime
					,DataEntryDefinitionAddUserCode
					,DataEntryDefinitionAutoSaveHeader
					,DataEntryDefinitionBatchInterfacing
					,DataEntryDefinitionCollapseGrandChildLevel
					,DataEntryDefinitionCompanyDependent
					,DataEntryDefinitionCustomizationScript
					,DataEntryDefinitionDataEntryType
					,DataEntryDefinitionTag
					,DataEntryDefinitionDeletionDays
					,DataEntryDefinitionDescription
					,DataEntryDefinitionDynamicFormLayout
					,DataEntryDefinitionDynamicFormLayoutDetails
					,DataEntryDefinitionEditAllLevelsAtOnce
					,DataEntryDefinitionEditDateTime
					,DataEntryDefinitionEditUserCode
					,DataEntryDefinitionExportFileLocation
					,DataEntryDefinitionImportInterface
					,DataEntryDefinitionImportInterfaceLocationCode
					,DataEntryDefinitionName
					,DataEntryDefinitionNotes
					,DataEntryDefinitionShowReadOnlyFieldsAsLabels
					,DataEntryDefinitionUpdateIfExists
					,DataEntryDefinitionUserDependent
					,DataEntryDefinitionValidateExcelFile
					)
				VALUES (
					Src.IDDataEntryDefinition
					,Src.DataEntryDefinitionAddDateTime
					,Src.DataEntryDefinitionAddUserCode
					,Src.DataEntryDefinitionAutoSaveHeader
					,Src.DataEntryDefinitionBatchInterfacing
					,Src.DataEntryDefinitionCollapseGrandChildLevel
					,Src.DataEntryDefinitionCompanyDependent
					,Src.DataEntryDefinitionCustomizationScript
					,Src.DataEntryDefinitionDataEntryType
					,Src.DataEntryDefinitionTag
					,Src.DataEntryDefinitionDeletionDays
					,Src.DataEntryDefinitionDescription
					,Src.DataEntryDefinitionDynamicFormLayout
					,Src.DataEntryDefinitionDynamicFormLayoutDetails
					,Src.DataEntryDefinitionEditAllLevelsAtOnce
					,Src.DataEntryDefinitionEditDateTime
					,Src.DataEntryDefinitionEditUserCode
					,Src.DataEntryDefinitionExportFileLocation
					,Src.DataEntryDefinitionImportInterface
					,Src.DataEntryDefinitionImportInterfaceLocationCode
					,Src.DataEntryDefinitionName
					,Src.DataEntryDefinitionNotes
					,Src.DataEntryDefinitionShowReadOnlyFieldsAsLabels
					,Src.DataEntryDefinitionUpdateIfExists
					,Src.DataEntryDefinitionUserDependent
					,Src.DataEntryDefinitionValidateExcelFile
					)
		WHEN MATCHED
			THEN
				UPDATE
				SET Dest.DataEntryDefinitionAddDateTime = Src.DataEntryDefinitionAddDateTime
					,Dest.DataEntryDefinitionAddUserCode = Src.DataEntryDefinitionAddUserCode
					,Dest.DataEntryDefinitionAutoSaveHeader = Src.DataEntryDefinitionAutoSaveHeader
					,Dest.DataEntryDefinitionBatchInterfacing = Src.DataEntryDefinitionBatchInterfacing
					,Dest.DataEntryDefinitionCollapseGrandChildLevel = Src.DataEntryDefinitionCollapseGrandChildLevel
					,Dest.DataEntryDefinitionCompanyDependent = Src.DataEntryDefinitionCompanyDependent
					,Dest.DataEntryDefinitionCustomizationScript = Src.DataEntryDefinitionCustomizationScript
					,Dest.DataEntryDefinitionDataEntryType = Src.DataEntryDefinitionDataEntryType
					,Dest.DataEntryDefinitionTag = Src.DataEntryDefinitionTag
					,Dest.DataEntryDefinitionDeletionDays = Src.DataEntryDefinitionDeletionDays
					,Dest.DataEntryDefinitionDescription = Src.DataEntryDefinitionDescription
					,Dest.DataEntryDefinitionDynamicFormLayout = Src.DataEntryDefinitionDynamicFormLayout
					,Dest.DataEntryDefinitionDynamicFormLayoutDetails = Src.DataEntryDefinitionDynamicFormLayoutDetails
					,Dest.DataEntryDefinitionEditAllLevelsAtOnce = Src.DataEntryDefinitionEditAllLevelsAtOnce
					,Dest.DataEntryDefinitionEditDateTime = Src.DataEntryDefinitionEditDateTime
					,Dest.DataEntryDefinitionEditUserCode = Src.DataEntryDefinitionEditUserCode
					,Dest.DataEntryDefinitionExportFileLocation = Src.DataEntryDefinitionExportFileLocation
					,Dest.DataEntryDefinitionImportInterface = Src.DataEntryDefinitionImportInterface
					,Dest.DataEntryDefinitionImportInterfaceLocationCode = Src.DataEntryDefinitionImportInterfaceLocationCode
					,Dest.DataEntryDefinitionName = Src.DataEntryDefinitionName
					,Dest.DataEntryDefinitionNotes = Src.DataEntryDefinitionNotes
					,Dest.DataEntryDefinitionShowReadOnlyFieldsAsLabels = Src.DataEntryDefinitionShowReadOnlyFieldsAsLabels
					,Dest.DataEntryDefinitionUpdateIfExists = Src.DataEntryDefinitionUpdateIfExists
					,Dest.DataEntryDefinitionUserDependent = Src.DataEntryDefinitionUserDependent
					,Dest.DataEntryDefinitionValidateExcelFile = Src.DataEntryDefinitionValidateExcelFile
		OUTPUT $ACTION
			,CAST(Inserted.IDDataEntryDefinition AS VARCHAR(50)) AS 'Inserted'
			,CAST(Deleted.IDDataEntryDefinition AS VARCHAR(50)) AS 'Deleted'
			,Inserted.DataEntryDefinitionDataEntryType AS Descr
		INTO #tmpTableVal(MergeAction, InsertedId, DeletedId, Descr);
		*/
		WHILE EXISTS (
				SELECT 1
				FROM [dbo].DataEntryDefinitions Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DataEntryDefinitions Dest WITH (NOLOCK) ON Src.IDDataEntryDefinition = Dest.IDDataEntryDefinition
				WHERE Dest.DataEntryDefinitionEditDateTime < Src.DataEntryDefinitionEditDateTime
				)
		BEGIN
			UPDATE TOP (@BatchSizeForArchival) Dest
			SET Dest.DataEntryDefinitionAddDateTime = Src.DataEntryDefinitionAddDateTime
				,Dest.DataEntryDefinitionAddUserCode = Src.DataEntryDefinitionAddUserCode
				,Dest.DataEntryDefinitionAutoSaveHeader = Src.DataEntryDefinitionAutoSaveHeader
				,Dest.DataEntryDefinitionBatchInterfacing = Src.DataEntryDefinitionBatchInterfacing
				,Dest.DataEntryDefinitionCollapseGrandChildLevel = Src.DataEntryDefinitionCollapseGrandChildLevel
				,Dest.DataEntryDefinitionCompanyDependent = Src.DataEntryDefinitionCompanyDependent
				,Dest.DataEntryDefinitionCustomizationScript = Src.DataEntryDefinitionCustomizationScript
				,Dest.DataEntryDefinitionDataEntryType = Src.DataEntryDefinitionDataEntryType
				,Dest.DataEntryDefinitionTag = Src.DataEntryDefinitionTag
				,Dest.DataEntryDefinitionDeletionDays = Src.DataEntryDefinitionDeletionDays
				,Dest.DataEntryDefinitionDescription = Src.DataEntryDefinitionDescription
				,Dest.DataEntryDefinitionDynamicFormLayout = Src.DataEntryDefinitionDynamicFormLayout
				,Dest.DataEntryDefinitionDynamicFormLayoutDetails = Src.DataEntryDefinitionDynamicFormLayoutDetails
				,Dest.DataEntryDefinitionEditAllLevelsAtOnce = Src.DataEntryDefinitionEditAllLevelsAtOnce
				,Dest.DataEntryDefinitionEditDateTime = Src.DataEntryDefinitionEditDateTime
				,Dest.DataEntryDefinitionEditUserCode = Src.DataEntryDefinitionEditUserCode
				,Dest.DataEntryDefinitionExportFileLocation = Src.DataEntryDefinitionExportFileLocation
				,Dest.DataEntryDefinitionImportInterface = Src.DataEntryDefinitionImportInterface
				,Dest.DataEntryDefinitionImportInterfaceLocationCode = Src.DataEntryDefinitionImportInterfaceLocationCode
				,Dest.DataEntryDefinitionName = Src.DataEntryDefinitionName
				,Dest.DataEntryDefinitionNotes = Src.DataEntryDefinitionNotes
				,Dest.DataEntryDefinitionShowReadOnlyFieldsAsLabels = Src.DataEntryDefinitionShowReadOnlyFieldsAsLabels
				,Dest.DataEntryDefinitionUpdateIfExists = Src.DataEntryDefinitionUpdateIfExists
				,Dest.DataEntryDefinitionUserDependent = Src.DataEntryDefinitionUserDependent
				,Dest.DataEntryDefinitionValidateExcelFile = Src.DataEntryDefinitionValidateExcelFile
			OUTPUT 'UPDATE'
				,CAST(Inserted.IDDataEntryDefinition AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDDataEntryDefinition AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
			FROM [dbo].DataEntryDefinitions Src WITH (NOLOCK)
			INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DataEntryDefinitions Dest ON Src.IDDataEntryDefinition = Dest.IDDataEntryDefinition
			WHERE Dest.DataEntryDefinitionEditDateTime < Src.DataEntryDefinitionEditDateTime;
		END;

		WHILE EXISTS (
				SELECT 1
				FROM [dbo].DataEntryDefinitions Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DataEntryDefinitions Dest WITH (NOLOCK) ON Src.IDDataEntryDefinition = Dest.IDDataEntryDefinition
				WHERE Dest.IDDataEntryDefinition IS NULL
				)
		BEGIN
			INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.DataEntryDefinitions (
				IDDataEntryDefinition
				,DataEntryDefinitionAddDateTime
				,DataEntryDefinitionAddUserCode
				,DataEntryDefinitionAutoSaveHeader
				,DataEntryDefinitionBatchInterfacing
				,DataEntryDefinitionCollapseGrandChildLevel
				,DataEntryDefinitionCompanyDependent
				,DataEntryDefinitionCustomizationScript
				,DataEntryDefinitionDataEntryType
				,DataEntryDefinitionTag
				,DataEntryDefinitionDeletionDays
				,DataEntryDefinitionDescription
				,DataEntryDefinitionDynamicFormLayout
				,DataEntryDefinitionDynamicFormLayoutDetails
				,DataEntryDefinitionEditAllLevelsAtOnce
				,DataEntryDefinitionEditDateTime
				,DataEntryDefinitionEditUserCode
				,DataEntryDefinitionExportFileLocation
				,DataEntryDefinitionImportInterface
				,DataEntryDefinitionImportInterfaceLocationCode
				,DataEntryDefinitionName
				,DataEntryDefinitionNotes
				,DataEntryDefinitionShowReadOnlyFieldsAsLabels
				,DataEntryDefinitionUpdateIfExists
				,DataEntryDefinitionUserDependent
				,DataEntryDefinitionValidateExcelFile
				)
			OUTPUT 'INSERT'
				,CAST(Inserted.IDDataEntryDefinition AS VARCHAR(50)) AS 'Inserted'
				,NULL AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
			SELECT TOP (@BatchSizeForArchival) Src.IDDataEntryDefinition
				,Src.DataEntryDefinitionAddDateTime
				,Src.DataEntryDefinitionAddUserCode
				,Src.DataEntryDefinitionAutoSaveHeader
				,Src.DataEntryDefinitionBatchInterfacing
				,Src.DataEntryDefinitionCollapseGrandChildLevel
				,Src.DataEntryDefinitionCompanyDependent
				,Src.DataEntryDefinitionCustomizationScript
				,Src.DataEntryDefinitionDataEntryType
				,Src.DataEntryDefinitionTag
				,Src.DataEntryDefinitionDeletionDays
				,Src.DataEntryDefinitionDescription
				,Src.DataEntryDefinitionDynamicFormLayout
				,Src.DataEntryDefinitionDynamicFormLayoutDetails
				,Src.DataEntryDefinitionEditAllLevelsAtOnce
				,Src.DataEntryDefinitionEditDateTime
				,Src.DataEntryDefinitionEditUserCode
				,Src.DataEntryDefinitionExportFileLocation
				,Src.DataEntryDefinitionImportInterface
				,Src.DataEntryDefinitionImportInterfaceLocationCode
				,Src.DataEntryDefinitionName
				,Src.DataEntryDefinitionNotes
				,Src.DataEntryDefinitionShowReadOnlyFieldsAsLabels
				,Src.DataEntryDefinitionUpdateIfExists
				,Src.DataEntryDefinitionUserDependent
				,Src.DataEntryDefinitionValidateExcelFile
			FROM [dbo].DataEntryDefinitions Src WITH (NOLOCK)
			LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DataEntryDefinitions Dest WITH (NOLOCK) ON Src.IDDataEntryDefinition = Dest.IDDataEntryDefinition
			WHERE Dest.IDDataEntryDefinition IS NULL;
		END;

		UPDATE DG
		SET DG.NoOfRowsInserted = tTV.RowCnt
		FROM #DataEntryDefinitionsGrouped DG
		INNER JOIN (
			SELECT Descr
				,COUNT(MergeAction) RowCnt
			FROM #tmpTableVal
			WHERE MergeAction = 'INSERT'
			GROUP BY Descr
			) tTV ON DG.DataEntryDefinitionDataEntryType = tTV.Descr;

		UPDATE DG
		SET DG.NoOfRowsUpdated = tTV.RowCnt
		FROM #DataEntryDefinitionsGrouped DG
		INNER JOIN (
			SELECT Descr
				,COUNT(MergeAction) RowCnt
			FROM #tmpTableVal
			WHERE MergeAction = 'UPDATE'
			GROUP BY Descr
			) tTV ON DG.DataEntryDefinitionDataEntryType = tTV.Descr;

		UPDATE DG
		SET DG.NoOfRowsUnchanged = DG.NoOfRowsAvailable - (DG.NoOfRowsInserted + DG.NoOfRowsUpdated)
		FROM #DataEntryDefinitionsGrouped DG;

		SET @TotRowCount = (
				SELECT COUNT(1)
				FROM #DataEntryDefinitionsGrouped
				);
		SET @Ctr01 = 0;

		WHILE @Ctr01 < @TotRowCount
		BEGIN
			SELECT @Remarks = '(' + @DataBase + ') DataEntryDefinitions (' + tmp.DataEntryDefinitionDataEntryType + '): No. of Records: ' + CAST(tmp.NoOfRowsAvailable AS VARCHAR(10)) + '. Inserted: ' + CAST(tmp.NoOfRowsInserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.NoOfRowsUpdated AS VARCHAR(10)) + ', Unchanged: ' + CAST(tmp.NoOfRowsUnchanged AS VARCHAR(10))
			FROM #DataEntryDefinitionsGrouped tmp
			WHERE tmp.SlNo = @Ctr01 + 1;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			SET @Ctr01 = @Ctr01 + 1;
		END;
	END

	----Transports
	SET @CurrentTableName = 'Transports';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Transports AS Dest
			USING (
				SELECT [IDTransport]
					,[DataEntryDefinitionID]
					,[TransportStatusID]
					,[TransportType]
					,[TransportDepartment]
					,[TransportNumber]
					,[TransportDirect]
					,[TransportCarrierID]
					,[TransportCarrierEmail]
					,[TransportTransportCosts]
					,[TransportFuelSurcharge]
					,[TransportExtraStopCosts]
					,[TransportCarrierRemarks]
					,[TransportAddDateTime]
					,[TransportEditDateTime]
					,[TransportAddUserCode]
					,[TransportEditUserCode]
					,[TransportStatusChangeDateTime]
					,[TransportPickUpCompanyID]
					,[TransportPickUpAddress1]
					,[TransportPickUpAddress2]
					,[TransportPickUpAddress3]
					,[TransportPickUpAddress4]
					,[TransportPickUpCity]
					,[TransportPickUpState]
					,[TransportPickUpZipCode]
					,[TransportPickUpCountry]
					,[TransportPickUpReference]
					,[TransportStatusIDPrevious]
					,[TransportCarrierName]
					,[TransportValueAddedTax]
					,[TransportFuelSurchargePercentage]
					,[TransportSalesOrderNumber]
					,[TransportPurchaseOrderNumber]
					,[TransportPickupDateTime]
					,[TransportPickupMoment]
					,[TransportPickupCompanyName]
					,[TransportInternalNotes]
					,[TransportTruckLicensePlate]
					,[TransportTruckDriver]
					,[TransportTruckPhone]
					,[TransportWaitingFeeEstimated]
					,[TransportCostsWaitingFee]
					,[TransportCostsParkingFee]
					,[TransportCostsEstimated]
					,[TransportCostsRoadTolls]
					,[CurrencyCode]
					,[TransportFreightWeight]
					,[TransportVolume]
					,[TransportLoadMetres]
					,[TransportCharges]
					,[TransportReadyForMatrixBillingDateTime]
					,[TransportReadyForWaitingTimeBillingDateTime]
					,[TransportDeliveryDateTime]
					,[TransportCustomsConfirmed]
					,[TransportActualArrivalDateTime]
					,[TransportReadyForBillingDateTime]
					,[TransportCompanyID]
					,[TransportUserDefinedText01]
					,[TransportUserDefinedText02]
					,[TransportUserDefinedText03]
					,[TransportUserDefinedText04]
					,[TransportUserDefinedDate01]
					,[TransportUserDefinedDate02]
					,[TransportLastComment]
					,[TransportThresholdType]
					,[TransportCheapestSolutionCost]
					,[TransportChosenSolutionCost]
					,[TransportChosenNonOptimalReasonCode]
					,[TransportChosenNonOptimalReason]
					,[PalletTypeCode]
					,[TransportCreationRunDateTime]
					,[TransportBasedOnOptimization]
					,[TransportUserDefinedLongText01]
					,[TransportUserDefinedLongText02]
					,[TransportUserDefinedLongText03]
					,[TransportLastStopMoveDateTime]
					,[TransportCheapestSolutionRevenue]
					,[TransportChosenSolutionRevenue]
					,[TransportDock]
					,[TransportDockDateTime]
					,[TransportStartUnloadingDateTime]
					,[TransportEndUnloadingDateTime]
					,[TransportStartLoadingDateTime]
					,[TransportEndLoadingDateTime]
					,[TransportNotes]
					,[TransportDiscrepancey]
					,[TransportActualCarrierID]
					,[TransportDockIsCleared]
					,[SubContextCode]
					,[TransportContact]
					,[TransportContactEmail]
					,[TransportContactPhone]
					,[TransportVesselCode]
					,[TransportVesselName]
					,[TransportVoyageCode]
					,[TransportUserDefinedYesNo01]
					,[TransportUserDefinedYesNo02]
					,[TransportUserDefinedYesNo03]
					,[TransportUserDefinedYesNo04]
					,[TransportUserDefinedYesNo05]
					,[TransportUserDefinedDateTime01]
					,[TransportUserDefinedDateTime02]
					,[TransportUserDefinedDateTime03]
					,[TransportUserDefinedDateTime04]
					,[TransportUserDefinedDateTime05]
					,[TransportUserDefinedDateTime06]
					,[TransportUserDefinedDateTime07]
					,[TransportUserDefinedDateTime09]
					,[TransportUserDefinedDateTime10]
					,[TransportUserDefinedNumber01]
					,[TransportUserDefinedNumber02]
					,[TransportUserDefinedNumber03]
					,[TransportUserDefinedNumber04]
					,[TransportUserDefinedNumber05]
					,[TransportUserDefinedLongText04]
					,[TransportUserDefinedLongText05]
					,[TransportUserDefinedText05]
					,[TransportUserDefinedText06]
					,[TransportUserDefinedText07]
					,[TransportUserDefinedText08]
					,[TransportUserDefinedText09]
					,[TransportUserDefinedText10]
					,[TransportUserDefinedText11]
					,[TransportUserDefinedText12]
					,[TransportUserDefinedText13]
					,[TransportUserDefinedText14]
					,[TransportUserDefinedText15]
					,[TransportChangesAcceptedDateTime]
					,[TransportRuleType]
					,[TransportCreationDataSource]
					,[TransportChangedDataStorageString]
					,[CountryCode]
					,[TransportLastChequeNumber]
					,[TransportTruck2LicensePlate]
					,[TransportTrailerLicensePlate]
					,[TransportTrailer2LicensePlate]
					,[TransportTruckType]
					,[TransportHaulageType]
					,[TransportOptimizationPlanName]
					,[TransportOptimizationPlanRunID]
					,[TransportRoute]
					,[TransportUserDefinedDateTime08]
					,[TransportEstimatedDateTimeOfDeparture]
					,[TransportEstimatedDateTimeOfArrival]
					,[TransportContainerNumber]
					,[TransportSeal1]
					,[TransportSeal2]
					,[TransportContainerType]
					,[TransportUserDefinedNumber06]
					,[TransportUserDefinedNumber07]
					,[TransportUserDefinedNumber08]
					,[TransportUserDefinedNumber09]
					,[TransportUserDefinedNumber10]
					,[TransportNewEDIPending]
					,[TransportLastExternalChangeDateTime]
					,[TransportLastFlagExternalChangeHandledDateTime]
					,[TransportExternalCompanySavedChargesDateTime]
					,[TransportStopIDFirst]
					,[TransportStopIDLast]
					,[TransportImportBatch]
					,[TransportFileUploadCount]
					,[TransportUserDefinedDateTime11]
					,[TransportUserDefinedDateTime12]
					,[TransportUserDefinedDateTime13]
					,[TransportUserDefinedDateTime14]
					,[TransportUserDefinedDateTime15]
					,[TransportUserDefinedNumber11]
					,[TransportUserDefinedNumber12]
					,[TransportUserDefinedNumber13]
					,[TransportUserDefinedNumber14]
					,[TransportUserDefinedNumber15]
					,[TransportUserDefinedNumber16]
					,[TransportUserDefinedNumber17]
					,[TransportUserDefinedNumber18]
					,[TransportUserDefinedNumber19]
					,[TransportUserDefinedNumber20]
				FROM dbo.Transports WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDTransport] = Src.[IDTransport])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
						,Dest.[TransportStatusID] = Src.[TransportStatusID]
						,Dest.[TransportType] = Src.[TransportType]
						,Dest.[TransportDepartment] = Src.[TransportDepartment]
						,Dest.[TransportNumber] = Src.[TransportNumber]
						,Dest.[TransportDirect] = Src.[TransportDirect]
						,Dest.[TransportCarrierID] = Src.[TransportCarrierID]
						,Dest.[TransportCarrierEmail] = Src.[TransportCarrierEmail]
						,Dest.[TransportTransportCosts] = Src.[TransportTransportCosts]
						,Dest.[TransportFuelSurcharge] = Src.[TransportFuelSurcharge]
						,Dest.[TransportExtraStopCosts] = Src.[TransportExtraStopCosts]
						,Dest.[TransportCarrierRemarks] = Src.[TransportCarrierRemarks]
						,Dest.[TransportAddDateTime] = Src.[TransportAddDateTime]
						,Dest.[TransportEditDateTime] = Src.[TransportEditDateTime]
						,Dest.[TransportAddUserCode] = Src.[TransportAddUserCode]
						,Dest.[TransportEditUserCode] = Src.[TransportEditUserCode]
						,Dest.[TransportStatusChangeDateTime] = Src.[TransportStatusChangeDateTime]
						,Dest.[TransportPickUpCompanyID] = Src.[TransportPickUpCompanyID]
						,Dest.[TransportPickUpAddress1] = Src.[TransportPickUpAddress1]
						,Dest.[TransportPickUpAddress2] = Src.[TransportPickUpAddress2]
						,Dest.[TransportPickUpAddress3] = Src.[TransportPickUpAddress3]
						,Dest.[TransportPickUpAddress4] = Src.[TransportPickUpAddress4]
						,Dest.[TransportPickUpCity] = Src.[TransportPickUpCity]
						,Dest.[TransportPickUpState] = Src.[TransportPickUpState]
						,Dest.[TransportPickUpZipCode] = Src.[TransportPickUpZipCode]
						,Dest.[TransportPickUpCountry] = Src.[TransportPickUpCountry]
						,Dest.[TransportPickUpReference] = Src.[TransportPickUpReference]
						,Dest.[TransportStatusIDPrevious] = Src.[TransportStatusIDPrevious]
						,Dest.[TransportCarrierName] = Src.[TransportCarrierName]
						,Dest.[TransportValueAddedTax] = Src.[TransportValueAddedTax]
						,Dest.[TransportFuelSurchargePercentage] = Src.[TransportFuelSurchargePercentage]
						,Dest.[TransportSalesOrderNumber] = Src.[TransportSalesOrderNumber]
						,Dest.[TransportPurchaseOrderNumber] = Src.[TransportPurchaseOrderNumber]
						,Dest.[TransportPickupDateTime] = Src.[TransportPickupDateTime]
						,Dest.[TransportPickupMoment] = Src.[TransportPickupMoment]
						,Dest.[TransportPickupCompanyName] = Src.[TransportPickupCompanyName]
						,Dest.[TransportInternalNotes] = Src.[TransportInternalNotes]
						,Dest.[TransportTruckLicensePlate] = Src.[TransportTruckLicensePlate]
						,Dest.[TransportTruckDriver] = Src.[TransportTruckDriver]
						,Dest.[TransportTruckPhone] = Src.[TransportTruckPhone]
						,Dest.[TransportWaitingFeeEstimated] = Src.[TransportWaitingFeeEstimated]
						,Dest.[TransportCostsWaitingFee] = Src.[TransportCostsWaitingFee]
						,Dest.[TransportCostsParkingFee] = Src.[TransportCostsParkingFee]
						,Dest.[TransportCostsEstimated] = Src.[TransportCostsEstimated]
						,Dest.[TransportCostsRoadTolls] = Src.[TransportCostsRoadTolls]
						,Dest.[CurrencyCode] = Src.[CurrencyCode]
						,Dest.[TransportFreightWeight] = Src.[TransportFreightWeight]
						,Dest.[TransportVolume] = Src.[TransportVolume]
						,Dest.[TransportLoadMetres] = Src.[TransportLoadMetres]
						,Dest.[TransportCharges] = Src.[TransportCharges]
						,Dest.[TransportReadyForMatrixBillingDateTime] = Src.[TransportReadyForMatrixBillingDateTime]
						,Dest.[TransportReadyForWaitingTimeBillingDateTime] = Src.[TransportReadyForWaitingTimeBillingDateTime]
						,Dest.[TransportDeliveryDateTime] = Src.[TransportDeliveryDateTime]
						,Dest.[TransportCustomsConfirmed] = Src.[TransportCustomsConfirmed]
						,Dest.[TransportActualArrivalDateTime] = Src.[TransportActualArrivalDateTime]
						,Dest.[TransportReadyForBillingDateTime] = Src.[TransportReadyForBillingDateTime]
						,Dest.[TransportCompanyID] = Src.[TransportCompanyID]
						,Dest.[TransportUserDefinedText01] = Src.[TransportUserDefinedText01]
						,Dest.[TransportUserDefinedText02] = Src.[TransportUserDefinedText02]
						,Dest.[TransportUserDefinedText03] = Src.[TransportUserDefinedText03]
						,Dest.[TransportUserDefinedText04] = Src.[TransportUserDefinedText04]
						,Dest.[TransportUserDefinedDate01] = Src.[TransportUserDefinedDate01]
						,Dest.[TransportUserDefinedDate02] = Src.[TransportUserDefinedDate02]
						,Dest.[TransportLastComment] = Src.[TransportLastComment]
						,Dest.[TransportThresholdType] = Src.[TransportThresholdType]
						,Dest.[TransportCheapestSolutionCost] = Src.[TransportCheapestSolutionCost]
						,Dest.[TransportChosenSolutionCost] = Src.[TransportChosenSolutionCost]
						,Dest.[TransportChosenNonOptimalReasonCode] = Src.[TransportChosenNonOptimalReasonCode]
						,Dest.[TransportChosenNonOptimalReason] = Src.[TransportChosenNonOptimalReason]
						,Dest.[PalletTypeCode] = Src.[PalletTypeCode]
						,Dest.[TransportCreationRunDateTime] = Src.[TransportCreationRunDateTime]
						,Dest.[TransportBasedOnOptimization] = Src.[TransportBasedOnOptimization]
						,Dest.[TransportUserDefinedLongText01] = Src.[TransportUserDefinedLongText01]
						,Dest.[TransportUserDefinedLongText02] = Src.[TransportUserDefinedLongText02]
						,Dest.[TransportUserDefinedLongText03] = Src.[TransportUserDefinedLongText03]
						,Dest.[TransportLastStopMoveDateTime] = Src.[TransportLastStopMoveDateTime]
						,Dest.[TransportCheapestSolutionRevenue] = Src.[TransportCheapestSolutionRevenue]
						,Dest.[TransportChosenSolutionRevenue] = Src.[TransportChosenSolutionRevenue]
						,Dest.[TransportDock] = Src.[TransportDock]
						,Dest.[TransportDockDateTime] = Src.[TransportDockDateTime]
						,Dest.[TransportStartUnloadingDateTime] = Src.[TransportStartUnloadingDateTime]
						,Dest.[TransportEndUnloadingDateTime] = Src.[TransportEndUnloadingDateTime]
						,Dest.[TransportStartLoadingDateTime] = Src.[TransportStartLoadingDateTime]
						,Dest.[TransportEndLoadingDateTime] = Src.[TransportEndLoadingDateTime]
						,Dest.[TransportNotes] = Src.[TransportNotes]
						,Dest.[TransportDiscrepancey] = Src.[TransportDiscrepancey]
						,Dest.[TransportActualCarrierID] = Src.[TransportActualCarrierID]
						,Dest.[TransportDockIsCleared] = Src.[TransportDockIsCleared]
						,Dest.[SubContextCode] = Src.[SubContextCode]
						,Dest.[TransportContact] = Src.[TransportContact]
						,Dest.[TransportContactEmail] = Src.[TransportContactEmail]
						,Dest.[TransportContactPhone] = Src.[TransportContactPhone]
						,Dest.[TransportVesselCode] = Src.[TransportVesselCode]
						,Dest.[TransportVesselName] = Src.[TransportVesselName]
						,Dest.[TransportVoyageCode] = Src.[TransportVoyageCode]
						,Dest.[TransportUserDefinedYesNo01] = Src.[TransportUserDefinedYesNo01]
						,Dest.[TransportUserDefinedYesNo02] = Src.[TransportUserDefinedYesNo02]
						,Dest.[TransportUserDefinedYesNo03] = Src.[TransportUserDefinedYesNo03]
						,Dest.[TransportUserDefinedYesNo04] = Src.[TransportUserDefinedYesNo04]
						,Dest.[TransportUserDefinedYesNo05] = Src.[TransportUserDefinedYesNo05]
						,Dest.[TransportUserDefinedDateTime01] = Src.[TransportUserDefinedDateTime01]
						,Dest.[TransportUserDefinedDateTime02] = Src.[TransportUserDefinedDateTime02]
						,Dest.[TransportUserDefinedDateTime03] = Src.[TransportUserDefinedDateTime03]
						,Dest.[TransportUserDefinedDateTime04] = Src.[TransportUserDefinedDateTime04]
						,Dest.[TransportUserDefinedDateTime05] = Src.[TransportUserDefinedDateTime05]
						,Dest.[TransportUserDefinedDateTime06] = Src.[TransportUserDefinedDateTime06]
						,Dest.[TransportUserDefinedDateTime07] = Src.[TransportUserDefinedDateTime07]
						,Dest.[TransportUserDefinedDateTime09] = Src.[TransportUserDefinedDateTime09]
						,Dest.[TransportUserDefinedDateTime10] = Src.[TransportUserDefinedDateTime10]
						,Dest.[TransportUserDefinedNumber01] = Src.[TransportUserDefinedNumber01]
						,Dest.[TransportUserDefinedNumber02] = Src.[TransportUserDefinedNumber02]
						,Dest.[TransportUserDefinedNumber03] = Src.[TransportUserDefinedNumber03]
						,Dest.[TransportUserDefinedNumber04] = Src.[TransportUserDefinedNumber04]
						,Dest.[TransportUserDefinedNumber05] = Src.[TransportUserDefinedNumber05]
						,Dest.[TransportUserDefinedLongText04] = Src.[TransportUserDefinedLongText04]
						,Dest.[TransportUserDefinedLongText05] = Src.[TransportUserDefinedLongText05]
						,Dest.[TransportUserDefinedText05] = Src.[TransportUserDefinedText05]
						,Dest.[TransportUserDefinedText06] = Src.[TransportUserDefinedText06]
						,Dest.[TransportUserDefinedText07] = Src.[TransportUserDefinedText07]
						,Dest.[TransportUserDefinedText08] = Src.[TransportUserDefinedText08]
						,Dest.[TransportUserDefinedText09] = Src.[TransportUserDefinedText09]
						,Dest.[TransportUserDefinedText10] = Src.[TransportUserDefinedText10]
						,Dest.[TransportUserDefinedText11] = Src.[TransportUserDefinedText11]
						,Dest.[TransportUserDefinedText12] = Src.[TransportUserDefinedText12]
						,Dest.[TransportUserDefinedText13] = Src.[TransportUserDefinedText13]
						,Dest.[TransportUserDefinedText14] = Src.[TransportUserDefinedText14]
						,Dest.[TransportUserDefinedText15] = Src.[TransportUserDefinedText15]
						,Dest.[TransportChangesAcceptedDateTime] = Src.[TransportChangesAcceptedDateTime]
						,Dest.[TransportRuleType] = Src.[TransportRuleType]
						,Dest.[TransportCreationDataSource] = Src.[TransportCreationDataSource]
						,Dest.[TransportChangedDataStorageString] = Src.[TransportChangedDataStorageString]
						,Dest.[CountryCode] = Src.[CountryCode]
						,Dest.[TransportLastChequeNumber] = Src.[TransportLastChequeNumber]
						,Dest.[TransportTruck2LicensePlate] = Src.[TransportTruck2LicensePlate]
						,Dest.[TransportTrailerLicensePlate] = Src.[TransportTrailerLicensePlate]
						,Dest.[TransportTrailer2LicensePlate] = Src.[TransportTrailer2LicensePlate]
						,Dest.[TransportTruckType] = Src.[TransportTruckType]
						,Dest.[TransportHaulageType] = Src.[TransportHaulageType]
						,Dest.[TransportOptimizationPlanName] = Src.[TransportOptimizationPlanName]
						,Dest.[TransportOptimizationPlanRunID] = Src.[TransportOptimizationPlanRunID]
						,Dest.[TransportRoute] = Src.[TransportRoute]
						,Dest.[TransportUserDefinedDateTime08] = Src.[TransportUserDefinedDateTime08]
						,Dest.[TransportEstimatedDateTimeOfDeparture] = Src.[TransportEstimatedDateTimeOfDeparture]
						,Dest.[TransportEstimatedDateTimeOfArrival] = Src.[TransportEstimatedDateTimeOfArrival]
						,Dest.[TransportContainerNumber] = Src.[TransportContainerNumber]
						,Dest.[TransportSeal1] = Src.[TransportSeal1]
						,Dest.[TransportSeal2] = Src.[TransportSeal2]
						,Dest.[TransportContainerType] = Src.[TransportContainerType]
						,Dest.[TransportUserDefinedNumber06] = Src.[TransportUserDefinedNumber06]
						,Dest.[TransportUserDefinedNumber07] = Src.[TransportUserDefinedNumber07]
						,Dest.[TransportUserDefinedNumber08] = Src.[TransportUserDefinedNumber08]
						,Dest.[TransportUserDefinedNumber09] = Src.[TransportUserDefinedNumber09]
						,Dest.[TransportUserDefinedNumber10] = Src.[TransportUserDefinedNumber10]
						,Dest.[TransportNewEDIPending] = Src.[TransportNewEDIPending]
						,Dest.[TransportLastExternalChangeDateTime] = Src.[TransportLastExternalChangeDateTime]
						,Dest.[TransportLastFlagExternalChangeHandledDateTime] = Src.[TransportLastFlagExternalChangeHandledDateTime]
						,Dest.[TransportExternalCompanySavedChargesDateTime] = Src.[TransportExternalCompanySavedChargesDateTime]
						,Dest.[TransportStopIDFirst] = Src.[TransportStopIDFirst]
						,Dest.[TransportStopIDLast] = Src.[TransportStopIDLast]
						,Dest.[TransportImportBatch] = Src.[TransportImportBatch]
						,Dest.[TransportFileUploadCount] = Src.[TransportFileUploadCount]
						,Dest.[TransportUserDefinedDateTime11] = Src.[TransportUserDefinedDateTime11]
						,Dest.[TransportUserDefinedDateTime12] = Src.[TransportUserDefinedDateTime12]
						,Dest.[TransportUserDefinedDateTime13] = Src.[TransportUserDefinedDateTime13]
						,Dest.[TransportUserDefinedDateTime14] = Src.[TransportUserDefinedDateTime14]
						,Dest.[TransportUserDefinedDateTime15] = Src.[TransportUserDefinedDateTime15]
						,Dest.[TransportUserDefinedNumber11] = Src.[TransportUserDefinedNumber11]
						,Dest.[TransportUserDefinedNumber12] = Src.[TransportUserDefinedNumber12]
						,Dest.[TransportUserDefinedNumber13] = Src.[TransportUserDefinedNumber13]
						,Dest.[TransportUserDefinedNumber14] = Src.[TransportUserDefinedNumber14]
						,Dest.[TransportUserDefinedNumber15] = Src.[TransportUserDefinedNumber15]
						,Dest.[TransportUserDefinedNumber16] = Src.[TransportUserDefinedNumber16]
						,Dest.[TransportUserDefinedNumber17] = Src.[TransportUserDefinedNumber17]
						,Dest.[TransportUserDefinedNumber18] = Src.[TransportUserDefinedNumber18]
						,Dest.[TransportUserDefinedNumber19] = Src.[TransportUserDefinedNumber19]
						,Dest.[TransportUserDefinedNumber20] = Src.[TransportUserDefinedNumber20]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDTransport]
						,[DataEntryDefinitionID]
						,[TransportStatusID]
						,[TransportType]
						,[TransportDepartment]
						,[TransportNumber]
						,[TransportDirect]
						,[TransportCarrierID]
						,[TransportCarrierEmail]
						,[TransportTransportCosts]
						,[TransportFuelSurcharge]
						,[TransportExtraStopCosts]
						,[TransportCarrierRemarks]
						,[TransportAddDateTime]
						,[TransportEditDateTime]
						,[TransportAddUserCode]
						,[TransportEditUserCode]
						,[TransportStatusChangeDateTime]
						,[TransportPickUpCompanyID]
						,[TransportPickUpAddress1]
						,[TransportPickUpAddress2]
						,[TransportPickUpAddress3]
						,[TransportPickUpAddress4]
						,[TransportPickUpCity]
						,[TransportPickUpState]
						,[TransportPickUpZipCode]
						,[TransportPickUpCountry]
						,[TransportPickUpReference]
						,[TransportStatusIDPrevious]
						,[TransportCarrierName]
						,[TransportValueAddedTax]
						,[TransportFuelSurchargePercentage]
						,[TransportSalesOrderNumber]
						,[TransportPurchaseOrderNumber]
						,[TransportPickupDateTime]
						,[TransportPickupMoment]
						,[TransportPickupCompanyName]
						,[TransportInternalNotes]
						,[TransportTruckLicensePlate]
						,[TransportTruckDriver]
						,[TransportTruckPhone]
						,[TransportWaitingFeeEstimated]
						,[TransportCostsWaitingFee]
						,[TransportCostsParkingFee]
						,[TransportCostsEstimated]
						,[TransportCostsRoadTolls]
						,[CurrencyCode]
						,[TransportFreightWeight]
						,[TransportVolume]
						,[TransportLoadMetres]
						,[TransportCharges]
						,[TransportReadyForMatrixBillingDateTime]
						,[TransportReadyForWaitingTimeBillingDateTime]
						,[TransportDeliveryDateTime]
						,[TransportCustomsConfirmed]
						,[TransportActualArrivalDateTime]
						,[TransportReadyForBillingDateTime]
						,[TransportCompanyID]
						,[TransportUserDefinedText01]
						,[TransportUserDefinedText02]
						,[TransportUserDefinedText03]
						,[TransportUserDefinedText04]
						,[TransportUserDefinedDate01]
						,[TransportUserDefinedDate02]
						,[TransportLastComment]
						,[TransportThresholdType]
						,[TransportCheapestSolutionCost]
						,[TransportChosenSolutionCost]
						,[TransportChosenNonOptimalReasonCode]
						,[TransportChosenNonOptimalReason]
						,[PalletTypeCode]
						,[TransportCreationRunDateTime]
						,[TransportBasedOnOptimization]
						,[TransportUserDefinedLongText01]
						,[TransportUserDefinedLongText02]
						,[TransportUserDefinedLongText03]
						,[TransportLastStopMoveDateTime]
						,[TransportCheapestSolutionRevenue]
						,[TransportChosenSolutionRevenue]
						,[TransportDock]
						,[TransportDockDateTime]
						,[TransportStartUnloadingDateTime]
						,[TransportEndUnloadingDateTime]
						,[TransportStartLoadingDateTime]
						,[TransportEndLoadingDateTime]
						,[TransportNotes]
						,[TransportDiscrepancey]
						,[TransportActualCarrierID]
						,[TransportDockIsCleared]
						,[SubContextCode]
						,[TransportContact]
						,[TransportContactEmail]
						,[TransportContactPhone]
						,[TransportVesselCode]
						,[TransportVesselName]
						,[TransportVoyageCode]
						,[TransportUserDefinedYesNo01]
						,[TransportUserDefinedYesNo02]
						,[TransportUserDefinedYesNo03]
						,[TransportUserDefinedYesNo04]
						,[TransportUserDefinedYesNo05]
						,[TransportUserDefinedDateTime01]
						,[TransportUserDefinedDateTime02]
						,[TransportUserDefinedDateTime03]
						,[TransportUserDefinedDateTime04]
						,[TransportUserDefinedDateTime05]
						,[TransportUserDefinedDateTime06]
						,[TransportUserDefinedDateTime07]
						,[TransportUserDefinedDateTime09]
						,[TransportUserDefinedDateTime10]
						,[TransportUserDefinedNumber01]
						,[TransportUserDefinedNumber02]
						,[TransportUserDefinedNumber03]
						,[TransportUserDefinedNumber04]
						,[TransportUserDefinedNumber05]
						,[TransportUserDefinedLongText04]
						,[TransportUserDefinedLongText05]
						,[TransportUserDefinedText05]
						,[TransportUserDefinedText06]
						,[TransportUserDefinedText07]
						,[TransportUserDefinedText08]
						,[TransportUserDefinedText09]
						,[TransportUserDefinedText10]
						,[TransportUserDefinedText11]
						,[TransportUserDefinedText12]
						,[TransportUserDefinedText13]
						,[TransportUserDefinedText14]
						,[TransportUserDefinedText15]
						,[TransportChangesAcceptedDateTime]
						,[TransportRuleType]
						,[TransportCreationDataSource]
						,[TransportChangedDataStorageString]
						,[CountryCode]
						,[TransportLastChequeNumber]
						,[TransportTruck2LicensePlate]
						,[TransportTrailerLicensePlate]
						,[TransportTrailer2LicensePlate]
						,[TransportTruckType]
						,[TransportHaulageType]
						,[TransportOptimizationPlanName]
						,[TransportOptimizationPlanRunID]
						,[TransportRoute]
						,[TransportUserDefinedDateTime08]
						,[TransportEstimatedDateTimeOfDeparture]
						,[TransportEstimatedDateTimeOfArrival]
						,[TransportContainerNumber]
						,[TransportSeal1]
						,[TransportSeal2]
						,[TransportContainerType]
						,[TransportUserDefinedNumber06]
						,[TransportUserDefinedNumber07]
						,[TransportUserDefinedNumber08]
						,[TransportUserDefinedNumber09]
						,[TransportUserDefinedNumber10]
						,[TransportNewEDIPending]
						,[TransportLastExternalChangeDateTime]
						,[TransportLastFlagExternalChangeHandledDateTime]
						,[TransportExternalCompanySavedChargesDateTime]
						,[TransportStopIDFirst]
						,[TransportStopIDLast]
						,[TransportImportBatch]
						,[TransportFileUploadCount]
						,[TransportUserDefinedDateTime11]
						,[TransportUserDefinedDateTime12]
						,[TransportUserDefinedDateTime13]
						,[TransportUserDefinedDateTime14]
						,[TransportUserDefinedDateTime15]
						,[TransportUserDefinedNumber11]
						,[TransportUserDefinedNumber12]
						,[TransportUserDefinedNumber13]
						,[TransportUserDefinedNumber14]
						,[TransportUserDefinedNumber15]
						,[TransportUserDefinedNumber16]
						,[TransportUserDefinedNumber17]
						,[TransportUserDefinedNumber18]
						,[TransportUserDefinedNumber19]
						,[TransportUserDefinedNumber20]
						)
					VALUES (
						Src.[IDTransport]
						,Src.[DataEntryDefinitionID]
						,Src.[TransportStatusID]
						,Src.[TransportType]
						,Src.[TransportDepartment]
						,Src.[TransportNumber]
						,Src.[TransportDirect]
						,Src.[TransportCarrierID]
						,Src.[TransportCarrierEmail]
						,Src.[TransportTransportCosts]
						,Src.[TransportFuelSurcharge]
						,Src.[TransportExtraStopCosts]
						,Src.[TransportCarrierRemarks]
						,Src.[TransportAddDateTime]
						,Src.[TransportEditDateTime]
						,Src.[TransportAddUserCode]
						,Src.[TransportEditUserCode]
						,Src.[TransportStatusChangeDateTime]
						,Src.[TransportPickUpCompanyID]
						,Src.[TransportPickUpAddress1]
						,Src.[TransportPickUpAddress2]
						,Src.[TransportPickUpAddress3]
						,Src.[TransportPickUpAddress4]
						,Src.[TransportPickUpCity]
						,Src.[TransportPickUpState]
						,Src.[TransportPickUpZipCode]
						,Src.[TransportPickUpCountry]
						,Src.[TransportPickUpReference]
						,Src.[TransportStatusIDPrevious]
						,Src.[TransportCarrierName]
						,Src.[TransportValueAddedTax]
						,Src.[TransportFuelSurchargePercentage]
						,Src.[TransportSalesOrderNumber]
						,Src.[TransportPurchaseOrderNumber]
						,Src.[TransportPickupDateTime]
						,Src.[TransportPickupMoment]
						,Src.[TransportPickupCompanyName]
						,Src.[TransportInternalNotes]
						,Src.[TransportTruckLicensePlate]
						,Src.[TransportTruckDriver]
						,Src.[TransportTruckPhone]
						,Src.[TransportWaitingFeeEstimated]
						,Src.[TransportCostsWaitingFee]
						,Src.[TransportCostsParkingFee]
						,Src.[TransportCostsEstimated]
						,Src.[TransportCostsRoadTolls]
						,Src.[CurrencyCode]
						,Src.[TransportFreightWeight]
						,Src.[TransportVolume]
						,Src.[TransportLoadMetres]
						,Src.[TransportCharges]
						,Src.[TransportReadyForMatrixBillingDateTime]
						,Src.[TransportReadyForWaitingTimeBillingDateTime]
						,Src.[TransportDeliveryDateTime]
						,Src.[TransportCustomsConfirmed]
						,Src.[TransportActualArrivalDateTime]
						,Src.[TransportReadyForBillingDateTime]
						,Src.[TransportCompanyID]
						,Src.[TransportUserDefinedText01]
						,Src.[TransportUserDefinedText02]
						,Src.[TransportUserDefinedText03]
						,Src.[TransportUserDefinedText04]
						,Src.[TransportUserDefinedDate01]
						,Src.[TransportUserDefinedDate02]
						,Src.[TransportLastComment]
						,Src.[TransportThresholdType]
						,Src.[TransportCheapestSolutionCost]
						,Src.[TransportChosenSolutionCost]
						,Src.[TransportChosenNonOptimalReasonCode]
						,Src.[TransportChosenNonOptimalReason]
						,Src.[PalletTypeCode]
						,Src.[TransportCreationRunDateTime]
						,Src.[TransportBasedOnOptimization]
						,Src.[TransportUserDefinedLongText01]
						,Src.[TransportUserDefinedLongText02]
						,Src.[TransportUserDefinedLongText03]
						,Src.[TransportLastStopMoveDateTime]
						,Src.[TransportCheapestSolutionRevenue]
						,Src.[TransportChosenSolutionRevenue]
						,Src.[TransportDock]
						,Src.[TransportDockDateTime]
						,Src.[TransportStartUnloadingDateTime]
						,Src.[TransportEndUnloadingDateTime]
						,Src.[TransportStartLoadingDateTime]
						,Src.[TransportEndLoadingDateTime]
						,Src.[TransportNotes]
						,Src.[TransportDiscrepancey]
						,Src.[TransportActualCarrierID]
						,Src.[TransportDockIsCleared]
						,Src.[SubContextCode]
						,Src.[TransportContact]
						,Src.[TransportContactEmail]
						,Src.[TransportContactPhone]
						,Src.[TransportVesselCode]
						,Src.[TransportVesselName]
						,Src.[TransportVoyageCode]
						,Src.[TransportUserDefinedYesNo01]
						,Src.[TransportUserDefinedYesNo02]
						,Src.[TransportUserDefinedYesNo03]
						,Src.[TransportUserDefinedYesNo04]
						,Src.[TransportUserDefinedYesNo05]
						,Src.[TransportUserDefinedDateTime01]
						,Src.[TransportUserDefinedDateTime02]
						,Src.[TransportUserDefinedDateTime03]
						,Src.[TransportUserDefinedDateTime04]
						,Src.[TransportUserDefinedDateTime05]
						,Src.[TransportUserDefinedDateTime06]
						,Src.[TransportUserDefinedDateTime07]
						,Src.[TransportUserDefinedDateTime09]
						,Src.[TransportUserDefinedDateTime10]
						,Src.[TransportUserDefinedNumber01]
						,Src.[TransportUserDefinedNumber02]
						,Src.[TransportUserDefinedNumber03]
						,Src.[TransportUserDefinedNumber04]
						,Src.[TransportUserDefinedNumber05]
						,Src.[TransportUserDefinedLongText04]
						,Src.[TransportUserDefinedLongText05]
						,Src.[TransportUserDefinedText05]
						,Src.[TransportUserDefinedText06]
						,Src.[TransportUserDefinedText07]
						,Src.[TransportUserDefinedText08]
						,Src.[TransportUserDefinedText09]
						,Src.[TransportUserDefinedText10]
						,Src.[TransportUserDefinedText11]
						,Src.[TransportUserDefinedText12]
						,Src.[TransportUserDefinedText13]
						,Src.[TransportUserDefinedText14]
						,Src.[TransportUserDefinedText15]
						,Src.[TransportChangesAcceptedDateTime]
						,Src.[TransportRuleType]
						,Src.[TransportCreationDataSource]
						,Src.[TransportChangedDataStorageString]
						,Src.[CountryCode]
						,Src.[TransportLastChequeNumber]
						,Src.[TransportTruck2LicensePlate]
						,Src.[TransportTrailerLicensePlate]
						,Src.[TransportTrailer2LicensePlate]
						,Src.[TransportTruckType]
						,Src.[TransportHaulageType]
						,Src.[TransportOptimizationPlanName]
						,Src.[TransportOptimizationPlanRunID]
						,Src.[TransportRoute]
						,Src.[TransportUserDefinedDateTime08]
						,Src.[TransportEstimatedDateTimeOfDeparture]
						,Src.[TransportEstimatedDateTimeOfArrival]
						,Src.[TransportContainerNumber]
						,Src.[TransportSeal1]
						,Src.[TransportSeal2]
						,Src.[TransportContainerType]
						,Src.[TransportUserDefinedNumber06]
						,Src.[TransportUserDefinedNumber07]
						,Src.[TransportUserDefinedNumber08]
						,Src.[TransportUserDefinedNumber09]
						,Src.[TransportUserDefinedNumber10]
						,Src.[TransportNewEDIPending]
						,Src.[TransportLastExternalChangeDateTime]
						,Src.[TransportLastFlagExternalChangeHandledDateTime]
						,Src.[TransportExternalCompanySavedChargesDateTime]
						,Src.[TransportStopIDFirst]
						,Src.[TransportStopIDLast]
						,Src.[TransportImportBatch]
						,Src.[TransportFileUploadCount]
						,Src.[TransportUserDefinedDateTime11]
						,Src.[TransportUserDefinedDateTime12]
						,Src.[TransportUserDefinedDateTime13]
						,Src.[TransportUserDefinedDateTime14]
						,Src.[TransportUserDefinedDateTime15]
						,Src.[TransportUserDefinedNumber11]
						,Src.[TransportUserDefinedNumber12]
						,Src.[TransportUserDefinedNumber13]
						,Src.[TransportUserDefinedNumber14]
						,Src.[TransportUserDefinedNumber15]
						,Src.[TransportUserDefinedNumber16]
						,Src.[TransportUserDefinedNumber17]
						,Src.[TransportUserDefinedNumber18]
						,Src.[TransportUserDefinedNumber19]
						,Src.[TransportUserDefinedNumber20]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDTransport] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDTransport] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Transports Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Transports Dest WITH (NOLOCK) ON Src.IDTransport = Dest.IDTransport
					WHERE Dest.[TransportEditDateTime] < Src.[TransportEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
					,Dest.[TransportStatusID] = Src.[TransportStatusID]
					,Dest.[TransportType] = Src.[TransportType]
					,Dest.[TransportDepartment] = Src.[TransportDepartment]
					,Dest.[TransportNumber] = Src.[TransportNumber]
					,Dest.[TransportDirect] = Src.[TransportDirect]
					,Dest.[TransportCarrierID] = Src.[TransportCarrierID]
					,Dest.[TransportCarrierEmail] = Src.[TransportCarrierEmail]
					,Dest.[TransportTransportCosts] = Src.[TransportTransportCosts]
					,Dest.[TransportFuelSurcharge] = Src.[TransportFuelSurcharge]
					,Dest.[TransportExtraStopCosts] = Src.[TransportExtraStopCosts]
					,Dest.[TransportCarrierRemarks] = Src.[TransportCarrierRemarks]
					,Dest.[TransportAddDateTime] = Src.[TransportAddDateTime]
					,Dest.[TransportEditDateTime] = Src.[TransportEditDateTime]
					,Dest.[TransportAddUserCode] = Src.[TransportAddUserCode]
					,Dest.[TransportEditUserCode] = Src.[TransportEditUserCode]
					,Dest.[TransportStatusChangeDateTime] = Src.[TransportStatusChangeDateTime]
					,Dest.[TransportPickUpCompanyID] = Src.[TransportPickUpCompanyID]
					,Dest.[TransportPickUpAddress1] = Src.[TransportPickUpAddress1]
					,Dest.[TransportPickUpAddress2] = Src.[TransportPickUpAddress2]
					,Dest.[TransportPickUpAddress3] = Src.[TransportPickUpAddress3]
					,Dest.[TransportPickUpAddress4] = Src.[TransportPickUpAddress4]
					,Dest.[TransportPickUpCity] = Src.[TransportPickUpCity]
					,Dest.[TransportPickUpState] = Src.[TransportPickUpState]
					,Dest.[TransportPickUpZipCode] = Src.[TransportPickUpZipCode]
					,Dest.[TransportPickUpCountry] = Src.[TransportPickUpCountry]
					,Dest.[TransportPickUpReference] = Src.[TransportPickUpReference]
					,Dest.[TransportStatusIDPrevious] = Src.[TransportStatusIDPrevious]
					,Dest.[TransportCarrierName] = Src.[TransportCarrierName]
					,Dest.[TransportValueAddedTax] = Src.[TransportValueAddedTax]
					,Dest.[TransportFuelSurchargePercentage] = Src.[TransportFuelSurchargePercentage]
					,Dest.[TransportSalesOrderNumber] = Src.[TransportSalesOrderNumber]
					,Dest.[TransportPurchaseOrderNumber] = Src.[TransportPurchaseOrderNumber]
					,Dest.[TransportPickupDateTime] = Src.[TransportPickupDateTime]
					,Dest.[TransportPickupMoment] = Src.[TransportPickupMoment]
					,Dest.[TransportPickupCompanyName] = Src.[TransportPickupCompanyName]
					,Dest.[TransportInternalNotes] = Src.[TransportInternalNotes]
					,Dest.[TransportTruckLicensePlate] = Src.[TransportTruckLicensePlate]
					,Dest.[TransportTruckDriver] = Src.[TransportTruckDriver]
					,Dest.[TransportTruckPhone] = Src.[TransportTruckPhone]
					,Dest.[TransportWaitingFeeEstimated] = Src.[TransportWaitingFeeEstimated]
					,Dest.[TransportCostsWaitingFee] = Src.[TransportCostsWaitingFee]
					,Dest.[TransportCostsParkingFee] = Src.[TransportCostsParkingFee]
					,Dest.[TransportCostsEstimated] = Src.[TransportCostsEstimated]
					,Dest.[TransportCostsRoadTolls] = Src.[TransportCostsRoadTolls]
					,Dest.[CurrencyCode] = Src.[CurrencyCode]
					,Dest.[TransportFreightWeight] = Src.[TransportFreightWeight]
					,Dest.[TransportVolume] = Src.[TransportVolume]
					,Dest.[TransportLoadMetres] = Src.[TransportLoadMetres]
					,Dest.[TransportCharges] = Src.[TransportCharges]
					,Dest.[TransportReadyForMatrixBillingDateTime] = Src.[TransportReadyForMatrixBillingDateTime]
					,Dest.[TransportReadyForWaitingTimeBillingDateTime] = Src.[TransportReadyForWaitingTimeBillingDateTime]
					,Dest.[TransportDeliveryDateTime] = Src.[TransportDeliveryDateTime]
					,Dest.[TransportCustomsConfirmed] = Src.[TransportCustomsConfirmed]
					,Dest.[TransportActualArrivalDateTime] = Src.[TransportActualArrivalDateTime]
					,Dest.[TransportReadyForBillingDateTime] = Src.[TransportReadyForBillingDateTime]
					,Dest.[TransportCompanyID] = Src.[TransportCompanyID]
					,Dest.[TransportUserDefinedText01] = Src.[TransportUserDefinedText01]
					,Dest.[TransportUserDefinedText02] = Src.[TransportUserDefinedText02]
					,Dest.[TransportUserDefinedText03] = Src.[TransportUserDefinedText03]
					,Dest.[TransportUserDefinedText04] = Src.[TransportUserDefinedText04]
					,Dest.[TransportUserDefinedDate01] = Src.[TransportUserDefinedDate01]
					,Dest.[TransportUserDefinedDate02] = Src.[TransportUserDefinedDate02]
					,Dest.[TransportLastComment] = Src.[TransportLastComment]
					,Dest.[TransportThresholdType] = Src.[TransportThresholdType]
					,Dest.[TransportCheapestSolutionCost] = Src.[TransportCheapestSolutionCost]
					,Dest.[TransportChosenSolutionCost] = Src.[TransportChosenSolutionCost]
					,Dest.[TransportChosenNonOptimalReasonCode] = Src.[TransportChosenNonOptimalReasonCode]
					,Dest.[TransportChosenNonOptimalReason] = Src.[TransportChosenNonOptimalReason]
					,Dest.[PalletTypeCode] = Src.[PalletTypeCode]
					,Dest.[TransportCreationRunDateTime] = Src.[TransportCreationRunDateTime]
					,Dest.[TransportBasedOnOptimization] = Src.[TransportBasedOnOptimization]
					,Dest.[TransportUserDefinedLongText01] = Src.[TransportUserDefinedLongText01]
					,Dest.[TransportUserDefinedLongText02] = Src.[TransportUserDefinedLongText02]
					,Dest.[TransportUserDefinedLongText03] = Src.[TransportUserDefinedLongText03]
					,Dest.[TransportLastStopMoveDateTime] = Src.[TransportLastStopMoveDateTime]
					,Dest.[TransportCheapestSolutionRevenue] = Src.[TransportCheapestSolutionRevenue]
					,Dest.[TransportChosenSolutionRevenue] = Src.[TransportChosenSolutionRevenue]
					,Dest.[TransportDock] = Src.[TransportDock]
					,Dest.[TransportDockDateTime] = Src.[TransportDockDateTime]
					,Dest.[TransportStartUnloadingDateTime] = Src.[TransportStartUnloadingDateTime]
					,Dest.[TransportEndUnloadingDateTime] = Src.[TransportEndUnloadingDateTime]
					,Dest.[TransportStartLoadingDateTime] = Src.[TransportStartLoadingDateTime]
					,Dest.[TransportEndLoadingDateTime] = Src.[TransportEndLoadingDateTime]
					,Dest.[TransportNotes] = Src.[TransportNotes]
					,Dest.[TransportDiscrepancey] = Src.[TransportDiscrepancey]
					,Dest.[TransportActualCarrierID] = Src.[TransportActualCarrierID]
					,Dest.[TransportDockIsCleared] = Src.[TransportDockIsCleared]
					,Dest.[SubContextCode] = Src.[SubContextCode]
					,Dest.[TransportContact] = Src.[TransportContact]
					,Dest.[TransportContactEmail] = Src.[TransportContactEmail]
					,Dest.[TransportContactPhone] = Src.[TransportContactPhone]
					,Dest.[TransportVesselCode] = Src.[TransportVesselCode]
					,Dest.[TransportVesselName] = Src.[TransportVesselName]
					,Dest.[TransportVoyageCode] = Src.[TransportVoyageCode]
					,Dest.[TransportUserDefinedYesNo01] = Src.[TransportUserDefinedYesNo01]
					,Dest.[TransportUserDefinedYesNo02] = Src.[TransportUserDefinedYesNo02]
					,Dest.[TransportUserDefinedYesNo03] = Src.[TransportUserDefinedYesNo03]
					,Dest.[TransportUserDefinedYesNo04] = Src.[TransportUserDefinedYesNo04]
					,Dest.[TransportUserDefinedYesNo05] = Src.[TransportUserDefinedYesNo05]
					,Dest.[TransportUserDefinedDateTime01] = Src.[TransportUserDefinedDateTime01]
					,Dest.[TransportUserDefinedDateTime02] = Src.[TransportUserDefinedDateTime02]
					,Dest.[TransportUserDefinedDateTime03] = Src.[TransportUserDefinedDateTime03]
					,Dest.[TransportUserDefinedDateTime04] = Src.[TransportUserDefinedDateTime04]
					,Dest.[TransportUserDefinedDateTime05] = Src.[TransportUserDefinedDateTime05]
					,Dest.[TransportUserDefinedDateTime06] = Src.[TransportUserDefinedDateTime06]
					,Dest.[TransportUserDefinedDateTime07] = Src.[TransportUserDefinedDateTime07]
					,Dest.[TransportUserDefinedDateTime09] = Src.[TransportUserDefinedDateTime09]
					,Dest.[TransportUserDefinedDateTime10] = Src.[TransportUserDefinedDateTime10]
					,Dest.[TransportUserDefinedNumber01] = Src.[TransportUserDefinedNumber01]
					,Dest.[TransportUserDefinedNumber02] = Src.[TransportUserDefinedNumber02]
					,Dest.[TransportUserDefinedNumber03] = Src.[TransportUserDefinedNumber03]
					,Dest.[TransportUserDefinedNumber04] = Src.[TransportUserDefinedNumber04]
					,Dest.[TransportUserDefinedNumber05] = Src.[TransportUserDefinedNumber05]
					,Dest.[TransportUserDefinedLongText04] = Src.[TransportUserDefinedLongText04]
					,Dest.[TransportUserDefinedLongText05] = Src.[TransportUserDefinedLongText05]
					,Dest.[TransportUserDefinedText05] = Src.[TransportUserDefinedText05]
					,Dest.[TransportUserDefinedText06] = Src.[TransportUserDefinedText06]
					,Dest.[TransportUserDefinedText07] = Src.[TransportUserDefinedText07]
					,Dest.[TransportUserDefinedText08] = Src.[TransportUserDefinedText08]
					,Dest.[TransportUserDefinedText09] = Src.[TransportUserDefinedText09]
					,Dest.[TransportUserDefinedText10] = Src.[TransportUserDefinedText10]
					,Dest.[TransportUserDefinedText11] = Src.[TransportUserDefinedText11]
					,Dest.[TransportUserDefinedText12] = Src.[TransportUserDefinedText12]
					,Dest.[TransportUserDefinedText13] = Src.[TransportUserDefinedText13]
					,Dest.[TransportUserDefinedText14] = Src.[TransportUserDefinedText14]
					,Dest.[TransportUserDefinedText15] = Src.[TransportUserDefinedText15]
					,Dest.[TransportChangesAcceptedDateTime] = Src.[TransportChangesAcceptedDateTime]
					,Dest.[TransportRuleType] = Src.[TransportRuleType]
					,Dest.[TransportCreationDataSource] = Src.[TransportCreationDataSource]
					,Dest.[TransportChangedDataStorageString] = Src.[TransportChangedDataStorageString]
					,Dest.[CountryCode] = Src.[CountryCode]
					,Dest.[TransportLastChequeNumber] = Src.[TransportLastChequeNumber]
					,Dest.[TransportTruck2LicensePlate] = Src.[TransportTruck2LicensePlate]
					,Dest.[TransportTrailerLicensePlate] = Src.[TransportTrailerLicensePlate]
					,Dest.[TransportTrailer2LicensePlate] = Src.[TransportTrailer2LicensePlate]
					,Dest.[TransportTruckType] = Src.[TransportTruckType]
					,Dest.[TransportHaulageType] = Src.[TransportHaulageType]
					,Dest.[TransportOptimizationPlanName] = Src.[TransportOptimizationPlanName]
					,Dest.[TransportOptimizationPlanRunID] = Src.[TransportOptimizationPlanRunID]
					,Dest.[TransportRoute] = Src.[TransportRoute]
					,Dest.[TransportUserDefinedDateTime08] = Src.[TransportUserDefinedDateTime08]
					,Dest.[TransportEstimatedDateTimeOfDeparture] = Src.[TransportEstimatedDateTimeOfDeparture]
					,Dest.[TransportEstimatedDateTimeOfArrival] = Src.[TransportEstimatedDateTimeOfArrival]
					,Dest.[TransportContainerNumber] = Src.[TransportContainerNumber]
					,Dest.[TransportSeal1] = Src.[TransportSeal1]
					,Dest.[TransportSeal2] = Src.[TransportSeal2]
					,Dest.[TransportContainerType] = Src.[TransportContainerType]
					,Dest.[TransportUserDefinedNumber06] = Src.[TransportUserDefinedNumber06]
					,Dest.[TransportUserDefinedNumber07] = Src.[TransportUserDefinedNumber07]
					,Dest.[TransportUserDefinedNumber08] = Src.[TransportUserDefinedNumber08]
					,Dest.[TransportUserDefinedNumber09] = Src.[TransportUserDefinedNumber09]
					,Dest.[TransportUserDefinedNumber10] = Src.[TransportUserDefinedNumber10]
					,Dest.[TransportNewEDIPending] = Src.[TransportNewEDIPending]
					,Dest.[TransportLastExternalChangeDateTime] = Src.[TransportLastExternalChangeDateTime]
					,Dest.[TransportLastFlagExternalChangeHandledDateTime] = Src.[TransportLastFlagExternalChangeHandledDateTime]
					,Dest.[TransportExternalCompanySavedChargesDateTime] = Src.[TransportExternalCompanySavedChargesDateTime]
					,Dest.[TransportStopIDFirst] = Src.[TransportStopIDFirst]
					,Dest.[TransportStopIDLast] = Src.[TransportStopIDLast]
					,Dest.[TransportImportBatch] = Src.[TransportImportBatch]
					,Dest.[TransportFileUploadCount] = Src.[TransportFileUploadCount]
					,Dest.[TransportUserDefinedDateTime11] = Src.[TransportUserDefinedDateTime11]
					,Dest.[TransportUserDefinedDateTime12] = Src.[TransportUserDefinedDateTime12]
					,Dest.[TransportUserDefinedDateTime13] = Src.[TransportUserDefinedDateTime13]
					,Dest.[TransportUserDefinedDateTime14] = Src.[TransportUserDefinedDateTime14]
					,Dest.[TransportUserDefinedDateTime15] = Src.[TransportUserDefinedDateTime15]
					,Dest.[TransportUserDefinedNumber11] = Src.[TransportUserDefinedNumber11]
					,Dest.[TransportUserDefinedNumber12] = Src.[TransportUserDefinedNumber12]
					,Dest.[TransportUserDefinedNumber13] = Src.[TransportUserDefinedNumber13]
					,Dest.[TransportUserDefinedNumber14] = Src.[TransportUserDefinedNumber14]
					,Dest.[TransportUserDefinedNumber15] = Src.[TransportUserDefinedNumber15]
					,Dest.[TransportUserDefinedNumber16] = Src.[TransportUserDefinedNumber16]
					,Dest.[TransportUserDefinedNumber17] = Src.[TransportUserDefinedNumber17]
					,Dest.[TransportUserDefinedNumber18] = Src.[TransportUserDefinedNumber18]
					,Dest.[TransportUserDefinedNumber19] = Src.[TransportUserDefinedNumber19]
					,Dest.[TransportUserDefinedNumber20] = Src.[TransportUserDefinedNumber20]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDTransport AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDTransport AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Transports Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Transports Dest ON Src.IDTransport = Dest.IDTransport
				WHERE Dest.[TransportEditDateTime] < Src.[TransportEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Transports Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Transports Dest WITH (NOLOCK) ON Src.IDTransport = Dest.IDTransport
					WHERE Dest.IDTransport IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Transports (
					[IDTransport]
					,[DataEntryDefinitionID]
					,[TransportStatusID]
					,[TransportType]
					,[TransportDepartment]
					,[TransportNumber]
					,[TransportDirect]
					,[TransportCarrierID]
					,[TransportCarrierEmail]
					,[TransportTransportCosts]
					,[TransportFuelSurcharge]
					,[TransportExtraStopCosts]
					,[TransportCarrierRemarks]
					,[TransportAddDateTime]
					,[TransportEditDateTime]
					,[TransportAddUserCode]
					,[TransportEditUserCode]
					,[TransportStatusChangeDateTime]
					,[TransportPickUpCompanyID]
					,[TransportPickUpAddress1]
					,[TransportPickUpAddress2]
					,[TransportPickUpAddress3]
					,[TransportPickUpAddress4]
					,[TransportPickUpCity]
					,[TransportPickUpState]
					,[TransportPickUpZipCode]
					,[TransportPickUpCountry]
					,[TransportPickUpReference]
					,[TransportStatusIDPrevious]
					,[TransportCarrierName]
					,[TransportValueAddedTax]
					,[TransportFuelSurchargePercentage]
					,[TransportSalesOrderNumber]
					,[TransportPurchaseOrderNumber]
					,[TransportPickupDateTime]
					,[TransportPickupMoment]
					,[TransportPickupCompanyName]
					,[TransportInternalNotes]
					,[TransportTruckLicensePlate]
					,[TransportTruckDriver]
					,[TransportTruckPhone]
					,[TransportWaitingFeeEstimated]
					,[TransportCostsWaitingFee]
					,[TransportCostsParkingFee]
					,[TransportCostsEstimated]
					,[TransportCostsRoadTolls]
					,[CurrencyCode]
					,[TransportFreightWeight]
					,[TransportVolume]
					,[TransportLoadMetres]
					,[TransportCharges]
					,[TransportReadyForMatrixBillingDateTime]
					,[TransportReadyForWaitingTimeBillingDateTime]
					,[TransportDeliveryDateTime]
					,[TransportCustomsConfirmed]
					,[TransportActualArrivalDateTime]
					,[TransportReadyForBillingDateTime]
					,[TransportCompanyID]
					,[TransportUserDefinedText01]
					,[TransportUserDefinedText02]
					,[TransportUserDefinedText03]
					,[TransportUserDefinedText04]
					,[TransportUserDefinedDate01]
					,[TransportUserDefinedDate02]
					,[TransportLastComment]
					,[TransportThresholdType]
					,[TransportCheapestSolutionCost]
					,[TransportChosenSolutionCost]
					,[TransportChosenNonOptimalReasonCode]
					,[TransportChosenNonOptimalReason]
					,[PalletTypeCode]
					,[TransportCreationRunDateTime]
					,[TransportBasedOnOptimization]
					,[TransportUserDefinedLongText01]
					,[TransportUserDefinedLongText02]
					,[TransportUserDefinedLongText03]
					,[TransportLastStopMoveDateTime]
					,[TransportCheapestSolutionRevenue]
					,[TransportChosenSolutionRevenue]
					,[TransportDock]
					,[TransportDockDateTime]
					,[TransportStartUnloadingDateTime]
					,[TransportEndUnloadingDateTime]
					,[TransportStartLoadingDateTime]
					,[TransportEndLoadingDateTime]
					,[TransportNotes]
					,[TransportDiscrepancey]
					,[TransportActualCarrierID]
					,[TransportDockIsCleared]
					,[SubContextCode]
					,[TransportContact]
					,[TransportContactEmail]
					,[TransportContactPhone]
					,[TransportVesselCode]
					,[TransportVesselName]
					,[TransportVoyageCode]
					,[TransportUserDefinedYesNo01]
					,[TransportUserDefinedYesNo02]
					,[TransportUserDefinedYesNo03]
					,[TransportUserDefinedYesNo04]
					,[TransportUserDefinedYesNo05]
					,[TransportUserDefinedDateTime01]
					,[TransportUserDefinedDateTime02]
					,[TransportUserDefinedDateTime03]
					,[TransportUserDefinedDateTime04]
					,[TransportUserDefinedDateTime05]
					,[TransportUserDefinedDateTime06]
					,[TransportUserDefinedDateTime07]
					,[TransportUserDefinedDateTime09]
					,[TransportUserDefinedDateTime10]
					,[TransportUserDefinedNumber01]
					,[TransportUserDefinedNumber02]
					,[TransportUserDefinedNumber03]
					,[TransportUserDefinedNumber04]
					,[TransportUserDefinedNumber05]
					,[TransportUserDefinedLongText04]
					,[TransportUserDefinedLongText05]
					,[TransportUserDefinedText05]
					,[TransportUserDefinedText06]
					,[TransportUserDefinedText07]
					,[TransportUserDefinedText08]
					,[TransportUserDefinedText09]
					,[TransportUserDefinedText10]
					,[TransportUserDefinedText11]
					,[TransportUserDefinedText12]
					,[TransportUserDefinedText13]
					,[TransportUserDefinedText14]
					,[TransportUserDefinedText15]
					,[TransportChangesAcceptedDateTime]
					,[TransportRuleType]
					,[TransportCreationDataSource]
					,[TransportChangedDataStorageString]
					,[CountryCode]
					,[TransportLastChequeNumber]
					,[TransportTruck2LicensePlate]
					,[TransportTrailerLicensePlate]
					,[TransportTrailer2LicensePlate]
					,[TransportTruckType]
					,[TransportHaulageType]
					,[TransportOptimizationPlanName]
					,[TransportOptimizationPlanRunID]
					,[TransportRoute]
					,[TransportUserDefinedDateTime08]
					,[TransportEstimatedDateTimeOfDeparture]
					,[TransportEstimatedDateTimeOfArrival]
					,[TransportContainerNumber]
					,[TransportSeal1]
					,[TransportSeal2]
					,[TransportContainerType]
					,[TransportUserDefinedNumber06]
					,[TransportUserDefinedNumber07]
					,[TransportUserDefinedNumber08]
					,[TransportUserDefinedNumber09]
					,[TransportUserDefinedNumber10]
					,[TransportNewEDIPending]
					,[TransportLastExternalChangeDateTime]
					,[TransportLastFlagExternalChangeHandledDateTime]
					,[TransportExternalCompanySavedChargesDateTime]
					,[TransportStopIDFirst]
					,[TransportStopIDLast]
					,[TransportImportBatch]
					,[TransportFileUploadCount]
					,[TransportUserDefinedDateTime11]
					,[TransportUserDefinedDateTime12]
					,[TransportUserDefinedDateTime13]
					,[TransportUserDefinedDateTime14]
					,[TransportUserDefinedDateTime15]
					,[TransportUserDefinedNumber11]
					,[TransportUserDefinedNumber12]
					,[TransportUserDefinedNumber13]
					,[TransportUserDefinedNumber14]
					,[TransportUserDefinedNumber15]
					,[TransportUserDefinedNumber16]
					,[TransportUserDefinedNumber17]
					,[TransportUserDefinedNumber18]
					,[TransportUserDefinedNumber19]
					,[TransportUserDefinedNumber20]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDTransport AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDTransport]
					,Src.[DataEntryDefinitionID]
					,Src.[TransportStatusID]
					,Src.[TransportType]
					,Src.[TransportDepartment]
					,Src.[TransportNumber]
					,Src.[TransportDirect]
					,Src.[TransportCarrierID]
					,Src.[TransportCarrierEmail]
					,Src.[TransportTransportCosts]
					,Src.[TransportFuelSurcharge]
					,Src.[TransportExtraStopCosts]
					,Src.[TransportCarrierRemarks]
					,Src.[TransportAddDateTime]
					,Src.[TransportEditDateTime]
					,Src.[TransportAddUserCode]
					,Src.[TransportEditUserCode]
					,Src.[TransportStatusChangeDateTime]
					,Src.[TransportPickUpCompanyID]
					,Src.[TransportPickUpAddress1]
					,Src.[TransportPickUpAddress2]
					,Src.[TransportPickUpAddress3]
					,Src.[TransportPickUpAddress4]
					,Src.[TransportPickUpCity]
					,Src.[TransportPickUpState]
					,Src.[TransportPickUpZipCode]
					,Src.[TransportPickUpCountry]
					,Src.[TransportPickUpReference]
					,Src.[TransportStatusIDPrevious]
					,Src.[TransportCarrierName]
					,Src.[TransportValueAddedTax]
					,Src.[TransportFuelSurchargePercentage]
					,Src.[TransportSalesOrderNumber]
					,Src.[TransportPurchaseOrderNumber]
					,Src.[TransportPickupDateTime]
					,Src.[TransportPickupMoment]
					,Src.[TransportPickupCompanyName]
					,Src.[TransportInternalNotes]
					,Src.[TransportTruckLicensePlate]
					,Src.[TransportTruckDriver]
					,Src.[TransportTruckPhone]
					,Src.[TransportWaitingFeeEstimated]
					,Src.[TransportCostsWaitingFee]
					,Src.[TransportCostsParkingFee]
					,Src.[TransportCostsEstimated]
					,Src.[TransportCostsRoadTolls]
					,Src.[CurrencyCode]
					,Src.[TransportFreightWeight]
					,Src.[TransportVolume]
					,Src.[TransportLoadMetres]
					,Src.[TransportCharges]
					,Src.[TransportReadyForMatrixBillingDateTime]
					,Src.[TransportReadyForWaitingTimeBillingDateTime]
					,Src.[TransportDeliveryDateTime]
					,Src.[TransportCustomsConfirmed]
					,Src.[TransportActualArrivalDateTime]
					,Src.[TransportReadyForBillingDateTime]
					,Src.[TransportCompanyID]
					,Src.[TransportUserDefinedText01]
					,Src.[TransportUserDefinedText02]
					,Src.[TransportUserDefinedText03]
					,Src.[TransportUserDefinedText04]
					,Src.[TransportUserDefinedDate01]
					,Src.[TransportUserDefinedDate02]
					,Src.[TransportLastComment]
					,Src.[TransportThresholdType]
					,Src.[TransportCheapestSolutionCost]
					,Src.[TransportChosenSolutionCost]
					,Src.[TransportChosenNonOptimalReasonCode]
					,Src.[TransportChosenNonOptimalReason]
					,Src.[PalletTypeCode]
					,Src.[TransportCreationRunDateTime]
					,Src.[TransportBasedOnOptimization]
					,Src.[TransportUserDefinedLongText01]
					,Src.[TransportUserDefinedLongText02]
					,Src.[TransportUserDefinedLongText03]
					,Src.[TransportLastStopMoveDateTime]
					,Src.[TransportCheapestSolutionRevenue]
					,Src.[TransportChosenSolutionRevenue]
					,Src.[TransportDock]
					,Src.[TransportDockDateTime]
					,Src.[TransportStartUnloadingDateTime]
					,Src.[TransportEndUnloadingDateTime]
					,Src.[TransportStartLoadingDateTime]
					,Src.[TransportEndLoadingDateTime]
					,Src.[TransportNotes]
					,Src.[TransportDiscrepancey]
					,Src.[TransportActualCarrierID]
					,Src.[TransportDockIsCleared]
					,Src.[SubContextCode]
					,Src.[TransportContact]
					,Src.[TransportContactEmail]
					,Src.[TransportContactPhone]
					,Src.[TransportVesselCode]
					,Src.[TransportVesselName]
					,Src.[TransportVoyageCode]
					,Src.[TransportUserDefinedYesNo01]
					,Src.[TransportUserDefinedYesNo02]
					,Src.[TransportUserDefinedYesNo03]
					,Src.[TransportUserDefinedYesNo04]
					,Src.[TransportUserDefinedYesNo05]
					,Src.[TransportUserDefinedDateTime01]
					,Src.[TransportUserDefinedDateTime02]
					,Src.[TransportUserDefinedDateTime03]
					,Src.[TransportUserDefinedDateTime04]
					,Src.[TransportUserDefinedDateTime05]
					,Src.[TransportUserDefinedDateTime06]
					,Src.[TransportUserDefinedDateTime07]
					,Src.[TransportUserDefinedDateTime09]
					,Src.[TransportUserDefinedDateTime10]
					,Src.[TransportUserDefinedNumber01]
					,Src.[TransportUserDefinedNumber02]
					,Src.[TransportUserDefinedNumber03]
					,Src.[TransportUserDefinedNumber04]
					,Src.[TransportUserDefinedNumber05]
					,Src.[TransportUserDefinedLongText04]
					,Src.[TransportUserDefinedLongText05]
					,Src.[TransportUserDefinedText05]
					,Src.[TransportUserDefinedText06]
					,Src.[TransportUserDefinedText07]
					,Src.[TransportUserDefinedText08]
					,Src.[TransportUserDefinedText09]
					,Src.[TransportUserDefinedText10]
					,Src.[TransportUserDefinedText11]
					,Src.[TransportUserDefinedText12]
					,Src.[TransportUserDefinedText13]
					,Src.[TransportUserDefinedText14]
					,Src.[TransportUserDefinedText15]
					,Src.[TransportChangesAcceptedDateTime]
					,Src.[TransportRuleType]
					,Src.[TransportCreationDataSource]
					,Src.[TransportChangedDataStorageString]
					,Src.[CountryCode]
					,Src.[TransportLastChequeNumber]
					,Src.[TransportTruck2LicensePlate]
					,Src.[TransportTrailerLicensePlate]
					,Src.[TransportTrailer2LicensePlate]
					,Src.[TransportTruckType]
					,Src.[TransportHaulageType]
					,Src.[TransportOptimizationPlanName]
					,Src.[TransportOptimizationPlanRunID]
					,Src.[TransportRoute]
					,Src.[TransportUserDefinedDateTime08]
					,Src.[TransportEstimatedDateTimeOfDeparture]
					,Src.[TransportEstimatedDateTimeOfArrival]
					,Src.[TransportContainerNumber]
					,Src.[TransportSeal1]
					,Src.[TransportSeal2]
					,Src.[TransportContainerType]
					,Src.[TransportUserDefinedNumber06]
					,Src.[TransportUserDefinedNumber07]
					,Src.[TransportUserDefinedNumber08]
					,Src.[TransportUserDefinedNumber09]
					,Src.[TransportUserDefinedNumber10]
					,Src.[TransportNewEDIPending]
					,Src.[TransportLastExternalChangeDateTime]
					,Src.[TransportLastFlagExternalChangeHandledDateTime]
					,Src.[TransportExternalCompanySavedChargesDateTime]
					,Src.[TransportStopIDFirst]
					,Src.[TransportStopIDLast]
					,Src.[TransportImportBatch]
					,Src.[TransportFileUploadCount]
					,Src.[TransportUserDefinedDateTime11]
					,Src.[TransportUserDefinedDateTime12]
					,Src.[TransportUserDefinedDateTime13]
					,Src.[TransportUserDefinedDateTime14]
					,Src.[TransportUserDefinedDateTime15]
					,Src.[TransportUserDefinedNumber11]
					,Src.[TransportUserDefinedNumber12]
					,Src.[TransportUserDefinedNumber13]
					,Src.[TransportUserDefinedNumber14]
					,Src.[TransportUserDefinedNumber15]
					,Src.[TransportUserDefinedNumber16]
					,Src.[TransportUserDefinedNumber17]
					,Src.[TransportUserDefinedNumber18]
					,Src.[TransportUserDefinedNumber19]
					,Src.[TransportUserDefinedNumber20]
				FROM [dbo].Transports Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Transports Dest WITH (NOLOCK) ON Src.IDTransport = Dest.IDTransport
				WHERE Dest.IDTransport IS NULL;
			END;

			IF OBJECT_ID('tempdb..#tmpTransportIDs') IS NOT NULL
			BEGIN
				TRUNCATE TABLE #tmpTransportIDs;
			END
			ELSE
			BEGIN
				CREATE TABLE #tmpTransportIDs (TransportID UNIQUEIDENTIFIER);
			END

			IF EXISTS (
					SELECT 1
					FROM #tmpTableVal
					)
			BEGIN
				INSERT INTO #tmpTransportIDs
				SELECT InsertedId AS TransportID
				FROM #tmpTableVal
				
				UNION
				
				SELECT DeletedId
				FROM #tmpTableVal;
			END

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Transports: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Transports` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----TransportStops
	SET @CurrentTableName = 'TransportStops';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStops AS Dest
			USING (
				SELECT [IDTransportStop]
					,[TransportID]
					,[TransportStopCompanyID]
					,[TransportStopPickupDateTime]
					,[TransportStopPickUpCompanyID]
					,[TransportStopPickUpAddress1]
					,[TransportStopPickUpAddress2]
					,[TransportStopPickUpAddress3]
					,[TransportStopPickUpAddress4]
					,[TransportStopPickUpCity]
					,[TransportStopPickUpState]
					,[TransportStopPickUpZipCode]
					,[TransportStopPickUpCountry]
					,[TransportStopPickUpReference]
					,[TransportStopDeliveryDateTime]
					,[TransportStopDeliveryCompanyID]
					,[TransportStopDeliveryAddress1]
					,[TransportStopDeliveryAddress2]
					,[TransportStopDeliveryAddress3]
					,[TransportStopDeliveryAddress4]
					,[TransportStopDeliveryCity]
					,[TransportStopDeliveryState]
					,[TransportStopDeliveryZipCode]
					,[TransportStopDeliveryCountry]
					,[TransportStopDeliveryReference]
					,[TransportStopContainerNumber]
					,[TransportStopContainerType]
					,[TransportStopContainerSize]
					,[TransportStopDropOffLocationContainer]
					,[TransportStopHandInBeforeDateTime]
					,[TransportStopSealNumber]
					,[TransportStopPinCode]
					,[TransportStopAddDateTime]
					,[TransportStopEditDateTime]
					,[TransportStopAddUserCode]
					,[TransportStopEditUserCode]
					,[TransportStopNumber]
					,[TransportStopHandInAvailableFromDateTime]
					,[TransportStopHandInReference]
					,[TransportStopPickUpMoment]
					,[TransportStopDeliveryMoment]
					,[TransportStopPickupCompanyName]
					,[TransportStopDeliveryCompanyName]
					,[TransportStopDropOffLocationName]
					,[TransportStopCustomsStatus]
					,[TransportStopShipName]
					,[TransportStopCompanyName]
					,[TransportStopEstimatedArrivalDateTimeVessel]
					,[TransportStopOriginCountry]
					,[OrderID]
					,[TransportStopExternalOrderID]
					,[TransportStopOrderStatus]
					,[ReceiptID]
					,[TransportStopExternalReceiptID]
					,[TransportStopReceiptStatus]
					,[TransportStopOriginalPickUpZipCode]
					,[TransportStopOriginalDeliveryZipCode]
					,[TransportStopDistance]
					,[TransportStopTariffAgreed]
					,[TransportStopGoThroughDateTime]
					,[TransportStopGoThroughCompanyID]
					,[TransportStopGoThroughAddress1]
					,[TransportStopGoThroughAddress2]
					,[TransportStopGoThroughAddress3]
					,[TransportStopGoThroughAddress4]
					,[TransportStopGoThroughCity]
					,[TransportStopGoThroughState]
					,[TransportStopGoThroughZipCode]
					,[TransportStopGoThroughCountry]
					,[TransportStopGoThroughReference]
					,[TransportStopFreightWeight]
					,[TransportStopVolume]
					,[TransportStopLoadMetres]
					,[TransportStopBillingWeight]
					,[TransportStopWaitingTime]
					,[TransportStopSMSOnTime]
					,[TransportStopPODOnTime]
					,[TransportStopCartons]
					,[TransportStopPallets]
					,[TransportStopOrderStatusID]
					,[TransportStopReceiptStatusID]
					,[TransportStopCurrencyCode]
					,[TransportStopCashOnDelivery]
					,[TransportStopCashOnDeliveryCurrencyCode]
					,[TransportStopCashOnDeliveryReference]
					,[TransportStopDeliveryReference2]
					,[TransportStopUserDefinedText01]
					,[TransportStopUserDefinedText02]
					,[TransportStopUserDefinedText03]
					,[TransportStopUserDefinedText04]
					,[TransportStopUserDefinedDate01]
					,[TransportStopUserDefinedDate02]
					,[TransportStopCustomsTypeCode]
					,[TransportStopDeliveryContact]
					,[TransportStopDeliveryEmail]
					,[TransportStopDeliveryFax]
					,[TransportStopDeliveryPhone]
					,[TransportStopRemarks]
					,[TransportStopType]
					,[TransportStopUserDefinedYesNo01]
					,[TransportStopUserDefinedYesNo02]
					,[TransportStopUserDefinedYesNo03]
					,[TransportStopUserDefinedYesNo04]
					,[TransportStopUserDefinedYesNo05]
					,[TransportStopUserDefinedDateTime01]
					,[TransportStopUserDefinedDateTime02]
					,[TransportStopUserDefinedDateTime03]
					,[TransportStopUserDefinedDateTime04]
					,[TransportStopUserDefinedDateTime05]
					,[TransportStopUserDefinedDateTime06]
					,[TransportStopUserDefinedDateTime07]
					,[TransportStopUserDefinedDateTime09]
					,[TransportStopUserDefinedDateTime10]
					,[TransportStopUserDefinedNumber01]
					,[TransportStopUserDefinedNumber02]
					,[TransportStopUserDefinedNumber03]
					,[TransportStopUserDefinedNumber04]
					,[TransportStopUserDefinedNumber05]
					,[TransportStopUserDefinedLongText01]
					,[TransportStopUserDefinedLongText02]
					,[TransportStopUserDefinedLongText03]
					,[TransportStopUserDefinedLongText04]
					,[TransportStopUserDefinedLongText05]
					,[TransportStopUserDefinedText05]
					,[TransportStopUserDefinedText06]
					,[TransportStopUserDefinedText07]
					,[TransportStopUserDefinedText08]
					,[TransportStopUserDefinedText09]
					,[TransportStopUserDefinedText10]
					,[TransportStopUserDefinedText11]
					,[TransportStopUserDefinedText12]
					,[TransportStopUserDefinedText13]
					,[TransportStopUserDefinedText14]
					,[TransportStopUserDefinedText15]
					,[TransportStopIDMainStop]
					,[TransportStopOriginalSubContext]
					,[TransportStopOriginalType]
					,[TransportStopDepartureDateTime]
					,[TransportStopArrivalDateTime]
					,[TransportStopActionStartDateTime]
					,[TransportStopActionEndDateTime]
					,[TransportStopMileStoneRemarksCarrier]
					,[TransportStopMileStoneRemarksInternal]
					,[TransportStopDeliveryRegionCode]
					,[TransportStopIncomeType]
					,[TransportStopCostType]
				FROM dbo.TransportStops WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDTransportStop] = Src.[IDTransportStop])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[TransportID] = Src.[TransportID]
						,Dest.[TransportStopCompanyID] = Src.[TransportStopCompanyID]
						,Dest.[TransportStopPickupDateTime] = Src.[TransportStopPickupDateTime]
						,Dest.[TransportStopPickUpCompanyID] = Src.[TransportStopPickUpCompanyID]
						,Dest.[TransportStopPickUpAddress1] = Src.[TransportStopPickUpAddress1]
						,Dest.[TransportStopPickUpAddress2] = Src.[TransportStopPickUpAddress2]
						,Dest.[TransportStopPickUpAddress3] = Src.[TransportStopPickUpAddress3]
						,Dest.[TransportStopPickUpAddress4] = Src.[TransportStopPickUpAddress4]
						,Dest.[TransportStopPickUpCity] = Src.[TransportStopPickUpCity]
						,Dest.[TransportStopPickUpState] = Src.[TransportStopPickUpState]
						,Dest.[TransportStopPickUpZipCode] = Src.[TransportStopPickUpZipCode]
						,Dest.[TransportStopPickUpCountry] = Src.[TransportStopPickUpCountry]
						,Dest.[TransportStopPickUpReference] = Src.[TransportStopPickUpReference]
						,Dest.[TransportStopDeliveryDateTime] = Src.[TransportStopDeliveryDateTime]
						,Dest.[TransportStopDeliveryCompanyID] = Src.[TransportStopDeliveryCompanyID]
						,Dest.[TransportStopDeliveryAddress1] = Src.[TransportStopDeliveryAddress1]
						,Dest.[TransportStopDeliveryAddress2] = Src.[TransportStopDeliveryAddress2]
						,Dest.[TransportStopDeliveryAddress3] = Src.[TransportStopDeliveryAddress3]
						,Dest.[TransportStopDeliveryAddress4] = Src.[TransportStopDeliveryAddress4]
						,Dest.[TransportStopDeliveryCity] = Src.[TransportStopDeliveryCity]
						,Dest.[TransportStopDeliveryState] = Src.[TransportStopDeliveryState]
						,Dest.[TransportStopDeliveryZipCode] = Src.[TransportStopDeliveryZipCode]
						,Dest.[TransportStopDeliveryCountry] = Src.[TransportStopDeliveryCountry]
						,Dest.[TransportStopDeliveryReference] = Src.[TransportStopDeliveryReference]
						,Dest.[TransportStopContainerNumber] = Src.[TransportStopContainerNumber]
						,Dest.[TransportStopContainerType] = Src.[TransportStopContainerType]
						,Dest.[TransportStopContainerSize] = Src.[TransportStopContainerSize]
						,Dest.[TransportStopDropOffLocationContainer] = Src.[TransportStopDropOffLocationContainer]
						,Dest.[TransportStopHandInBeforeDateTime] = Src.[TransportStopHandInBeforeDateTime]
						,Dest.[TransportStopSealNumber] = Src.[TransportStopSealNumber]
						,Dest.[TransportStopPinCode] = Src.[TransportStopPinCode]
						,Dest.[TransportStopAddDateTime] = Src.[TransportStopAddDateTime]
						,Dest.[TransportStopEditDateTime] = Src.[TransportStopEditDateTime]
						,Dest.[TransportStopAddUserCode] = Src.[TransportStopAddUserCode]
						,Dest.[TransportStopEditUserCode] = Src.[TransportStopEditUserCode]
						,Dest.[TransportStopNumber] = Src.[TransportStopNumber]
						,Dest.[TransportStopHandInAvailableFromDateTime] = Src.[TransportStopHandInAvailableFromDateTime]
						,Dest.[TransportStopHandInReference] = Src.[TransportStopHandInReference]
						,Dest.[TransportStopPickUpMoment] = Src.[TransportStopPickUpMoment]
						,Dest.[TransportStopDeliveryMoment] = Src.[TransportStopDeliveryMoment]
						,Dest.[TransportStopPickupCompanyName] = Src.[TransportStopPickupCompanyName]
						,Dest.[TransportStopDeliveryCompanyName] = Src.[TransportStopDeliveryCompanyName]
						,Dest.[TransportStopDropOffLocationName] = Src.[TransportStopDropOffLocationName]
						,Dest.[TransportStopCustomsStatus] = Src.[TransportStopCustomsStatus]
						,Dest.[TransportStopShipName] = Src.[TransportStopShipName]
						,Dest.[TransportStopCompanyName] = Src.[TransportStopCompanyName]
						,Dest.[TransportStopEstimatedArrivalDateTimeVessel] = Src.[TransportStopEstimatedArrivalDateTimeVessel]
						,Dest.[TransportStopOriginCountry] = Src.[TransportStopOriginCountry]
						,Dest.[OrderID] = Src.[OrderID]
						,Dest.[TransportStopExternalOrderID] = Src.[TransportStopExternalOrderID]
						,Dest.[TransportStopOrderStatus] = Src.[TransportStopOrderStatus]
						,Dest.[ReceiptID] = Src.[ReceiptID]
						,Dest.[TransportStopExternalReceiptID] = Src.[TransportStopExternalReceiptID]
						,Dest.[TransportStopReceiptStatus] = Src.[TransportStopReceiptStatus]
						,Dest.[TransportStopOriginalPickUpZipCode] = Src.[TransportStopOriginalPickUpZipCode]
						,Dest.[TransportStopOriginalDeliveryZipCode] = Src.[TransportStopOriginalDeliveryZipCode]
						,Dest.[TransportStopDistance] = Src.[TransportStopDistance]
						,Dest.[TransportStopTariffAgreed] = Src.[TransportStopTariffAgreed]
						,Dest.[TransportStopGoThroughDateTime] = Src.[TransportStopGoThroughDateTime]
						,Dest.[TransportStopGoThroughCompanyID] = Src.[TransportStopGoThroughCompanyID]
						,Dest.[TransportStopGoThroughAddress1] = Src.[TransportStopGoThroughAddress1]
						,Dest.[TransportStopGoThroughAddress2] = Src.[TransportStopGoThroughAddress2]
						,Dest.[TransportStopGoThroughAddress3] = Src.[TransportStopGoThroughAddress3]
						,Dest.[TransportStopGoThroughAddress4] = Src.[TransportStopGoThroughAddress4]
						,Dest.[TransportStopGoThroughCity] = Src.[TransportStopGoThroughCity]
						,Dest.[TransportStopGoThroughState] = Src.[TransportStopGoThroughState]
						,Dest.[TransportStopGoThroughZipCode] = Src.[TransportStopGoThroughZipCode]
						,Dest.[TransportStopGoThroughCountry] = Src.[TransportStopGoThroughCountry]
						,Dest.[TransportStopGoThroughReference] = Src.[TransportStopGoThroughReference]
						,Dest.[TransportStopFreightWeight] = Src.[TransportStopFreightWeight]
						,Dest.[TransportStopVolume] = Src.[TransportStopVolume]
						,Dest.[TransportStopLoadMetres] = Src.[TransportStopLoadMetres]
						,Dest.[TransportStopBillingWeight] = Src.[TransportStopBillingWeight]
						,Dest.[TransportStopWaitingTime] = Src.[TransportStopWaitingTime]
						,Dest.[TransportStopSMSOnTime] = Src.[TransportStopSMSOnTime]
						,Dest.[TransportStopPODOnTime] = Src.[TransportStopPODOnTime]
						,Dest.[TransportStopCartons] = Src.[TransportStopCartons]
						,Dest.[TransportStopPallets] = Src.[TransportStopPallets]
						,Dest.[TransportStopOrderStatusID] = Src.[TransportStopOrderStatusID]
						,Dest.[TransportStopReceiptStatusID] = Src.[TransportStopReceiptStatusID]
						,Dest.[TransportStopCurrencyCode] = Src.[TransportStopCurrencyCode]
						,Dest.[TransportStopCashOnDelivery] = Src.[TransportStopCashOnDelivery]
						,Dest.[TransportStopCashOnDeliveryCurrencyCode] = Src.[TransportStopCashOnDeliveryCurrencyCode]
						,Dest.[TransportStopCashOnDeliveryReference] = Src.[TransportStopCashOnDeliveryReference]
						,Dest.[TransportStopDeliveryReference2] = Src.[TransportStopDeliveryReference2]
						,Dest.[TransportStopUserDefinedText01] = Src.[TransportStopUserDefinedText01]
						,Dest.[TransportStopUserDefinedText02] = Src.[TransportStopUserDefinedText02]
						,Dest.[TransportStopUserDefinedText03] = Src.[TransportStopUserDefinedText03]
						,Dest.[TransportStopUserDefinedText04] = Src.[TransportStopUserDefinedText04]
						,Dest.[TransportStopUserDefinedDate01] = Src.[TransportStopUserDefinedDate01]
						,Dest.[TransportStopUserDefinedDate02] = Src.[TransportStopUserDefinedDate02]
						,Dest.[TransportStopCustomsTypeCode] = Src.[TransportStopCustomsTypeCode]
						,Dest.[TransportStopDeliveryContact] = Src.[TransportStopDeliveryContact]
						,Dest.[TransportStopDeliveryEmail] = Src.[TransportStopDeliveryEmail]
						,Dest.[TransportStopDeliveryFax] = Src.[TransportStopDeliveryFax]
						,Dest.[TransportStopDeliveryPhone] = Src.[TransportStopDeliveryPhone]
						,Dest.[TransportStopRemarks] = Src.[TransportStopRemarks]
						,Dest.[TransportStopType] = Src.[TransportStopType]
						,Dest.[TransportStopUserDefinedYesNo01] = Src.[TransportStopUserDefinedYesNo01]
						,Dest.[TransportStopUserDefinedYesNo02] = Src.[TransportStopUserDefinedYesNo02]
						,Dest.[TransportStopUserDefinedYesNo03] = Src.[TransportStopUserDefinedYesNo03]
						,Dest.[TransportStopUserDefinedYesNo04] = Src.[TransportStopUserDefinedYesNo04]
						,Dest.[TransportStopUserDefinedYesNo05] = Src.[TransportStopUserDefinedYesNo05]
						,Dest.[TransportStopUserDefinedDateTime01] = Src.[TransportStopUserDefinedDateTime01]
						,Dest.[TransportStopUserDefinedDateTime02] = Src.[TransportStopUserDefinedDateTime02]
						,Dest.[TransportStopUserDefinedDateTime03] = Src.[TransportStopUserDefinedDateTime03]
						,Dest.[TransportStopUserDefinedDateTime04] = Src.[TransportStopUserDefinedDateTime04]
						,Dest.[TransportStopUserDefinedDateTime05] = Src.[TransportStopUserDefinedDateTime05]
						,Dest.[TransportStopUserDefinedDateTime06] = Src.[TransportStopUserDefinedDateTime06]
						,Dest.[TransportStopUserDefinedDateTime07] = Src.[TransportStopUserDefinedDateTime07]
						,Dest.[TransportStopUserDefinedDateTime09] = Src.[TransportStopUserDefinedDateTime09]
						,Dest.[TransportStopUserDefinedDateTime10] = Src.[TransportStopUserDefinedDateTime10]
						,Dest.[TransportStopUserDefinedNumber01] = Src.[TransportStopUserDefinedNumber01]
						,Dest.[TransportStopUserDefinedNumber02] = Src.[TransportStopUserDefinedNumber02]
						,Dest.[TransportStopUserDefinedNumber03] = Src.[TransportStopUserDefinedNumber03]
						,Dest.[TransportStopUserDefinedNumber04] = Src.[TransportStopUserDefinedNumber04]
						,Dest.[TransportStopUserDefinedNumber05] = Src.[TransportStopUserDefinedNumber05]
						,Dest.[TransportStopUserDefinedLongText01] = Src.[TransportStopUserDefinedLongText01]
						,Dest.[TransportStopUserDefinedLongText02] = Src.[TransportStopUserDefinedLongText02]
						,Dest.[TransportStopUserDefinedLongText03] = Src.[TransportStopUserDefinedLongText03]
						,Dest.[TransportStopUserDefinedLongText04] = Src.[TransportStopUserDefinedLongText04]
						,Dest.[TransportStopUserDefinedLongText05] = Src.[TransportStopUserDefinedLongText05]
						,Dest.[TransportStopUserDefinedText05] = Src.[TransportStopUserDefinedText05]
						,Dest.[TransportStopUserDefinedText06] = Src.[TransportStopUserDefinedText06]
						,Dest.[TransportStopUserDefinedText07] = Src.[TransportStopUserDefinedText07]
						,Dest.[TransportStopUserDefinedText08] = Src.[TransportStopUserDefinedText08]
						,Dest.[TransportStopUserDefinedText09] = Src.[TransportStopUserDefinedText09]
						,Dest.[TransportStopUserDefinedText10] = Src.[TransportStopUserDefinedText10]
						,Dest.[TransportStopUserDefinedText11] = Src.[TransportStopUserDefinedText11]
						,Dest.[TransportStopUserDefinedText12] = Src.[TransportStopUserDefinedText12]
						,Dest.[TransportStopUserDefinedText13] = Src.[TransportStopUserDefinedText13]
						,Dest.[TransportStopUserDefinedText14] = Src.[TransportStopUserDefinedText14]
						,Dest.[TransportStopUserDefinedText15] = Src.[TransportStopUserDefinedText15]
						,Dest.[TransportStopIDMainStop] = Src.[TransportStopIDMainStop]
						,Dest.[TransportStopOriginalSubContext] = Src.[TransportStopOriginalSubContext]
						,Dest.[TransportStopOriginalType] = Src.[TransportStopOriginalType]
						,Dest.[TransportStopDepartureDateTime] = Src.[TransportStopDepartureDateTime]
						,Dest.[TransportStopArrivalDateTime] = Src.[TransportStopArrivalDateTime]
						,Dest.[TransportStopActionStartDateTime] = Src.[TransportStopActionStartDateTime]
						,Dest.[TransportStopActionEndDateTime] = Src.[TransportStopActionEndDateTime]
						,Dest.[TransportStopMileStoneRemarksCarrier] = Src.[TransportStopMileStoneRemarksCarrier]
						,Dest.[TransportStopMileStoneRemarksInternal] = Src.[TransportStopMileStoneRemarksInternal]
						,Dest.[TransportStopDeliveryRegionCode] = Src.[TransportStopDeliveryRegionCode]
						,Dest.[TransportStopIncomeType] = Src.[TransportStopIncomeType]
						,Dest.[TransportStopCostType] = Src.[TransportStopCostType]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDTransportStop]
						,[TransportID]
						,[TransportStopCompanyID]
						,[TransportStopPickupDateTime]
						,[TransportStopPickUpCompanyID]
						,[TransportStopPickUpAddress1]
						,[TransportStopPickUpAddress2]
						,[TransportStopPickUpAddress3]
						,[TransportStopPickUpAddress4]
						,[TransportStopPickUpCity]
						,[TransportStopPickUpState]
						,[TransportStopPickUpZipCode]
						,[TransportStopPickUpCountry]
						,[TransportStopPickUpReference]
						,[TransportStopDeliveryDateTime]
						,[TransportStopDeliveryCompanyID]
						,[TransportStopDeliveryAddress1]
						,[TransportStopDeliveryAddress2]
						,[TransportStopDeliveryAddress3]
						,[TransportStopDeliveryAddress4]
						,[TransportStopDeliveryCity]
						,[TransportStopDeliveryState]
						,[TransportStopDeliveryZipCode]
						,[TransportStopDeliveryCountry]
						,[TransportStopDeliveryReference]
						,[TransportStopContainerNumber]
						,[TransportStopContainerType]
						,[TransportStopContainerSize]
						,[TransportStopDropOffLocationContainer]
						,[TransportStopHandInBeforeDateTime]
						,[TransportStopSealNumber]
						,[TransportStopPinCode]
						,[TransportStopAddDateTime]
						,[TransportStopEditDateTime]
						,[TransportStopAddUserCode]
						,[TransportStopEditUserCode]
						,[TransportStopNumber]
						,[TransportStopHandInAvailableFromDateTime]
						,[TransportStopHandInReference]
						,[TransportStopPickUpMoment]
						,[TransportStopDeliveryMoment]
						,[TransportStopPickupCompanyName]
						,[TransportStopDeliveryCompanyName]
						,[TransportStopDropOffLocationName]
						,[TransportStopCustomsStatus]
						,[TransportStopShipName]
						,[TransportStopCompanyName]
						,[TransportStopEstimatedArrivalDateTimeVessel]
						,[TransportStopOriginCountry]
						,[OrderID]
						,[TransportStopExternalOrderID]
						,[TransportStopOrderStatus]
						,[ReceiptID]
						,[TransportStopExternalReceiptID]
						,[TransportStopReceiptStatus]
						,[TransportStopOriginalPickUpZipCode]
						,[TransportStopOriginalDeliveryZipCode]
						,[TransportStopDistance]
						,[TransportStopTariffAgreed]
						,[TransportStopGoThroughDateTime]
						,[TransportStopGoThroughCompanyID]
						,[TransportStopGoThroughAddress1]
						,[TransportStopGoThroughAddress2]
						,[TransportStopGoThroughAddress3]
						,[TransportStopGoThroughAddress4]
						,[TransportStopGoThroughCity]
						,[TransportStopGoThroughState]
						,[TransportStopGoThroughZipCode]
						,[TransportStopGoThroughCountry]
						,[TransportStopGoThroughReference]
						,[TransportStopFreightWeight]
						,[TransportStopVolume]
						,[TransportStopLoadMetres]
						,[TransportStopBillingWeight]
						,[TransportStopWaitingTime]
						,[TransportStopSMSOnTime]
						,[TransportStopPODOnTime]
						,[TransportStopCartons]
						,[TransportStopPallets]
						,[TransportStopOrderStatusID]
						,[TransportStopReceiptStatusID]
						,[TransportStopCurrencyCode]
						,[TransportStopCashOnDelivery]
						,[TransportStopCashOnDeliveryCurrencyCode]
						,[TransportStopCashOnDeliveryReference]
						,[TransportStopDeliveryReference2]
						,[TransportStopUserDefinedText01]
						,[TransportStopUserDefinedText02]
						,[TransportStopUserDefinedText03]
						,[TransportStopUserDefinedText04]
						,[TransportStopUserDefinedDate01]
						,[TransportStopUserDefinedDate02]
						,[TransportStopCustomsTypeCode]
						,[TransportStopDeliveryContact]
						,[TransportStopDeliveryEmail]
						,[TransportStopDeliveryFax]
						,[TransportStopDeliveryPhone]
						,[TransportStopRemarks]
						,[TransportStopType]
						,[TransportStopUserDefinedYesNo01]
						,[TransportStopUserDefinedYesNo02]
						,[TransportStopUserDefinedYesNo03]
						,[TransportStopUserDefinedYesNo04]
						,[TransportStopUserDefinedYesNo05]
						,[TransportStopUserDefinedDateTime01]
						,[TransportStopUserDefinedDateTime02]
						,[TransportStopUserDefinedDateTime03]
						,[TransportStopUserDefinedDateTime04]
						,[TransportStopUserDefinedDateTime05]
						,[TransportStopUserDefinedDateTime06]
						,[TransportStopUserDefinedDateTime07]
						,[TransportStopUserDefinedDateTime09]
						,[TransportStopUserDefinedDateTime10]
						,[TransportStopUserDefinedNumber01]
						,[TransportStopUserDefinedNumber02]
						,[TransportStopUserDefinedNumber03]
						,[TransportStopUserDefinedNumber04]
						,[TransportStopUserDefinedNumber05]
						,[TransportStopUserDefinedLongText01]
						,[TransportStopUserDefinedLongText02]
						,[TransportStopUserDefinedLongText03]
						,[TransportStopUserDefinedLongText04]
						,[TransportStopUserDefinedLongText05]
						,[TransportStopUserDefinedText05]
						,[TransportStopUserDefinedText06]
						,[TransportStopUserDefinedText07]
						,[TransportStopUserDefinedText08]
						,[TransportStopUserDefinedText09]
						,[TransportStopUserDefinedText10]
						,[TransportStopUserDefinedText11]
						,[TransportStopUserDefinedText12]
						,[TransportStopUserDefinedText13]
						,[TransportStopUserDefinedText14]
						,[TransportStopUserDefinedText15]
						,[TransportStopIDMainStop]
						,[TransportStopOriginalSubContext]
						,[TransportStopOriginalType]
						,[TransportStopDepartureDateTime]
						,[TransportStopArrivalDateTime]
						,[TransportStopActionStartDateTime]
						,[TransportStopActionEndDateTime]
						,[TransportStopMileStoneRemarksCarrier]
						,[TransportStopMileStoneRemarksInternal]
						,[TransportStopDeliveryRegionCode]
						,[TransportStopIncomeType]
						,[TransportStopCostType]
						)
					VALUES (
						Src.[IDTransportStop]
						,Src.[TransportID]
						,Src.[TransportStopCompanyID]
						,Src.[TransportStopPickupDateTime]
						,Src.[TransportStopPickUpCompanyID]
						,Src.[TransportStopPickUpAddress1]
						,Src.[TransportStopPickUpAddress2]
						,Src.[TransportStopPickUpAddress3]
						,Src.[TransportStopPickUpAddress4]
						,Src.[TransportStopPickUpCity]
						,Src.[TransportStopPickUpState]
						,Src.[TransportStopPickUpZipCode]
						,Src.[TransportStopPickUpCountry]
						,Src.[TransportStopPickUpReference]
						,Src.[TransportStopDeliveryDateTime]
						,Src.[TransportStopDeliveryCompanyID]
						,Src.[TransportStopDeliveryAddress1]
						,Src.[TransportStopDeliveryAddress2]
						,Src.[TransportStopDeliveryAddress3]
						,Src.[TransportStopDeliveryAddress4]
						,Src.[TransportStopDeliveryCity]
						,Src.[TransportStopDeliveryState]
						,Src.[TransportStopDeliveryZipCode]
						,Src.[TransportStopDeliveryCountry]
						,Src.[TransportStopDeliveryReference]
						,Src.[TransportStopContainerNumber]
						,Src.[TransportStopContainerType]
						,Src.[TransportStopContainerSize]
						,Src.[TransportStopDropOffLocationContainer]
						,Src.[TransportStopHandInBeforeDateTime]
						,Src.[TransportStopSealNumber]
						,Src.[TransportStopPinCode]
						,Src.[TransportStopAddDateTime]
						,Src.[TransportStopEditDateTime]
						,Src.[TransportStopAddUserCode]
						,Src.[TransportStopEditUserCode]
						,Src.[TransportStopNumber]
						,Src.[TransportStopHandInAvailableFromDateTime]
						,Src.[TransportStopHandInReference]
						,Src.[TransportStopPickUpMoment]
						,Src.[TransportStopDeliveryMoment]
						,Src.[TransportStopPickupCompanyName]
						,Src.[TransportStopDeliveryCompanyName]
						,Src.[TransportStopDropOffLocationName]
						,Src.[TransportStopCustomsStatus]
						,Src.[TransportStopShipName]
						,Src.[TransportStopCompanyName]
						,Src.[TransportStopEstimatedArrivalDateTimeVessel]
						,Src.[TransportStopOriginCountry]
						,Src.[OrderID]
						,Src.[TransportStopExternalOrderID]
						,Src.[TransportStopOrderStatus]
						,Src.[ReceiptID]
						,Src.[TransportStopExternalReceiptID]
						,Src.[TransportStopReceiptStatus]
						,Src.[TransportStopOriginalPickUpZipCode]
						,Src.[TransportStopOriginalDeliveryZipCode]
						,Src.[TransportStopDistance]
						,Src.[TransportStopTariffAgreed]
						,Src.[TransportStopGoThroughDateTime]
						,Src.[TransportStopGoThroughCompanyID]
						,Src.[TransportStopGoThroughAddress1]
						,Src.[TransportStopGoThroughAddress2]
						,Src.[TransportStopGoThroughAddress3]
						,Src.[TransportStopGoThroughAddress4]
						,Src.[TransportStopGoThroughCity]
						,Src.[TransportStopGoThroughState]
						,Src.[TransportStopGoThroughZipCode]
						,Src.[TransportStopGoThroughCountry]
						,Src.[TransportStopGoThroughReference]
						,Src.[TransportStopFreightWeight]
						,Src.[TransportStopVolume]
						,Src.[TransportStopLoadMetres]
						,Src.[TransportStopBillingWeight]
						,Src.[TransportStopWaitingTime]
						,Src.[TransportStopSMSOnTime]
						,Src.[TransportStopPODOnTime]
						,Src.[TransportStopCartons]
						,Src.[TransportStopPallets]
						,Src.[TransportStopOrderStatusID]
						,Src.[TransportStopReceiptStatusID]
						,Src.[TransportStopCurrencyCode]
						,Src.[TransportStopCashOnDelivery]
						,Src.[TransportStopCashOnDeliveryCurrencyCode]
						,Src.[TransportStopCashOnDeliveryReference]
						,Src.[TransportStopDeliveryReference2]
						,Src.[TransportStopUserDefinedText01]
						,Src.[TransportStopUserDefinedText02]
						,Src.[TransportStopUserDefinedText03]
						,Src.[TransportStopUserDefinedText04]
						,Src.[TransportStopUserDefinedDate01]
						,Src.[TransportStopUserDefinedDate02]
						,Src.[TransportStopCustomsTypeCode]
						,Src.[TransportStopDeliveryContact]
						,Src.[TransportStopDeliveryEmail]
						,Src.[TransportStopDeliveryFax]
						,Src.[TransportStopDeliveryPhone]
						,Src.[TransportStopRemarks]
						,Src.[TransportStopType]
						,Src.[TransportStopUserDefinedYesNo01]
						,Src.[TransportStopUserDefinedYesNo02]
						,Src.[TransportStopUserDefinedYesNo03]
						,Src.[TransportStopUserDefinedYesNo04]
						,Src.[TransportStopUserDefinedYesNo05]
						,Src.[TransportStopUserDefinedDateTime01]
						,Src.[TransportStopUserDefinedDateTime02]
						,Src.[TransportStopUserDefinedDateTime03]
						,Src.[TransportStopUserDefinedDateTime04]
						,Src.[TransportStopUserDefinedDateTime05]
						,Src.[TransportStopUserDefinedDateTime06]
						,Src.[TransportStopUserDefinedDateTime07]
						,Src.[TransportStopUserDefinedDateTime09]
						,Src.[TransportStopUserDefinedDateTime10]
						,Src.[TransportStopUserDefinedNumber01]
						,Src.[TransportStopUserDefinedNumber02]
						,Src.[TransportStopUserDefinedNumber03]
						,Src.[TransportStopUserDefinedNumber04]
						,Src.[TransportStopUserDefinedNumber05]
						,Src.[TransportStopUserDefinedLongText01]
						,Src.[TransportStopUserDefinedLongText02]
						,Src.[TransportStopUserDefinedLongText03]
						,Src.[TransportStopUserDefinedLongText04]
						,Src.[TransportStopUserDefinedLongText05]
						,Src.[TransportStopUserDefinedText05]
						,Src.[TransportStopUserDefinedText06]
						,Src.[TransportStopUserDefinedText07]
						,Src.[TransportStopUserDefinedText08]
						,Src.[TransportStopUserDefinedText09]
						,Src.[TransportStopUserDefinedText10]
						,Src.[TransportStopUserDefinedText11]
						,Src.[TransportStopUserDefinedText12]
						,Src.[TransportStopUserDefinedText13]
						,Src.[TransportStopUserDefinedText14]
						,Src.[TransportStopUserDefinedText15]
						,Src.[TransportStopIDMainStop]
						,Src.[TransportStopOriginalSubContext]
						,Src.[TransportStopOriginalType]
						,Src.[TransportStopDepartureDateTime]
						,Src.[TransportStopArrivalDateTime]
						,Src.[TransportStopActionStartDateTime]
						,Src.[TransportStopActionEndDateTime]
						,Src.[TransportStopMileStoneRemarksCarrier]
						,Src.[TransportStopMileStoneRemarksInternal]
						,Src.[TransportStopDeliveryRegionCode]
						,Src.[TransportStopIncomeType]
						,Src.[TransportStopCostType]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDTransportStop] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDTransportStop] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].TransportStops Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStops Dest WITH (NOLOCK) ON Src.IDTransportStop = Dest.IDTransportStop
					WHERE Dest.[TransportStopEditDateTime] < Src.[TransportStopEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[TransportID] = Src.[TransportID]
					,Dest.[TransportStopCompanyID] = Src.[TransportStopCompanyID]
					,Dest.[TransportStopPickupDateTime] = Src.[TransportStopPickupDateTime]
					,Dest.[TransportStopPickUpCompanyID] = Src.[TransportStopPickUpCompanyID]
					,Dest.[TransportStopPickUpAddress1] = Src.[TransportStopPickUpAddress1]
					,Dest.[TransportStopPickUpAddress2] = Src.[TransportStopPickUpAddress2]
					,Dest.[TransportStopPickUpAddress3] = Src.[TransportStopPickUpAddress3]
					,Dest.[TransportStopPickUpAddress4] = Src.[TransportStopPickUpAddress4]
					,Dest.[TransportStopPickUpCity] = Src.[TransportStopPickUpCity]
					,Dest.[TransportStopPickUpState] = Src.[TransportStopPickUpState]
					,Dest.[TransportStopPickUpZipCode] = Src.[TransportStopPickUpZipCode]
					,Dest.[TransportStopPickUpCountry] = Src.[TransportStopPickUpCountry]
					,Dest.[TransportStopPickUpReference] = Src.[TransportStopPickUpReference]
					,Dest.[TransportStopDeliveryDateTime] = Src.[TransportStopDeliveryDateTime]
					,Dest.[TransportStopDeliveryCompanyID] = Src.[TransportStopDeliveryCompanyID]
					,Dest.[TransportStopDeliveryAddress1] = Src.[TransportStopDeliveryAddress1]
					,Dest.[TransportStopDeliveryAddress2] = Src.[TransportStopDeliveryAddress2]
					,Dest.[TransportStopDeliveryAddress3] = Src.[TransportStopDeliveryAddress3]
					,Dest.[TransportStopDeliveryAddress4] = Src.[TransportStopDeliveryAddress4]
					,Dest.[TransportStopDeliveryCity] = Src.[TransportStopDeliveryCity]
					,Dest.[TransportStopDeliveryState] = Src.[TransportStopDeliveryState]
					,Dest.[TransportStopDeliveryZipCode] = Src.[TransportStopDeliveryZipCode]
					,Dest.[TransportStopDeliveryCountry] = Src.[TransportStopDeliveryCountry]
					,Dest.[TransportStopDeliveryReference] = Src.[TransportStopDeliveryReference]
					,Dest.[TransportStopContainerNumber] = Src.[TransportStopContainerNumber]
					,Dest.[TransportStopContainerType] = Src.[TransportStopContainerType]
					,Dest.[TransportStopContainerSize] = Src.[TransportStopContainerSize]
					,Dest.[TransportStopDropOffLocationContainer] = Src.[TransportStopDropOffLocationContainer]
					,Dest.[TransportStopHandInBeforeDateTime] = Src.[TransportStopHandInBeforeDateTime]
					,Dest.[TransportStopSealNumber] = Src.[TransportStopSealNumber]
					,Dest.[TransportStopPinCode] = Src.[TransportStopPinCode]
					,Dest.[TransportStopAddDateTime] = Src.[TransportStopAddDateTime]
					,Dest.[TransportStopEditDateTime] = Src.[TransportStopEditDateTime]
					,Dest.[TransportStopAddUserCode] = Src.[TransportStopAddUserCode]
					,Dest.[TransportStopEditUserCode] = Src.[TransportStopEditUserCode]
					,Dest.[TransportStopNumber] = Src.[TransportStopNumber]
					,Dest.[TransportStopHandInAvailableFromDateTime] = Src.[TransportStopHandInAvailableFromDateTime]
					,Dest.[TransportStopHandInReference] = Src.[TransportStopHandInReference]
					,Dest.[TransportStopPickUpMoment] = Src.[TransportStopPickUpMoment]
					,Dest.[TransportStopDeliveryMoment] = Src.[TransportStopDeliveryMoment]
					,Dest.[TransportStopPickupCompanyName] = Src.[TransportStopPickupCompanyName]
					,Dest.[TransportStopDeliveryCompanyName] = Src.[TransportStopDeliveryCompanyName]
					,Dest.[TransportStopDropOffLocationName] = Src.[TransportStopDropOffLocationName]
					,Dest.[TransportStopCustomsStatus] = Src.[TransportStopCustomsStatus]
					,Dest.[TransportStopShipName] = Src.[TransportStopShipName]
					,Dest.[TransportStopCompanyName] = Src.[TransportStopCompanyName]
					,Dest.[TransportStopEstimatedArrivalDateTimeVessel] = Src.[TransportStopEstimatedArrivalDateTimeVessel]
					,Dest.[TransportStopOriginCountry] = Src.[TransportStopOriginCountry]
					,Dest.[OrderID] = Src.[OrderID]
					,Dest.[TransportStopExternalOrderID] = Src.[TransportStopExternalOrderID]
					,Dest.[TransportStopOrderStatus] = Src.[TransportStopOrderStatus]
					,Dest.[ReceiptID] = Src.[ReceiptID]
					,Dest.[TransportStopExternalReceiptID] = Src.[TransportStopExternalReceiptID]
					,Dest.[TransportStopReceiptStatus] = Src.[TransportStopReceiptStatus]
					,Dest.[TransportStopOriginalPickUpZipCode] = Src.[TransportStopOriginalPickUpZipCode]
					,Dest.[TransportStopOriginalDeliveryZipCode] = Src.[TransportStopOriginalDeliveryZipCode]
					,Dest.[TransportStopDistance] = Src.[TransportStopDistance]
					,Dest.[TransportStopTariffAgreed] = Src.[TransportStopTariffAgreed]
					,Dest.[TransportStopGoThroughDateTime] = Src.[TransportStopGoThroughDateTime]
					,Dest.[TransportStopGoThroughCompanyID] = Src.[TransportStopGoThroughCompanyID]
					,Dest.[TransportStopGoThroughAddress1] = Src.[TransportStopGoThroughAddress1]
					,Dest.[TransportStopGoThroughAddress2] = Src.[TransportStopGoThroughAddress2]
					,Dest.[TransportStopGoThroughAddress3] = Src.[TransportStopGoThroughAddress3]
					,Dest.[TransportStopGoThroughAddress4] = Src.[TransportStopGoThroughAddress4]
					,Dest.[TransportStopGoThroughCity] = Src.[TransportStopGoThroughCity]
					,Dest.[TransportStopGoThroughState] = Src.[TransportStopGoThroughState]
					,Dest.[TransportStopGoThroughZipCode] = Src.[TransportStopGoThroughZipCode]
					,Dest.[TransportStopGoThroughCountry] = Src.[TransportStopGoThroughCountry]
					,Dest.[TransportStopGoThroughReference] = Src.[TransportStopGoThroughReference]
					,Dest.[TransportStopFreightWeight] = Src.[TransportStopFreightWeight]
					,Dest.[TransportStopVolume] = Src.[TransportStopVolume]
					,Dest.[TransportStopLoadMetres] = Src.[TransportStopLoadMetres]
					,Dest.[TransportStopBillingWeight] = Src.[TransportStopBillingWeight]
					,Dest.[TransportStopWaitingTime] = Src.[TransportStopWaitingTime]
					,Dest.[TransportStopSMSOnTime] = Src.[TransportStopSMSOnTime]
					,Dest.[TransportStopPODOnTime] = Src.[TransportStopPODOnTime]
					,Dest.[TransportStopCartons] = Src.[TransportStopCartons]
					,Dest.[TransportStopPallets] = Src.[TransportStopPallets]
					,Dest.[TransportStopOrderStatusID] = Src.[TransportStopOrderStatusID]
					,Dest.[TransportStopReceiptStatusID] = Src.[TransportStopReceiptStatusID]
					,Dest.[TransportStopCurrencyCode] = Src.[TransportStopCurrencyCode]
					,Dest.[TransportStopCashOnDelivery] = Src.[TransportStopCashOnDelivery]
					,Dest.[TransportStopCashOnDeliveryCurrencyCode] = Src.[TransportStopCashOnDeliveryCurrencyCode]
					,Dest.[TransportStopCashOnDeliveryReference] = Src.[TransportStopCashOnDeliveryReference]
					,Dest.[TransportStopDeliveryReference2] = Src.[TransportStopDeliveryReference2]
					,Dest.[TransportStopUserDefinedText01] = Src.[TransportStopUserDefinedText01]
					,Dest.[TransportStopUserDefinedText02] = Src.[TransportStopUserDefinedText02]
					,Dest.[TransportStopUserDefinedText03] = Src.[TransportStopUserDefinedText03]
					,Dest.[TransportStopUserDefinedText04] = Src.[TransportStopUserDefinedText04]
					,Dest.[TransportStopUserDefinedDate01] = Src.[TransportStopUserDefinedDate01]
					,Dest.[TransportStopUserDefinedDate02] = Src.[TransportStopUserDefinedDate02]
					,Dest.[TransportStopCustomsTypeCode] = Src.[TransportStopCustomsTypeCode]
					,Dest.[TransportStopDeliveryContact] = Src.[TransportStopDeliveryContact]
					,Dest.[TransportStopDeliveryEmail] = Src.[TransportStopDeliveryEmail]
					,Dest.[TransportStopDeliveryFax] = Src.[TransportStopDeliveryFax]
					,Dest.[TransportStopDeliveryPhone] = Src.[TransportStopDeliveryPhone]
					,Dest.[TransportStopRemarks] = Src.[TransportStopRemarks]
					,Dest.[TransportStopType] = Src.[TransportStopType]
					,Dest.[TransportStopUserDefinedYesNo01] = Src.[TransportStopUserDefinedYesNo01]
					,Dest.[TransportStopUserDefinedYesNo02] = Src.[TransportStopUserDefinedYesNo02]
					,Dest.[TransportStopUserDefinedYesNo03] = Src.[TransportStopUserDefinedYesNo03]
					,Dest.[TransportStopUserDefinedYesNo04] = Src.[TransportStopUserDefinedYesNo04]
					,Dest.[TransportStopUserDefinedYesNo05] = Src.[TransportStopUserDefinedYesNo05]
					,Dest.[TransportStopUserDefinedDateTime01] = Src.[TransportStopUserDefinedDateTime01]
					,Dest.[TransportStopUserDefinedDateTime02] = Src.[TransportStopUserDefinedDateTime02]
					,Dest.[TransportStopUserDefinedDateTime03] = Src.[TransportStopUserDefinedDateTime03]
					,Dest.[TransportStopUserDefinedDateTime04] = Src.[TransportStopUserDefinedDateTime04]
					,Dest.[TransportStopUserDefinedDateTime05] = Src.[TransportStopUserDefinedDateTime05]
					,Dest.[TransportStopUserDefinedDateTime06] = Src.[TransportStopUserDefinedDateTime06]
					,Dest.[TransportStopUserDefinedDateTime07] = Src.[TransportStopUserDefinedDateTime07]
					,Dest.[TransportStopUserDefinedDateTime09] = Src.[TransportStopUserDefinedDateTime09]
					,Dest.[TransportStopUserDefinedDateTime10] = Src.[TransportStopUserDefinedDateTime10]
					,Dest.[TransportStopUserDefinedNumber01] = Src.[TransportStopUserDefinedNumber01]
					,Dest.[TransportStopUserDefinedNumber02] = Src.[TransportStopUserDefinedNumber02]
					,Dest.[TransportStopUserDefinedNumber03] = Src.[TransportStopUserDefinedNumber03]
					,Dest.[TransportStopUserDefinedNumber04] = Src.[TransportStopUserDefinedNumber04]
					,Dest.[TransportStopUserDefinedNumber05] = Src.[TransportStopUserDefinedNumber05]
					,Dest.[TransportStopUserDefinedLongText01] = Src.[TransportStopUserDefinedLongText01]
					,Dest.[TransportStopUserDefinedLongText02] = Src.[TransportStopUserDefinedLongText02]
					,Dest.[TransportStopUserDefinedLongText03] = Src.[TransportStopUserDefinedLongText03]
					,Dest.[TransportStopUserDefinedLongText04] = Src.[TransportStopUserDefinedLongText04]
					,Dest.[TransportStopUserDefinedLongText05] = Src.[TransportStopUserDefinedLongText05]
					,Dest.[TransportStopUserDefinedText05] = Src.[TransportStopUserDefinedText05]
					,Dest.[TransportStopUserDefinedText06] = Src.[TransportStopUserDefinedText06]
					,Dest.[TransportStopUserDefinedText07] = Src.[TransportStopUserDefinedText07]
					,Dest.[TransportStopUserDefinedText08] = Src.[TransportStopUserDefinedText08]
					,Dest.[TransportStopUserDefinedText09] = Src.[TransportStopUserDefinedText09]
					,Dest.[TransportStopUserDefinedText10] = Src.[TransportStopUserDefinedText10]
					,Dest.[TransportStopUserDefinedText11] = Src.[TransportStopUserDefinedText11]
					,Dest.[TransportStopUserDefinedText12] = Src.[TransportStopUserDefinedText12]
					,Dest.[TransportStopUserDefinedText13] = Src.[TransportStopUserDefinedText13]
					,Dest.[TransportStopUserDefinedText14] = Src.[TransportStopUserDefinedText14]
					,Dest.[TransportStopUserDefinedText15] = Src.[TransportStopUserDefinedText15]
					,Dest.[TransportStopIDMainStop] = Src.[TransportStopIDMainStop]
					,Dest.[TransportStopOriginalSubContext] = Src.[TransportStopOriginalSubContext]
					,Dest.[TransportStopOriginalType] = Src.[TransportStopOriginalType]
					,Dest.[TransportStopDepartureDateTime] = Src.[TransportStopDepartureDateTime]
					,Dest.[TransportStopArrivalDateTime] = Src.[TransportStopArrivalDateTime]
					,Dest.[TransportStopActionStartDateTime] = Src.[TransportStopActionStartDateTime]
					,Dest.[TransportStopActionEndDateTime] = Src.[TransportStopActionEndDateTime]
					,Dest.[TransportStopMileStoneRemarksCarrier] = Src.[TransportStopMileStoneRemarksCarrier]
					,Dest.[TransportStopMileStoneRemarksInternal] = Src.[TransportStopMileStoneRemarksInternal]
					,Dest.[TransportStopDeliveryRegionCode] = Src.[TransportStopDeliveryRegionCode]
					,Dest.[TransportStopIncomeType] = Src.[TransportStopIncomeType]
					,Dest.[TransportStopCostType] = Src.[TransportStopCostType]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDTransportStop AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDTransportStop AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].TransportStops Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStops Dest ON Src.IDTransportStop = Dest.IDTransportStop
				WHERE Dest.[TransportStopEditDateTime] < Src.[TransportStopEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].TransportStops Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStops Dest WITH (NOLOCK) ON Src.IDTransportStop = Dest.IDTransportStop
					WHERE Dest.IDTransportStop IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStops (
					[IDTransportStop]
					,[TransportID]
					,[TransportStopCompanyID]
					,[TransportStopPickupDateTime]
					,[TransportStopPickUpCompanyID]
					,[TransportStopPickUpAddress1]
					,[TransportStopPickUpAddress2]
					,[TransportStopPickUpAddress3]
					,[TransportStopPickUpAddress4]
					,[TransportStopPickUpCity]
					,[TransportStopPickUpState]
					,[TransportStopPickUpZipCode]
					,[TransportStopPickUpCountry]
					,[TransportStopPickUpReference]
					,[TransportStopDeliveryDateTime]
					,[TransportStopDeliveryCompanyID]
					,[TransportStopDeliveryAddress1]
					,[TransportStopDeliveryAddress2]
					,[TransportStopDeliveryAddress3]
					,[TransportStopDeliveryAddress4]
					,[TransportStopDeliveryCity]
					,[TransportStopDeliveryState]
					,[TransportStopDeliveryZipCode]
					,[TransportStopDeliveryCountry]
					,[TransportStopDeliveryReference]
					,[TransportStopContainerNumber]
					,[TransportStopContainerType]
					,[TransportStopContainerSize]
					,[TransportStopDropOffLocationContainer]
					,[TransportStopHandInBeforeDateTime]
					,[TransportStopSealNumber]
					,[TransportStopPinCode]
					,[TransportStopAddDateTime]
					,[TransportStopEditDateTime]
					,[TransportStopAddUserCode]
					,[TransportStopEditUserCode]
					,[TransportStopNumber]
					,[TransportStopHandInAvailableFromDateTime]
					,[TransportStopHandInReference]
					,[TransportStopPickUpMoment]
					,[TransportStopDeliveryMoment]
					,[TransportStopPickupCompanyName]
					,[TransportStopDeliveryCompanyName]
					,[TransportStopDropOffLocationName]
					,[TransportStopCustomsStatus]
					,[TransportStopShipName]
					,[TransportStopCompanyName]
					,[TransportStopEstimatedArrivalDateTimeVessel]
					,[TransportStopOriginCountry]
					,[OrderID]
					,[TransportStopExternalOrderID]
					,[TransportStopOrderStatus]
					,[ReceiptID]
					,[TransportStopExternalReceiptID]
					,[TransportStopReceiptStatus]
					,[TransportStopOriginalPickUpZipCode]
					,[TransportStopOriginalDeliveryZipCode]
					,[TransportStopDistance]
					,[TransportStopTariffAgreed]
					,[TransportStopGoThroughDateTime]
					,[TransportStopGoThroughCompanyID]
					,[TransportStopGoThroughAddress1]
					,[TransportStopGoThroughAddress2]
					,[TransportStopGoThroughAddress3]
					,[TransportStopGoThroughAddress4]
					,[TransportStopGoThroughCity]
					,[TransportStopGoThroughState]
					,[TransportStopGoThroughZipCode]
					,[TransportStopGoThroughCountry]
					,[TransportStopGoThroughReference]
					,[TransportStopFreightWeight]
					,[TransportStopVolume]
					,[TransportStopLoadMetres]
					,[TransportStopBillingWeight]
					,[TransportStopWaitingTime]
					,[TransportStopSMSOnTime]
					,[TransportStopPODOnTime]
					,[TransportStopCartons]
					,[TransportStopPallets]
					,[TransportStopOrderStatusID]
					,[TransportStopReceiptStatusID]
					,[TransportStopCurrencyCode]
					,[TransportStopCashOnDelivery]
					,[TransportStopCashOnDeliveryCurrencyCode]
					,[TransportStopCashOnDeliveryReference]
					,[TransportStopDeliveryReference2]
					,[TransportStopUserDefinedText01]
					,[TransportStopUserDefinedText02]
					,[TransportStopUserDefinedText03]
					,[TransportStopUserDefinedText04]
					,[TransportStopUserDefinedDate01]
					,[TransportStopUserDefinedDate02]
					,[TransportStopCustomsTypeCode]
					,[TransportStopDeliveryContact]
					,[TransportStopDeliveryEmail]
					,[TransportStopDeliveryFax]
					,[TransportStopDeliveryPhone]
					,[TransportStopRemarks]
					,[TransportStopType]
					,[TransportStopUserDefinedYesNo01]
					,[TransportStopUserDefinedYesNo02]
					,[TransportStopUserDefinedYesNo03]
					,[TransportStopUserDefinedYesNo04]
					,[TransportStopUserDefinedYesNo05]
					,[TransportStopUserDefinedDateTime01]
					,[TransportStopUserDefinedDateTime02]
					,[TransportStopUserDefinedDateTime03]
					,[TransportStopUserDefinedDateTime04]
					,[TransportStopUserDefinedDateTime05]
					,[TransportStopUserDefinedDateTime06]
					,[TransportStopUserDefinedDateTime07]
					,[TransportStopUserDefinedDateTime09]
					,[TransportStopUserDefinedDateTime10]
					,[TransportStopUserDefinedNumber01]
					,[TransportStopUserDefinedNumber02]
					,[TransportStopUserDefinedNumber03]
					,[TransportStopUserDefinedNumber04]
					,[TransportStopUserDefinedNumber05]
					,[TransportStopUserDefinedLongText01]
					,[TransportStopUserDefinedLongText02]
					,[TransportStopUserDefinedLongText03]
					,[TransportStopUserDefinedLongText04]
					,[TransportStopUserDefinedLongText05]
					,[TransportStopUserDefinedText05]
					,[TransportStopUserDefinedText06]
					,[TransportStopUserDefinedText07]
					,[TransportStopUserDefinedText08]
					,[TransportStopUserDefinedText09]
					,[TransportStopUserDefinedText10]
					,[TransportStopUserDefinedText11]
					,[TransportStopUserDefinedText12]
					,[TransportStopUserDefinedText13]
					,[TransportStopUserDefinedText14]
					,[TransportStopUserDefinedText15]
					,[TransportStopIDMainStop]
					,[TransportStopOriginalSubContext]
					,[TransportStopOriginalType]
					,[TransportStopDepartureDateTime]
					,[TransportStopArrivalDateTime]
					,[TransportStopActionStartDateTime]
					,[TransportStopActionEndDateTime]
					,[TransportStopMileStoneRemarksCarrier]
					,[TransportStopMileStoneRemarksInternal]
					,[TransportStopDeliveryRegionCode]
					,[TransportStopIncomeType]
					,[TransportStopCostType]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDTransportStop AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDTransportStop]
					,Src.[TransportID]
					,Src.[TransportStopCompanyID]
					,Src.[TransportStopPickupDateTime]
					,Src.[TransportStopPickUpCompanyID]
					,Src.[TransportStopPickUpAddress1]
					,Src.[TransportStopPickUpAddress2]
					,Src.[TransportStopPickUpAddress3]
					,Src.[TransportStopPickUpAddress4]
					,Src.[TransportStopPickUpCity]
					,Src.[TransportStopPickUpState]
					,Src.[TransportStopPickUpZipCode]
					,Src.[TransportStopPickUpCountry]
					,Src.[TransportStopPickUpReference]
					,Src.[TransportStopDeliveryDateTime]
					,Src.[TransportStopDeliveryCompanyID]
					,Src.[TransportStopDeliveryAddress1]
					,Src.[TransportStopDeliveryAddress2]
					,Src.[TransportStopDeliveryAddress3]
					,Src.[TransportStopDeliveryAddress4]
					,Src.[TransportStopDeliveryCity]
					,Src.[TransportStopDeliveryState]
					,Src.[TransportStopDeliveryZipCode]
					,Src.[TransportStopDeliveryCountry]
					,Src.[TransportStopDeliveryReference]
					,Src.[TransportStopContainerNumber]
					,Src.[TransportStopContainerType]
					,Src.[TransportStopContainerSize]
					,Src.[TransportStopDropOffLocationContainer]
					,Src.[TransportStopHandInBeforeDateTime]
					,Src.[TransportStopSealNumber]
					,Src.[TransportStopPinCode]
					,Src.[TransportStopAddDateTime]
					,Src.[TransportStopEditDateTime]
					,Src.[TransportStopAddUserCode]
					,Src.[TransportStopEditUserCode]
					,Src.[TransportStopNumber]
					,Src.[TransportStopHandInAvailableFromDateTime]
					,Src.[TransportStopHandInReference]
					,Src.[TransportStopPickUpMoment]
					,Src.[TransportStopDeliveryMoment]
					,Src.[TransportStopPickupCompanyName]
					,Src.[TransportStopDeliveryCompanyName]
					,Src.[TransportStopDropOffLocationName]
					,Src.[TransportStopCustomsStatus]
					,Src.[TransportStopShipName]
					,Src.[TransportStopCompanyName]
					,Src.[TransportStopEstimatedArrivalDateTimeVessel]
					,Src.[TransportStopOriginCountry]
					,Src.[OrderID]
					,Src.[TransportStopExternalOrderID]
					,Src.[TransportStopOrderStatus]
					,Src.[ReceiptID]
					,Src.[TransportStopExternalReceiptID]
					,Src.[TransportStopReceiptStatus]
					,Src.[TransportStopOriginalPickUpZipCode]
					,Src.[TransportStopOriginalDeliveryZipCode]
					,Src.[TransportStopDistance]
					,Src.[TransportStopTariffAgreed]
					,Src.[TransportStopGoThroughDateTime]
					,Src.[TransportStopGoThroughCompanyID]
					,Src.[TransportStopGoThroughAddress1]
					,Src.[TransportStopGoThroughAddress2]
					,Src.[TransportStopGoThroughAddress3]
					,Src.[TransportStopGoThroughAddress4]
					,Src.[TransportStopGoThroughCity]
					,Src.[TransportStopGoThroughState]
					,Src.[TransportStopGoThroughZipCode]
					,Src.[TransportStopGoThroughCountry]
					,Src.[TransportStopGoThroughReference]
					,Src.[TransportStopFreightWeight]
					,Src.[TransportStopVolume]
					,Src.[TransportStopLoadMetres]
					,Src.[TransportStopBillingWeight]
					,Src.[TransportStopWaitingTime]
					,Src.[TransportStopSMSOnTime]
					,Src.[TransportStopPODOnTime]
					,Src.[TransportStopCartons]
					,Src.[TransportStopPallets]
					,Src.[TransportStopOrderStatusID]
					,Src.[TransportStopReceiptStatusID]
					,Src.[TransportStopCurrencyCode]
					,Src.[TransportStopCashOnDelivery]
					,Src.[TransportStopCashOnDeliveryCurrencyCode]
					,Src.[TransportStopCashOnDeliveryReference]
					,Src.[TransportStopDeliveryReference2]
					,Src.[TransportStopUserDefinedText01]
					,Src.[TransportStopUserDefinedText02]
					,Src.[TransportStopUserDefinedText03]
					,Src.[TransportStopUserDefinedText04]
					,Src.[TransportStopUserDefinedDate01]
					,Src.[TransportStopUserDefinedDate02]
					,Src.[TransportStopCustomsTypeCode]
					,Src.[TransportStopDeliveryContact]
					,Src.[TransportStopDeliveryEmail]
					,Src.[TransportStopDeliveryFax]
					,Src.[TransportStopDeliveryPhone]
					,Src.[TransportStopRemarks]
					,Src.[TransportStopType]
					,Src.[TransportStopUserDefinedYesNo01]
					,Src.[TransportStopUserDefinedYesNo02]
					,Src.[TransportStopUserDefinedYesNo03]
					,Src.[TransportStopUserDefinedYesNo04]
					,Src.[TransportStopUserDefinedYesNo05]
					,Src.[TransportStopUserDefinedDateTime01]
					,Src.[TransportStopUserDefinedDateTime02]
					,Src.[TransportStopUserDefinedDateTime03]
					,Src.[TransportStopUserDefinedDateTime04]
					,Src.[TransportStopUserDefinedDateTime05]
					,Src.[TransportStopUserDefinedDateTime06]
					,Src.[TransportStopUserDefinedDateTime07]
					,Src.[TransportStopUserDefinedDateTime09]
					,Src.[TransportStopUserDefinedDateTime10]
					,Src.[TransportStopUserDefinedNumber01]
					,Src.[TransportStopUserDefinedNumber02]
					,Src.[TransportStopUserDefinedNumber03]
					,Src.[TransportStopUserDefinedNumber04]
					,Src.[TransportStopUserDefinedNumber05]
					,Src.[TransportStopUserDefinedLongText01]
					,Src.[TransportStopUserDefinedLongText02]
					,Src.[TransportStopUserDefinedLongText03]
					,Src.[TransportStopUserDefinedLongText04]
					,Src.[TransportStopUserDefinedLongText05]
					,Src.[TransportStopUserDefinedText05]
					,Src.[TransportStopUserDefinedText06]
					,Src.[TransportStopUserDefinedText07]
					,Src.[TransportStopUserDefinedText08]
					,Src.[TransportStopUserDefinedText09]
					,Src.[TransportStopUserDefinedText10]
					,Src.[TransportStopUserDefinedText11]
					,Src.[TransportStopUserDefinedText12]
					,Src.[TransportStopUserDefinedText13]
					,Src.[TransportStopUserDefinedText14]
					,Src.[TransportStopUserDefinedText15]
					,Src.[TransportStopIDMainStop]
					,Src.[TransportStopOriginalSubContext]
					,Src.[TransportStopOriginalType]
					,Src.[TransportStopDepartureDateTime]
					,Src.[TransportStopArrivalDateTime]
					,Src.[TransportStopActionStartDateTime]
					,Src.[TransportStopActionEndDateTime]
					,Src.[TransportStopMileStoneRemarksCarrier]
					,Src.[TransportStopMileStoneRemarksInternal]
					,Src.[TransportStopDeliveryRegionCode]
					,Src.[TransportStopIncomeType]
					,Src.[TransportStopCostType]
				FROM [dbo].TransportStops Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportStops Dest WITH (NOLOCK) ON Src.IDTransportStop = Dest.IDTransportStop
				WHERE Dest.IDTransportStop IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') TransportStops: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `TransportStops` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----
	SET @CurrentTableName = 'Transports';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		IF OBJECT_ID('tempdb..#Transports') IS NOT NULL
		BEGIN
			DROP TABLE #Transports;
		END;

		CREATE TABLE #Transports (
			SlNo INT IDENTITY(1, 1)
			,IDTransport UNIQUEIDENTIFIER
			,CompleteFlag BIT
			);

		INSERT INTO #Transports (IDTransport)
		SELECT TransportID
		FROM #tmpTransportIDs;

		--Insert into #Transport Table
		--
		SELECT @Remarks = '(' + @DataBase + ') Transferring Rows from tables related to Transports in chunks.';

		SET @LogDate = GETUTCDATE();

		EXEC pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;

		WHILE EXISTS (
				SELECT 1
				FROM #Transports
				WHERE CompleteFlag IS NULL
				)
		BEGIN
			SELECT TOP (100) SlNo
				,IDTransport
			INTO #TransportsTopNRows
			FROM #Transports
			WHERE CompleteFlag IS NULL;

			----TransportFiles
			TRUNCATE TABLE #tmpTableVal;

			BEGIN TRY
				BEGIN TRANSACTION;

				/*
				MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportFiles AS Dest
				USING (
					SELECT T.[IDTransportFile]
						,T.[TransportStopID]
						,T.[TransportFileName]
						,T.[TransportFileDescription]
						,T.[TransportFileData]
						,T.[TransportFileAddDateTime]
						,T.[TransportFileEditDateTime]
						,T.[TransportFileAddUserCode]
						,T.[TransportFileEditUserCode]
					FROM dbo.TransportFiles T WITH (NOLOCK)
					INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON T.[TransportStopID] = TS.[IDTransportStop]
					INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
					) AS Src
					ON (Dest.[IDTransportFile] = Src.[IDTransportFile])
				WHEN MATCHED
					THEN
						UPDATE
						SET Dest.[TransportStopID] = Src.[TransportStopID]
							,Dest.[TransportFileName] = Src.[TransportFileName]
							,Dest.[TransportFileDescription] = Src.[TransportFileDescription]
							,Dest.[TransportFileData] = Src.[TransportFileData]
							,Dest.[TransportFileAddDateTime] = Src.[TransportFileAddDateTime]
							,Dest.[TransportFileEditDateTime] = Src.[TransportFileEditDateTime]
							,Dest.[TransportFileAddUserCode] = Src.[TransportFileAddUserCode]
							,Dest.[TransportFileEditUserCode] = Src.[TransportFileEditUserCode]
				WHEN NOT MATCHED
					THEN
						INSERT (
							[IDTransportFile]
							,[TransportStopID]
							,[TransportFileName]
							,[TransportFileDescription]
							,[TransportFileData]
							,[TransportFileAddDateTime]
							,[TransportFileEditDateTime]
							,[TransportFileAddUserCode]
							,[TransportFileEditUserCode]
							)
						VALUES (
							Src.[IDTransportFile]
							,Src.[TransportStopID]
							,Src.[TransportFileName]
							,Src.[TransportFileDescription]
							,Src.[TransportFileData]
							,Src.[TransportFileAddDateTime]
							,Src.[TransportFileEditDateTime]
							,Src.[TransportFileAddUserCode]
							,Src.[TransportFileEditUserCode]
							)
				OUTPUT $ACTION
					,CAST(Inserted.[IDTransportFile] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDTransportFile] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
				*/
				WHILE EXISTS (
						SELECT 1
						FROM dbo.TransportFiles Src WITH (NOLOCK)
						INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON Src.[TransportStopID] = TS.[IDTransportStop]
						INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
						INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportFiles Dest WITH (NOLOCK) ON Src.IDTransportFile = Dest.IDTransportFile
						WHERE Dest.[TransportFileEditDateTime] < Src.[TransportFileEditDateTime]
						)
				BEGIN
					UPDATE TOP (@BatchSizeForArchival) Dest
					SET Dest.[TransportStopID] = Src.[TransportStopID]
						,Dest.[TransportFileName] = Src.[TransportFileName]
						,Dest.[TransportFileDescription] = Src.[TransportFileDescription]
						,Dest.[TransportFileData] = Src.[TransportFileData]
						,Dest.[TransportFileAddDateTime] = Src.[TransportFileAddDateTime]
						,Dest.[TransportFileEditDateTime] = Src.[TransportFileEditDateTime]
						,Dest.[TransportFileAddUserCode] = Src.[TransportFileAddUserCode]
						,Dest.[TransportFileEditUserCode] = Src.[TransportFileEditUserCode]
					OUTPUT 'UPDATE'
						,CAST(Inserted.IDReceiptStatus AS VARCHAR(50)) AS 'Inserted'
						,CAST(Deleted.IDReceiptStatus AS VARCHAR(50)) AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					FROM dbo.TransportFiles Src WITH (NOLOCK)
					INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON Src.[TransportStopID] = TS.[IDTransportStop]
					INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportFiles Dest WITH (NOLOCK) ON Src.IDTransportFile = Dest.IDTransportFile
					WHERE Dest.[TransportFileEditDateTime] < Src.[TransportFileEditDateTime];
				END;

				WHILE EXISTS (
						SELECT 1
						FROM dbo.TransportFiles Src WITH (NOLOCK)
						INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON Src.[TransportStopID] = TS.[IDTransportStop]
						INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
						LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportFiles Dest WITH (NOLOCK) ON Src.IDTransportFile = Dest.IDTransportFile
						WHERE Dest.[TransportFileEditDateTime] < Src.[TransportFileEditDateTime]
							AND Dest.IDTransportFile IS NULL
						)
				BEGIN
					INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportFiles (
						[IDTransportFile]
						,[TransportStopID]
						,[TransportFileName]
						,[TransportFileDescription]
						,[TransportFileData]
						,[TransportFileAddDateTime]
						,[TransportFileEditDateTime]
						,[TransportFileAddUserCode]
						,[TransportFileEditUserCode]
						)
					OUTPUT 'INSERT'
						,CAST(Inserted.IDTransportFile AS VARCHAR(50)) AS 'Inserted'
						,NULL AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					SELECT TOP (@BatchSizeForArchival) Src.[IDTransportFile]
						,Src.[TransportStopID]
						,Src.[TransportFileName]
						,Src.[TransportFileDescription]
						,Src.[TransportFileData]
						,Src.[TransportFileAddDateTime]
						,Src.[TransportFileEditDateTime]
						,Src.[TransportFileAddUserCode]
						,Src.[TransportFileEditUserCode]
					FROM dbo.TransportFiles Src WITH (NOLOCK)
					INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON Src.[TransportStopID] = TS.[IDTransportStop]
					INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportFiles Dest WITH (NOLOCK) ON Src.IDTransportFile = Dest.IDTransportFile
					WHERE Dest.[TransportFileEditDateTime] < Src.[TransportFileEditDateTime]
						AND Dest.IDTransportFile IS NULL;
				END;

				TRUNCATE TABLE #TempTableMergeRowStatus;

				INSERT INTO #TempTableMergeRowStatus (
					Inserted
					,Updated
					)
				--,Unchanged
				SELECT ISNULL((
							SELECT COUNT(1)
							FROM #tmpTableVal
							WHERE MergeAction = 'INSERT'
							), 0) AS Inserted
					,ISNULL((
							SELECT COUNT(1)
							FROM #tmpTableVal
							WHERE MergeAction = 'UPDATE'
							), 0) AS Updated

				--,(
				--	@TotRowCount - (
				--		ISNULL((
				--				SELECT COUNT(1)
				--				FROM #tmpTableVal
				--				WHERE MergeAction = 'INSERT'
				--				), 0) + ISNULL((
				--				SELECT COUNT(1)
				--				FROM #tmpTableVal
				--				WHERE MergeAction = 'UPDATE'
				--				), 0)
				--		)
				--	) AS UnChanged
				SELECT @Remarks = '(' + @DataBase + ') --TransportFiles: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
				FROM #TempTableMergeRowStatus tmp;

				SET @LogDate = GETUTCDATE();

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				DELETE T
				FROM dbo.TransportFiles AS T
				INNER JOIN [dbo].[TransportStops] AS TS WITH (NOLOCK) ON T.[TransportStopID] = TS.[IDTransportStop]
				INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport;

				COMMIT TRANSACTION;
					--SELECT GETUTCDATE() AS CurrTime, 'TransportFiles' AS TableName, COUNT(1) AS RowCounts FROM ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportFiles; 
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while archiving from `TransportFiles` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH;

			----TransportDetails
			TRUNCATE TABLE #tmpTableVal;

			BEGIN TRY
				BEGIN TRANSACTION;

				/*
				MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportDetails AS Dest
				USING (
					SELECT T.[IDTransportDetail]
						,T.[TransportStopID]
						,T.[OrderID]
						,T.[ReceiptID]
						,T.[TransportDetailReference]
						,T.[TransportDetailProductCode]
						,T.[TransportDetailCartons]
						,T.[TransportDetailPallets]
						,T.[TransportDetailStackable]
						,T.[TransportDetailWeight]
						,T.[TransportDetailVolume]
						,T.[TransportDetailAddDateTime]
						,T.[TransportDetailEditDateTime]
						,T.[TransportDetailAddUserCode]
						,T.[TransportDetailEditUserCode]
						,T.[TransportDetailPalletType]
						,T.[TransportDetailProductDescription]
						,T.[TransportDetailLoadMetres]
						,T.[TransportDetailColliWeight]
						,T.[TransportDetailQuantity]
						,T.[TransportDetailUnitOfMeasure]
						,T.[TransportDetailGoThroughQuantity]
						,T.[TransportDetailGoThroughUnitOfMeasure]
						,T.[TransportDetailWidth]
						,T.[TransportDetailDepth]
						,T.[TransportDetailHeight]
						,T.[TransportDetailWaveCode]
						,T.[TransportDetailRegionCode]
						,T.[CompanyIDSupplier]
						,T.[TransportDetailUserDefinedText01]
						,T.[TransportDetailUserDefinedText02]
						,T.[TransportDetailUserDefinedText03]
						,T.[TransportDetailUserDefinedText04]
						,T.[TransportDetailUserDefinedDate01]
						,T.[TransportDetailUserDefinedDate02]
						,T.[TransportDetailDocumentReference]
						,T.[TransportDetailCustomsConfirmed]
						,T.[TransportDetailEstimatedPallets]
						,T.[TransportDetailRequiresCustomsConfirmation]
						,T.[ShipmentDetailID]
						,T.[ShipmentID]
						,T.[ShipmentNumber]
						,T.[TransportDetailActualDateTimeOfArrival]
						,T.[TransportDetailActualDateTimeOfDeparture]
						,T.[TransportDetailCBLNumber]
						,T.[TransportDetailClientReference]
						,T.[TransportDetailConsigneeCompanyID]
						,T.[TransportDetailCSNumber]
						,T.[TransportDetailCSSequence]
						,T.[TransportDetailDeliveryCompanyID]
						,T.[TransportDetailDeliveryContact]
						,T.[TransportDetailDeliveryDateTime]
						,T.[TransportDetailEquipmentNumber]
						,T.[TransportDetailEquipmentSize]
						,T.[TransportDetailEquipmentType]
						,T.[TransportDetailEstimatedDateTimeOfArrival]
						,T.[TransportDetailEstimatedDateTimeOfDeparture]
						,T.[TransportDetailLeg]
						,T.[TransportDetailNotes]
						,T.[TransportDetailPickUpCompanyID]
						,T.[TransportDetailRegionCodeOrigin]
						,T.[TransportDetailType]
						,T.[TransportDetailUserDefinedDate03]
						,T.[TransportDetailUserDefinedDate04]
						,T.[TransportDetailUserDefinedDate05]
						,T.[TransportDetailUserDefinedText05]
						,T.[TransportDetailUserDefinedText06]
						,T.[TransportDetailUserDefinedText07]
						,T.[TransportDetailUserDefinedText08]
						,T.[TransportDetailUserDefinedText09]
						,T.[TransportDetailUserDefinedYesNo01]
						,T.[TransportDetailVesselCode]
						,T.[TransportDetailVesselName]
						,T.[TransportDetailVoyageCode]
						,T.[TransportDetailUserDefinedYesNo02]
						,T.[TransportDetailUserDefinedYesNo03]
						,T.[TransportDetailUserDefinedYesNo04]
						,T.[TransportDetailUserDefinedYesNo05]
						,T.[TransportDetailUserDefinedDateTime01]
						,T.[TransportDetailUserDefinedDateTime02]
						,T.[TransportDetailUserDefinedDateTime03]
						,T.[TransportDetailUserDefinedDateTime04]
						,T.[TransportDetailUserDefinedDateTime05]
						,T.[TransportDetailUserDefinedDateTime06]
						,T.[TransportDetailUserDefinedDateTime07]
						,T.[TransportDetailUserDefinedDateTime09]
						,T.[TransportDetailUserDefinedDateTime10]
						,T.[TransportDetailUserDefinedNumber01]
						,T.[TransportDetailUserDefinedNumber02]
						,T.[TransportDetailUserDefinedNumber03]
						,T.[TransportDetailUserDefinedNumber04]
						,T.[TransportDetailUserDefinedNumber05]
						,T.[TransportDetailUserDefinedLongText01]
						,T.[TransportDetailUserDefinedLongText02]
						,T.[TransportDetailUserDefinedLongText03]
						,T.[TransportDetailUserDefinedLongText04]
						,T.[TransportDetailUserDefinedLongText05]
						,T.[TransportDetailUserDefinedText10]
						,T.[TransportDetailUserDefinedText11]
						,T.[TransportDetailUserDefinedText12]
						,T.[TransportDetailUserDefinedText13]
						,T.[TransportDetailUserDefinedText14]
						,T.[TransportDetailUserDefinedText15]
						,T.[TransportDetailStatus]
						,T.[IssueID]
						,T.[TransportDetailTemporaryEquipmentNumber]
						,T.[TransportDetailAdditionalVolume]
					FROM dbo.TransportDetails T WITH (NOLOCK)
					INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON T.[TransportStopID] = TS.[IDTransportStop]
					INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
					) AS Src
					ON (Dest.[IDTransportDetail] = Src.[IDTransportDetail])
				WHEN MATCHED
					THEN
						UPDATE
						SET Dest.[TransportStopID] = Src.[TransportStopID]
							,Dest.[OrderID] = Src.[OrderID]
							,Dest.[ReceiptID] = Src.[ReceiptID]
							,Dest.[TransportDetailReference] = Src.[TransportDetailReference]
							,Dest.[TransportDetailProductCode] = Src.[TransportDetailProductCode]
							,Dest.[TransportDetailCartons] = Src.[TransportDetailCartons]
							,Dest.[TransportDetailPallets] = Src.[TransportDetailPallets]
							,Dest.[TransportDetailStackable] = Src.[TransportDetailStackable]
							,Dest.[TransportDetailWeight] = Src.[TransportDetailWeight]
							,Dest.[TransportDetailVolume] = Src.[TransportDetailVolume]
							,Dest.[TransportDetailAddDateTime] = Src.[TransportDetailAddDateTime]
							,Dest.[TransportDetailEditDateTime] = Src.[TransportDetailEditDateTime]
							,Dest.[TransportDetailAddUserCode] = Src.[TransportDetailAddUserCode]
							,Dest.[TransportDetailEditUserCode] = Src.[TransportDetailEditUserCode]
							,Dest.[TransportDetailPalletType] = Src.[TransportDetailPalletType]
							,Dest.[TransportDetailProductDescription] = Src.[TransportDetailProductDescription]
							,Dest.[TransportDetailLoadMetres] = Src.[TransportDetailLoadMetres]
							,Dest.[TransportDetailColliWeight] = Src.[TransportDetailColliWeight]
							,Dest.[TransportDetailQuantity] = Src.[TransportDetailQuantity]
							,Dest.[TransportDetailUnitOfMeasure] = Src.[TransportDetailUnitOfMeasure]
							,Dest.[TransportDetailGoThroughQuantity] = Src.[TransportDetailGoThroughQuantity]
							,Dest.[TransportDetailGoThroughUnitOfMeasure] = Src.[TransportDetailGoThroughUnitOfMeasure]
							,Dest.[TransportDetailWidth] = Src.[TransportDetailWidth]
							,Dest.[TransportDetailDepth] = Src.[TransportDetailDepth]
							,Dest.[TransportDetailHeight] = Src.[TransportDetailHeight]
							,Dest.[TransportDetailWaveCode] = Src.[TransportDetailWaveCode]
							,Dest.[TransportDetailRegionCode] = Src.[TransportDetailRegionCode]
							,Dest.[CompanyIDSupplier] = Src.[CompanyIDSupplier]
							,Dest.[TransportDetailUserDefinedText01] = Src.[TransportDetailUserDefinedText01]
							,Dest.[TransportDetailUserDefinedText02] = Src.[TransportDetailUserDefinedText02]
							,Dest.[TransportDetailUserDefinedText03] = Src.[TransportDetailUserDefinedText03]
							,Dest.[TransportDetailUserDefinedText04] = Src.[TransportDetailUserDefinedText04]
							,Dest.[TransportDetailUserDefinedDate01] = Src.[TransportDetailUserDefinedDate01]
							,Dest.[TransportDetailUserDefinedDate02] = Src.[TransportDetailUserDefinedDate02]
							,Dest.[TransportDetailDocumentReference] = Src.[TransportDetailDocumentReference]
							,Dest.[TransportDetailCustomsConfirmed] = Src.[TransportDetailCustomsConfirmed]
							,Dest.[TransportDetailEstimatedPallets] = Src.[TransportDetailEstimatedPallets]
							,Dest.[TransportDetailRequiresCustomsConfirmation] = Src.[TransportDetailRequiresCustomsConfirmation]
							,Dest.[ShipmentDetailID] = Src.[ShipmentDetailID]
							,Dest.[ShipmentID] = Src.[ShipmentID]
							,Dest.[ShipmentNumber] = Src.[ShipmentNumber]
							,Dest.[TransportDetailActualDateTimeOfArrival] = Src.[TransportDetailActualDateTimeOfArrival]
							,Dest.[TransportDetailActualDateTimeOfDeparture] = Src.[TransportDetailActualDateTimeOfDeparture]
							,Dest.[TransportDetailCBLNumber] = Src.[TransportDetailCBLNumber]
							,Dest.[TransportDetailClientReference] = Src.[TransportDetailClientReference]
							,Dest.[TransportDetailConsigneeCompanyID] = Src.[TransportDetailConsigneeCompanyID]
							,Dest.[TransportDetailCSNumber] = Src.[TransportDetailCSNumber]
							,Dest.[TransportDetailCSSequence] = Src.[TransportDetailCSSequence]
							,Dest.[TransportDetailDeliveryCompanyID] = Src.[TransportDetailDeliveryCompanyID]
							,Dest.[TransportDetailDeliveryContact] = Src.[TransportDetailDeliveryContact]
							,Dest.[TransportDetailDeliveryDateTime] = Src.[TransportDetailDeliveryDateTime]
							,Dest.[TransportDetailEquipmentNumber] = Src.[TransportDetailEquipmentNumber]
							,Dest.[TransportDetailEquipmentSize] = Src.[TransportDetailEquipmentSize]
							,Dest.[TransportDetailEquipmentType] = Src.[TransportDetailEquipmentType]
							,Dest.[TransportDetailEstimatedDateTimeOfArrival] = Src.[TransportDetailEstimatedDateTimeOfArrival]
							,Dest.[TransportDetailEstimatedDateTimeOfDeparture] = Src.[TransportDetailEstimatedDateTimeOfDeparture]
							,Dest.[TransportDetailLeg] = Src.[TransportDetailLeg]
							,Dest.[TransportDetailNotes] = Src.[TransportDetailNotes]
							,Dest.[TransportDetailPickUpCompanyID] = Src.[TransportDetailPickUpCompanyID]
							,Dest.[TransportDetailRegionCodeOrigin] = Src.[TransportDetailRegionCodeOrigin]
							,Dest.[TransportDetailType] = Src.[TransportDetailType]
							,Dest.[TransportDetailUserDefinedDate03] = Src.[TransportDetailUserDefinedDate03]
							,Dest.[TransportDetailUserDefinedDate04] = Src.[TransportDetailUserDefinedDate04]
							,Dest.[TransportDetailUserDefinedDate05] = Src.[TransportDetailUserDefinedDate05]
							,Dest.[TransportDetailUserDefinedText05] = Src.[TransportDetailUserDefinedText05]
							,Dest.[TransportDetailUserDefinedText06] = Src.[TransportDetailUserDefinedText06]
							,Dest.[TransportDetailUserDefinedText07] = Src.[TransportDetailUserDefinedText07]
							,Dest.[TransportDetailUserDefinedText08] = Src.[TransportDetailUserDefinedText08]
							,Dest.[TransportDetailUserDefinedText09] = Src.[TransportDetailUserDefinedText09]
							,Dest.[TransportDetailUserDefinedYesNo01] = Src.[TransportDetailUserDefinedYesNo01]
							,Dest.[TransportDetailVesselCode] = Src.[TransportDetailVesselCode]
							,Dest.[TransportDetailVesselName] = Src.[TransportDetailVesselName]
							,Dest.[TransportDetailVoyageCode] = Src.[TransportDetailVoyageCode]
							,Dest.[TransportDetailUserDefinedYesNo02] = Src.[TransportDetailUserDefinedYesNo02]
							,Dest.[TransportDetailUserDefinedYesNo03] = Src.[TransportDetailUserDefinedYesNo03]
							,Dest.[TransportDetailUserDefinedYesNo04] = Src.[TransportDetailUserDefinedYesNo04]
							,Dest.[TransportDetailUserDefinedYesNo05] = Src.[TransportDetailUserDefinedYesNo05]
							,Dest.[TransportDetailUserDefinedDateTime01] = Src.[TransportDetailUserDefinedDateTime01]
							,Dest.[TransportDetailUserDefinedDateTime02] = Src.[TransportDetailUserDefinedDateTime02]
							,Dest.[TransportDetailUserDefinedDateTime03] = Src.[TransportDetailUserDefinedDateTime03]
							,Dest.[TransportDetailUserDefinedDateTime04] = Src.[TransportDetailUserDefinedDateTime04]
							,Dest.[TransportDetailUserDefinedDateTime05] = Src.[TransportDetailUserDefinedDateTime05]
							,Dest.[TransportDetailUserDefinedDateTime06] = Src.[TransportDetailUserDefinedDateTime06]
							,Dest.[TransportDetailUserDefinedDateTime07] = Src.[TransportDetailUserDefinedDateTime07]
							,Dest.[TransportDetailUserDefinedDateTime09] = Src.[TransportDetailUserDefinedDateTime09]
							,Dest.[TransportDetailUserDefinedDateTime10] = Src.[TransportDetailUserDefinedDateTime10]
							,Dest.[TransportDetailUserDefinedNumber01] = Src.[TransportDetailUserDefinedNumber01]
							,Dest.[TransportDetailUserDefinedNumber02] = Src.[TransportDetailUserDefinedNumber02]
							,Dest.[TransportDetailUserDefinedNumber03] = Src.[TransportDetailUserDefinedNumber03]
							,Dest.[TransportDetailUserDefinedNumber04] = Src.[TransportDetailUserDefinedNumber04]
							,Dest.[TransportDetailUserDefinedNumber05] = Src.[TransportDetailUserDefinedNumber05]
							,Dest.[TransportDetailUserDefinedLongText01] = Src.[TransportDetailUserDefinedLongText01]
							,Dest.[TransportDetailUserDefinedLongText02] = Src.[TransportDetailUserDefinedLongText02]
							,Dest.[TransportDetailUserDefinedLongText03] = Src.[TransportDetailUserDefinedLongText03]
							,Dest.[TransportDetailUserDefinedLongText04] = Src.[TransportDetailUserDefinedLongText04]
							,Dest.[TransportDetailUserDefinedLongText05] = Src.[TransportDetailUserDefinedLongText05]
							,Dest.[TransportDetailUserDefinedText10] = Src.[TransportDetailUserDefinedText10]
							,Dest.[TransportDetailUserDefinedText11] = Src.[TransportDetailUserDefinedText11]
							,Dest.[TransportDetailUserDefinedText12] = Src.[TransportDetailUserDefinedText12]
							,Dest.[TransportDetailUserDefinedText13] = Src.[TransportDetailUserDefinedText13]
							,Dest.[TransportDetailUserDefinedText14] = Src.[TransportDetailUserDefinedText14]
							,Dest.[TransportDetailUserDefinedText15] = Src.[TransportDetailUserDefinedText15]
							,Dest.[TransportDetailStatus] = Src.[TransportDetailStatus]
							,Dest.[IssueID] = Src.[IssueID]
							,Dest.[TransportDetailTemporaryEquipmentNumber] = Src.[TransportDetailTemporaryEquipmentNumber]
							,Dest.[TransportDetailAdditionalVolume] = Src.[TransportDetailAdditionalVolume]
				WHEN NOT MATCHED
					THEN
						INSERT (
							[IDTransportDetail]
							,[TransportStopID]
							,[OrderID]
							,[ReceiptID]
							,[TransportDetailReference]
							,[TransportDetailProductCode]
							,[TransportDetailCartons]
							,[TransportDetailPallets]
							,[TransportDetailStackable]
							,[TransportDetailWeight]
							,[TransportDetailVolume]
							,[TransportDetailAddDateTime]
							,[TransportDetailEditDateTime]
							,[TransportDetailAddUserCode]
							,[TransportDetailEditUserCode]
							,[TransportDetailPalletType]
							,[TransportDetailProductDescription]
							,[TransportDetailLoadMetres]
							,[TransportDetailColliWeight]
							,[TransportDetailQuantity]
							,[TransportDetailUnitOfMeasure]
							,[TransportDetailGoThroughQuantity]
							,[TransportDetailGoThroughUnitOfMeasure]
							,[TransportDetailWidth]
							,[TransportDetailDepth]
							,[TransportDetailHeight]
							,[TransportDetailWaveCode]
							,[TransportDetailRegionCode]
							,[CompanyIDSupplier]
							,[TransportDetailUserDefinedText01]
							,[TransportDetailUserDefinedText02]
							,[TransportDetailUserDefinedText03]
							,[TransportDetailUserDefinedText04]
							,[TransportDetailUserDefinedDate01]
							,[TransportDetailUserDefinedDate02]
							,[TransportDetailDocumentReference]
							,[TransportDetailCustomsConfirmed]
							,[TransportDetailEstimatedPallets]
							,[TransportDetailRequiresCustomsConfirmation]
							,[ShipmentDetailID]
							,[ShipmentID]
							,[ShipmentNumber]
							,[TransportDetailActualDateTimeOfArrival]
							,[TransportDetailActualDateTimeOfDeparture]
							,[TransportDetailCBLNumber]
							,[TransportDetailClientReference]
							,[TransportDetailConsigneeCompanyID]
							,[TransportDetailCSNumber]
							,[TransportDetailCSSequence]
							,[TransportDetailDeliveryCompanyID]
							,[TransportDetailDeliveryContact]
							,[TransportDetailDeliveryDateTime]
							,[TransportDetailEquipmentNumber]
							,[TransportDetailEquipmentSize]
							,[TransportDetailEquipmentType]
							,[TransportDetailEstimatedDateTimeOfArrival]
							,[TransportDetailEstimatedDateTimeOfDeparture]
							,[TransportDetailLeg]
							,[TransportDetailNotes]
							,[TransportDetailPickUpCompanyID]
							,[TransportDetailRegionCodeOrigin]
							,[TransportDetailType]
							,[TransportDetailUserDefinedDate03]
							,[TransportDetailUserDefinedDate04]
							,[TransportDetailUserDefinedDate05]
							,[TransportDetailUserDefinedText05]
							,[TransportDetailUserDefinedText06]
							,[TransportDetailUserDefinedText07]
							,[TransportDetailUserDefinedText08]
							,[TransportDetailUserDefinedText09]
							,[TransportDetailUserDefinedYesNo01]
							,[TransportDetailVesselCode]
							,[TransportDetailVesselName]
							,[TransportDetailVoyageCode]
							,[TransportDetailUserDefinedYesNo02]
							,[TransportDetailUserDefinedYesNo03]
							,[TransportDetailUserDefinedYesNo04]
							,[TransportDetailUserDefinedYesNo05]
							,[TransportDetailUserDefinedDateTime01]
							,[TransportDetailUserDefinedDateTime02]
							,[TransportDetailUserDefinedDateTime03]
							,[TransportDetailUserDefinedDateTime04]
							,[TransportDetailUserDefinedDateTime05]
							,[TransportDetailUserDefinedDateTime06]
							,[TransportDetailUserDefinedDateTime07]
							,[TransportDetailUserDefinedDateTime09]
							,[TransportDetailUserDefinedDateTime10]
							,[TransportDetailUserDefinedNumber01]
							,[TransportDetailUserDefinedNumber02]
							,[TransportDetailUserDefinedNumber03]
							,[TransportDetailUserDefinedNumber04]
							,[TransportDetailUserDefinedNumber05]
							,[TransportDetailUserDefinedLongText01]
							,[TransportDetailUserDefinedLongText02]
							,[TransportDetailUserDefinedLongText03]
							,[TransportDetailUserDefinedLongText04]
							,[TransportDetailUserDefinedLongText05]
							,[TransportDetailUserDefinedText10]
							,[TransportDetailUserDefinedText11]
							,[TransportDetailUserDefinedText12]
							,[TransportDetailUserDefinedText13]
							,[TransportDetailUserDefinedText14]
							,[TransportDetailUserDefinedText15]
							,[TransportDetailStatus]
							,[IssueID]
							,[TransportDetailTemporaryEquipmentNumber]
							,[TransportDetailAdditionalVolume]
							)
						VALUES (
							Src.[IDTransportDetail]
							,Src.[TransportStopID]
							,Src.[OrderID]
							,Src.[ReceiptID]
							,Src.[TransportDetailReference]
							,Src.[TransportDetailProductCode]
							,Src.[TransportDetailCartons]
							,Src.[TransportDetailPallets]
							,Src.[TransportDetailStackable]
							,Src.[TransportDetailWeight]
							,Src.[TransportDetailVolume]
							,Src.[TransportDetailAddDateTime]
							,Src.[TransportDetailEditDateTime]
							,Src.[TransportDetailAddUserCode]
							,Src.[TransportDetailEditUserCode]
							,Src.[TransportDetailPalletType]
							,Src.[TransportDetailProductDescription]
							,Src.[TransportDetailLoadMetres]
							,Src.[TransportDetailColliWeight]
							,Src.[TransportDetailQuantity]
							,Src.[TransportDetailUnitOfMeasure]
							,Src.[TransportDetailGoThroughQuantity]
							,Src.[TransportDetailGoThroughUnitOfMeasure]
							,Src.[TransportDetailWidth]
							,Src.[TransportDetailDepth]
							,Src.[TransportDetailHeight]
							,Src.[TransportDetailWaveCode]
							,Src.[TransportDetailRegionCode]
							,Src.[CompanyIDSupplier]
							,Src.[TransportDetailUserDefinedText01]
							,Src.[TransportDetailUserDefinedText02]
							,Src.[TransportDetailUserDefinedText03]
							,Src.[TransportDetailUserDefinedText04]
							,Src.[TransportDetailUserDefinedDate01]
							,Src.[TransportDetailUserDefinedDate02]
							,Src.[TransportDetailDocumentReference]
							,Src.[TransportDetailCustomsConfirmed]
							,Src.[TransportDetailEstimatedPallets]
							,Src.[TransportDetailRequiresCustomsConfirmation]
							,Src.[ShipmentDetailID]
							,Src.[ShipmentID]
							,Src.[ShipmentNumber]
							,Src.[TransportDetailActualDateTimeOfArrival]
							,Src.[TransportDetailActualDateTimeOfDeparture]
							,Src.[TransportDetailCBLNumber]
							,Src.[TransportDetailClientReference]
							,Src.[TransportDetailConsigneeCompanyID]
							,Src.[TransportDetailCSNumber]
							,Src.[TransportDetailCSSequence]
							,Src.[TransportDetailDeliveryCompanyID]
							,Src.[TransportDetailDeliveryContact]
							,Src.[TransportDetailDeliveryDateTime]
							,Src.[TransportDetailEquipmentNumber]
							,Src.[TransportDetailEquipmentSize]
							,Src.[TransportDetailEquipmentType]
							,Src.[TransportDetailEstimatedDateTimeOfArrival]
							,Src.[TransportDetailEstimatedDateTimeOfDeparture]
							,Src.[TransportDetailLeg]
							,Src.[TransportDetailNotes]
							,Src.[TransportDetailPickUpCompanyID]
							,Src.[TransportDetailRegionCodeOrigin]
							,Src.[TransportDetailType]
							,Src.[TransportDetailUserDefinedDate03]
							,Src.[TransportDetailUserDefinedDate04]
							,Src.[TransportDetailUserDefinedDate05]
							,Src.[TransportDetailUserDefinedText05]
							,Src.[TransportDetailUserDefinedText06]
							,Src.[TransportDetailUserDefinedText07]
							,Src.[TransportDetailUserDefinedText08]
							,Src.[TransportDetailUserDefinedText09]
							,Src.[TransportDetailUserDefinedYesNo01]
							,Src.[TransportDetailVesselCode]
							,Src.[TransportDetailVesselName]
							,Src.[TransportDetailVoyageCode]
							,Src.[TransportDetailUserDefinedYesNo02]
							,Src.[TransportDetailUserDefinedYesNo03]
							,Src.[TransportDetailUserDefinedYesNo04]
							,Src.[TransportDetailUserDefinedYesNo05]
							,Src.[TransportDetailUserDefinedDateTime01]
							,Src.[TransportDetailUserDefinedDateTime02]
							,Src.[TransportDetailUserDefinedDateTime03]
							,Src.[TransportDetailUserDefinedDateTime04]
							,Src.[TransportDetailUserDefinedDateTime05]
							,Src.[TransportDetailUserDefinedDateTime06]
							,Src.[TransportDetailUserDefinedDateTime07]
							,Src.[TransportDetailUserDefinedDateTime09]
							,Src.[TransportDetailUserDefinedDateTime10]
							,Src.[TransportDetailUserDefinedNumber01]
							,Src.[TransportDetailUserDefinedNumber02]
							,Src.[TransportDetailUserDefinedNumber03]
							,Src.[TransportDetailUserDefinedNumber04]
							,Src.[TransportDetailUserDefinedNumber05]
							,Src.[TransportDetailUserDefinedLongText01]
							,Src.[TransportDetailUserDefinedLongText02]
							,Src.[TransportDetailUserDefinedLongText03]
							,Src.[TransportDetailUserDefinedLongText04]
							,Src.[TransportDetailUserDefinedLongText05]
							,Src.[TransportDetailUserDefinedText10]
							,Src.[TransportDetailUserDefinedText11]
							,Src.[TransportDetailUserDefinedText12]
							,Src.[TransportDetailUserDefinedText13]
							,Src.[TransportDetailUserDefinedText14]
							,Src.[TransportDetailUserDefinedText15]
							,Src.[TransportDetailStatus]
							,Src.[IssueID]
							,Src.[TransportDetailTemporaryEquipmentNumber]
							,Src.[TransportDetailAdditionalVolume]
							)
				OUTPUT $ACTION
					,CAST(Inserted.[IDTransportDetail] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDTransportDetail] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
				*/
				WHILE EXISTS (
						SELECT 1
						FROM dbo.TransportDetails Src WITH (NOLOCK)
						INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON Src.[TransportStopID] = TS.[IDTransportStop]
						INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
						INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportDetails Dest WITH (NOLOCK) ON Src.IDTransportDetail = Dest.IDTransportDetail
						WHERE Dest.[TransportDetailEditDateTime] < Src.[TransportDetailEditDateTime]
						)
				BEGIN
					UPDATE TOP (@BatchSizeForArchival) Dest
					SET Dest.[TransportStopID] = Src.[TransportStopID]
						,Dest.[OrderID] = Src.[OrderID]
						,Dest.[ReceiptID] = Src.[ReceiptID]
						,Dest.[TransportDetailReference] = Src.[TransportDetailReference]
						,Dest.[TransportDetailProductCode] = Src.[TransportDetailProductCode]
						,Dest.[TransportDetailCartons] = Src.[TransportDetailCartons]
						,Dest.[TransportDetailPallets] = Src.[TransportDetailPallets]
						,Dest.[TransportDetailStackable] = Src.[TransportDetailStackable]
						,Dest.[TransportDetailWeight] = Src.[TransportDetailWeight]
						,Dest.[TransportDetailVolume] = Src.[TransportDetailVolume]
						,Dest.[TransportDetailAddDateTime] = Src.[TransportDetailAddDateTime]
						,Dest.[TransportDetailEditDateTime] = Src.[TransportDetailEditDateTime]
						,Dest.[TransportDetailAddUserCode] = Src.[TransportDetailAddUserCode]
						,Dest.[TransportDetailEditUserCode] = Src.[TransportDetailEditUserCode]
						,Dest.[TransportDetailPalletType] = Src.[TransportDetailPalletType]
						,Dest.[TransportDetailProductDescription] = Src.[TransportDetailProductDescription]
						,Dest.[TransportDetailLoadMetres] = Src.[TransportDetailLoadMetres]
						,Dest.[TransportDetailColliWeight] = Src.[TransportDetailColliWeight]
						,Dest.[TransportDetailQuantity] = Src.[TransportDetailQuantity]
						,Dest.[TransportDetailUnitOfMeasure] = Src.[TransportDetailUnitOfMeasure]
						,Dest.[TransportDetailGoThroughQuantity] = Src.[TransportDetailGoThroughQuantity]
						,Dest.[TransportDetailGoThroughUnitOfMeasure] = Src.[TransportDetailGoThroughUnitOfMeasure]
						,Dest.[TransportDetailWidth] = Src.[TransportDetailWidth]
						,Dest.[TransportDetailDepth] = Src.[TransportDetailDepth]
						,Dest.[TransportDetailHeight] = Src.[TransportDetailHeight]
						,Dest.[TransportDetailWaveCode] = Src.[TransportDetailWaveCode]
						,Dest.[TransportDetailRegionCode] = Src.[TransportDetailRegionCode]
						,Dest.[CompanyIDSupplier] = Src.[CompanyIDSupplier]
						,Dest.[TransportDetailUserDefinedText01] = Src.[TransportDetailUserDefinedText01]
						,Dest.[TransportDetailUserDefinedText02] = Src.[TransportDetailUserDefinedText02]
						,Dest.[TransportDetailUserDefinedText03] = Src.[TransportDetailUserDefinedText03]
						,Dest.[TransportDetailUserDefinedText04] = Src.[TransportDetailUserDefinedText04]
						,Dest.[TransportDetailUserDefinedDate01] = Src.[TransportDetailUserDefinedDate01]
						,Dest.[TransportDetailUserDefinedDate02] = Src.[TransportDetailUserDefinedDate02]
						,Dest.[TransportDetailDocumentReference] = Src.[TransportDetailDocumentReference]
						,Dest.[TransportDetailCustomsConfirmed] = Src.[TransportDetailCustomsConfirmed]
						,Dest.[TransportDetailEstimatedPallets] = Src.[TransportDetailEstimatedPallets]
						,Dest.[TransportDetailRequiresCustomsConfirmation] = Src.[TransportDetailRequiresCustomsConfirmation]
						,Dest.[ShipmentDetailID] = Src.[ShipmentDetailID]
						,Dest.[ShipmentID] = Src.[ShipmentID]
						,Dest.[ShipmentNumber] = Src.[ShipmentNumber]
						,Dest.[TransportDetailActualDateTimeOfArrival] = Src.[TransportDetailActualDateTimeOfArrival]
						,Dest.[TransportDetailActualDateTimeOfDeparture] = Src.[TransportDetailActualDateTimeOfDeparture]
						,Dest.[TransportDetailCBLNumber] = Src.[TransportDetailCBLNumber]
						,Dest.[TransportDetailClientReference] = Src.[TransportDetailClientReference]
						,Dest.[TransportDetailConsigneeCompanyID] = Src.[TransportDetailConsigneeCompanyID]
						,Dest.[TransportDetailCSNumber] = Src.[TransportDetailCSNumber]
						,Dest.[TransportDetailCSSequence] = Src.[TransportDetailCSSequence]
						,Dest.[TransportDetailDeliveryCompanyID] = Src.[TransportDetailDeliveryCompanyID]
						,Dest.[TransportDetailDeliveryContact] = Src.[TransportDetailDeliveryContact]
						,Dest.[TransportDetailDeliveryDateTime] = Src.[TransportDetailDeliveryDateTime]
						,Dest.[TransportDetailEquipmentNumber] = Src.[TransportDetailEquipmentNumber]
						,Dest.[TransportDetailEquipmentSize] = Src.[TransportDetailEquipmentSize]
						,Dest.[TransportDetailEquipmentType] = Src.[TransportDetailEquipmentType]
						,Dest.[TransportDetailEstimatedDateTimeOfArrival] = Src.[TransportDetailEstimatedDateTimeOfArrival]
						,Dest.[TransportDetailEstimatedDateTimeOfDeparture] = Src.[TransportDetailEstimatedDateTimeOfDeparture]
						,Dest.[TransportDetailLeg] = Src.[TransportDetailLeg]
						,Dest.[TransportDetailNotes] = Src.[TransportDetailNotes]
						,Dest.[TransportDetailPickUpCompanyID] = Src.[TransportDetailPickUpCompanyID]
						,Dest.[TransportDetailRegionCodeOrigin] = Src.[TransportDetailRegionCodeOrigin]
						,Dest.[TransportDetailType] = Src.[TransportDetailType]
						,Dest.[TransportDetailUserDefinedDate03] = Src.[TransportDetailUserDefinedDate03]
						,Dest.[TransportDetailUserDefinedDate04] = Src.[TransportDetailUserDefinedDate04]
						,Dest.[TransportDetailUserDefinedDate05] = Src.[TransportDetailUserDefinedDate05]
						,Dest.[TransportDetailUserDefinedText05] = Src.[TransportDetailUserDefinedText05]
						,Dest.[TransportDetailUserDefinedText06] = Src.[TransportDetailUserDefinedText06]
						,Dest.[TransportDetailUserDefinedText07] = Src.[TransportDetailUserDefinedText07]
						,Dest.[TransportDetailUserDefinedText08] = Src.[TransportDetailUserDefinedText08]
						,Dest.[TransportDetailUserDefinedText09] = Src.[TransportDetailUserDefinedText09]
						,Dest.[TransportDetailUserDefinedYesNo01] = Src.[TransportDetailUserDefinedYesNo01]
						,Dest.[TransportDetailVesselCode] = Src.[TransportDetailVesselCode]
						,Dest.[TransportDetailVesselName] = Src.[TransportDetailVesselName]
						,Dest.[TransportDetailVoyageCode] = Src.[TransportDetailVoyageCode]
						,Dest.[TransportDetailUserDefinedYesNo02] = Src.[TransportDetailUserDefinedYesNo02]
						,Dest.[TransportDetailUserDefinedYesNo03] = Src.[TransportDetailUserDefinedYesNo03]
						,Dest.[TransportDetailUserDefinedYesNo04] = Src.[TransportDetailUserDefinedYesNo04]
						,Dest.[TransportDetailUserDefinedYesNo05] = Src.[TransportDetailUserDefinedYesNo05]
						,Dest.[TransportDetailUserDefinedDateTime01] = Src.[TransportDetailUserDefinedDateTime01]
						,Dest.[TransportDetailUserDefinedDateTime02] = Src.[TransportDetailUserDefinedDateTime02]
						,Dest.[TransportDetailUserDefinedDateTime03] = Src.[TransportDetailUserDefinedDateTime03]
						,Dest.[TransportDetailUserDefinedDateTime04] = Src.[TransportDetailUserDefinedDateTime04]
						,Dest.[TransportDetailUserDefinedDateTime05] = Src.[TransportDetailUserDefinedDateTime05]
						,Dest.[TransportDetailUserDefinedDateTime06] = Src.[TransportDetailUserDefinedDateTime06]
						,Dest.[TransportDetailUserDefinedDateTime07] = Src.[TransportDetailUserDefinedDateTime07]
						,Dest.[TransportDetailUserDefinedDateTime09] = Src.[TransportDetailUserDefinedDateTime09]
						,Dest.[TransportDetailUserDefinedDateTime10] = Src.[TransportDetailUserDefinedDateTime10]
						,Dest.[TransportDetailUserDefinedNumber01] = Src.[TransportDetailUserDefinedNumber01]
						,Dest.[TransportDetailUserDefinedNumber02] = Src.[TransportDetailUserDefinedNumber02]
						,Dest.[TransportDetailUserDefinedNumber03] = Src.[TransportDetailUserDefinedNumber03]
						,Dest.[TransportDetailUserDefinedNumber04] = Src.[TransportDetailUserDefinedNumber04]
						,Dest.[TransportDetailUserDefinedNumber05] = Src.[TransportDetailUserDefinedNumber05]
						,Dest.[TransportDetailUserDefinedLongText01] = Src.[TransportDetailUserDefinedLongText01]
						,Dest.[TransportDetailUserDefinedLongText02] = Src.[TransportDetailUserDefinedLongText02]
						,Dest.[TransportDetailUserDefinedLongText03] = Src.[TransportDetailUserDefinedLongText03]
						,Dest.[TransportDetailUserDefinedLongText04] = Src.[TransportDetailUserDefinedLongText04]
						,Dest.[TransportDetailUserDefinedLongText05] = Src.[TransportDetailUserDefinedLongText05]
						,Dest.[TransportDetailUserDefinedText10] = Src.[TransportDetailUserDefinedText10]
						,Dest.[TransportDetailUserDefinedText11] = Src.[TransportDetailUserDefinedText11]
						,Dest.[TransportDetailUserDefinedText12] = Src.[TransportDetailUserDefinedText12]
						,Dest.[TransportDetailUserDefinedText13] = Src.[TransportDetailUserDefinedText13]
						,Dest.[TransportDetailUserDefinedText14] = Src.[TransportDetailUserDefinedText14]
						,Dest.[TransportDetailUserDefinedText15] = Src.[TransportDetailUserDefinedText15]
						,Dest.[TransportDetailStatus] = Src.[TransportDetailStatus]
						,Dest.[IssueID] = Src.[IssueID]
						,Dest.[TransportDetailTemporaryEquipmentNumber] = Src.[TransportDetailTemporaryEquipmentNumber]
						,Dest.[TransportDetailAdditionalVolume] = Src.[TransportDetailAdditionalVolume]
					OUTPUT 'UPDATE'
						,CAST(Inserted.IDTransportDetail AS VARCHAR(50)) AS 'Inserted'
						,CAST(Deleted.IDTransportDetail AS VARCHAR(50)) AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					FROM dbo.TransportDetails Src WITH (NOLOCK)
					INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON Src.[TransportStopID] = TS.[IDTransportStop]
					INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportDetails Dest WITH (NOLOCK) ON Src.IDTransportDetail = Dest.IDTransportDetail
					WHERE Dest.[TransportDetailEditDateTime] < Src.[TransportDetailEditDateTime];
				END;

				WHILE EXISTS (
						SELECT 1
						FROM dbo.TransportDetails Src WITH (NOLOCK)
						INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON Src.[TransportStopID] = TS.[IDTransportStop]
						INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
						LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportDetails Dest WITH (NOLOCK) ON Src.IDTransportDetail = Dest.IDTransportDetail
						WHERE Dest.IDTransportDetail IS NULL
						)
				BEGIN
					INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportDetails (
						[IDTransportDetail]
						,[TransportStopID]
						,[OrderID]
						,[ReceiptID]
						,[TransportDetailReference]
						,[TransportDetailProductCode]
						,[TransportDetailCartons]
						,[TransportDetailPallets]
						,[TransportDetailStackable]
						,[TransportDetailWeight]
						,[TransportDetailVolume]
						,[TransportDetailAddDateTime]
						,[TransportDetailEditDateTime]
						,[TransportDetailAddUserCode]
						,[TransportDetailEditUserCode]
						,[TransportDetailPalletType]
						,[TransportDetailProductDescription]
						,[TransportDetailLoadMetres]
						,[TransportDetailColliWeight]
						,[TransportDetailQuantity]
						,[TransportDetailUnitOfMeasure]
						,[TransportDetailGoThroughQuantity]
						,[TransportDetailGoThroughUnitOfMeasure]
						,[TransportDetailWidth]
						,[TransportDetailDepth]
						,[TransportDetailHeight]
						,[TransportDetailWaveCode]
						,[TransportDetailRegionCode]
						,[CompanyIDSupplier]
						,[TransportDetailUserDefinedText01]
						,[TransportDetailUserDefinedText02]
						,[TransportDetailUserDefinedText03]
						,[TransportDetailUserDefinedText04]
						,[TransportDetailUserDefinedDate01]
						,[TransportDetailUserDefinedDate02]
						,[TransportDetailDocumentReference]
						,[TransportDetailCustomsConfirmed]
						,[TransportDetailEstimatedPallets]
						,[TransportDetailRequiresCustomsConfirmation]
						,[ShipmentDetailID]
						,[ShipmentID]
						,[ShipmentNumber]
						,[TransportDetailActualDateTimeOfArrival]
						,[TransportDetailActualDateTimeOfDeparture]
						,[TransportDetailCBLNumber]
						,[TransportDetailClientReference]
						,[TransportDetailConsigneeCompanyID]
						,[TransportDetailCSNumber]
						,[TransportDetailCSSequence]
						,[TransportDetailDeliveryCompanyID]
						,[TransportDetailDeliveryContact]
						,[TransportDetailDeliveryDateTime]
						,[TransportDetailEquipmentNumber]
						,[TransportDetailEquipmentSize]
						,[TransportDetailEquipmentType]
						,[TransportDetailEstimatedDateTimeOfArrival]
						,[TransportDetailEstimatedDateTimeOfDeparture]
						,[TransportDetailLeg]
						,[TransportDetailNotes]
						,[TransportDetailPickUpCompanyID]
						,[TransportDetailRegionCodeOrigin]
						,[TransportDetailType]
						,[TransportDetailUserDefinedDate03]
						,[TransportDetailUserDefinedDate04]
						,[TransportDetailUserDefinedDate05]
						,[TransportDetailUserDefinedText05]
						,[TransportDetailUserDefinedText06]
						,[TransportDetailUserDefinedText07]
						,[TransportDetailUserDefinedText08]
						,[TransportDetailUserDefinedText09]
						,[TransportDetailUserDefinedYesNo01]
						,[TransportDetailVesselCode]
						,[TransportDetailVesselName]
						,[TransportDetailVoyageCode]
						,[TransportDetailUserDefinedYesNo02]
						,[TransportDetailUserDefinedYesNo03]
						,[TransportDetailUserDefinedYesNo04]
						,[TransportDetailUserDefinedYesNo05]
						,[TransportDetailUserDefinedDateTime01]
						,[TransportDetailUserDefinedDateTime02]
						,[TransportDetailUserDefinedDateTime03]
						,[TransportDetailUserDefinedDateTime04]
						,[TransportDetailUserDefinedDateTime05]
						,[TransportDetailUserDefinedDateTime06]
						,[TransportDetailUserDefinedDateTime07]
						,[TransportDetailUserDefinedDateTime09]
						,[TransportDetailUserDefinedDateTime10]
						,[TransportDetailUserDefinedNumber01]
						,[TransportDetailUserDefinedNumber02]
						,[TransportDetailUserDefinedNumber03]
						,[TransportDetailUserDefinedNumber04]
						,[TransportDetailUserDefinedNumber05]
						,[TransportDetailUserDefinedLongText01]
						,[TransportDetailUserDefinedLongText02]
						,[TransportDetailUserDefinedLongText03]
						,[TransportDetailUserDefinedLongText04]
						,[TransportDetailUserDefinedLongText05]
						,[TransportDetailUserDefinedText10]
						,[TransportDetailUserDefinedText11]
						,[TransportDetailUserDefinedText12]
						,[TransportDetailUserDefinedText13]
						,[TransportDetailUserDefinedText14]
						,[TransportDetailUserDefinedText15]
						,[TransportDetailStatus]
						,[IssueID]
						,[TransportDetailTemporaryEquipmentNumber]
						,[TransportDetailAdditionalVolume]
						)
					OUTPUT 'INSERT'
						,CAST(Inserted.IDTransportDetail AS VARCHAR(50)) AS 'Inserted'
						,NULL AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					SELECT TOP (@BatchSizeForArchival) Src.[IDTransportDetail]
						,Src.[TransportStopID]
						,Src.[OrderID]
						,Src.[ReceiptID]
						,Src.[TransportDetailReference]
						,Src.[TransportDetailProductCode]
						,Src.[TransportDetailCartons]
						,Src.[TransportDetailPallets]
						,Src.[TransportDetailStackable]
						,Src.[TransportDetailWeight]
						,Src.[TransportDetailVolume]
						,Src.[TransportDetailAddDateTime]
						,Src.[TransportDetailEditDateTime]
						,Src.[TransportDetailAddUserCode]
						,Src.[TransportDetailEditUserCode]
						,Src.[TransportDetailPalletType]
						,Src.[TransportDetailProductDescription]
						,Src.[TransportDetailLoadMetres]
						,Src.[TransportDetailColliWeight]
						,Src.[TransportDetailQuantity]
						,Src.[TransportDetailUnitOfMeasure]
						,Src.[TransportDetailGoThroughQuantity]
						,Src.[TransportDetailGoThroughUnitOfMeasure]
						,Src.[TransportDetailWidth]
						,Src.[TransportDetailDepth]
						,Src.[TransportDetailHeight]
						,Src.[TransportDetailWaveCode]
						,Src.[TransportDetailRegionCode]
						,Src.[CompanyIDSupplier]
						,Src.[TransportDetailUserDefinedText01]
						,Src.[TransportDetailUserDefinedText02]
						,Src.[TransportDetailUserDefinedText03]
						,Src.[TransportDetailUserDefinedText04]
						,Src.[TransportDetailUserDefinedDate01]
						,Src.[TransportDetailUserDefinedDate02]
						,Src.[TransportDetailDocumentReference]
						,Src.[TransportDetailCustomsConfirmed]
						,Src.[TransportDetailEstimatedPallets]
						,Src.[TransportDetailRequiresCustomsConfirmation]
						,Src.[ShipmentDetailID]
						,Src.[ShipmentID]
						,Src.[ShipmentNumber]
						,Src.[TransportDetailActualDateTimeOfArrival]
						,Src.[TransportDetailActualDateTimeOfDeparture]
						,Src.[TransportDetailCBLNumber]
						,Src.[TransportDetailClientReference]
						,Src.[TransportDetailConsigneeCompanyID]
						,Src.[TransportDetailCSNumber]
						,Src.[TransportDetailCSSequence]
						,Src.[TransportDetailDeliveryCompanyID]
						,Src.[TransportDetailDeliveryContact]
						,Src.[TransportDetailDeliveryDateTime]
						,Src.[TransportDetailEquipmentNumber]
						,Src.[TransportDetailEquipmentSize]
						,Src.[TransportDetailEquipmentType]
						,Src.[TransportDetailEstimatedDateTimeOfArrival]
						,Src.[TransportDetailEstimatedDateTimeOfDeparture]
						,Src.[TransportDetailLeg]
						,Src.[TransportDetailNotes]
						,Src.[TransportDetailPickUpCompanyID]
						,Src.[TransportDetailRegionCodeOrigin]
						,Src.[TransportDetailType]
						,Src.[TransportDetailUserDefinedDate03]
						,Src.[TransportDetailUserDefinedDate04]
						,Src.[TransportDetailUserDefinedDate05]
						,Src.[TransportDetailUserDefinedText05]
						,Src.[TransportDetailUserDefinedText06]
						,Src.[TransportDetailUserDefinedText07]
						,Src.[TransportDetailUserDefinedText08]
						,Src.[TransportDetailUserDefinedText09]
						,Src.[TransportDetailUserDefinedYesNo01]
						,Src.[TransportDetailVesselCode]
						,Src.[TransportDetailVesselName]
						,Src.[TransportDetailVoyageCode]
						,Src.[TransportDetailUserDefinedYesNo02]
						,Src.[TransportDetailUserDefinedYesNo03]
						,Src.[TransportDetailUserDefinedYesNo04]
						,Src.[TransportDetailUserDefinedYesNo05]
						,Src.[TransportDetailUserDefinedDateTime01]
						,Src.[TransportDetailUserDefinedDateTime02]
						,Src.[TransportDetailUserDefinedDateTime03]
						,Src.[TransportDetailUserDefinedDateTime04]
						,Src.[TransportDetailUserDefinedDateTime05]
						,Src.[TransportDetailUserDefinedDateTime06]
						,Src.[TransportDetailUserDefinedDateTime07]
						,Src.[TransportDetailUserDefinedDateTime09]
						,Src.[TransportDetailUserDefinedDateTime10]
						,Src.[TransportDetailUserDefinedNumber01]
						,Src.[TransportDetailUserDefinedNumber02]
						,Src.[TransportDetailUserDefinedNumber03]
						,Src.[TransportDetailUserDefinedNumber04]
						,Src.[TransportDetailUserDefinedNumber05]
						,Src.[TransportDetailUserDefinedLongText01]
						,Src.[TransportDetailUserDefinedLongText02]
						,Src.[TransportDetailUserDefinedLongText03]
						,Src.[TransportDetailUserDefinedLongText04]
						,Src.[TransportDetailUserDefinedLongText05]
						,Src.[TransportDetailUserDefinedText10]
						,Src.[TransportDetailUserDefinedText11]
						,Src.[TransportDetailUserDefinedText12]
						,Src.[TransportDetailUserDefinedText13]
						,Src.[TransportDetailUserDefinedText14]
						,Src.[TransportDetailUserDefinedText15]
						,Src.[TransportDetailStatus]
						,Src.[IssueID]
						,Src.[TransportDetailTemporaryEquipmentNumber]
						,Src.[TransportDetailAdditionalVolume]
					FROM dbo.TransportDetails Src WITH (NOLOCK)
					INNER JOIN [dbo].[TransportStops] TS WITH (NOLOCK) ON Src.[TransportStopID] = TS.[IDTransportStop]
					INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportDetails Dest WITH (NOLOCK) ON Src.IDTransportDetail = Dest.IDTransportDetail
					WHERE Dest.IDTransportDetail IS NULL;
				END;

				TRUNCATE TABLE #TempTableMergeRowStatus;

				INSERT INTO #TempTableMergeRowStatus (
					Inserted
					,Updated
					)
				--,Unchanged
				SELECT ISNULL((
							SELECT COUNT(1)
							FROM #tmpTableVal
							WHERE MergeAction = 'INSERT'
							), 0) AS Inserted
					,ISNULL((
							SELECT COUNT(1)
							FROM #tmpTableVal
							WHERE MergeAction = 'UPDATE'
							), 0) AS Updated

				--,(
				--	@TotRowCount - (
				--		ISNULL((
				--				SELECT COUNT(1)
				--				FROM #tmpTableVal
				--				WHERE MergeAction = 'INSERT'
				--				), 0) + ISNULL((
				--				SELECT COUNT(1)
				--				FROM #tmpTableVal
				--				WHERE MergeAction = 'UPDATE'
				--				), 0)
				--		)
				--	) AS UnChanged
				SELECT @Remarks = '(' + @DataBase + ') --TransportDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
				FROM #TempTableMergeRowStatus tmp;

				SET @LogDate = GETUTCDATE();

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				DELETE T
				FROM dbo.TransportDetails AS T
				INNER JOIN [dbo].[TransportStops] AS TS WITH (NOLOCK) ON T.[TransportStopID] = TS.[IDTransportStop]
				INNER JOIN #TransportsTopNRows TT ON TS.[TransportID] = TT.IDTransport;

				COMMIT TRANSACTION;
					--SELECT GETUTCDATE() AS CurrTime, 'TransportDetails' AS TableName, COUNT(1) AS RowCounts FROM ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportDetails; 
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while archiving from `TransportDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH;

			----TransportLevelFiles
			TRUNCATE TABLE #tmpTableVal;

			BEGIN TRY
				BEGIN TRANSACTION;

				/*
				MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLevelFiles AS Dest
				USING (
					SELECT T.[IDTransportLevelFile]
						,T.[TransportID]
						,T.[TransportLevelFileAddDateTime]
						,T.[TransportLevelFileEditDateTime]
						,T.[TransportLevelFileAddUserCode]
						,T.[TransportLevelFileEditUserCode]
						,T.[TransportLevelFileName]
						,T.[TransportLevelFileNotes]
						,T.[TransportLevelFileType]
						,T.[TransportLevelFileSaveFileName]
						,T.[TransportLevelFileCompressedData]
					FROM dbo.TransportLevelFiles T WITH (NOLOCK)
					INNER JOIN #TransportsTopNRows TT ON T.[TransportID] = TT.IDTransport
					) AS Src
					ON (Dest.[IDTransportLevelFile] = Src.[IDTransportLevelFile])
				WHEN MATCHED
					THEN
						UPDATE
						SET Dest.[TransportID] = Src.[TransportID]
							,Dest.[TransportLevelFileAddDateTime] = Src.[TransportLevelFileAddDateTime]
							,Dest.[TransportLevelFileEditDateTime] = Src.[TransportLevelFileEditDateTime]
							,Dest.[TransportLevelFileAddUserCode] = Src.[TransportLevelFileAddUserCode]
							,Dest.[TransportLevelFileEditUserCode] = Src.[TransportLevelFileEditUserCode]
							,Dest.[TransportLevelFileName] = Src.[TransportLevelFileName]
							,Dest.[TransportLevelFileNotes] = Src.[TransportLevelFileNotes]
							,Dest.[TransportLevelFileType] = Src.[TransportLevelFileType]
							,Dest.[TransportLevelFileSaveFileName] = Src.[TransportLevelFileSaveFileName]
							,Dest.[TransportLevelFileCompressedData] = Src.[TransportLevelFileCompressedData]
				WHEN NOT MATCHED
					THEN
						INSERT (
							[IDTransportLevelFile]
							,[TransportID]
							,[TransportLevelFileAddDateTime]
							,[TransportLevelFileEditDateTime]
							,[TransportLevelFileAddUserCode]
							,[TransportLevelFileEditUserCode]
							,[TransportLevelFileName]
							,[TransportLevelFileNotes]
							,[TransportLevelFileType]
							,[TransportLevelFileSaveFileName]
							,[TransportLevelFileCompressedData]
							)
						VALUES (
							Src.[IDTransportLevelFile]
							,Src.[TransportID]
							,Src.[TransportLevelFileAddDateTime]
							,Src.[TransportLevelFileEditDateTime]
							,Src.[TransportLevelFileAddUserCode]
							,Src.[TransportLevelFileEditUserCode]
							,Src.[TransportLevelFileName]
							,Src.[TransportLevelFileNotes]
							,Src.[TransportLevelFileType]
							,Src.[TransportLevelFileSaveFileName]
							,Src.[TransportLevelFileCompressedData]
							)
				OUTPUT $ACTION
					,CAST(Inserted.[IDTransportLevelFile] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDTransportLevelFile] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
				*/
				WHILE EXISTS (
						SELECT 1
						FROM [dbo].TransportLevelFiles Src WITH (NOLOCK)
						INNER JOIN #TransportsTopNRows TT ON Src.TransportID = TT.IDTransport
						INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLevelFiles Dest WITH (NOLOCK) ON Src.IDTransportLevelFile = Dest.IDTransportLevelFile
						WHERE Dest.[TransportLevelFileEditDateTime] < Src.[TransportLevelFileEditDateTime]
						)
				BEGIN
					UPDATE TOP (@BatchSizeForArchival) Dest
					SET Dest.[TransportID] = Src.[TransportID]
						,Dest.[TransportLevelFileAddDateTime] = Src.[TransportLevelFileAddDateTime]
						,Dest.[TransportLevelFileEditDateTime] = Src.[TransportLevelFileEditDateTime]
						,Dest.[TransportLevelFileAddUserCode] = Src.[TransportLevelFileAddUserCode]
						,Dest.[TransportLevelFileEditUserCode] = Src.[TransportLevelFileEditUserCode]
						,Dest.[TransportLevelFileName] = Src.[TransportLevelFileName]
						,Dest.[TransportLevelFileNotes] = Src.[TransportLevelFileNotes]
						,Dest.[TransportLevelFileType] = Src.[TransportLevelFileType]
						,Dest.[TransportLevelFileSaveFileName] = Src.[TransportLevelFileSaveFileName]
						,Dest.[TransportLevelFileCompressedData] = Src.[TransportLevelFileCompressedData]
					OUTPUT 'UPDATE'
						,CAST(Inserted.IDReceiptStatus AS VARCHAR(50)) AS 'Inserted'
						,CAST(Deleted.IDReceiptStatus AS VARCHAR(50)) AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					FROM [dbo].TransportLevelFiles Src WITH (NOLOCK)
					INNER JOIN #TransportsTopNRows TT ON Src.TransportID = TT.IDTransport
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLevelFiles Dest ON Src.IDTransportLevelFile = Dest.IDTransportLevelFile
					WHERE Dest.[TransportLevelFileEditDateTime] < Src.[TransportLevelFileEditDateTime];
				END;

				WHILE EXISTS (
						SELECT 1
						FROM [dbo].TransportLevelFiles Src WITH (NOLOCK)
						INNER JOIN #TransportsTopNRows TT ON Src.[TransportID] = TT.IDTransport
						LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLevelFiles Dest WITH (NOLOCK) ON Src.[IDTransportLevelFile] = Dest.[IDTransportLevelFile]
						WHERE Dest.[IDTransportLevelFile] IS NULL
						)
				BEGIN
					INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLevelFiles (
						[IDTransportLevelFile]
						,[TransportID]
						,[TransportLevelFileAddDateTime]
						,[TransportLevelFileEditDateTime]
						,[TransportLevelFileAddUserCode]
						,[TransportLevelFileEditUserCode]
						,[TransportLevelFileName]
						,[TransportLevelFileNotes]
						,[TransportLevelFileType]
						,[TransportLevelFileSaveFileName]
						,[TransportLevelFileCompressedData]
						)
					OUTPUT 'INSERT'
						,CAST(Inserted.IDReceiptType AS VARCHAR(50)) AS 'Inserted'
						,NULL AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					SELECT TOP (@BatchSizeForArchival) Src.[IDTransportLevelFile]
						,Src.[TransportID]
						,Src.[TransportLevelFileAddDateTime]
						,Src.[TransportLevelFileEditDateTime]
						,Src.[TransportLevelFileAddUserCode]
						,Src.[TransportLevelFileEditUserCode]
						,Src.[TransportLevelFileName]
						,Src.[TransportLevelFileNotes]
						,Src.[TransportLevelFileType]
						,Src.[TransportLevelFileSaveFileName]
						,Src.[TransportLevelFileCompressedData]
					FROM [dbo].TransportLevelFiles Src WITH (NOLOCK)
					INNER JOIN #TransportsTopNRows TT ON Src.[TransportID] = TT.IDTransport
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLevelFiles Dest WITH (NOLOCK) ON Src.[IDTransportLevelFile] = Dest.[IDTransportLevelFile]
					WHERE Dest.[IDTransportLevelFile] IS NULL;
				END;

				TRUNCATE TABLE #TempTableMergeRowStatus;

				INSERT INTO #TempTableMergeRowStatus (
					Inserted
					,Updated
					)
				--,Unchanged
				SELECT ISNULL((
							SELECT COUNT(1)
							FROM #tmpTableVal
							WHERE MergeAction = 'INSERT'
							), 0) AS Inserted
					,ISNULL((
							SELECT COUNT(1)
							FROM #tmpTableVal
							WHERE MergeAction = 'UPDATE'
							), 0) AS Updated

				--,(
				--	@TotRowCount - (
				--		ISNULL((
				--				SELECT COUNT(1)
				--				FROM #tmpTableVal
				--				WHERE MergeAction = 'INSERT'
				--				), 0) + ISNULL((
				--				SELECT COUNT(1)
				--				FROM #tmpTableVal
				--				WHERE MergeAction = 'UPDATE'
				--				), 0)
				--		)
				--	) AS UnChanged
				SELECT @Remarks = '(' + @DataBase + ') --TransportLevelFiles: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
				FROM #TempTableMergeRowStatus tmp;

				SET @LogDate = GETUTCDATE();

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				DELETE T
				FROM dbo.TransportLevelFiles T WITH (NOLOCK)
				INNER JOIN #TransportsTopNRows TT ON T.[TransportID] = TT.IDTransport;

				COMMIT TRANSACTION;
					--SELECT GETUTCDATE() AS CurrTime, 'TransportLevelFiles' AS TableName, COUNT(1) AS RowCounts FROM ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLevelFiles; 
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while archiving from `TransportLevelFiles` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH;

			----TransportLogs
			TRUNCATE TABLE #tmpTableVal;

			BEGIN TRY
				BEGIN TRANSACTION;

				/*
				MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLogs AS Dest
				USING (
					SELECT T.[IDTransportLog]
						,T.[TransportID]
						,T.[TransportLogDateTime]
						,T.[TransportLogUserLogin]
						,T.[TransportStatusID]
						,T.[TransportLogEvent]
						,T.[TransportLogInfo]
						,T.[TransportEmailDefinitionID]
						,T.[TransportStopID]
						,T.[TransportDocumentID]
						,T.[TransportDetailID]
						,T.[TransportLogEmailID]
						,T.[TransportLogTechnicalInfo]
						,T.[TransportLevelFileID]
					FROM dbo.TransportLogs T WITH (NOLOCK)
					INNER JOIN #TransportsTopNRows TT ON T.[TransportID] = TT.IDTransport
					) AS Src
					ON (Dest.[IDTransportLog] = Src.[IDTransportLog])
				WHEN MATCHED
					THEN
						UPDATE
						SET Dest.[TransportID] = Src.[TransportID]
							,Dest.[TransportLogDateTime] = Src.[TransportLogDateTime]
							,Dest.[TransportLogUserLogin] = Src.[TransportLogUserLogin]
							,Dest.[TransportStatusID] = Src.[TransportStatusID]
							,Dest.[TransportLogEvent] = Src.[TransportLogEvent]
							,Dest.[TransportLogInfo] = Src.[TransportLogInfo]
							,Dest.[TransportEmailDefinitionID] = Src.[TransportEmailDefinitionID]
							,Dest.[TransportStopID] = Src.[TransportStopID]
							,Dest.[TransportDocumentID] = Src.[TransportDocumentID]
							,Dest.[TransportDetailID] = Src.[TransportDetailID]
							,Dest.[TransportLogEmailID] = Src.[TransportLogEmailID]
							,Dest.[TransportLogTechnicalInfo] = Src.[TransportLogTechnicalInfo]
							,Dest.[TransportLevelFileID] = Src.[TransportLevelFileID]
				WHEN NOT MATCHED
					THEN
						INSERT (
							[IDTransportLog]
							,[TransportID]
							,[TransportLogDateTime]
							,[TransportLogUserLogin]
							,[TransportStatusID]
							,[TransportLogEvent]
							,[TransportLogInfo]
							,[TransportEmailDefinitionID]
							,[TransportStopID]
							,[TransportDocumentID]
							,[TransportDetailID]
							,[TransportLogEmailID]
							,[TransportLogTechnicalInfo]
							,[TransportLevelFileID]
							)
						VALUES (
							Src.[IDTransportLog]
							,Src.[TransportID]
							,Src.[TransportLogDateTime]
							,Src.[TransportLogUserLogin]
							,Src.[TransportStatusID]
							,Src.[TransportLogEvent]
							,Src.[TransportLogInfo]
							,Src.[TransportEmailDefinitionID]
							,Src.[TransportStopID]
							,Src.[TransportDocumentID]
							,Src.[TransportDetailID]
							,Src.[TransportLogEmailID]
							,Src.[TransportLogTechnicalInfo]
							,Src.[TransportLevelFileID]
							)
				OUTPUT $ACTION
					,CAST(Inserted.[IDTransportLog] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDTransportLog] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
				*/
				WHILE EXISTS (
						SELECT 1
						FROM [dbo].TransportLogs Src WITH (NOLOCK)
						INNER JOIN #TransportsTopNRows TT ON Src.[TransportID] = TT.IDTransport
						INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLogs Dest WITH (NOLOCK) ON Src.IDTransportLog = Dest.IDTransportLog
						WHERE Dest.TransportLogDateTime < Src.TransportLogDateTime
						)
				BEGIN
					UPDATE TOP (@BatchSizeForArchival) Dest
					SET Dest.[TransportID] = Src.[TransportID]
						,Dest.[TransportLogDateTime] = Src.[TransportLogDateTime]
						,Dest.[TransportLogUserLogin] = Src.[TransportLogUserLogin]
						,Dest.[TransportStatusID] = Src.[TransportStatusID]
						,Dest.[TransportLogEvent] = Src.[TransportLogEvent]
						,Dest.[TransportLogInfo] = Src.[TransportLogInfo]
						,Dest.[TransportEmailDefinitionID] = Src.[TransportEmailDefinitionID]
						,Dest.[TransportStopID] = Src.[TransportStopID]
						,Dest.[TransportDocumentID] = Src.[TransportDocumentID]
						,Dest.[TransportDetailID] = Src.[TransportDetailID]
						,Dest.[TransportLogEmailID] = Src.[TransportLogEmailID]
						,Dest.[TransportLogTechnicalInfo] = Src.[TransportLogTechnicalInfo]
						,Dest.[TransportLevelFileID] = Src.[TransportLevelFileID]
					OUTPUT 'UPDATE'
						,CAST(Inserted.IDTransportLog AS VARCHAR(50)) AS 'Inserted'
						,CAST(Deleted.IDTransportLog AS VARCHAR(50)) AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					FROM [dbo].TransportLogs Src WITH (NOLOCK)
					INNER JOIN #TransportsTopNRows TT ON Src.[TransportID] = TT.IDTransport
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLogs Dest ON Src.IDTransportLog = Dest.IDTransportLog
					WHERE Dest.TransportLogDateTime < Src.TransportLogDateTime;
				END;

				WHILE EXISTS (
						SELECT 1
						FROM [dbo].TransportLogs Src WITH (NOLOCK)
						INNER JOIN #TransportsTopNRows TT ON Src.[TransportID] = TT.IDTransport
						LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLogs Dest WITH (NOLOCK) ON Src.IDTransportLog = Dest.IDTransportLog
						WHERE Dest.IDTransportLog IS NULL
						)
				BEGIN
					INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLogs (
						[IDTransportLog]
						,[TransportID]
						,[TransportLogDateTime]
						,[TransportLogUserLogin]
						,[TransportStatusID]
						,[TransportLogEvent]
						,[TransportLogInfo]
						,[TransportEmailDefinitionID]
						,[TransportStopID]
						,[TransportDocumentID]
						,[TransportDetailID]
						,[TransportLogEmailID]
						,[TransportLogTechnicalInfo]
						,[TransportLevelFileID]
						)
					OUTPUT 'INSERT'
						,CAST(Inserted.IDTransportLog AS VARCHAR(50)) AS 'Inserted'
						,NULL AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					SELECT TOP (@BatchSizeForArchival) Src.[IDTransportLog]
						,Src.[TransportID]
						,Src.[TransportLogDateTime]
						,Src.[TransportLogUserLogin]
						,Src.[TransportStatusID]
						,Src.[TransportLogEvent]
						,Src.[TransportLogInfo]
						,Src.[TransportEmailDefinitionID]
						,Src.[TransportStopID]
						,Src.[TransportDocumentID]
						,Src.[TransportDetailID]
						,Src.[TransportLogEmailID]
						,Src.[TransportLogTechnicalInfo]
						,Src.[TransportLevelFileID]
					FROM [dbo].TransportLogs Src WITH (NOLOCK)
					INNER JOIN #TransportsTopNRows TT ON Src.[TransportID] = TT.IDTransport
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLogs Dest WITH (NOLOCK) ON Src.IDTransportLog = Dest.IDTransportLog
					WHERE Dest.IDTransportLog IS NULL;
				END;

				TRUNCATE TABLE #TempTableMergeRowStatus;

				INSERT INTO #TempTableMergeRowStatus (
					Inserted
					,Updated
					)
				--,Unchanged
				SELECT ISNULL((
							SELECT COUNT(1)
							FROM #tmpTableVal
							WHERE MergeAction = 'INSERT'
							), 0) AS Inserted
					,ISNULL((
							SELECT COUNT(1)
							FROM #tmpTableVal
							WHERE MergeAction = 'UPDATE'
							), 0) AS Updated

				--,(
				--	@TotRowCount - (
				--		ISNULL((
				--				SELECT COUNT(1)
				--				FROM #tmpTableVal
				--				WHERE MergeAction = 'INSERT'
				--				), 0) + ISNULL((
				--				SELECT COUNT(1)
				--				FROM #tmpTableVal
				--				WHERE MergeAction = 'UPDATE'
				--				), 0)
				--		)
				--	) AS UnChanged
				SELECT @Remarks = '(' + @DataBase + ') --TransportLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
				FROM #TempTableMergeRowStatus tmp;

				SET @LogDate = GETUTCDATE();

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,NULL
					,NULL
					,NULL
					,NULL
					,@LogDate
					,@HostName
					,@UserName
					,'Info'
					,@RunID;

				DELETE T
				FROM dbo.TransportLogs T WITH (NOLOCK)
				INNER JOIN #TransportsTopNRows TT ON T.[TransportID] = TT.IDTransport;

				COMMIT TRANSACTION;
					--SELECT GETUTCDATE() AS CurrTime, 'TransportLogs' AS TableName, COUNT(1) AS RowCounts FROM ILSE_WBK_ARCHIVE_NONPROD.dbo.TransportLogs; 
			END TRY

			BEGIN CATCH
				ROLLBACK TRANSACTION;

				SET @TypeOfError = ERROR_SEVERITY();
				SET @ErrorNumber = ERROR_NUMBER();
				SET @ErrorMessage = ERROR_MESSAGE();
				SET @LineNumber = ERROR_LINE();
				SET @LogDate = GETUTCDATE();
				SET @Remarks = 'Error while archiving from `TransportLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

				EXEC pArchiveLogs @Remarks
					,@SourceProcName
					,@TypeOfError
					,@ErrorNumber
					,@ErrorMessage
					,@LineNumber
					,@LogDate
					,@HostName
					,@UserName
					,'Error'
					,@RunID;

				RAISERROR (
						@ErrorMessage
						,@TypeOfError
						,- 1
						);
			END CATCH;

			UPDATE T
			SET T.CompleteFlag = 1
			FROM #Transports T
			INNER JOIN #TransportsTopNRows TR ON T.SlNo = TR.SlNo;

			IF OBJECT_ID('tempdb..#TransportsTopNRows') IS NOT NULL
			BEGIN
				DROP TABLE #TransportsTopNRows;
			END;
		END

		SELECT @Remarks = '(' + @DataBase + ') Transferring Rows from tables related to Transports in chunks completed.';

		SET @LogDate = GETUTCDATE();

		EXEC pArchiveLogs @Remarks
			,@SourceProcName
			,NULL
			,NULL
			,NULL
			,NULL
			,@LogDate
			,@HostName
			,@UserName
			,'Info'
			,@RunID;
	END

	--Needs to check how to delete the old entries from the EDIFiles Table
	----EDIFiles 
	----
	----PriceTool
	----CargoRelease
	--CargoReleaseOrders
	SET @CurrentTableName = 'CargoReleaseOrders';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseOrders AS Dest
			USING (
				SELECT [IDCargoReleaseOrder]
					,[CargoReleaseOrderAddDateTime]
					,[CargoReleaseOrderEditDateTime]
					,[CargoReleaseOrderAddUserCode]
					,[CargoReleaseOrderEditUserCode]
					,[SubContextCode]
					,[CargoReleaseOrderConsigneeCode]
					,[CargoReleaseOrderPortOfDischargeCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[CargoReleaseOrderStatusChangeDateTime]
					,[CargoReleaseOrderNumber]
					,[CargoReleaseOrderCarrierBL]
					,[CargoReleaseOrderFirstCarrierBL]
					,[CargoReleaseOrderCargoReleaseNumber]
					,[CargoReleaseOrderCarrierCode]
					,[CargoReleaseOrderVesselCode]
					,[CargoReleaseOrderVesselName]
					,[CargoReleaseOrderVoyageCode]
					,[CargoReleaseOrderEquipmentNumber]
					,[CargoReleaseOrderEquipmentType]
					,[CargoReleaseOrderEquipmentSize]
					,[CargoReleaseOrderCSNumber]
					,[CargoReleaseOrderDeliveryLocationType]
					,[CargoReleaseOrderTerminalLocationType]
					,[CargoReleaseOrderBLReceivedDateTime]
					,[CargoReleaseOrderEmptyReturn]
					,[CargoReleaseOrderEmptyReturnReference]
					,[CargoReleaseOrderRequestInvoiceDateTime]
					,[CargoReleaseOrderRequestInvoiceContact]
					,[CargoReleaseOrderRequestInvoiceContactEmail]
					,[CargoReleaseOrderInvoiceReceivedDateTime]
					,[CargoReleaseOrderRequestPaymentDateTime]
					,[CargoReleaseOrderRequestPaymentContact]
					,[CargoReleaseOrderRequestPaymentContactEmail]
					,[CargoReleaseOrderRequestReleaseDateTime]
					,[CargoReleaseOrderRequestReleaseContact]
					,[CargoReleaseOrderRequestReleaseContactEmail]
					,[CargoReleaseOrderPaymentCompletedDateTime]
					,[CargoReleaseOrderLandedDateTime]
					,[CargoReleaseOrderComments]
					,[CargoReleaseOrderUserDefinedText01]
					,[CargoReleaseOrderUserDefinedText02]
					,[CargoReleaseOrderUserDefinedText03]
					,[CargoReleaseOrderUserDefinedText04]
					,[CargoReleaseOrderUserDefinedText05]
					,[CargoReleaseOrderCreditLimit]
					,[CargoReleaseOrderCarrierEmail]
					,[CargoReleaseOrderClientReference]
					,[CargoReleaseOrderDocumentStatusDisplayName]
					,[CargoReleaseOrderDocumentStatusDone]
					,[CargoReleaseOrderUserDefinedYesNo01]
					,[CargoReleaseOrderUserDefinedYesNo02]
					,[CargoReleaseOrderUserDefinedYesNo03]
					,[CargoReleaseOrderUserDefinedYesNo04]
					,[CargoReleaseOrderUserDefinedYesNo05]
					,[CargoReleaseOrderUserDefinedDateTime01]
					,[CargoReleaseOrderUserDefinedDateTime02]
					,[CargoReleaseOrderUserDefinedDateTime03]
					,[CargoReleaseOrderUserDefinedDateTime04]
					,[CargoReleaseOrderUserDefinedDateTime05]
					,[CargoReleaseOrderUserDefinedDateTime06]
					,[CargoReleaseOrderUserDefinedDateTime07]
					,[CargoReleaseOrderUserDefinedDateTime09]
					,[CargoReleaseOrderUserDefinedDateTime10]
					,[CargoReleaseOrderUserDefinedNumber01]
					,[CargoReleaseOrderUserDefinedNumber02]
					,[CargoReleaseOrderUserDefinedNumber03]
					,[CargoReleaseOrderUserDefinedNumber04]
					,[CargoReleaseOrderUserDefinedNumber05]
					,[CargoReleaseOrderUserDefinedLongText01]
					,[CargoReleaseOrderUserDefinedLongText02]
					,[CargoReleaseOrderUserDefinedLongText03]
					,[CargoReleaseOrderUserDefinedLongText04]
					,[CargoReleaseOrderUserDefinedLongText05]
					,[CargoReleaseOrderUserDefinedText06]
					,[CargoReleaseOrderUserDefinedText07]
					,[CargoReleaseOrderUserDefinedText08]
					,[CargoReleaseOrderUserDefinedText09]
					,[CargoReleaseOrderUserDefinedText10]
					,[CargoReleaseOrderUserDefinedText11]
					,[CargoReleaseOrderUserDefinedText12]
					,[CargoReleaseOrderUserDefinedText13]
					,[CargoReleaseOrderUserDefinedText14]
					,[CargoReleaseOrderUserDefinedText15]
					,[CargoReleaseOrderServiceContractNumber]
					,[CargoReleaseOrderChangesAcceptedDateTime]
					,[CargoReleaseOrderRuleType]
					,[CargoReleaseOrderCreationDataSource]
					,[CargoReleaseOrderChangedDataStorageString]
					,[CountryCode]
					,[CargoReleaseOrderOwnerLogin]
					,[CargoReleaseOrderImportBatch]
					,[CargoReleaseOrderNewEDIPending]
				FROM dbo.CargoReleaseOrders T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDCargoReleaseOrder] = Src.[IDCargoReleaseOrder])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CargoReleaseOrderAddDateTime] = Src.[CargoReleaseOrderAddDateTime]
						,Dest.[CargoReleaseOrderEditDateTime] = Src.[CargoReleaseOrderEditDateTime]
						,Dest.[CargoReleaseOrderAddUserCode] = Src.[CargoReleaseOrderAddUserCode]
						,Dest.[CargoReleaseOrderEditUserCode] = Src.[CargoReleaseOrderEditUserCode]
						,Dest.[SubContextCode] = Src.[SubContextCode]
						,Dest.[CargoReleaseOrderConsigneeCode] = Src.[CargoReleaseOrderConsigneeCode]
						,Dest.[CargoReleaseOrderPortOfDischargeCode] = Src.[CargoReleaseOrderPortOfDischargeCode]
						,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
						,Dest.[CargoReleaseOrderStatusChangeDateTime] = Src.[CargoReleaseOrderStatusChangeDateTime]
						,Dest.[CargoReleaseOrderNumber] = Src.[CargoReleaseOrderNumber]
						,Dest.[CargoReleaseOrderCarrierBL] = Src.[CargoReleaseOrderCarrierBL]
						,Dest.[CargoReleaseOrderFirstCarrierBL] = Src.[CargoReleaseOrderFirstCarrierBL]
						,Dest.[CargoReleaseOrderCargoReleaseNumber] = Src.[CargoReleaseOrderCargoReleaseNumber]
						,Dest.[CargoReleaseOrderCarrierCode] = Src.[CargoReleaseOrderCarrierCode]
						,Dest.[CargoReleaseOrderVesselCode] = Src.[CargoReleaseOrderVesselCode]
						,Dest.[CargoReleaseOrderVesselName] = Src.[CargoReleaseOrderVesselName]
						,Dest.[CargoReleaseOrderVoyageCode] = Src.[CargoReleaseOrderVoyageCode]
						,Dest.[CargoReleaseOrderEquipmentNumber] = Src.[CargoReleaseOrderEquipmentNumber]
						,Dest.[CargoReleaseOrderEquipmentType] = Src.[CargoReleaseOrderEquipmentType]
						,Dest.[CargoReleaseOrderEquipmentSize] = Src.[CargoReleaseOrderEquipmentSize]
						,Dest.[CargoReleaseOrderCSNumber] = Src.[CargoReleaseOrderCSNumber]
						,Dest.[CargoReleaseOrderDeliveryLocationType] = Src.[CargoReleaseOrderDeliveryLocationType]
						,Dest.[CargoReleaseOrderTerminalLocationType] = Src.[CargoReleaseOrderTerminalLocationType]
						,Dest.[CargoReleaseOrderBLReceivedDateTime] = Src.[CargoReleaseOrderBLReceivedDateTime]
						,Dest.[CargoReleaseOrderEmptyReturn] = Src.[CargoReleaseOrderEmptyReturn]
						,Dest.[CargoReleaseOrderEmptyReturnReference] = Src.[CargoReleaseOrderEmptyReturnReference]
						,Dest.[CargoReleaseOrderRequestInvoiceDateTime] = Src.[CargoReleaseOrderRequestInvoiceDateTime]
						,Dest.[CargoReleaseOrderRequestInvoiceContact] = Src.[CargoReleaseOrderRequestInvoiceContact]
						,Dest.[CargoReleaseOrderRequestInvoiceContactEmail] = Src.[CargoReleaseOrderRequestInvoiceContactEmail]
						,Dest.[CargoReleaseOrderInvoiceReceivedDateTime] = Src.[CargoReleaseOrderInvoiceReceivedDateTime]
						,Dest.[CargoReleaseOrderRequestPaymentDateTime] = Src.[CargoReleaseOrderRequestPaymentDateTime]
						,Dest.[CargoReleaseOrderRequestPaymentContact] = Src.[CargoReleaseOrderRequestPaymentContact]
						,Dest.[CargoReleaseOrderRequestPaymentContactEmail] = Src.[CargoReleaseOrderRequestPaymentContactEmail]
						,Dest.[CargoReleaseOrderRequestReleaseDateTime] = Src.[CargoReleaseOrderRequestReleaseDateTime]
						,Dest.[CargoReleaseOrderRequestReleaseContact] = Src.[CargoReleaseOrderRequestReleaseContact]
						,Dest.[CargoReleaseOrderRequestReleaseContactEmail] = Src.[CargoReleaseOrderRequestReleaseContactEmail]
						,Dest.[CargoReleaseOrderPaymentCompletedDateTime] = Src.[CargoReleaseOrderPaymentCompletedDateTime]
						,Dest.[CargoReleaseOrderLandedDateTime] = Src.[CargoReleaseOrderLandedDateTime]
						,Dest.[CargoReleaseOrderComments] = Src.[CargoReleaseOrderComments]
						,Dest.[CargoReleaseOrderUserDefinedText01] = Src.[CargoReleaseOrderUserDefinedText01]
						,Dest.[CargoReleaseOrderUserDefinedText02] = Src.[CargoReleaseOrderUserDefinedText02]
						,Dest.[CargoReleaseOrderUserDefinedText03] = Src.[CargoReleaseOrderUserDefinedText03]
						,Dest.[CargoReleaseOrderUserDefinedText04] = Src.[CargoReleaseOrderUserDefinedText04]
						,Dest.[CargoReleaseOrderUserDefinedText05] = Src.[CargoReleaseOrderUserDefinedText05]
						,Dest.[CargoReleaseOrderCreditLimit] = Src.[CargoReleaseOrderCreditLimit]
						,Dest.[CargoReleaseOrderCarrierEmail] = Src.[CargoReleaseOrderCarrierEmail]
						,Dest.[CargoReleaseOrderClientReference] = Src.[CargoReleaseOrderClientReference]
						,Dest.[CargoReleaseOrderDocumentStatusDisplayName] = Src.[CargoReleaseOrderDocumentStatusDisplayName]
						,Dest.[CargoReleaseOrderDocumentStatusDone] = Src.[CargoReleaseOrderDocumentStatusDone]
						,Dest.[CargoReleaseOrderUserDefinedYesNo01] = Src.[CargoReleaseOrderUserDefinedYesNo01]
						,Dest.[CargoReleaseOrderUserDefinedYesNo02] = Src.[CargoReleaseOrderUserDefinedYesNo02]
						,Dest.[CargoReleaseOrderUserDefinedYesNo03] = Src.[CargoReleaseOrderUserDefinedYesNo03]
						,Dest.[CargoReleaseOrderUserDefinedYesNo04] = Src.[CargoReleaseOrderUserDefinedYesNo04]
						,Dest.[CargoReleaseOrderUserDefinedYesNo05] = Src.[CargoReleaseOrderUserDefinedYesNo05]
						,Dest.[CargoReleaseOrderUserDefinedDateTime01] = Src.[CargoReleaseOrderUserDefinedDateTime01]
						,Dest.[CargoReleaseOrderUserDefinedDateTime02] = Src.[CargoReleaseOrderUserDefinedDateTime02]
						,Dest.[CargoReleaseOrderUserDefinedDateTime03] = Src.[CargoReleaseOrderUserDefinedDateTime03]
						,Dest.[CargoReleaseOrderUserDefinedDateTime04] = Src.[CargoReleaseOrderUserDefinedDateTime04]
						,Dest.[CargoReleaseOrderUserDefinedDateTime05] = Src.[CargoReleaseOrderUserDefinedDateTime05]
						,Dest.[CargoReleaseOrderUserDefinedDateTime06] = Src.[CargoReleaseOrderUserDefinedDateTime06]
						,Dest.[CargoReleaseOrderUserDefinedDateTime07] = Src.[CargoReleaseOrderUserDefinedDateTime07]
						,Dest.[CargoReleaseOrderUserDefinedDateTime09] = Src.[CargoReleaseOrderUserDefinedDateTime09]
						,Dest.[CargoReleaseOrderUserDefinedDateTime10] = Src.[CargoReleaseOrderUserDefinedDateTime10]
						,Dest.[CargoReleaseOrderUserDefinedNumber01] = Src.[CargoReleaseOrderUserDefinedNumber01]
						,Dest.[CargoReleaseOrderUserDefinedNumber02] = Src.[CargoReleaseOrderUserDefinedNumber02]
						,Dest.[CargoReleaseOrderUserDefinedNumber03] = Src.[CargoReleaseOrderUserDefinedNumber03]
						,Dest.[CargoReleaseOrderUserDefinedNumber04] = Src.[CargoReleaseOrderUserDefinedNumber04]
						,Dest.[CargoReleaseOrderUserDefinedNumber05] = Src.[CargoReleaseOrderUserDefinedNumber05]
						,Dest.[CargoReleaseOrderUserDefinedLongText01] = Src.[CargoReleaseOrderUserDefinedLongText01]
						,Dest.[CargoReleaseOrderUserDefinedLongText02] = Src.[CargoReleaseOrderUserDefinedLongText02]
						,Dest.[CargoReleaseOrderUserDefinedLongText03] = Src.[CargoReleaseOrderUserDefinedLongText03]
						,Dest.[CargoReleaseOrderUserDefinedLongText04] = Src.[CargoReleaseOrderUserDefinedLongText04]
						,Dest.[CargoReleaseOrderUserDefinedLongText05] = Src.[CargoReleaseOrderUserDefinedLongText05]
						,Dest.[CargoReleaseOrderUserDefinedText06] = Src.[CargoReleaseOrderUserDefinedText06]
						,Dest.[CargoReleaseOrderUserDefinedText07] = Src.[CargoReleaseOrderUserDefinedText07]
						,Dest.[CargoReleaseOrderUserDefinedText08] = Src.[CargoReleaseOrderUserDefinedText08]
						,Dest.[CargoReleaseOrderUserDefinedText09] = Src.[CargoReleaseOrderUserDefinedText09]
						,Dest.[CargoReleaseOrderUserDefinedText10] = Src.[CargoReleaseOrderUserDefinedText10]
						,Dest.[CargoReleaseOrderUserDefinedText11] = Src.[CargoReleaseOrderUserDefinedText11]
						,Dest.[CargoReleaseOrderUserDefinedText12] = Src.[CargoReleaseOrderUserDefinedText12]
						,Dest.[CargoReleaseOrderUserDefinedText13] = Src.[CargoReleaseOrderUserDefinedText13]
						,Dest.[CargoReleaseOrderUserDefinedText14] = Src.[CargoReleaseOrderUserDefinedText14]
						,Dest.[CargoReleaseOrderUserDefinedText15] = Src.[CargoReleaseOrderUserDefinedText15]
						,Dest.[CargoReleaseOrderServiceContractNumber] = Src.[CargoReleaseOrderServiceContractNumber]
						,Dest.[CargoReleaseOrderChangesAcceptedDateTime] = Src.[CargoReleaseOrderChangesAcceptedDateTime]
						,Dest.[CargoReleaseOrderRuleType] = Src.[CargoReleaseOrderRuleType]
						,Dest.[CargoReleaseOrderCreationDataSource] = Src.[CargoReleaseOrderCreationDataSource]
						,Dest.[CargoReleaseOrderChangedDataStorageString] = Src.[CargoReleaseOrderChangedDataStorageString]
						,Dest.[CountryCode] = Src.[CountryCode]
						,Dest.[CargoReleaseOrderOwnerLogin] = Src.[CargoReleaseOrderOwnerLogin]
						,Dest.[CargoReleaseOrderImportBatch] = Src.[CargoReleaseOrderImportBatch]
						,Dest.[CargoReleaseOrderNewEDIPending] = Src.[CargoReleaseOrderNewEDIPending]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCargoReleaseOrder]
						,[CargoReleaseOrderAddDateTime]
						,[CargoReleaseOrderEditDateTime]
						,[CargoReleaseOrderAddUserCode]
						,[CargoReleaseOrderEditUserCode]
						,[SubContextCode]
						,[CargoReleaseOrderConsigneeCode]
						,[CargoReleaseOrderPortOfDischargeCode]
						,[DataEntryDefinitionID]
						,[StatusID]
						,[StatusIDPrevious]
						,[CargoReleaseOrderStatusChangeDateTime]
						,[CargoReleaseOrderNumber]
						,[CargoReleaseOrderCarrierBL]
						,[CargoReleaseOrderFirstCarrierBL]
						,[CargoReleaseOrderCargoReleaseNumber]
						,[CargoReleaseOrderCarrierCode]
						,[CargoReleaseOrderVesselCode]
						,[CargoReleaseOrderVesselName]
						,[CargoReleaseOrderVoyageCode]
						,[CargoReleaseOrderEquipmentNumber]
						,[CargoReleaseOrderEquipmentType]
						,[CargoReleaseOrderEquipmentSize]
						,[CargoReleaseOrderCSNumber]
						,[CargoReleaseOrderDeliveryLocationType]
						,[CargoReleaseOrderTerminalLocationType]
						,[CargoReleaseOrderBLReceivedDateTime]
						,[CargoReleaseOrderEmptyReturn]
						,[CargoReleaseOrderEmptyReturnReference]
						,[CargoReleaseOrderRequestInvoiceDateTime]
						,[CargoReleaseOrderRequestInvoiceContact]
						,[CargoReleaseOrderRequestInvoiceContactEmail]
						,[CargoReleaseOrderInvoiceReceivedDateTime]
						,[CargoReleaseOrderRequestPaymentDateTime]
						,[CargoReleaseOrderRequestPaymentContact]
						,[CargoReleaseOrderRequestPaymentContactEmail]
						,[CargoReleaseOrderRequestReleaseDateTime]
						,[CargoReleaseOrderRequestReleaseContact]
						,[CargoReleaseOrderRequestReleaseContactEmail]
						,[CargoReleaseOrderPaymentCompletedDateTime]
						,[CargoReleaseOrderLandedDateTime]
						,[CargoReleaseOrderComments]
						,[CargoReleaseOrderUserDefinedText01]
						,[CargoReleaseOrderUserDefinedText02]
						,[CargoReleaseOrderUserDefinedText03]
						,[CargoReleaseOrderUserDefinedText04]
						,[CargoReleaseOrderUserDefinedText05]
						,[CargoReleaseOrderCreditLimit]
						,[CargoReleaseOrderCarrierEmail]
						,[CargoReleaseOrderClientReference]
						,[CargoReleaseOrderDocumentStatusDisplayName]
						,[CargoReleaseOrderDocumentStatusDone]
						,[CargoReleaseOrderUserDefinedYesNo01]
						,[CargoReleaseOrderUserDefinedYesNo02]
						,[CargoReleaseOrderUserDefinedYesNo03]
						,[CargoReleaseOrderUserDefinedYesNo04]
						,[CargoReleaseOrderUserDefinedYesNo05]
						,[CargoReleaseOrderUserDefinedDateTime01]
						,[CargoReleaseOrderUserDefinedDateTime02]
						,[CargoReleaseOrderUserDefinedDateTime03]
						,[CargoReleaseOrderUserDefinedDateTime04]
						,[CargoReleaseOrderUserDefinedDateTime05]
						,[CargoReleaseOrderUserDefinedDateTime06]
						,[CargoReleaseOrderUserDefinedDateTime07]
						,[CargoReleaseOrderUserDefinedDateTime09]
						,[CargoReleaseOrderUserDefinedDateTime10]
						,[CargoReleaseOrderUserDefinedNumber01]
						,[CargoReleaseOrderUserDefinedNumber02]
						,[CargoReleaseOrderUserDefinedNumber03]
						,[CargoReleaseOrderUserDefinedNumber04]
						,[CargoReleaseOrderUserDefinedNumber05]
						,[CargoReleaseOrderUserDefinedLongText01]
						,[CargoReleaseOrderUserDefinedLongText02]
						,[CargoReleaseOrderUserDefinedLongText03]
						,[CargoReleaseOrderUserDefinedLongText04]
						,[CargoReleaseOrderUserDefinedLongText05]
						,[CargoReleaseOrderUserDefinedText06]
						,[CargoReleaseOrderUserDefinedText07]
						,[CargoReleaseOrderUserDefinedText08]
						,[CargoReleaseOrderUserDefinedText09]
						,[CargoReleaseOrderUserDefinedText10]
						,[CargoReleaseOrderUserDefinedText11]
						,[CargoReleaseOrderUserDefinedText12]
						,[CargoReleaseOrderUserDefinedText13]
						,[CargoReleaseOrderUserDefinedText14]
						,[CargoReleaseOrderUserDefinedText15]
						,[CargoReleaseOrderServiceContractNumber]
						,[CargoReleaseOrderChangesAcceptedDateTime]
						,[CargoReleaseOrderRuleType]
						,[CargoReleaseOrderCreationDataSource]
						,[CargoReleaseOrderChangedDataStorageString]
						,[CountryCode]
						,[CargoReleaseOrderOwnerLogin]
						,[CargoReleaseOrderImportBatch]
						,[CargoReleaseOrderNewEDIPending]
						)
					VALUES (
						Src.[IDCargoReleaseOrder]
						,Src.[CargoReleaseOrderAddDateTime]
						,Src.[CargoReleaseOrderEditDateTime]
						,Src.[CargoReleaseOrderAddUserCode]
						,Src.[CargoReleaseOrderEditUserCode]
						,Src.[SubContextCode]
						,Src.[CargoReleaseOrderConsigneeCode]
						,Src.[CargoReleaseOrderPortOfDischargeCode]
						,Src.[DataEntryDefinitionID]
						,Src.[StatusID]
						,Src.[StatusIDPrevious]
						,Src.[CargoReleaseOrderStatusChangeDateTime]
						,Src.[CargoReleaseOrderNumber]
						,Src.[CargoReleaseOrderCarrierBL]
						,Src.[CargoReleaseOrderFirstCarrierBL]
						,Src.[CargoReleaseOrderCargoReleaseNumber]
						,Src.[CargoReleaseOrderCarrierCode]
						,Src.[CargoReleaseOrderVesselCode]
						,Src.[CargoReleaseOrderVesselName]
						,Src.[CargoReleaseOrderVoyageCode]
						,Src.[CargoReleaseOrderEquipmentNumber]
						,Src.[CargoReleaseOrderEquipmentType]
						,Src.[CargoReleaseOrderEquipmentSize]
						,Src.[CargoReleaseOrderCSNumber]
						,Src.[CargoReleaseOrderDeliveryLocationType]
						,Src.[CargoReleaseOrderTerminalLocationType]
						,Src.[CargoReleaseOrderBLReceivedDateTime]
						,Src.[CargoReleaseOrderEmptyReturn]
						,Src.[CargoReleaseOrderEmptyReturnReference]
						,Src.[CargoReleaseOrderRequestInvoiceDateTime]
						,Src.[CargoReleaseOrderRequestInvoiceContact]
						,Src.[CargoReleaseOrderRequestInvoiceContactEmail]
						,Src.[CargoReleaseOrderInvoiceReceivedDateTime]
						,Src.[CargoReleaseOrderRequestPaymentDateTime]
						,Src.[CargoReleaseOrderRequestPaymentContact]
						,Src.[CargoReleaseOrderRequestPaymentContactEmail]
						,Src.[CargoReleaseOrderRequestReleaseDateTime]
						,Src.[CargoReleaseOrderRequestReleaseContact]
						,Src.[CargoReleaseOrderRequestReleaseContactEmail]
						,Src.[CargoReleaseOrderPaymentCompletedDateTime]
						,Src.[CargoReleaseOrderLandedDateTime]
						,Src.[CargoReleaseOrderComments]
						,Src.[CargoReleaseOrderUserDefinedText01]
						,Src.[CargoReleaseOrderUserDefinedText02]
						,Src.[CargoReleaseOrderUserDefinedText03]
						,Src.[CargoReleaseOrderUserDefinedText04]
						,Src.[CargoReleaseOrderUserDefinedText05]
						,Src.[CargoReleaseOrderCreditLimit]
						,Src.[CargoReleaseOrderCarrierEmail]
						,Src.[CargoReleaseOrderClientReference]
						,Src.[CargoReleaseOrderDocumentStatusDisplayName]
						,Src.[CargoReleaseOrderDocumentStatusDone]
						,Src.[CargoReleaseOrderUserDefinedYesNo01]
						,Src.[CargoReleaseOrderUserDefinedYesNo02]
						,Src.[CargoReleaseOrderUserDefinedYesNo03]
						,Src.[CargoReleaseOrderUserDefinedYesNo04]
						,Src.[CargoReleaseOrderUserDefinedYesNo05]
						,Src.[CargoReleaseOrderUserDefinedDateTime01]
						,Src.[CargoReleaseOrderUserDefinedDateTime02]
						,Src.[CargoReleaseOrderUserDefinedDateTime03]
						,Src.[CargoReleaseOrderUserDefinedDateTime04]
						,Src.[CargoReleaseOrderUserDefinedDateTime05]
						,Src.[CargoReleaseOrderUserDefinedDateTime06]
						,Src.[CargoReleaseOrderUserDefinedDateTime07]
						,Src.[CargoReleaseOrderUserDefinedDateTime09]
						,Src.[CargoReleaseOrderUserDefinedDateTime10]
						,Src.[CargoReleaseOrderUserDefinedNumber01]
						,Src.[CargoReleaseOrderUserDefinedNumber02]
						,Src.[CargoReleaseOrderUserDefinedNumber03]
						,Src.[CargoReleaseOrderUserDefinedNumber04]
						,Src.[CargoReleaseOrderUserDefinedNumber05]
						,Src.[CargoReleaseOrderUserDefinedLongText01]
						,Src.[CargoReleaseOrderUserDefinedLongText02]
						,Src.[CargoReleaseOrderUserDefinedLongText03]
						,Src.[CargoReleaseOrderUserDefinedLongText04]
						,Src.[CargoReleaseOrderUserDefinedLongText05]
						,Src.[CargoReleaseOrderUserDefinedText06]
						,Src.[CargoReleaseOrderUserDefinedText07]
						,Src.[CargoReleaseOrderUserDefinedText08]
						,Src.[CargoReleaseOrderUserDefinedText09]
						,Src.[CargoReleaseOrderUserDefinedText10]
						,Src.[CargoReleaseOrderUserDefinedText11]
						,Src.[CargoReleaseOrderUserDefinedText12]
						,Src.[CargoReleaseOrderUserDefinedText13]
						,Src.[CargoReleaseOrderUserDefinedText14]
						,Src.[CargoReleaseOrderUserDefinedText15]
						,Src.[CargoReleaseOrderServiceContractNumber]
						,Src.[CargoReleaseOrderChangesAcceptedDateTime]
						,Src.[CargoReleaseOrderRuleType]
						,Src.[CargoReleaseOrderCreationDataSource]
						,Src.[CargoReleaseOrderChangedDataStorageString]
						,Src.[CountryCode]
						,Src.[CargoReleaseOrderOwnerLogin]
						,Src.[CargoReleaseOrderImportBatch]
						,Src.[CargoReleaseOrderNewEDIPending]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCargoReleaseOrder] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCargoReleaseOrder] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CargoReleaseOrders Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseOrders Dest WITH (NOLOCK) ON Src.IDCargoReleaseOrder = Dest.IDCargoReleaseOrder
					WHERE Dest.[CargoReleaseOrderEditDateTime] < Src.[CargoReleaseOrderEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CargoReleaseOrderAddDateTime] = Src.[CargoReleaseOrderAddDateTime]
					,Dest.[CargoReleaseOrderEditDateTime] = Src.[CargoReleaseOrderEditDateTime]
					,Dest.[CargoReleaseOrderAddUserCode] = Src.[CargoReleaseOrderAddUserCode]
					,Dest.[CargoReleaseOrderEditUserCode] = Src.[CargoReleaseOrderEditUserCode]
					,Dest.[SubContextCode] = Src.[SubContextCode]
					,Dest.[CargoReleaseOrderConsigneeCode] = Src.[CargoReleaseOrderConsigneeCode]
					,Dest.[CargoReleaseOrderPortOfDischargeCode] = Src.[CargoReleaseOrderPortOfDischargeCode]
					,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
					,Dest.[StatusID] = Src.[StatusID]
					,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
					,Dest.[CargoReleaseOrderStatusChangeDateTime] = Src.[CargoReleaseOrderStatusChangeDateTime]
					,Dest.[CargoReleaseOrderNumber] = Src.[CargoReleaseOrderNumber]
					,Dest.[CargoReleaseOrderCarrierBL] = Src.[CargoReleaseOrderCarrierBL]
					,Dest.[CargoReleaseOrderFirstCarrierBL] = Src.[CargoReleaseOrderFirstCarrierBL]
					,Dest.[CargoReleaseOrderCargoReleaseNumber] = Src.[CargoReleaseOrderCargoReleaseNumber]
					,Dest.[CargoReleaseOrderCarrierCode] = Src.[CargoReleaseOrderCarrierCode]
					,Dest.[CargoReleaseOrderVesselCode] = Src.[CargoReleaseOrderVesselCode]
					,Dest.[CargoReleaseOrderVesselName] = Src.[CargoReleaseOrderVesselName]
					,Dest.[CargoReleaseOrderVoyageCode] = Src.[CargoReleaseOrderVoyageCode]
					,Dest.[CargoReleaseOrderEquipmentNumber] = Src.[CargoReleaseOrderEquipmentNumber]
					,Dest.[CargoReleaseOrderEquipmentType] = Src.[CargoReleaseOrderEquipmentType]
					,Dest.[CargoReleaseOrderEquipmentSize] = Src.[CargoReleaseOrderEquipmentSize]
					,Dest.[CargoReleaseOrderCSNumber] = Src.[CargoReleaseOrderCSNumber]
					,Dest.[CargoReleaseOrderDeliveryLocationType] = Src.[CargoReleaseOrderDeliveryLocationType]
					,Dest.[CargoReleaseOrderTerminalLocationType] = Src.[CargoReleaseOrderTerminalLocationType]
					,Dest.[CargoReleaseOrderBLReceivedDateTime] = Src.[CargoReleaseOrderBLReceivedDateTime]
					,Dest.[CargoReleaseOrderEmptyReturn] = Src.[CargoReleaseOrderEmptyReturn]
					,Dest.[CargoReleaseOrderEmptyReturnReference] = Src.[CargoReleaseOrderEmptyReturnReference]
					,Dest.[CargoReleaseOrderRequestInvoiceDateTime] = Src.[CargoReleaseOrderRequestInvoiceDateTime]
					,Dest.[CargoReleaseOrderRequestInvoiceContact] = Src.[CargoReleaseOrderRequestInvoiceContact]
					,Dest.[CargoReleaseOrderRequestInvoiceContactEmail] = Src.[CargoReleaseOrderRequestInvoiceContactEmail]
					,Dest.[CargoReleaseOrderInvoiceReceivedDateTime] = Src.[CargoReleaseOrderInvoiceReceivedDateTime]
					,Dest.[CargoReleaseOrderRequestPaymentDateTime] = Src.[CargoReleaseOrderRequestPaymentDateTime]
					,Dest.[CargoReleaseOrderRequestPaymentContact] = Src.[CargoReleaseOrderRequestPaymentContact]
					,Dest.[CargoReleaseOrderRequestPaymentContactEmail] = Src.[CargoReleaseOrderRequestPaymentContactEmail]
					,Dest.[CargoReleaseOrderRequestReleaseDateTime] = Src.[CargoReleaseOrderRequestReleaseDateTime]
					,Dest.[CargoReleaseOrderRequestReleaseContact] = Src.[CargoReleaseOrderRequestReleaseContact]
					,Dest.[CargoReleaseOrderRequestReleaseContactEmail] = Src.[CargoReleaseOrderRequestReleaseContactEmail]
					,Dest.[CargoReleaseOrderPaymentCompletedDateTime] = Src.[CargoReleaseOrderPaymentCompletedDateTime]
					,Dest.[CargoReleaseOrderLandedDateTime] = Src.[CargoReleaseOrderLandedDateTime]
					,Dest.[CargoReleaseOrderComments] = Src.[CargoReleaseOrderComments]
					,Dest.[CargoReleaseOrderUserDefinedText01] = Src.[CargoReleaseOrderUserDefinedText01]
					,Dest.[CargoReleaseOrderUserDefinedText02] = Src.[CargoReleaseOrderUserDefinedText02]
					,Dest.[CargoReleaseOrderUserDefinedText03] = Src.[CargoReleaseOrderUserDefinedText03]
					,Dest.[CargoReleaseOrderUserDefinedText04] = Src.[CargoReleaseOrderUserDefinedText04]
					,Dest.[CargoReleaseOrderUserDefinedText05] = Src.[CargoReleaseOrderUserDefinedText05]
					,Dest.[CargoReleaseOrderCreditLimit] = Src.[CargoReleaseOrderCreditLimit]
					,Dest.[CargoReleaseOrderCarrierEmail] = Src.[CargoReleaseOrderCarrierEmail]
					,Dest.[CargoReleaseOrderClientReference] = Src.[CargoReleaseOrderClientReference]
					,Dest.[CargoReleaseOrderDocumentStatusDisplayName] = Src.[CargoReleaseOrderDocumentStatusDisplayName]
					,Dest.[CargoReleaseOrderDocumentStatusDone] = Src.[CargoReleaseOrderDocumentStatusDone]
					,Dest.[CargoReleaseOrderUserDefinedYesNo01] = Src.[CargoReleaseOrderUserDefinedYesNo01]
					,Dest.[CargoReleaseOrderUserDefinedYesNo02] = Src.[CargoReleaseOrderUserDefinedYesNo02]
					,Dest.[CargoReleaseOrderUserDefinedYesNo03] = Src.[CargoReleaseOrderUserDefinedYesNo03]
					,Dest.[CargoReleaseOrderUserDefinedYesNo04] = Src.[CargoReleaseOrderUserDefinedYesNo04]
					,Dest.[CargoReleaseOrderUserDefinedYesNo05] = Src.[CargoReleaseOrderUserDefinedYesNo05]
					,Dest.[CargoReleaseOrderUserDefinedDateTime01] = Src.[CargoReleaseOrderUserDefinedDateTime01]
					,Dest.[CargoReleaseOrderUserDefinedDateTime02] = Src.[CargoReleaseOrderUserDefinedDateTime02]
					,Dest.[CargoReleaseOrderUserDefinedDateTime03] = Src.[CargoReleaseOrderUserDefinedDateTime03]
					,Dest.[CargoReleaseOrderUserDefinedDateTime04] = Src.[CargoReleaseOrderUserDefinedDateTime04]
					,Dest.[CargoReleaseOrderUserDefinedDateTime05] = Src.[CargoReleaseOrderUserDefinedDateTime05]
					,Dest.[CargoReleaseOrderUserDefinedDateTime06] = Src.[CargoReleaseOrderUserDefinedDateTime06]
					,Dest.[CargoReleaseOrderUserDefinedDateTime07] = Src.[CargoReleaseOrderUserDefinedDateTime07]
					,Dest.[CargoReleaseOrderUserDefinedDateTime09] = Src.[CargoReleaseOrderUserDefinedDateTime09]
					,Dest.[CargoReleaseOrderUserDefinedDateTime10] = Src.[CargoReleaseOrderUserDefinedDateTime10]
					,Dest.[CargoReleaseOrderUserDefinedNumber01] = Src.[CargoReleaseOrderUserDefinedNumber01]
					,Dest.[CargoReleaseOrderUserDefinedNumber02] = Src.[CargoReleaseOrderUserDefinedNumber02]
					,Dest.[CargoReleaseOrderUserDefinedNumber03] = Src.[CargoReleaseOrderUserDefinedNumber03]
					,Dest.[CargoReleaseOrderUserDefinedNumber04] = Src.[CargoReleaseOrderUserDefinedNumber04]
					,Dest.[CargoReleaseOrderUserDefinedNumber05] = Src.[CargoReleaseOrderUserDefinedNumber05]
					,Dest.[CargoReleaseOrderUserDefinedLongText01] = Src.[CargoReleaseOrderUserDefinedLongText01]
					,Dest.[CargoReleaseOrderUserDefinedLongText02] = Src.[CargoReleaseOrderUserDefinedLongText02]
					,Dest.[CargoReleaseOrderUserDefinedLongText03] = Src.[CargoReleaseOrderUserDefinedLongText03]
					,Dest.[CargoReleaseOrderUserDefinedLongText04] = Src.[CargoReleaseOrderUserDefinedLongText04]
					,Dest.[CargoReleaseOrderUserDefinedLongText05] = Src.[CargoReleaseOrderUserDefinedLongText05]
					,Dest.[CargoReleaseOrderUserDefinedText06] = Src.[CargoReleaseOrderUserDefinedText06]
					,Dest.[CargoReleaseOrderUserDefinedText07] = Src.[CargoReleaseOrderUserDefinedText07]
					,Dest.[CargoReleaseOrderUserDefinedText08] = Src.[CargoReleaseOrderUserDefinedText08]
					,Dest.[CargoReleaseOrderUserDefinedText09] = Src.[CargoReleaseOrderUserDefinedText09]
					,Dest.[CargoReleaseOrderUserDefinedText10] = Src.[CargoReleaseOrderUserDefinedText10]
					,Dest.[CargoReleaseOrderUserDefinedText11] = Src.[CargoReleaseOrderUserDefinedText11]
					,Dest.[CargoReleaseOrderUserDefinedText12] = Src.[CargoReleaseOrderUserDefinedText12]
					,Dest.[CargoReleaseOrderUserDefinedText13] = Src.[CargoReleaseOrderUserDefinedText13]
					,Dest.[CargoReleaseOrderUserDefinedText14] = Src.[CargoReleaseOrderUserDefinedText14]
					,Dest.[CargoReleaseOrderUserDefinedText15] = Src.[CargoReleaseOrderUserDefinedText15]
					,Dest.[CargoReleaseOrderServiceContractNumber] = Src.[CargoReleaseOrderServiceContractNumber]
					,Dest.[CargoReleaseOrderChangesAcceptedDateTime] = Src.[CargoReleaseOrderChangesAcceptedDateTime]
					,Dest.[CargoReleaseOrderRuleType] = Src.[CargoReleaseOrderRuleType]
					,Dest.[CargoReleaseOrderCreationDataSource] = Src.[CargoReleaseOrderCreationDataSource]
					,Dest.[CargoReleaseOrderChangedDataStorageString] = Src.[CargoReleaseOrderChangedDataStorageString]
					,Dest.[CountryCode] = Src.[CountryCode]
					,Dest.[CargoReleaseOrderOwnerLogin] = Src.[CargoReleaseOrderOwnerLogin]
					,Dest.[CargoReleaseOrderImportBatch] = Src.[CargoReleaseOrderImportBatch]
					,Dest.[CargoReleaseOrderNewEDIPending] = Src.[CargoReleaseOrderNewEDIPending]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCargoReleaseOrder AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCargoReleaseOrder AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CargoReleaseOrders Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseOrders Dest ON Src.IDCargoReleaseOrder = Dest.IDCargoReleaseOrder
				WHERE Dest.[CargoReleaseOrderEditDateTime] < Src.[CargoReleaseOrderEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CargoReleaseOrders Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseOrders Dest WITH (NOLOCK) ON Src.IDCargoReleaseOrder = Dest.IDCargoReleaseOrder
					WHERE Dest.IDCargoReleaseOrder IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseOrders (
					[IDCargoReleaseOrder]
					,[CargoReleaseOrderAddDateTime]
					,[CargoReleaseOrderEditDateTime]
					,[CargoReleaseOrderAddUserCode]
					,[CargoReleaseOrderEditUserCode]
					,[SubContextCode]
					,[CargoReleaseOrderConsigneeCode]
					,[CargoReleaseOrderPortOfDischargeCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[CargoReleaseOrderStatusChangeDateTime]
					,[CargoReleaseOrderNumber]
					,[CargoReleaseOrderCarrierBL]
					,[CargoReleaseOrderFirstCarrierBL]
					,[CargoReleaseOrderCargoReleaseNumber]
					,[CargoReleaseOrderCarrierCode]
					,[CargoReleaseOrderVesselCode]
					,[CargoReleaseOrderVesselName]
					,[CargoReleaseOrderVoyageCode]
					,[CargoReleaseOrderEquipmentNumber]
					,[CargoReleaseOrderEquipmentType]
					,[CargoReleaseOrderEquipmentSize]
					,[CargoReleaseOrderCSNumber]
					,[CargoReleaseOrderDeliveryLocationType]
					,[CargoReleaseOrderTerminalLocationType]
					,[CargoReleaseOrderBLReceivedDateTime]
					,[CargoReleaseOrderEmptyReturn]
					,[CargoReleaseOrderEmptyReturnReference]
					,[CargoReleaseOrderRequestInvoiceDateTime]
					,[CargoReleaseOrderRequestInvoiceContact]
					,[CargoReleaseOrderRequestInvoiceContactEmail]
					,[CargoReleaseOrderInvoiceReceivedDateTime]
					,[CargoReleaseOrderRequestPaymentDateTime]
					,[CargoReleaseOrderRequestPaymentContact]
					,[CargoReleaseOrderRequestPaymentContactEmail]
					,[CargoReleaseOrderRequestReleaseDateTime]
					,[CargoReleaseOrderRequestReleaseContact]
					,[CargoReleaseOrderRequestReleaseContactEmail]
					,[CargoReleaseOrderPaymentCompletedDateTime]
					,[CargoReleaseOrderLandedDateTime]
					,[CargoReleaseOrderComments]
					,[CargoReleaseOrderUserDefinedText01]
					,[CargoReleaseOrderUserDefinedText02]
					,[CargoReleaseOrderUserDefinedText03]
					,[CargoReleaseOrderUserDefinedText04]
					,[CargoReleaseOrderUserDefinedText05]
					,[CargoReleaseOrderCreditLimit]
					,[CargoReleaseOrderCarrierEmail]
					,[CargoReleaseOrderClientReference]
					,[CargoReleaseOrderDocumentStatusDisplayName]
					,[CargoReleaseOrderDocumentStatusDone]
					,[CargoReleaseOrderUserDefinedYesNo01]
					,[CargoReleaseOrderUserDefinedYesNo02]
					,[CargoReleaseOrderUserDefinedYesNo03]
					,[CargoReleaseOrderUserDefinedYesNo04]
					,[CargoReleaseOrderUserDefinedYesNo05]
					,[CargoReleaseOrderUserDefinedDateTime01]
					,[CargoReleaseOrderUserDefinedDateTime02]
					,[CargoReleaseOrderUserDefinedDateTime03]
					,[CargoReleaseOrderUserDefinedDateTime04]
					,[CargoReleaseOrderUserDefinedDateTime05]
					,[CargoReleaseOrderUserDefinedDateTime06]
					,[CargoReleaseOrderUserDefinedDateTime07]
					,[CargoReleaseOrderUserDefinedDateTime09]
					,[CargoReleaseOrderUserDefinedDateTime10]
					,[CargoReleaseOrderUserDefinedNumber01]
					,[CargoReleaseOrderUserDefinedNumber02]
					,[CargoReleaseOrderUserDefinedNumber03]
					,[CargoReleaseOrderUserDefinedNumber04]
					,[CargoReleaseOrderUserDefinedNumber05]
					,[CargoReleaseOrderUserDefinedLongText01]
					,[CargoReleaseOrderUserDefinedLongText02]
					,[CargoReleaseOrderUserDefinedLongText03]
					,[CargoReleaseOrderUserDefinedLongText04]
					,[CargoReleaseOrderUserDefinedLongText05]
					,[CargoReleaseOrderUserDefinedText06]
					,[CargoReleaseOrderUserDefinedText07]
					,[CargoReleaseOrderUserDefinedText08]
					,[CargoReleaseOrderUserDefinedText09]
					,[CargoReleaseOrderUserDefinedText10]
					,[CargoReleaseOrderUserDefinedText11]
					,[CargoReleaseOrderUserDefinedText12]
					,[CargoReleaseOrderUserDefinedText13]
					,[CargoReleaseOrderUserDefinedText14]
					,[CargoReleaseOrderUserDefinedText15]
					,[CargoReleaseOrderServiceContractNumber]
					,[CargoReleaseOrderChangesAcceptedDateTime]
					,[CargoReleaseOrderRuleType]
					,[CargoReleaseOrderCreationDataSource]
					,[CargoReleaseOrderChangedDataStorageString]
					,[CountryCode]
					,[CargoReleaseOrderOwnerLogin]
					,[CargoReleaseOrderImportBatch]
					,[CargoReleaseOrderNewEDIPending]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCargoReleaseOrder AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCargoReleaseOrder]
					,Src.[CargoReleaseOrderAddDateTime]
					,Src.[CargoReleaseOrderEditDateTime]
					,Src.[CargoReleaseOrderAddUserCode]
					,Src.[CargoReleaseOrderEditUserCode]
					,Src.[SubContextCode]
					,Src.[CargoReleaseOrderConsigneeCode]
					,Src.[CargoReleaseOrderPortOfDischargeCode]
					,Src.[DataEntryDefinitionID]
					,Src.[StatusID]
					,Src.[StatusIDPrevious]
					,Src.[CargoReleaseOrderStatusChangeDateTime]
					,Src.[CargoReleaseOrderNumber]
					,Src.[CargoReleaseOrderCarrierBL]
					,Src.[CargoReleaseOrderFirstCarrierBL]
					,Src.[CargoReleaseOrderCargoReleaseNumber]
					,Src.[CargoReleaseOrderCarrierCode]
					,Src.[CargoReleaseOrderVesselCode]
					,Src.[CargoReleaseOrderVesselName]
					,Src.[CargoReleaseOrderVoyageCode]
					,Src.[CargoReleaseOrderEquipmentNumber]
					,Src.[CargoReleaseOrderEquipmentType]
					,Src.[CargoReleaseOrderEquipmentSize]
					,Src.[CargoReleaseOrderCSNumber]
					,Src.[CargoReleaseOrderDeliveryLocationType]
					,Src.[CargoReleaseOrderTerminalLocationType]
					,Src.[CargoReleaseOrderBLReceivedDateTime]
					,Src.[CargoReleaseOrderEmptyReturn]
					,Src.[CargoReleaseOrderEmptyReturnReference]
					,Src.[CargoReleaseOrderRequestInvoiceDateTime]
					,Src.[CargoReleaseOrderRequestInvoiceContact]
					,Src.[CargoReleaseOrderRequestInvoiceContactEmail]
					,Src.[CargoReleaseOrderInvoiceReceivedDateTime]
					,Src.[CargoReleaseOrderRequestPaymentDateTime]
					,Src.[CargoReleaseOrderRequestPaymentContact]
					,Src.[CargoReleaseOrderRequestPaymentContactEmail]
					,Src.[CargoReleaseOrderRequestReleaseDateTime]
					,Src.[CargoReleaseOrderRequestReleaseContact]
					,Src.[CargoReleaseOrderRequestReleaseContactEmail]
					,Src.[CargoReleaseOrderPaymentCompletedDateTime]
					,Src.[CargoReleaseOrderLandedDateTime]
					,Src.[CargoReleaseOrderComments]
					,Src.[CargoReleaseOrderUserDefinedText01]
					,Src.[CargoReleaseOrderUserDefinedText02]
					,Src.[CargoReleaseOrderUserDefinedText03]
					,Src.[CargoReleaseOrderUserDefinedText04]
					,Src.[CargoReleaseOrderUserDefinedText05]
					,Src.[CargoReleaseOrderCreditLimit]
					,Src.[CargoReleaseOrderCarrierEmail]
					,Src.[CargoReleaseOrderClientReference]
					,Src.[CargoReleaseOrderDocumentStatusDisplayName]
					,Src.[CargoReleaseOrderDocumentStatusDone]
					,Src.[CargoReleaseOrderUserDefinedYesNo01]
					,Src.[CargoReleaseOrderUserDefinedYesNo02]
					,Src.[CargoReleaseOrderUserDefinedYesNo03]
					,Src.[CargoReleaseOrderUserDefinedYesNo04]
					,Src.[CargoReleaseOrderUserDefinedYesNo05]
					,Src.[CargoReleaseOrderUserDefinedDateTime01]
					,Src.[CargoReleaseOrderUserDefinedDateTime02]
					,Src.[CargoReleaseOrderUserDefinedDateTime03]
					,Src.[CargoReleaseOrderUserDefinedDateTime04]
					,Src.[CargoReleaseOrderUserDefinedDateTime05]
					,Src.[CargoReleaseOrderUserDefinedDateTime06]
					,Src.[CargoReleaseOrderUserDefinedDateTime07]
					,Src.[CargoReleaseOrderUserDefinedDateTime09]
					,Src.[CargoReleaseOrderUserDefinedDateTime10]
					,Src.[CargoReleaseOrderUserDefinedNumber01]
					,Src.[CargoReleaseOrderUserDefinedNumber02]
					,Src.[CargoReleaseOrderUserDefinedNumber03]
					,Src.[CargoReleaseOrderUserDefinedNumber04]
					,Src.[CargoReleaseOrderUserDefinedNumber05]
					,Src.[CargoReleaseOrderUserDefinedLongText01]
					,Src.[CargoReleaseOrderUserDefinedLongText02]
					,Src.[CargoReleaseOrderUserDefinedLongText03]
					,Src.[CargoReleaseOrderUserDefinedLongText04]
					,Src.[CargoReleaseOrderUserDefinedLongText05]
					,Src.[CargoReleaseOrderUserDefinedText06]
					,Src.[CargoReleaseOrderUserDefinedText07]
					,Src.[CargoReleaseOrderUserDefinedText08]
					,Src.[CargoReleaseOrderUserDefinedText09]
					,Src.[CargoReleaseOrderUserDefinedText10]
					,Src.[CargoReleaseOrderUserDefinedText11]
					,Src.[CargoReleaseOrderUserDefinedText12]
					,Src.[CargoReleaseOrderUserDefinedText13]
					,Src.[CargoReleaseOrderUserDefinedText14]
					,Src.[CargoReleaseOrderUserDefinedText15]
					,Src.[CargoReleaseOrderServiceContractNumber]
					,Src.[CargoReleaseOrderChangesAcceptedDateTime]
					,Src.[CargoReleaseOrderRuleType]
					,Src.[CargoReleaseOrderCreationDataSource]
					,Src.[CargoReleaseOrderChangedDataStorageString]
					,Src.[CountryCode]
					,Src.[CargoReleaseOrderOwnerLogin]
					,Src.[CargoReleaseOrderImportBatch]
					,Src.[CargoReleaseOrderNewEDIPending]
				FROM [dbo].CargoReleaseOrders Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseOrders Dest WITH (NOLOCK) ON Src.IDCargoReleaseOrder = Dest.IDCargoReleaseOrder
				WHERE Dest.IDCargoReleaseOrder IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CargoReleaseOrders: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CargoReleaseOrders` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--CargoReleaseLogs
	SET @CurrentTableName = 'CargoReleaseLogs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseLogs AS Dest
			USING (
				SELECT [IDCargoReleaseLog]
					,[CargoReleaseOrderID]
					,[CargoReleaseLogDateTime]
					,[CargoReleaseLogUserLogin]
					,[StatusID]
					,[CargoReleaseLogEvent]
					,[CargoReleaseLogInfo]
					,[EmailDefinitionID]
					,[CargoReleaseLogEmailID]
					,[CargoReleaseLogTechnicalInfo]
				FROM dbo.CargoReleaseLogs T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDCargoReleaseLog] = Src.[IDCargoReleaseLog])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CargoReleaseOrderID] = Src.[CargoReleaseOrderID]
						,Dest.[CargoReleaseLogDateTime] = Src.[CargoReleaseLogDateTime]
						,Dest.[CargoReleaseLogUserLogin] = Src.[CargoReleaseLogUserLogin]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[CargoReleaseLogEvent] = Src.[CargoReleaseLogEvent]
						,Dest.[CargoReleaseLogInfo] = Src.[CargoReleaseLogInfo]
						,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
						,Dest.[CargoReleaseLogEmailID] = Src.[CargoReleaseLogEmailID]
						,Dest.[CargoReleaseLogTechnicalInfo] = Src.[CargoReleaseLogTechnicalInfo]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCargoReleaseLog]
						,[CargoReleaseOrderID]
						,[CargoReleaseLogDateTime]
						,[CargoReleaseLogUserLogin]
						,[StatusID]
						,[CargoReleaseLogEvent]
						,[CargoReleaseLogInfo]
						,[EmailDefinitionID]
						,[CargoReleaseLogEmailID]
						,[CargoReleaseLogTechnicalInfo]
						)
					VALUES (
						Src.[IDCargoReleaseLog]
						,Src.[CargoReleaseOrderID]
						,Src.[CargoReleaseLogDateTime]
						,Src.[CargoReleaseLogUserLogin]
						,Src.[StatusID]
						,Src.[CargoReleaseLogEvent]
						,Src.[CargoReleaseLogInfo]
						,Src.[EmailDefinitionID]
						,Src.[CargoReleaseLogEmailID]
						,Src.[CargoReleaseLogTechnicalInfo]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCargoReleaseLog] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCargoReleaseLog] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CargoReleaseLogs Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseLogs Dest WITH (NOLOCK) ON Src.IDCargoReleaseLog = Dest.IDCargoReleaseLog
					WHERE Dest.[CargoReleaseLogDateTime] < Src.[CargoReleaseLogDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CargoReleaseOrderID] = Src.[CargoReleaseOrderID]
					,Dest.[CargoReleaseLogDateTime] = Src.[CargoReleaseLogDateTime]
					,Dest.[CargoReleaseLogUserLogin] = Src.[CargoReleaseLogUserLogin]
					,Dest.[StatusID] = Src.[StatusID]
					,Dest.[CargoReleaseLogEvent] = Src.[CargoReleaseLogEvent]
					,Dest.[CargoReleaseLogInfo] = Src.[CargoReleaseLogInfo]
					,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
					,Dest.[CargoReleaseLogEmailID] = Src.[CargoReleaseLogEmailID]
					,Dest.[CargoReleaseLogTechnicalInfo] = Src.[CargoReleaseLogTechnicalInfo]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCargoReleaseLog AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCargoReleaseLog AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CargoReleaseLogs Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseLogs Dest ON Src.IDCargoReleaseLog = Dest.IDCargoReleaseLog
				WHERE Dest.[CargoReleaseLogDateTime] < Src.[CargoReleaseLogDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CargoReleaseLogs Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseLogs Dest WITH (NOLOCK) ON Src.IDCargoReleaseLog = Dest.IDCargoReleaseLog
					WHERE Dest.IDCargoReleaseLog IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseLogs (
					[IDCargoReleaseLog]
					,[CargoReleaseOrderID]
					,[CargoReleaseLogDateTime]
					,[CargoReleaseLogUserLogin]
					,[StatusID]
					,[CargoReleaseLogEvent]
					,[CargoReleaseLogInfo]
					,[EmailDefinitionID]
					,[CargoReleaseLogEmailID]
					,[CargoReleaseLogTechnicalInfo]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCargoReleaseLog AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCargoReleaseLog]
					,Src.[CargoReleaseOrderID]
					,Src.[CargoReleaseLogDateTime]
					,Src.[CargoReleaseLogUserLogin]
					,Src.[StatusID]
					,Src.[CargoReleaseLogEvent]
					,Src.[CargoReleaseLogInfo]
					,Src.[EmailDefinitionID]
					,Src.[CargoReleaseLogEmailID]
					,Src.[CargoReleaseLogTechnicalInfo]
				FROM [dbo].CargoReleaseLogs Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CargoReleaseLogs Dest WITH (NOLOCK) ON Src.IDCargoReleaseLog = Dest.IDCargoReleaseLog
				WHERE Dest.IDCargoReleaseLog IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CargoReleaseLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			DELETE T
			FROM dbo.CargoReleaseLogs T
			WHERE T.[IDCargoReleaseLog] IN (
					SELECT InsertedId
					FROM #tmpTableVal
					
					UNION ALL
					
					SELECT DeletedId
					FROM #tmpTableVal
					)

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CargoReleaseLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----Shipments
	----ManualShipments
	------ManualShipments
	SET @CurrentTableName = 'ManualShipments';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipments AS Dest
			USING (
				SELECT [IDManualShipment]
					,[DataEntryDefinitionID]
					,[TransportStatusID]
					,[TransportStatusIDPrevious]
					,[ManualShipmentStatusChangeDateTime]
					,[ManualShipmentAddDateTime]
					,[ManualShipmentAddUserCode]
					,[ManualShipmentEditDateTime]
					,[ManualShipmentEditUserCode]
					,[ManualShipmentSONumber]
					,[ManualShipmentConsigneeFullCode]
					,[ManualShipmentCarrierCode]
					,[ManualShipmentVesselCode]
					,[ManualShipmentVesselName]
					,[ManualShipmentVoyageCode]
					,[ManualShipmentETD]
					,[ManualShipmentETA]
					,[ManualShipmentPortOfLoadingFullCode]
					,[ManualShipmentPortOfDischargeFullCode]
					,[ManualShipmentRemarks]
					,[ManualShipmentCBLNumber]
					,[ManualShipmentOriginService]
					,[ManualShipmentDestinationService]
					,[ManualShipmentBLNumber]
					,[ManualShipmentCityCode]
					,[ManualShipmentStatus]
					,[ManualShipmentConfirmedDate]
					,[ManualShipmentGoodsReceiptDate]
					,[ManualShipmentShipperSCVCode]
					,[ManualShipmentShipperCountryCode]
					,[ManualShipmentShipperCode]
					,[ManualShipmentShipperName]
					,[ManualShipmentShipperFunc]
					,[ManualShipmentConsigneeSCVCode]
					,[ManualShipmentConsigneeCountryCode]
					,[ManualShipmentConsigneeCode]
					,[ManualShipmentConsigneeName]
					,[ManualShipmentConsigneeFunc]
					,[ManualShipmentOfficeSCVCode]
					,[ManualShipmentOfficeCountryCode]
					,[ManualShipmentOfficeCode]
					,[ManualShipmentOfficeName]
					,[ManualShipmentOfficeFunc]
					,[ManualShipmentManufacturerSCVCode]
					,[ManualShipmentManufacturerCountryCode]
					,[ManualShipmentManufacturerCode]
					,[ManualShipmentManufacturerName]
					,[ManualShipmentManufacturerFunc]
					,[ManualShipmentBuyerSCVCode]
					,[ManualShipmentBuyerCountryCode]
					,[ManualShipmentBuyerCode]
					,[ManualShipmentBuyerName]
					,[ManualShipmentBuyerFunc]
					,[ManualShipmentSellerSCVCode]
					,[ManualShipmentSellerCountryCode]
					,[ManualShipmentSellerCode]
					,[ManualShipmentSellerName]
					,[ManualShipmentSellerFunc]
					,[ManualShipmentShipToLocationSCVCode]
					,[ManualShipmentShipToLocationCountryCode]
					,[ManualShipmentShipToLocationCode]
					,[ManualShipmentShipToLocationName]
					,[ManualShipmentShipToLocationFunc]
					,[ManualShipmentConsolidatorSCVCode]
					,[ManualShipmentConsolidatorCountryCode]
					,[ManualShipmentConsolidatorCode]
					,[ManualShipmentConsolidatorName]
					,[ManualShipmentConsolidatorFunc]
					,[ManualShipmentStuffingLocationSCVCode]
					,[ManualShipmentStuffingLocationCountryCode]
					,[ManualShipmentStuffingLocationCode]
					,[ManualShipmentStuffingLocationName]
					,[ManualShipmentStuffingLocationFunc]
					,[ManualShipmentReceiptPortCountryCode]
					,[ManualShipmentReceiptPortCityCode]
					,[ManualShipmentReceiptPortCityName]
					,[ManualShipmentReceiptPortSiteCode]
					,[ManualShipmentLoadPortCountryCode]
					,[ManualShipmentLoadPortCityCode]
					,[ManualShipmentLoadPortCityName]
					,[ManualShipmentLoadPortSiteCode]
					,[ManualShipmentDischargePortCountryCode]
					,[ManualShipmentDischargePortCityCode]
					,[ManualShipmentDischargePortCityName]
					,[ManualShipmentDischargePortSiteCode]
					,[ManualShipmentPODCountryCode]
					,[ManualShipmentPODCityCode]
					,[ManualShipmentPODCityName]
					,[ManualShipmentPODSiteCode]
					,[ManualShipmentCarrierPODCountryCode]
					,[ManualShipmentCarrierPODCityCode]
					,[ManualShipmentCarrierPODCityName]
					,[ManualShipmentCarrierPODSiteCode]
					,[ManualShipmentOriginCountryCode]
					,[ManualShipmentOriginCityCode]
					,[ManualShipmentOriginCityName]
					,[ManualShipmentOriginSiteCode]
					,[ManualShipmentOriginReceiptDate]
					,[ManualShipmentDestinationCountryCode]
					,[ManualShipmentDestinationCityCode]
					,[ManualShipmentDestinationCityName]
					,[ManualShipmentDestinationSiteCode]
					,[ManualShipmentDestinationDeliveryDate]
					,[ManualShipmentRemark]
					,[ManualShipmentBookDate]
					,[ManualShipmentLastReceivedDate]
					,[ManualShipmentSource]
					,[ManualShipmentReadyForFinancialSystem]
					,[ManualShipmentShippingBillNumber]
					,[ManualShipmentShippingBillDate]
					,[ManualShipmentCommercialInvoiceNumber]
					,[ManualShipmentExportCustomClearanceDate]
					,[ManualShipmentCartedDate]
					,[ManualShipmentBTTDate]
					,[ManualShipmentDocumentsReceivedDate]
					,[ManualShipmentCFSCYCutOffDate]
					,[ManualShipmentTargetDocumentsReceivedDate]
					,[ManualShipmentTargetDocumentDispatchDate]
					,[ManualShipmentFinancialDocumentNumber]
					,[ManualShipmentFinancialInvoiceNumber]
					,[ManualShipmentLastCFSActivityUserCode]
					,[ManualShipmentLastCFSActivityDateTime]
					,[ManualShipmentCFSStatus]
					,[ManualShipmentBLStatus]
					,[ManualShipmentReference]
					,[ManualShipmentServiceContractNumber]
					,[ManualShipmentShipmentTyp1]
					,[ManualShipmentShipmentTyp2]
					,[ManualShipmentSIStatus]
					,[ManualShipmentCBNumber]
					,[ManualShipmentShipperBECode]
					,[ManualShipmentConsigneeBECode]
					,[ManualShipmentOfficeBECode]
					,[ManualShipmentPORCountryCode]
					,[ManualShipmentPORCityCode]
					,[ManualShipmentPORCityName]
					,[ManualShipmentPORSiteCode]
					,[ManualShipmentPODPortCountryCode]
					,[ManualShipmentPODPortCityCode]
					,[ManualShipmentPODPortCityName]
					,[ManualShipmentPODPortSiteCode]
					,[ManualShipmentSubType]
					,[ManualShipmentVOCCCBLNumber1]
					,[ManualShipmentIsCBSplit]
					,[ManualShipmentIsReadyForFinancialSystem]
					,[ManualShipmentFinancialSystemPONumber]
					,[ManualShipmentFirstBLDraftRecvdDate]
					,[ManualShipmentFinalBlDraftRecvdDate]
					,[ManualShipmentCarrierInvoiceNumber]
					,[ManualShipmentFirstCarrierIvoiceRecvdDate]
					,[ManualShipmentFinalCarrierInvoiceRecvdDate]
					,[ManualShipmentCarrierInvoiceProcessDate]
					,[ManualShipmentCBLFirstReleasedDate]
					,[ManualShipmentCBLReleaseDate]
					,[ManualShipmentPhysicalBLReleaseDate]
					,[ManualShipmentSTCCode]
					,[ManualShipmentISFNumber]
					,[ManualShipmentMLOGInitialDate]
					,[ManualShipmentMLOGFirstSentDate]
					,[ManualShipmentISFCurrentStatus]
					,[ManualShipmentAMSStatusAdvisoryError]
					,[ManualShipmentCBPAcceptDate]
					,[ManualShipmentLatestSentDate]
					,[ManualShipmentISFRejectedErrorCode]
					,[ManualShipmentISFRejectedErrorMessage]
					,[ManualShipmentCBPAcceptWWarning]
					,[ManualShipmentCBPRejectedDate]
					,[ManualShipmentFeeder]
					,[ManualShipmentActualDeparture]
					,[ManualShipmentActualArrival]
					,[ManualShipmentPartialFlag]
					,[SubContextCode]
					,[ManualShipmentUserDefinedYesNo01]
					,[ManualShipmentUserDefinedYesNo02]
					,[ManualShipmentUserDefinedYesNo03]
					,[ManualShipmentUserDefinedYesNo04]
					,[ManualShipmentUserDefinedYesNo05]
					,[ManualShipmentUserDefinedDateTime01]
					,[ManualShipmentUserDefinedDateTime02]
					,[ManualShipmentUserDefinedDateTime03]
					,[ManualShipmentUserDefinedDateTime04]
					,[ManualShipmentUserDefinedDateTime05]
					,[ManualShipmentUserDefinedDateTime06]
					,[ManualShipmentUserDefinedDateTime07]
					,[ManualShipmentUserDefinedDateTime09]
					,[ManualShipmentUserDefinedDateTime10]
					,[ManualShipmentUserDefinedNumber01]
					,[ManualShipmentUserDefinedNumber02]
					,[ManualShipmentUserDefinedNumber03]
					,[ManualShipmentUserDefinedNumber04]
					,[ManualShipmentUserDefinedNumber05]
					,[ManualShipmentUserDefinedLongText01]
					,[ManualShipmentUserDefinedLongText02]
					,[ManualShipmentUserDefinedLongText03]
					,[ManualShipmentUserDefinedLongText04]
					,[ManualShipmentUserDefinedLongText05]
					,[ManualShipmentUserDefinedText01]
					,[ManualShipmentUserDefinedText02]
					,[ManualShipmentUserDefinedText03]
					,[ManualShipmentUserDefinedText04]
					,[ManualShipmentUserDefinedText05]
					,[ManualShipmentUserDefinedText06]
					,[ManualShipmentUserDefinedText07]
					,[ManualShipmentUserDefinedText08]
					,[ManualShipmentUserDefinedText09]
					,[ManualShipmentUserDefinedText10]
					,[ManualShipmentUserDefinedText11]
					,[ManualShipmentUserDefinedText12]
					,[ManualShipmentUserDefinedText13]
					,[ManualShipmentUserDefinedText14]
					,[ManualShipmentUserDefinedText15]
					,[ManualShipmentChangesAcceptedDateTime]
					,[ManualShipmentRuleType]
					,[ManualShipmentCreationDataSource]
					,[ManualShipmentChangedDataStorageString]
					,[ManualShipmentExportLicense]
					,[CountryCode]
					,[ManualShipmentOwnerLogin]
					,[ManualShipmentImportBatch]
					,[ManualShipmentNewEDIPending]
				FROM dbo.ManualShipments T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDManualShipment] = Src.[IDManualShipment])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
						,Dest.[TransportStatusID] = Src.[TransportStatusID]
						,Dest.[TransportStatusIDPrevious] = Src.[TransportStatusIDPrevious]
						,Dest.[ManualShipmentStatusChangeDateTime] = Src.[ManualShipmentStatusChangeDateTime]
						,Dest.[ManualShipmentAddDateTime] = Src.[ManualShipmentAddDateTime]
						,Dest.[ManualShipmentAddUserCode] = Src.[ManualShipmentAddUserCode]
						,Dest.[ManualShipmentEditDateTime] = Src.[ManualShipmentEditDateTime]
						,Dest.[ManualShipmentEditUserCode] = Src.[ManualShipmentEditUserCode]
						,Dest.[ManualShipmentSONumber] = Src.[ManualShipmentSONumber]
						,Dest.[ManualShipmentConsigneeFullCode] = Src.[ManualShipmentConsigneeFullCode]
						,Dest.[ManualShipmentCarrierCode] = Src.[ManualShipmentCarrierCode]
						,Dest.[ManualShipmentVesselCode] = Src.[ManualShipmentVesselCode]
						,Dest.[ManualShipmentVesselName] = Src.[ManualShipmentVesselName]
						,Dest.[ManualShipmentVoyageCode] = Src.[ManualShipmentVoyageCode]
						,Dest.[ManualShipmentETD] = Src.[ManualShipmentETD]
						,Dest.[ManualShipmentETA] = Src.[ManualShipmentETA]
						,Dest.[ManualShipmentPortOfLoadingFullCode] = Src.[ManualShipmentPortOfLoadingFullCode]
						,Dest.[ManualShipmentPortOfDischargeFullCode] = Src.[ManualShipmentPortOfDischargeFullCode]
						,Dest.[ManualShipmentRemarks] = Src.[ManualShipmentRemarks]
						,Dest.[ManualShipmentCBLNumber] = Src.[ManualShipmentCBLNumber]
						,Dest.[ManualShipmentOriginService] = Src.[ManualShipmentOriginService]
						,Dest.[ManualShipmentDestinationService] = Src.[ManualShipmentDestinationService]
						,Dest.[ManualShipmentBLNumber] = Src.[ManualShipmentBLNumber]
						,Dest.[ManualShipmentCityCode] = Src.[ManualShipmentCityCode]
						,Dest.[ManualShipmentStatus] = Src.[ManualShipmentStatus]
						,Dest.[ManualShipmentConfirmedDate] = Src.[ManualShipmentConfirmedDate]
						,Dest.[ManualShipmentGoodsReceiptDate] = Src.[ManualShipmentGoodsReceiptDate]
						,Dest.[ManualShipmentShipperSCVCode] = Src.[ManualShipmentShipperSCVCode]
						,Dest.[ManualShipmentShipperCountryCode] = Src.[ManualShipmentShipperCountryCode]
						,Dest.[ManualShipmentShipperCode] = Src.[ManualShipmentShipperCode]
						,Dest.[ManualShipmentShipperName] = Src.[ManualShipmentShipperName]
						,Dest.[ManualShipmentShipperFunc] = Src.[ManualShipmentShipperFunc]
						,Dest.[ManualShipmentConsigneeSCVCode] = Src.[ManualShipmentConsigneeSCVCode]
						,Dest.[ManualShipmentConsigneeCountryCode] = Src.[ManualShipmentConsigneeCountryCode]
						,Dest.[ManualShipmentConsigneeCode] = Src.[ManualShipmentConsigneeCode]
						,Dest.[ManualShipmentConsigneeName] = Src.[ManualShipmentConsigneeName]
						,Dest.[ManualShipmentConsigneeFunc] = Src.[ManualShipmentConsigneeFunc]
						,Dest.[ManualShipmentOfficeSCVCode] = Src.[ManualShipmentOfficeSCVCode]
						,Dest.[ManualShipmentOfficeCountryCode] = Src.[ManualShipmentOfficeCountryCode]
						,Dest.[ManualShipmentOfficeCode] = Src.[ManualShipmentOfficeCode]
						,Dest.[ManualShipmentOfficeName] = Src.[ManualShipmentOfficeName]
						,Dest.[ManualShipmentOfficeFunc] = Src.[ManualShipmentOfficeFunc]
						,Dest.[ManualShipmentManufacturerSCVCode] = Src.[ManualShipmentManufacturerSCVCode]
						,Dest.[ManualShipmentManufacturerCountryCode] = Src.[ManualShipmentManufacturerCountryCode]
						,Dest.[ManualShipmentManufacturerCode] = Src.[ManualShipmentManufacturerCode]
						,Dest.[ManualShipmentManufacturerName] = Src.[ManualShipmentManufacturerName]
						,Dest.[ManualShipmentManufacturerFunc] = Src.[ManualShipmentManufacturerFunc]
						,Dest.[ManualShipmentBuyerSCVCode] = Src.[ManualShipmentBuyerSCVCode]
						,Dest.[ManualShipmentBuyerCountryCode] = Src.[ManualShipmentBuyerCountryCode]
						,Dest.[ManualShipmentBuyerCode] = Src.[ManualShipmentBuyerCode]
						,Dest.[ManualShipmentBuyerName] = Src.[ManualShipmentBuyerName]
						,Dest.[ManualShipmentBuyerFunc] = Src.[ManualShipmentBuyerFunc]
						,Dest.[ManualShipmentSellerSCVCode] = Src.[ManualShipmentSellerSCVCode]
						,Dest.[ManualShipmentSellerCountryCode] = Src.[ManualShipmentSellerCountryCode]
						,Dest.[ManualShipmentSellerCode] = Src.[ManualShipmentSellerCode]
						,Dest.[ManualShipmentSellerName] = Src.[ManualShipmentSellerName]
						,Dest.[ManualShipmentSellerFunc] = Src.[ManualShipmentSellerFunc]
						,Dest.[ManualShipmentShipToLocationSCVCode] = Src.[ManualShipmentShipToLocationSCVCode]
						,Dest.[ManualShipmentShipToLocationCountryCode] = Src.[ManualShipmentShipToLocationCountryCode]
						,Dest.[ManualShipmentShipToLocationCode] = Src.[ManualShipmentShipToLocationCode]
						,Dest.[ManualShipmentShipToLocationName] = Src.[ManualShipmentShipToLocationName]
						,Dest.[ManualShipmentShipToLocationFunc] = Src.[ManualShipmentShipToLocationFunc]
						,Dest.[ManualShipmentConsolidatorSCVCode] = Src.[ManualShipmentConsolidatorSCVCode]
						,Dest.[ManualShipmentConsolidatorCountryCode] = Src.[ManualShipmentConsolidatorCountryCode]
						,Dest.[ManualShipmentConsolidatorCode] = Src.[ManualShipmentConsolidatorCode]
						,Dest.[ManualShipmentConsolidatorName] = Src.[ManualShipmentConsolidatorName]
						,Dest.[ManualShipmentConsolidatorFunc] = Src.[ManualShipmentConsolidatorFunc]
						,Dest.[ManualShipmentStuffingLocationSCVCode] = Src.[ManualShipmentStuffingLocationSCVCode]
						,Dest.[ManualShipmentStuffingLocationCountryCode] = Src.[ManualShipmentStuffingLocationCountryCode]
						,Dest.[ManualShipmentStuffingLocationCode] = Src.[ManualShipmentStuffingLocationCode]
						,Dest.[ManualShipmentStuffingLocationName] = Src.[ManualShipmentStuffingLocationName]
						,Dest.[ManualShipmentStuffingLocationFunc] = Src.[ManualShipmentStuffingLocationFunc]
						,Dest.[ManualShipmentReceiptPortCountryCode] = Src.[ManualShipmentReceiptPortCountryCode]
						,Dest.[ManualShipmentReceiptPortCityCode] = Src.[ManualShipmentReceiptPortCityCode]
						,Dest.[ManualShipmentReceiptPortCityName] = Src.[ManualShipmentReceiptPortCityName]
						,Dest.[ManualShipmentReceiptPortSiteCode] = Src.[ManualShipmentReceiptPortSiteCode]
						,Dest.[ManualShipmentLoadPortCountryCode] = Src.[ManualShipmentLoadPortCountryCode]
						,Dest.[ManualShipmentLoadPortCityCode] = Src.[ManualShipmentLoadPortCityCode]
						,Dest.[ManualShipmentLoadPortCityName] = Src.[ManualShipmentLoadPortCityName]
						,Dest.[ManualShipmentLoadPortSiteCode] = Src.[ManualShipmentLoadPortSiteCode]
						,Dest.[ManualShipmentDischargePortCountryCode] = Src.[ManualShipmentDischargePortCountryCode]
						,Dest.[ManualShipmentDischargePortCityCode] = Src.[ManualShipmentDischargePortCityCode]
						,Dest.[ManualShipmentDischargePortCityName] = Src.[ManualShipmentDischargePortCityName]
						,Dest.[ManualShipmentDischargePortSiteCode] = Src.[ManualShipmentDischargePortSiteCode]
						,Dest.[ManualShipmentPODCountryCode] = Src.[ManualShipmentPODCountryCode]
						,Dest.[ManualShipmentPODCityCode] = Src.[ManualShipmentPODCityCode]
						,Dest.[ManualShipmentPODCityName] = Src.[ManualShipmentPODCityName]
						,Dest.[ManualShipmentPODSiteCode] = Src.[ManualShipmentPODSiteCode]
						,Dest.[ManualShipmentCarrierPODCountryCode] = Src.[ManualShipmentCarrierPODCountryCode]
						,Dest.[ManualShipmentCarrierPODCityCode] = Src.[ManualShipmentCarrierPODCityCode]
						,Dest.[ManualShipmentCarrierPODCityName] = Src.[ManualShipmentCarrierPODCityName]
						,Dest.[ManualShipmentCarrierPODSiteCode] = Src.[ManualShipmentCarrierPODSiteCode]
						,Dest.[ManualShipmentOriginCountryCode] = Src.[ManualShipmentOriginCountryCode]
						,Dest.[ManualShipmentOriginCityCode] = Src.[ManualShipmentOriginCityCode]
						,Dest.[ManualShipmentOriginCityName] = Src.[ManualShipmentOriginCityName]
						,Dest.[ManualShipmentOriginSiteCode] = Src.[ManualShipmentOriginSiteCode]
						,Dest.[ManualShipmentOriginReceiptDate] = Src.[ManualShipmentOriginReceiptDate]
						,Dest.[ManualShipmentDestinationCountryCode] = Src.[ManualShipmentDestinationCountryCode]
						,Dest.[ManualShipmentDestinationCityCode] = Src.[ManualShipmentDestinationCityCode]
						,Dest.[ManualShipmentDestinationCityName] = Src.[ManualShipmentDestinationCityName]
						,Dest.[ManualShipmentDestinationSiteCode] = Src.[ManualShipmentDestinationSiteCode]
						,Dest.[ManualShipmentDestinationDeliveryDate] = Src.[ManualShipmentDestinationDeliveryDate]
						,Dest.[ManualShipmentRemark] = Src.[ManualShipmentRemark]
						,Dest.[ManualShipmentBookDate] = Src.[ManualShipmentBookDate]
						,Dest.[ManualShipmentLastReceivedDate] = Src.[ManualShipmentLastReceivedDate]
						,Dest.[ManualShipmentSource] = Src.[ManualShipmentSource]
						,Dest.[ManualShipmentReadyForFinancialSystem] = Src.[ManualShipmentReadyForFinancialSystem]
						,Dest.[ManualShipmentShippingBillNumber] = Src.[ManualShipmentShippingBillNumber]
						,Dest.[ManualShipmentShippingBillDate] = Src.[ManualShipmentShippingBillDate]
						,Dest.[ManualShipmentCommercialInvoiceNumber] = Src.[ManualShipmentCommercialInvoiceNumber]
						,Dest.[ManualShipmentExportCustomClearanceDate] = Src.[ManualShipmentExportCustomClearanceDate]
						,Dest.[ManualShipmentCartedDate] = Src.[ManualShipmentCartedDate]
						,Dest.[ManualShipmentBTTDate] = Src.[ManualShipmentBTTDate]
						,Dest.[ManualShipmentDocumentsReceivedDate] = Src.[ManualShipmentDocumentsReceivedDate]
						,Dest.[ManualShipmentCFSCYCutOffDate] = Src.[ManualShipmentCFSCYCutOffDate]
						,Dest.[ManualShipmentTargetDocumentsReceivedDate] = Src.[ManualShipmentTargetDocumentsReceivedDate]
						,Dest.[ManualShipmentTargetDocumentDispatchDate] = Src.[ManualShipmentTargetDocumentDispatchDate]
						,Dest.[ManualShipmentFinancialDocumentNumber] = Src.[ManualShipmentFinancialDocumentNumber]
						,Dest.[ManualShipmentFinancialInvoiceNumber] = Src.[ManualShipmentFinancialInvoiceNumber]
						,Dest.[ManualShipmentLastCFSActivityUserCode] = Src.[ManualShipmentLastCFSActivityUserCode]
						,Dest.[ManualShipmentLastCFSActivityDateTime] = Src.[ManualShipmentLastCFSActivityDateTime]
						,Dest.[ManualShipmentCFSStatus] = Src.[ManualShipmentCFSStatus]
						,Dest.[ManualShipmentBLStatus] = Src.[ManualShipmentBLStatus]
						,Dest.[ManualShipmentReference] = Src.[ManualShipmentReference]
						,Dest.[ManualShipmentServiceContractNumber] = Src.[ManualShipmentServiceContractNumber]
						,Dest.[ManualShipmentShipmentTyp1] = Src.[ManualShipmentShipmentTyp1]
						,Dest.[ManualShipmentShipmentTyp2] = Src.[ManualShipmentShipmentTyp2]
						,Dest.[ManualShipmentSIStatus] = Src.[ManualShipmentSIStatus]
						,Dest.[ManualShipmentCBNumber] = Src.[ManualShipmentCBNumber]
						,Dest.[ManualShipmentShipperBECode] = Src.[ManualShipmentShipperBECode]
						,Dest.[ManualShipmentConsigneeBECode] = Src.[ManualShipmentConsigneeBECode]
						,Dest.[ManualShipmentOfficeBECode] = Src.[ManualShipmentOfficeBECode]
						,Dest.[ManualShipmentPORCountryCode] = Src.[ManualShipmentPORCountryCode]
						,Dest.[ManualShipmentPORCityCode] = Src.[ManualShipmentPORCityCode]
						,Dest.[ManualShipmentPORCityName] = Src.[ManualShipmentPORCityName]
						,Dest.[ManualShipmentPORSiteCode] = Src.[ManualShipmentPORSiteCode]
						,Dest.[ManualShipmentPODPortCountryCode] = Src.[ManualShipmentPODPortCountryCode]
						,Dest.[ManualShipmentPODPortCityCode] = Src.[ManualShipmentPODPortCityCode]
						,Dest.[ManualShipmentPODPortCityName] = Src.[ManualShipmentPODPortCityName]
						,Dest.[ManualShipmentPODPortSiteCode] = Src.[ManualShipmentPODPortSiteCode]
						,Dest.[ManualShipmentSubType] = Src.[ManualShipmentSubType]
						,Dest.[ManualShipmentVOCCCBLNumber1] = Src.[ManualShipmentVOCCCBLNumber1]
						,Dest.[ManualShipmentIsCBSplit] = Src.[ManualShipmentIsCBSplit]
						,Dest.[ManualShipmentIsReadyForFinancialSystem] = Src.[ManualShipmentIsReadyForFinancialSystem]
						,Dest.[ManualShipmentFinancialSystemPONumber] = Src.[ManualShipmentFinancialSystemPONumber]
						,Dest.[ManualShipmentFirstBLDraftRecvdDate] = Src.[ManualShipmentFirstBLDraftRecvdDate]
						,Dest.[ManualShipmentFinalBlDraftRecvdDate] = Src.[ManualShipmentFinalBlDraftRecvdDate]
						,Dest.[ManualShipmentCarrierInvoiceNumber] = Src.[ManualShipmentCarrierInvoiceNumber]
						,Dest.[ManualShipmentFirstCarrierIvoiceRecvdDate] = Src.[ManualShipmentFirstCarrierIvoiceRecvdDate]
						,Dest.[ManualShipmentFinalCarrierInvoiceRecvdDate] = Src.[ManualShipmentFinalCarrierInvoiceRecvdDate]
						,Dest.[ManualShipmentCarrierInvoiceProcessDate] = Src.[ManualShipmentCarrierInvoiceProcessDate]
						,Dest.[ManualShipmentCBLFirstReleasedDate] = Src.[ManualShipmentCBLFirstReleasedDate]
						,Dest.[ManualShipmentCBLReleaseDate] = Src.[ManualShipmentCBLReleaseDate]
						,Dest.[ManualShipmentPhysicalBLReleaseDate] = Src.[ManualShipmentPhysicalBLReleaseDate]
						,Dest.[ManualShipmentSTCCode] = Src.[ManualShipmentSTCCode]
						,Dest.[ManualShipmentISFNumber] = Src.[ManualShipmentISFNumber]
						,Dest.[ManualShipmentMLOGInitialDate] = Src.[ManualShipmentMLOGInitialDate]
						,Dest.[ManualShipmentMLOGFirstSentDate] = Src.[ManualShipmentMLOGFirstSentDate]
						,Dest.[ManualShipmentISFCurrentStatus] = Src.[ManualShipmentISFCurrentStatus]
						,Dest.[ManualShipmentAMSStatusAdvisoryError] = Src.[ManualShipmentAMSStatusAdvisoryError]
						,Dest.[ManualShipmentCBPAcceptDate] = Src.[ManualShipmentCBPAcceptDate]
						,Dest.[ManualShipmentLatestSentDate] = Src.[ManualShipmentLatestSentDate]
						,Dest.[ManualShipmentISFRejectedErrorCode] = Src.[ManualShipmentISFRejectedErrorCode]
						,Dest.[ManualShipmentISFRejectedErrorMessage] = Src.[ManualShipmentISFRejectedErrorMessage]
						,Dest.[ManualShipmentCBPAcceptWWarning] = Src.[ManualShipmentCBPAcceptWWarning]
						,Dest.[ManualShipmentCBPRejectedDate] = Src.[ManualShipmentCBPRejectedDate]
						,Dest.[ManualShipmentFeeder] = Src.[ManualShipmentFeeder]
						,Dest.[ManualShipmentActualDeparture] = Src.[ManualShipmentActualDeparture]
						,Dest.[ManualShipmentActualArrival] = Src.[ManualShipmentActualArrival]
						,Dest.[ManualShipmentPartialFlag] = Src.[ManualShipmentPartialFlag]
						,Dest.[SubContextCode] = Src.[SubContextCode]
						,Dest.[ManualShipmentUserDefinedYesNo01] = Src.[ManualShipmentUserDefinedYesNo01]
						,Dest.[ManualShipmentUserDefinedYesNo02] = Src.[ManualShipmentUserDefinedYesNo02]
						,Dest.[ManualShipmentUserDefinedYesNo03] = Src.[ManualShipmentUserDefinedYesNo03]
						,Dest.[ManualShipmentUserDefinedYesNo04] = Src.[ManualShipmentUserDefinedYesNo04]
						,Dest.[ManualShipmentUserDefinedYesNo05] = Src.[ManualShipmentUserDefinedYesNo05]
						,Dest.[ManualShipmentUserDefinedDateTime01] = Src.[ManualShipmentUserDefinedDateTime01]
						,Dest.[ManualShipmentUserDefinedDateTime02] = Src.[ManualShipmentUserDefinedDateTime02]
						,Dest.[ManualShipmentUserDefinedDateTime03] = Src.[ManualShipmentUserDefinedDateTime03]
						,Dest.[ManualShipmentUserDefinedDateTime04] = Src.[ManualShipmentUserDefinedDateTime04]
						,Dest.[ManualShipmentUserDefinedDateTime05] = Src.[ManualShipmentUserDefinedDateTime05]
						,Dest.[ManualShipmentUserDefinedDateTime06] = Src.[ManualShipmentUserDefinedDateTime06]
						,Dest.[ManualShipmentUserDefinedDateTime07] = Src.[ManualShipmentUserDefinedDateTime07]
						,Dest.[ManualShipmentUserDefinedDateTime09] = Src.[ManualShipmentUserDefinedDateTime09]
						,Dest.[ManualShipmentUserDefinedDateTime10] = Src.[ManualShipmentUserDefinedDateTime10]
						,Dest.[ManualShipmentUserDefinedNumber01] = Src.[ManualShipmentUserDefinedNumber01]
						,Dest.[ManualShipmentUserDefinedNumber02] = Src.[ManualShipmentUserDefinedNumber02]
						,Dest.[ManualShipmentUserDefinedNumber03] = Src.[ManualShipmentUserDefinedNumber03]
						,Dest.[ManualShipmentUserDefinedNumber04] = Src.[ManualShipmentUserDefinedNumber04]
						,Dest.[ManualShipmentUserDefinedNumber05] = Src.[ManualShipmentUserDefinedNumber05]
						,Dest.[ManualShipmentUserDefinedLongText01] = Src.[ManualShipmentUserDefinedLongText01]
						,Dest.[ManualShipmentUserDefinedLongText02] = Src.[ManualShipmentUserDefinedLongText02]
						,Dest.[ManualShipmentUserDefinedLongText03] = Src.[ManualShipmentUserDefinedLongText03]
						,Dest.[ManualShipmentUserDefinedLongText04] = Src.[ManualShipmentUserDefinedLongText04]
						,Dest.[ManualShipmentUserDefinedLongText05] = Src.[ManualShipmentUserDefinedLongText05]
						,Dest.[ManualShipmentUserDefinedText01] = Src.[ManualShipmentUserDefinedText01]
						,Dest.[ManualShipmentUserDefinedText02] = Src.[ManualShipmentUserDefinedText02]
						,Dest.[ManualShipmentUserDefinedText03] = Src.[ManualShipmentUserDefinedText03]
						,Dest.[ManualShipmentUserDefinedText04] = Src.[ManualShipmentUserDefinedText04]
						,Dest.[ManualShipmentUserDefinedText05] = Src.[ManualShipmentUserDefinedText05]
						,Dest.[ManualShipmentUserDefinedText06] = Src.[ManualShipmentUserDefinedText06]
						,Dest.[ManualShipmentUserDefinedText07] = Src.[ManualShipmentUserDefinedText07]
						,Dest.[ManualShipmentUserDefinedText08] = Src.[ManualShipmentUserDefinedText08]
						,Dest.[ManualShipmentUserDefinedText09] = Src.[ManualShipmentUserDefinedText09]
						,Dest.[ManualShipmentUserDefinedText10] = Src.[ManualShipmentUserDefinedText10]
						,Dest.[ManualShipmentUserDefinedText11] = Src.[ManualShipmentUserDefinedText11]
						,Dest.[ManualShipmentUserDefinedText12] = Src.[ManualShipmentUserDefinedText12]
						,Dest.[ManualShipmentUserDefinedText13] = Src.[ManualShipmentUserDefinedText13]
						,Dest.[ManualShipmentUserDefinedText14] = Src.[ManualShipmentUserDefinedText14]
						,Dest.[ManualShipmentUserDefinedText15] = Src.[ManualShipmentUserDefinedText15]
						,Dest.[ManualShipmentChangesAcceptedDateTime] = Src.[ManualShipmentChangesAcceptedDateTime]
						,Dest.[ManualShipmentRuleType] = Src.[ManualShipmentRuleType]
						,Dest.[ManualShipmentCreationDataSource] = Src.[ManualShipmentCreationDataSource]
						,Dest.[ManualShipmentChangedDataStorageString] = Src.[ManualShipmentChangedDataStorageString]
						,Dest.[ManualShipmentExportLicense] = Src.[ManualShipmentExportLicense]
						,Dest.[CountryCode] = Src.[CountryCode]
						,Dest.[ManualShipmentOwnerLogin] = Src.[ManualShipmentOwnerLogin]
						,Dest.[ManualShipmentImportBatch] = Src.[ManualShipmentImportBatch]
						,Dest.[ManualShipmentNewEDIPending] = Src.[ManualShipmentNewEDIPending]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDManualShipment]
						,[DataEntryDefinitionID]
						,[TransportStatusID]
						,[TransportStatusIDPrevious]
						,[ManualShipmentStatusChangeDateTime]
						,[ManualShipmentAddDateTime]
						,[ManualShipmentAddUserCode]
						,[ManualShipmentEditDateTime]
						,[ManualShipmentEditUserCode]
						,[ManualShipmentSONumber]
						,[ManualShipmentConsigneeFullCode]
						,[ManualShipmentCarrierCode]
						,[ManualShipmentVesselCode]
						,[ManualShipmentVesselName]
						,[ManualShipmentVoyageCode]
						,[ManualShipmentETD]
						,[ManualShipmentETA]
						,[ManualShipmentPortOfLoadingFullCode]
						,[ManualShipmentPortOfDischargeFullCode]
						,[ManualShipmentRemarks]
						,[ManualShipmentCBLNumber]
						,[ManualShipmentOriginService]
						,[ManualShipmentDestinationService]
						,[ManualShipmentBLNumber]
						,[ManualShipmentCityCode]
						,[ManualShipmentStatus]
						,[ManualShipmentConfirmedDate]
						,[ManualShipmentGoodsReceiptDate]
						,[ManualShipmentShipperSCVCode]
						,[ManualShipmentShipperCountryCode]
						,[ManualShipmentShipperCode]
						,[ManualShipmentShipperName]
						,[ManualShipmentShipperFunc]
						,[ManualShipmentConsigneeSCVCode]
						,[ManualShipmentConsigneeCountryCode]
						,[ManualShipmentConsigneeCode]
						,[ManualShipmentConsigneeName]
						,[ManualShipmentConsigneeFunc]
						,[ManualShipmentOfficeSCVCode]
						,[ManualShipmentOfficeCountryCode]
						,[ManualShipmentOfficeCode]
						,[ManualShipmentOfficeName]
						,[ManualShipmentOfficeFunc]
						,[ManualShipmentManufacturerSCVCode]
						,[ManualShipmentManufacturerCountryCode]
						,[ManualShipmentManufacturerCode]
						,[ManualShipmentManufacturerName]
						,[ManualShipmentManufacturerFunc]
						,[ManualShipmentBuyerSCVCode]
						,[ManualShipmentBuyerCountryCode]
						,[ManualShipmentBuyerCode]
						,[ManualShipmentBuyerName]
						,[ManualShipmentBuyerFunc]
						,[ManualShipmentSellerSCVCode]
						,[ManualShipmentSellerCountryCode]
						,[ManualShipmentSellerCode]
						,[ManualShipmentSellerName]
						,[ManualShipmentSellerFunc]
						,[ManualShipmentShipToLocationSCVCode]
						,[ManualShipmentShipToLocationCountryCode]
						,[ManualShipmentShipToLocationCode]
						,[ManualShipmentShipToLocationName]
						,[ManualShipmentShipToLocationFunc]
						,[ManualShipmentConsolidatorSCVCode]
						,[ManualShipmentConsolidatorCountryCode]
						,[ManualShipmentConsolidatorCode]
						,[ManualShipmentConsolidatorName]
						,[ManualShipmentConsolidatorFunc]
						,[ManualShipmentStuffingLocationSCVCode]
						,[ManualShipmentStuffingLocationCountryCode]
						,[ManualShipmentStuffingLocationCode]
						,[ManualShipmentStuffingLocationName]
						,[ManualShipmentStuffingLocationFunc]
						,[ManualShipmentReceiptPortCountryCode]
						,[ManualShipmentReceiptPortCityCode]
						,[ManualShipmentReceiptPortCityName]
						,[ManualShipmentReceiptPortSiteCode]
						,[ManualShipmentLoadPortCountryCode]
						,[ManualShipmentLoadPortCityCode]
						,[ManualShipmentLoadPortCityName]
						,[ManualShipmentLoadPortSiteCode]
						,[ManualShipmentDischargePortCountryCode]
						,[ManualShipmentDischargePortCityCode]
						,[ManualShipmentDischargePortCityName]
						,[ManualShipmentDischargePortSiteCode]
						,[ManualShipmentPODCountryCode]
						,[ManualShipmentPODCityCode]
						,[ManualShipmentPODCityName]
						,[ManualShipmentPODSiteCode]
						,[ManualShipmentCarrierPODCountryCode]
						,[ManualShipmentCarrierPODCityCode]
						,[ManualShipmentCarrierPODCityName]
						,[ManualShipmentCarrierPODSiteCode]
						,[ManualShipmentOriginCountryCode]
						,[ManualShipmentOriginCityCode]
						,[ManualShipmentOriginCityName]
						,[ManualShipmentOriginSiteCode]
						,[ManualShipmentOriginReceiptDate]
						,[ManualShipmentDestinationCountryCode]
						,[ManualShipmentDestinationCityCode]
						,[ManualShipmentDestinationCityName]
						,[ManualShipmentDestinationSiteCode]
						,[ManualShipmentDestinationDeliveryDate]
						,[ManualShipmentRemark]
						,[ManualShipmentBookDate]
						,[ManualShipmentLastReceivedDate]
						,[ManualShipmentSource]
						,[ManualShipmentReadyForFinancialSystem]
						,[ManualShipmentShippingBillNumber]
						,[ManualShipmentShippingBillDate]
						,[ManualShipmentCommercialInvoiceNumber]
						,[ManualShipmentExportCustomClearanceDate]
						,[ManualShipmentCartedDate]
						,[ManualShipmentBTTDate]
						,[ManualShipmentDocumentsReceivedDate]
						,[ManualShipmentCFSCYCutOffDate]
						,[ManualShipmentTargetDocumentsReceivedDate]
						,[ManualShipmentTargetDocumentDispatchDate]
						,[ManualShipmentFinancialDocumentNumber]
						,[ManualShipmentFinancialInvoiceNumber]
						,[ManualShipmentLastCFSActivityUserCode]
						,[ManualShipmentLastCFSActivityDateTime]
						,[ManualShipmentCFSStatus]
						,[ManualShipmentBLStatus]
						,[ManualShipmentReference]
						,[ManualShipmentServiceContractNumber]
						,[ManualShipmentShipmentTyp1]
						,[ManualShipmentShipmentTyp2]
						,[ManualShipmentSIStatus]
						,[ManualShipmentCBNumber]
						,[ManualShipmentShipperBECode]
						,[ManualShipmentConsigneeBECode]
						,[ManualShipmentOfficeBECode]
						,[ManualShipmentPORCountryCode]
						,[ManualShipmentPORCityCode]
						,[ManualShipmentPORCityName]
						,[ManualShipmentPORSiteCode]
						,[ManualShipmentPODPortCountryCode]
						,[ManualShipmentPODPortCityCode]
						,[ManualShipmentPODPortCityName]
						,[ManualShipmentPODPortSiteCode]
						,[ManualShipmentSubType]
						,[ManualShipmentVOCCCBLNumber1]
						,[ManualShipmentIsCBSplit]
						,[ManualShipmentIsReadyForFinancialSystem]
						,[ManualShipmentFinancialSystemPONumber]
						,[ManualShipmentFirstBLDraftRecvdDate]
						,[ManualShipmentFinalBlDraftRecvdDate]
						,[ManualShipmentCarrierInvoiceNumber]
						,[ManualShipmentFirstCarrierIvoiceRecvdDate]
						,[ManualShipmentFinalCarrierInvoiceRecvdDate]
						,[ManualShipmentCarrierInvoiceProcessDate]
						,[ManualShipmentCBLFirstReleasedDate]
						,[ManualShipmentCBLReleaseDate]
						,[ManualShipmentPhysicalBLReleaseDate]
						,[ManualShipmentSTCCode]
						,[ManualShipmentISFNumber]
						,[ManualShipmentMLOGInitialDate]
						,[ManualShipmentMLOGFirstSentDate]
						,[ManualShipmentISFCurrentStatus]
						,[ManualShipmentAMSStatusAdvisoryError]
						,[ManualShipmentCBPAcceptDate]
						,[ManualShipmentLatestSentDate]
						,[ManualShipmentISFRejectedErrorCode]
						,[ManualShipmentISFRejectedErrorMessage]
						,[ManualShipmentCBPAcceptWWarning]
						,[ManualShipmentCBPRejectedDate]
						,[ManualShipmentFeeder]
						,[ManualShipmentActualDeparture]
						,[ManualShipmentActualArrival]
						,[ManualShipmentPartialFlag]
						,[SubContextCode]
						,[ManualShipmentUserDefinedYesNo01]
						,[ManualShipmentUserDefinedYesNo02]
						,[ManualShipmentUserDefinedYesNo03]
						,[ManualShipmentUserDefinedYesNo04]
						,[ManualShipmentUserDefinedYesNo05]
						,[ManualShipmentUserDefinedDateTime01]
						,[ManualShipmentUserDefinedDateTime02]
						,[ManualShipmentUserDefinedDateTime03]
						,[ManualShipmentUserDefinedDateTime04]
						,[ManualShipmentUserDefinedDateTime05]
						,[ManualShipmentUserDefinedDateTime06]
						,[ManualShipmentUserDefinedDateTime07]
						,[ManualShipmentUserDefinedDateTime09]
						,[ManualShipmentUserDefinedDateTime10]
						,[ManualShipmentUserDefinedNumber01]
						,[ManualShipmentUserDefinedNumber02]
						,[ManualShipmentUserDefinedNumber03]
						,[ManualShipmentUserDefinedNumber04]
						,[ManualShipmentUserDefinedNumber05]
						,[ManualShipmentUserDefinedLongText01]
						,[ManualShipmentUserDefinedLongText02]
						,[ManualShipmentUserDefinedLongText03]
						,[ManualShipmentUserDefinedLongText04]
						,[ManualShipmentUserDefinedLongText05]
						,[ManualShipmentUserDefinedText01]
						,[ManualShipmentUserDefinedText02]
						,[ManualShipmentUserDefinedText03]
						,[ManualShipmentUserDefinedText04]
						,[ManualShipmentUserDefinedText05]
						,[ManualShipmentUserDefinedText06]
						,[ManualShipmentUserDefinedText07]
						,[ManualShipmentUserDefinedText08]
						,[ManualShipmentUserDefinedText09]
						,[ManualShipmentUserDefinedText10]
						,[ManualShipmentUserDefinedText11]
						,[ManualShipmentUserDefinedText12]
						,[ManualShipmentUserDefinedText13]
						,[ManualShipmentUserDefinedText14]
						,[ManualShipmentUserDefinedText15]
						,[ManualShipmentChangesAcceptedDateTime]
						,[ManualShipmentRuleType]
						,[ManualShipmentCreationDataSource]
						,[ManualShipmentChangedDataStorageString]
						,[ManualShipmentExportLicense]
						,[CountryCode]
						,[ManualShipmentOwnerLogin]
						,[ManualShipmentImportBatch]
						,[ManualShipmentNewEDIPending]
						)
					VALUES (
						Src.[IDManualShipment]
						,Src.[DataEntryDefinitionID]
						,Src.[TransportStatusID]
						,Src.[TransportStatusIDPrevious]
						,Src.[ManualShipmentStatusChangeDateTime]
						,Src.[ManualShipmentAddDateTime]
						,Src.[ManualShipmentAddUserCode]
						,Src.[ManualShipmentEditDateTime]
						,Src.[ManualShipmentEditUserCode]
						,Src.[ManualShipmentSONumber]
						,Src.[ManualShipmentConsigneeFullCode]
						,Src.[ManualShipmentCarrierCode]
						,Src.[ManualShipmentVesselCode]
						,Src.[ManualShipmentVesselName]
						,Src.[ManualShipmentVoyageCode]
						,Src.[ManualShipmentETD]
						,Src.[ManualShipmentETA]
						,Src.[ManualShipmentPortOfLoadingFullCode]
						,Src.[ManualShipmentPortOfDischargeFullCode]
						,Src.[ManualShipmentRemarks]
						,Src.[ManualShipmentCBLNumber]
						,Src.[ManualShipmentOriginService]
						,Src.[ManualShipmentDestinationService]
						,Src.[ManualShipmentBLNumber]
						,Src.[ManualShipmentCityCode]
						,Src.[ManualShipmentStatus]
						,Src.[ManualShipmentConfirmedDate]
						,Src.[ManualShipmentGoodsReceiptDate]
						,Src.[ManualShipmentShipperSCVCode]
						,Src.[ManualShipmentShipperCountryCode]
						,Src.[ManualShipmentShipperCode]
						,Src.[ManualShipmentShipperName]
						,Src.[ManualShipmentShipperFunc]
						,Src.[ManualShipmentConsigneeSCVCode]
						,Src.[ManualShipmentConsigneeCountryCode]
						,Src.[ManualShipmentConsigneeCode]
						,Src.[ManualShipmentConsigneeName]
						,Src.[ManualShipmentConsigneeFunc]
						,Src.[ManualShipmentOfficeSCVCode]
						,Src.[ManualShipmentOfficeCountryCode]
						,Src.[ManualShipmentOfficeCode]
						,Src.[ManualShipmentOfficeName]
						,Src.[ManualShipmentOfficeFunc]
						,Src.[ManualShipmentManufacturerSCVCode]
						,Src.[ManualShipmentManufacturerCountryCode]
						,Src.[ManualShipmentManufacturerCode]
						,Src.[ManualShipmentManufacturerName]
						,Src.[ManualShipmentManufacturerFunc]
						,Src.[ManualShipmentBuyerSCVCode]
						,Src.[ManualShipmentBuyerCountryCode]
						,Src.[ManualShipmentBuyerCode]
						,Src.[ManualShipmentBuyerName]
						,Src.[ManualShipmentBuyerFunc]
						,Src.[ManualShipmentSellerSCVCode]
						,Src.[ManualShipmentSellerCountryCode]
						,Src.[ManualShipmentSellerCode]
						,Src.[ManualShipmentSellerName]
						,Src.[ManualShipmentSellerFunc]
						,Src.[ManualShipmentShipToLocationSCVCode]
						,Src.[ManualShipmentShipToLocationCountryCode]
						,Src.[ManualShipmentShipToLocationCode]
						,Src.[ManualShipmentShipToLocationName]
						,Src.[ManualShipmentShipToLocationFunc]
						,Src.[ManualShipmentConsolidatorSCVCode]
						,Src.[ManualShipmentConsolidatorCountryCode]
						,Src.[ManualShipmentConsolidatorCode]
						,Src.[ManualShipmentConsolidatorName]
						,Src.[ManualShipmentConsolidatorFunc]
						,Src.[ManualShipmentStuffingLocationSCVCode]
						,Src.[ManualShipmentStuffingLocationCountryCode]
						,Src.[ManualShipmentStuffingLocationCode]
						,Src.[ManualShipmentStuffingLocationName]
						,Src.[ManualShipmentStuffingLocationFunc]
						,Src.[ManualShipmentReceiptPortCountryCode]
						,Src.[ManualShipmentReceiptPortCityCode]
						,Src.[ManualShipmentReceiptPortCityName]
						,Src.[ManualShipmentReceiptPortSiteCode]
						,Src.[ManualShipmentLoadPortCountryCode]
						,Src.[ManualShipmentLoadPortCityCode]
						,Src.[ManualShipmentLoadPortCityName]
						,Src.[ManualShipmentLoadPortSiteCode]
						,Src.[ManualShipmentDischargePortCountryCode]
						,Src.[ManualShipmentDischargePortCityCode]
						,Src.[ManualShipmentDischargePortCityName]
						,Src.[ManualShipmentDischargePortSiteCode]
						,Src.[ManualShipmentPODCountryCode]
						,Src.[ManualShipmentPODCityCode]
						,Src.[ManualShipmentPODCityName]
						,Src.[ManualShipmentPODSiteCode]
						,Src.[ManualShipmentCarrierPODCountryCode]
						,Src.[ManualShipmentCarrierPODCityCode]
						,Src.[ManualShipmentCarrierPODCityName]
						,Src.[ManualShipmentCarrierPODSiteCode]
						,Src.[ManualShipmentOriginCountryCode]
						,Src.[ManualShipmentOriginCityCode]
						,Src.[ManualShipmentOriginCityName]
						,Src.[ManualShipmentOriginSiteCode]
						,Src.[ManualShipmentOriginReceiptDate]
						,Src.[ManualShipmentDestinationCountryCode]
						,Src.[ManualShipmentDestinationCityCode]
						,Src.[ManualShipmentDestinationCityName]
						,Src.[ManualShipmentDestinationSiteCode]
						,Src.[ManualShipmentDestinationDeliveryDate]
						,Src.[ManualShipmentRemark]
						,Src.[ManualShipmentBookDate]
						,Src.[ManualShipmentLastReceivedDate]
						,Src.[ManualShipmentSource]
						,Src.[ManualShipmentReadyForFinancialSystem]
						,Src.[ManualShipmentShippingBillNumber]
						,Src.[ManualShipmentShippingBillDate]
						,Src.[ManualShipmentCommercialInvoiceNumber]
						,Src.[ManualShipmentExportCustomClearanceDate]
						,Src.[ManualShipmentCartedDate]
						,Src.[ManualShipmentBTTDate]
						,Src.[ManualShipmentDocumentsReceivedDate]
						,Src.[ManualShipmentCFSCYCutOffDate]
						,Src.[ManualShipmentTargetDocumentsReceivedDate]
						,Src.[ManualShipmentTargetDocumentDispatchDate]
						,Src.[ManualShipmentFinancialDocumentNumber]
						,Src.[ManualShipmentFinancialInvoiceNumber]
						,Src.[ManualShipmentLastCFSActivityUserCode]
						,Src.[ManualShipmentLastCFSActivityDateTime]
						,Src.[ManualShipmentCFSStatus]
						,Src.[ManualShipmentBLStatus]
						,Src.[ManualShipmentReference]
						,Src.[ManualShipmentServiceContractNumber]
						,Src.[ManualShipmentShipmentTyp1]
						,Src.[ManualShipmentShipmentTyp2]
						,Src.[ManualShipmentSIStatus]
						,Src.[ManualShipmentCBNumber]
						,Src.[ManualShipmentShipperBECode]
						,Src.[ManualShipmentConsigneeBECode]
						,Src.[ManualShipmentOfficeBECode]
						,Src.[ManualShipmentPORCountryCode]
						,Src.[ManualShipmentPORCityCode]
						,Src.[ManualShipmentPORCityName]
						,Src.[ManualShipmentPORSiteCode]
						,Src.[ManualShipmentPODPortCountryCode]
						,Src.[ManualShipmentPODPortCityCode]
						,Src.[ManualShipmentPODPortCityName]
						,Src.[ManualShipmentPODPortSiteCode]
						,Src.[ManualShipmentSubType]
						,Src.[ManualShipmentVOCCCBLNumber1]
						,Src.[ManualShipmentIsCBSplit]
						,Src.[ManualShipmentIsReadyForFinancialSystem]
						,Src.[ManualShipmentFinancialSystemPONumber]
						,Src.[ManualShipmentFirstBLDraftRecvdDate]
						,Src.[ManualShipmentFinalBlDraftRecvdDate]
						,Src.[ManualShipmentCarrierInvoiceNumber]
						,Src.[ManualShipmentFirstCarrierIvoiceRecvdDate]
						,Src.[ManualShipmentFinalCarrierInvoiceRecvdDate]
						,Src.[ManualShipmentCarrierInvoiceProcessDate]
						,Src.[ManualShipmentCBLFirstReleasedDate]
						,Src.[ManualShipmentCBLReleaseDate]
						,Src.[ManualShipmentPhysicalBLReleaseDate]
						,Src.[ManualShipmentSTCCode]
						,Src.[ManualShipmentISFNumber]
						,Src.[ManualShipmentMLOGInitialDate]
						,Src.[ManualShipmentMLOGFirstSentDate]
						,Src.[ManualShipmentISFCurrentStatus]
						,Src.[ManualShipmentAMSStatusAdvisoryError]
						,Src.[ManualShipmentCBPAcceptDate]
						,Src.[ManualShipmentLatestSentDate]
						,Src.[ManualShipmentISFRejectedErrorCode]
						,Src.[ManualShipmentISFRejectedErrorMessage]
						,Src.[ManualShipmentCBPAcceptWWarning]
						,Src.[ManualShipmentCBPRejectedDate]
						,Src.[ManualShipmentFeeder]
						,Src.[ManualShipmentActualDeparture]
						,Src.[ManualShipmentActualArrival]
						,Src.[ManualShipmentPartialFlag]
						,Src.[SubContextCode]
						,Src.[ManualShipmentUserDefinedYesNo01]
						,Src.[ManualShipmentUserDefinedYesNo02]
						,Src.[ManualShipmentUserDefinedYesNo03]
						,Src.[ManualShipmentUserDefinedYesNo04]
						,Src.[ManualShipmentUserDefinedYesNo05]
						,Src.[ManualShipmentUserDefinedDateTime01]
						,Src.[ManualShipmentUserDefinedDateTime02]
						,Src.[ManualShipmentUserDefinedDateTime03]
						,Src.[ManualShipmentUserDefinedDateTime04]
						,Src.[ManualShipmentUserDefinedDateTime05]
						,Src.[ManualShipmentUserDefinedDateTime06]
						,Src.[ManualShipmentUserDefinedDateTime07]
						,Src.[ManualShipmentUserDefinedDateTime09]
						,Src.[ManualShipmentUserDefinedDateTime10]
						,Src.[ManualShipmentUserDefinedNumber01]
						,Src.[ManualShipmentUserDefinedNumber02]
						,Src.[ManualShipmentUserDefinedNumber03]
						,Src.[ManualShipmentUserDefinedNumber04]
						,Src.[ManualShipmentUserDefinedNumber05]
						,Src.[ManualShipmentUserDefinedLongText01]
						,Src.[ManualShipmentUserDefinedLongText02]
						,Src.[ManualShipmentUserDefinedLongText03]
						,Src.[ManualShipmentUserDefinedLongText04]
						,Src.[ManualShipmentUserDefinedLongText05]
						,Src.[ManualShipmentUserDefinedText01]
						,Src.[ManualShipmentUserDefinedText02]
						,Src.[ManualShipmentUserDefinedText03]
						,Src.[ManualShipmentUserDefinedText04]
						,Src.[ManualShipmentUserDefinedText05]
						,Src.[ManualShipmentUserDefinedText06]
						,Src.[ManualShipmentUserDefinedText07]
						,Src.[ManualShipmentUserDefinedText08]
						,Src.[ManualShipmentUserDefinedText09]
						,Src.[ManualShipmentUserDefinedText10]
						,Src.[ManualShipmentUserDefinedText11]
						,Src.[ManualShipmentUserDefinedText12]
						,Src.[ManualShipmentUserDefinedText13]
						,Src.[ManualShipmentUserDefinedText14]
						,Src.[ManualShipmentUserDefinedText15]
						,Src.[ManualShipmentChangesAcceptedDateTime]
						,Src.[ManualShipmentRuleType]
						,Src.[ManualShipmentCreationDataSource]
						,Src.[ManualShipmentChangedDataStorageString]
						,Src.[ManualShipmentExportLicense]
						,Src.[CountryCode]
						,Src.[ManualShipmentOwnerLogin]
						,Src.[ManualShipmentImportBatch]
						,Src.[ManualShipmentNewEDIPending]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDManualShipment] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDManualShipment] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ManualShipments Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipments Dest WITH (NOLOCK) ON Src.IDManualShipment = Dest.IDManualShipment
					WHERE Dest.[ManualShipmentEditDateTime] < Src.[ManualShipmentEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
					,Dest.[TransportStatusID] = Src.[TransportStatusID]
					,Dest.[TransportStatusIDPrevious] = Src.[TransportStatusIDPrevious]
					,Dest.[ManualShipmentStatusChangeDateTime] = Src.[ManualShipmentStatusChangeDateTime]
					,Dest.[ManualShipmentAddDateTime] = Src.[ManualShipmentAddDateTime]
					,Dest.[ManualShipmentAddUserCode] = Src.[ManualShipmentAddUserCode]
					,Dest.[ManualShipmentEditDateTime] = Src.[ManualShipmentEditDateTime]
					,Dest.[ManualShipmentEditUserCode] = Src.[ManualShipmentEditUserCode]
					,Dest.[ManualShipmentSONumber] = Src.[ManualShipmentSONumber]
					,Dest.[ManualShipmentConsigneeFullCode] = Src.[ManualShipmentConsigneeFullCode]
					,Dest.[ManualShipmentCarrierCode] = Src.[ManualShipmentCarrierCode]
					,Dest.[ManualShipmentVesselCode] = Src.[ManualShipmentVesselCode]
					,Dest.[ManualShipmentVesselName] = Src.[ManualShipmentVesselName]
					,Dest.[ManualShipmentVoyageCode] = Src.[ManualShipmentVoyageCode]
					,Dest.[ManualShipmentETD] = Src.[ManualShipmentETD]
					,Dest.[ManualShipmentETA] = Src.[ManualShipmentETA]
					,Dest.[ManualShipmentPortOfLoadingFullCode] = Src.[ManualShipmentPortOfLoadingFullCode]
					,Dest.[ManualShipmentPortOfDischargeFullCode] = Src.[ManualShipmentPortOfDischargeFullCode]
					,Dest.[ManualShipmentRemarks] = Src.[ManualShipmentRemarks]
					,Dest.[ManualShipmentCBLNumber] = Src.[ManualShipmentCBLNumber]
					,Dest.[ManualShipmentOriginService] = Src.[ManualShipmentOriginService]
					,Dest.[ManualShipmentDestinationService] = Src.[ManualShipmentDestinationService]
					,Dest.[ManualShipmentBLNumber] = Src.[ManualShipmentBLNumber]
					,Dest.[ManualShipmentCityCode] = Src.[ManualShipmentCityCode]
					,Dest.[ManualShipmentStatus] = Src.[ManualShipmentStatus]
					,Dest.[ManualShipmentConfirmedDate] = Src.[ManualShipmentConfirmedDate]
					,Dest.[ManualShipmentGoodsReceiptDate] = Src.[ManualShipmentGoodsReceiptDate]
					,Dest.[ManualShipmentShipperSCVCode] = Src.[ManualShipmentShipperSCVCode]
					,Dest.[ManualShipmentShipperCountryCode] = Src.[ManualShipmentShipperCountryCode]
					,Dest.[ManualShipmentShipperCode] = Src.[ManualShipmentShipperCode]
					,Dest.[ManualShipmentShipperName] = Src.[ManualShipmentShipperName]
					,Dest.[ManualShipmentShipperFunc] = Src.[ManualShipmentShipperFunc]
					,Dest.[ManualShipmentConsigneeSCVCode] = Src.[ManualShipmentConsigneeSCVCode]
					,Dest.[ManualShipmentConsigneeCountryCode] = Src.[ManualShipmentConsigneeCountryCode]
					,Dest.[ManualShipmentConsigneeCode] = Src.[ManualShipmentConsigneeCode]
					,Dest.[ManualShipmentConsigneeName] = Src.[ManualShipmentConsigneeName]
					,Dest.[ManualShipmentConsigneeFunc] = Src.[ManualShipmentConsigneeFunc]
					,Dest.[ManualShipmentOfficeSCVCode] = Src.[ManualShipmentOfficeSCVCode]
					,Dest.[ManualShipmentOfficeCountryCode] = Src.[ManualShipmentOfficeCountryCode]
					,Dest.[ManualShipmentOfficeCode] = Src.[ManualShipmentOfficeCode]
					,Dest.[ManualShipmentOfficeName] = Src.[ManualShipmentOfficeName]
					,Dest.[ManualShipmentOfficeFunc] = Src.[ManualShipmentOfficeFunc]
					,Dest.[ManualShipmentManufacturerSCVCode] = Src.[ManualShipmentManufacturerSCVCode]
					,Dest.[ManualShipmentManufacturerCountryCode] = Src.[ManualShipmentManufacturerCountryCode]
					,Dest.[ManualShipmentManufacturerCode] = Src.[ManualShipmentManufacturerCode]
					,Dest.[ManualShipmentManufacturerName] = Src.[ManualShipmentManufacturerName]
					,Dest.[ManualShipmentManufacturerFunc] = Src.[ManualShipmentManufacturerFunc]
					,Dest.[ManualShipmentBuyerSCVCode] = Src.[ManualShipmentBuyerSCVCode]
					,Dest.[ManualShipmentBuyerCountryCode] = Src.[ManualShipmentBuyerCountryCode]
					,Dest.[ManualShipmentBuyerCode] = Src.[ManualShipmentBuyerCode]
					,Dest.[ManualShipmentBuyerName] = Src.[ManualShipmentBuyerName]
					,Dest.[ManualShipmentBuyerFunc] = Src.[ManualShipmentBuyerFunc]
					,Dest.[ManualShipmentSellerSCVCode] = Src.[ManualShipmentSellerSCVCode]
					,Dest.[ManualShipmentSellerCountryCode] = Src.[ManualShipmentSellerCountryCode]
					,Dest.[ManualShipmentSellerCode] = Src.[ManualShipmentSellerCode]
					,Dest.[ManualShipmentSellerName] = Src.[ManualShipmentSellerName]
					,Dest.[ManualShipmentSellerFunc] = Src.[ManualShipmentSellerFunc]
					,Dest.[ManualShipmentShipToLocationSCVCode] = Src.[ManualShipmentShipToLocationSCVCode]
					,Dest.[ManualShipmentShipToLocationCountryCode] = Src.[ManualShipmentShipToLocationCountryCode]
					,Dest.[ManualShipmentShipToLocationCode] = Src.[ManualShipmentShipToLocationCode]
					,Dest.[ManualShipmentShipToLocationName] = Src.[ManualShipmentShipToLocationName]
					,Dest.[ManualShipmentShipToLocationFunc] = Src.[ManualShipmentShipToLocationFunc]
					,Dest.[ManualShipmentConsolidatorSCVCode] = Src.[ManualShipmentConsolidatorSCVCode]
					,Dest.[ManualShipmentConsolidatorCountryCode] = Src.[ManualShipmentConsolidatorCountryCode]
					,Dest.[ManualShipmentConsolidatorCode] = Src.[ManualShipmentConsolidatorCode]
					,Dest.[ManualShipmentConsolidatorName] = Src.[ManualShipmentConsolidatorName]
					,Dest.[ManualShipmentConsolidatorFunc] = Src.[ManualShipmentConsolidatorFunc]
					,Dest.[ManualShipmentStuffingLocationSCVCode] = Src.[ManualShipmentStuffingLocationSCVCode]
					,Dest.[ManualShipmentStuffingLocationCountryCode] = Src.[ManualShipmentStuffingLocationCountryCode]
					,Dest.[ManualShipmentStuffingLocationCode] = Src.[ManualShipmentStuffingLocationCode]
					,Dest.[ManualShipmentStuffingLocationName] = Src.[ManualShipmentStuffingLocationName]
					,Dest.[ManualShipmentStuffingLocationFunc] = Src.[ManualShipmentStuffingLocationFunc]
					,Dest.[ManualShipmentReceiptPortCountryCode] = Src.[ManualShipmentReceiptPortCountryCode]
					,Dest.[ManualShipmentReceiptPortCityCode] = Src.[ManualShipmentReceiptPortCityCode]
					,Dest.[ManualShipmentReceiptPortCityName] = Src.[ManualShipmentReceiptPortCityName]
					,Dest.[ManualShipmentReceiptPortSiteCode] = Src.[ManualShipmentReceiptPortSiteCode]
					,Dest.[ManualShipmentLoadPortCountryCode] = Src.[ManualShipmentLoadPortCountryCode]
					,Dest.[ManualShipmentLoadPortCityCode] = Src.[ManualShipmentLoadPortCityCode]
					,Dest.[ManualShipmentLoadPortCityName] = Src.[ManualShipmentLoadPortCityName]
					,Dest.[ManualShipmentLoadPortSiteCode] = Src.[ManualShipmentLoadPortSiteCode]
					,Dest.[ManualShipmentDischargePortCountryCode] = Src.[ManualShipmentDischargePortCountryCode]
					,Dest.[ManualShipmentDischargePortCityCode] = Src.[ManualShipmentDischargePortCityCode]
					,Dest.[ManualShipmentDischargePortCityName] = Src.[ManualShipmentDischargePortCityName]
					,Dest.[ManualShipmentDischargePortSiteCode] = Src.[ManualShipmentDischargePortSiteCode]
					,Dest.[ManualShipmentPODCountryCode] = Src.[ManualShipmentPODCountryCode]
					,Dest.[ManualShipmentPODCityCode] = Src.[ManualShipmentPODCityCode]
					,Dest.[ManualShipmentPODCityName] = Src.[ManualShipmentPODCityName]
					,Dest.[ManualShipmentPODSiteCode] = Src.[ManualShipmentPODSiteCode]
					,Dest.[ManualShipmentCarrierPODCountryCode] = Src.[ManualShipmentCarrierPODCountryCode]
					,Dest.[ManualShipmentCarrierPODCityCode] = Src.[ManualShipmentCarrierPODCityCode]
					,Dest.[ManualShipmentCarrierPODCityName] = Src.[ManualShipmentCarrierPODCityName]
					,Dest.[ManualShipmentCarrierPODSiteCode] = Src.[ManualShipmentCarrierPODSiteCode]
					,Dest.[ManualShipmentOriginCountryCode] = Src.[ManualShipmentOriginCountryCode]
					,Dest.[ManualShipmentOriginCityCode] = Src.[ManualShipmentOriginCityCode]
					,Dest.[ManualShipmentOriginCityName] = Src.[ManualShipmentOriginCityName]
					,Dest.[ManualShipmentOriginSiteCode] = Src.[ManualShipmentOriginSiteCode]
					,Dest.[ManualShipmentOriginReceiptDate] = Src.[ManualShipmentOriginReceiptDate]
					,Dest.[ManualShipmentDestinationCountryCode] = Src.[ManualShipmentDestinationCountryCode]
					,Dest.[ManualShipmentDestinationCityCode] = Src.[ManualShipmentDestinationCityCode]
					,Dest.[ManualShipmentDestinationCityName] = Src.[ManualShipmentDestinationCityName]
					,Dest.[ManualShipmentDestinationSiteCode] = Src.[ManualShipmentDestinationSiteCode]
					,Dest.[ManualShipmentDestinationDeliveryDate] = Src.[ManualShipmentDestinationDeliveryDate]
					,Dest.[ManualShipmentRemark] = Src.[ManualShipmentRemark]
					,Dest.[ManualShipmentBookDate] = Src.[ManualShipmentBookDate]
					,Dest.[ManualShipmentLastReceivedDate] = Src.[ManualShipmentLastReceivedDate]
					,Dest.[ManualShipmentSource] = Src.[ManualShipmentSource]
					,Dest.[ManualShipmentReadyForFinancialSystem] = Src.[ManualShipmentReadyForFinancialSystem]
					,Dest.[ManualShipmentShippingBillNumber] = Src.[ManualShipmentShippingBillNumber]
					,Dest.[ManualShipmentShippingBillDate] = Src.[ManualShipmentShippingBillDate]
					,Dest.[ManualShipmentCommercialInvoiceNumber] = Src.[ManualShipmentCommercialInvoiceNumber]
					,Dest.[ManualShipmentExportCustomClearanceDate] = Src.[ManualShipmentExportCustomClearanceDate]
					,Dest.[ManualShipmentCartedDate] = Src.[ManualShipmentCartedDate]
					,Dest.[ManualShipmentBTTDate] = Src.[ManualShipmentBTTDate]
					,Dest.[ManualShipmentDocumentsReceivedDate] = Src.[ManualShipmentDocumentsReceivedDate]
					,Dest.[ManualShipmentCFSCYCutOffDate] = Src.[ManualShipmentCFSCYCutOffDate]
					,Dest.[ManualShipmentTargetDocumentsReceivedDate] = Src.[ManualShipmentTargetDocumentsReceivedDate]
					,Dest.[ManualShipmentTargetDocumentDispatchDate] = Src.[ManualShipmentTargetDocumentDispatchDate]
					,Dest.[ManualShipmentFinancialDocumentNumber] = Src.[ManualShipmentFinancialDocumentNumber]
					,Dest.[ManualShipmentFinancialInvoiceNumber] = Src.[ManualShipmentFinancialInvoiceNumber]
					,Dest.[ManualShipmentLastCFSActivityUserCode] = Src.[ManualShipmentLastCFSActivityUserCode]
					,Dest.[ManualShipmentLastCFSActivityDateTime] = Src.[ManualShipmentLastCFSActivityDateTime]
					,Dest.[ManualShipmentCFSStatus] = Src.[ManualShipmentCFSStatus]
					,Dest.[ManualShipmentBLStatus] = Src.[ManualShipmentBLStatus]
					,Dest.[ManualShipmentReference] = Src.[ManualShipmentReference]
					,Dest.[ManualShipmentServiceContractNumber] = Src.[ManualShipmentServiceContractNumber]
					,Dest.[ManualShipmentShipmentTyp1] = Src.[ManualShipmentShipmentTyp1]
					,Dest.[ManualShipmentShipmentTyp2] = Src.[ManualShipmentShipmentTyp2]
					,Dest.[ManualShipmentSIStatus] = Src.[ManualShipmentSIStatus]
					,Dest.[ManualShipmentCBNumber] = Src.[ManualShipmentCBNumber]
					,Dest.[ManualShipmentShipperBECode] = Src.[ManualShipmentShipperBECode]
					,Dest.[ManualShipmentConsigneeBECode] = Src.[ManualShipmentConsigneeBECode]
					,Dest.[ManualShipmentOfficeBECode] = Src.[ManualShipmentOfficeBECode]
					,Dest.[ManualShipmentPORCountryCode] = Src.[ManualShipmentPORCountryCode]
					,Dest.[ManualShipmentPORCityCode] = Src.[ManualShipmentPORCityCode]
					,Dest.[ManualShipmentPORCityName] = Src.[ManualShipmentPORCityName]
					,Dest.[ManualShipmentPORSiteCode] = Src.[ManualShipmentPORSiteCode]
					,Dest.[ManualShipmentPODPortCountryCode] = Src.[ManualShipmentPODPortCountryCode]
					,Dest.[ManualShipmentPODPortCityCode] = Src.[ManualShipmentPODPortCityCode]
					,Dest.[ManualShipmentPODPortCityName] = Src.[ManualShipmentPODPortCityName]
					,Dest.[ManualShipmentPODPortSiteCode] = Src.[ManualShipmentPODPortSiteCode]
					,Dest.[ManualShipmentSubType] = Src.[ManualShipmentSubType]
					,Dest.[ManualShipmentVOCCCBLNumber1] = Src.[ManualShipmentVOCCCBLNumber1]
					,Dest.[ManualShipmentIsCBSplit] = Src.[ManualShipmentIsCBSplit]
					,Dest.[ManualShipmentIsReadyForFinancialSystem] = Src.[ManualShipmentIsReadyForFinancialSystem]
					,Dest.[ManualShipmentFinancialSystemPONumber] = Src.[ManualShipmentFinancialSystemPONumber]
					,Dest.[ManualShipmentFirstBLDraftRecvdDate] = Src.[ManualShipmentFirstBLDraftRecvdDate]
					,Dest.[ManualShipmentFinalBlDraftRecvdDate] = Src.[ManualShipmentFinalBlDraftRecvdDate]
					,Dest.[ManualShipmentCarrierInvoiceNumber] = Src.[ManualShipmentCarrierInvoiceNumber]
					,Dest.[ManualShipmentFirstCarrierIvoiceRecvdDate] = Src.[ManualShipmentFirstCarrierIvoiceRecvdDate]
					,Dest.[ManualShipmentFinalCarrierInvoiceRecvdDate] = Src.[ManualShipmentFinalCarrierInvoiceRecvdDate]
					,Dest.[ManualShipmentCarrierInvoiceProcessDate] = Src.[ManualShipmentCarrierInvoiceProcessDate]
					,Dest.[ManualShipmentCBLFirstReleasedDate] = Src.[ManualShipmentCBLFirstReleasedDate]
					,Dest.[ManualShipmentCBLReleaseDate] = Src.[ManualShipmentCBLReleaseDate]
					,Dest.[ManualShipmentPhysicalBLReleaseDate] = Src.[ManualShipmentPhysicalBLReleaseDate]
					,Dest.[ManualShipmentSTCCode] = Src.[ManualShipmentSTCCode]
					,Dest.[ManualShipmentISFNumber] = Src.[ManualShipmentISFNumber]
					,Dest.[ManualShipmentMLOGInitialDate] = Src.[ManualShipmentMLOGInitialDate]
					,Dest.[ManualShipmentMLOGFirstSentDate] = Src.[ManualShipmentMLOGFirstSentDate]
					,Dest.[ManualShipmentISFCurrentStatus] = Src.[ManualShipmentISFCurrentStatus]
					,Dest.[ManualShipmentAMSStatusAdvisoryError] = Src.[ManualShipmentAMSStatusAdvisoryError]
					,Dest.[ManualShipmentCBPAcceptDate] = Src.[ManualShipmentCBPAcceptDate]
					,Dest.[ManualShipmentLatestSentDate] = Src.[ManualShipmentLatestSentDate]
					,Dest.[ManualShipmentISFRejectedErrorCode] = Src.[ManualShipmentISFRejectedErrorCode]
					,Dest.[ManualShipmentISFRejectedErrorMessage] = Src.[ManualShipmentISFRejectedErrorMessage]
					,Dest.[ManualShipmentCBPAcceptWWarning] = Src.[ManualShipmentCBPAcceptWWarning]
					,Dest.[ManualShipmentCBPRejectedDate] = Src.[ManualShipmentCBPRejectedDate]
					,Dest.[ManualShipmentFeeder] = Src.[ManualShipmentFeeder]
					,Dest.[ManualShipmentActualDeparture] = Src.[ManualShipmentActualDeparture]
					,Dest.[ManualShipmentActualArrival] = Src.[ManualShipmentActualArrival]
					,Dest.[ManualShipmentPartialFlag] = Src.[ManualShipmentPartialFlag]
					,Dest.[SubContextCode] = Src.[SubContextCode]
					,Dest.[ManualShipmentUserDefinedYesNo01] = Src.[ManualShipmentUserDefinedYesNo01]
					,Dest.[ManualShipmentUserDefinedYesNo02] = Src.[ManualShipmentUserDefinedYesNo02]
					,Dest.[ManualShipmentUserDefinedYesNo03] = Src.[ManualShipmentUserDefinedYesNo03]
					,Dest.[ManualShipmentUserDefinedYesNo04] = Src.[ManualShipmentUserDefinedYesNo04]
					,Dest.[ManualShipmentUserDefinedYesNo05] = Src.[ManualShipmentUserDefinedYesNo05]
					,Dest.[ManualShipmentUserDefinedDateTime01] = Src.[ManualShipmentUserDefinedDateTime01]
					,Dest.[ManualShipmentUserDefinedDateTime02] = Src.[ManualShipmentUserDefinedDateTime02]
					,Dest.[ManualShipmentUserDefinedDateTime03] = Src.[ManualShipmentUserDefinedDateTime03]
					,Dest.[ManualShipmentUserDefinedDateTime04] = Src.[ManualShipmentUserDefinedDateTime04]
					,Dest.[ManualShipmentUserDefinedDateTime05] = Src.[ManualShipmentUserDefinedDateTime05]
					,Dest.[ManualShipmentUserDefinedDateTime06] = Src.[ManualShipmentUserDefinedDateTime06]
					,Dest.[ManualShipmentUserDefinedDateTime07] = Src.[ManualShipmentUserDefinedDateTime07]
					,Dest.[ManualShipmentUserDefinedDateTime09] = Src.[ManualShipmentUserDefinedDateTime09]
					,Dest.[ManualShipmentUserDefinedDateTime10] = Src.[ManualShipmentUserDefinedDateTime10]
					,Dest.[ManualShipmentUserDefinedNumber01] = Src.[ManualShipmentUserDefinedNumber01]
					,Dest.[ManualShipmentUserDefinedNumber02] = Src.[ManualShipmentUserDefinedNumber02]
					,Dest.[ManualShipmentUserDefinedNumber03] = Src.[ManualShipmentUserDefinedNumber03]
					,Dest.[ManualShipmentUserDefinedNumber04] = Src.[ManualShipmentUserDefinedNumber04]
					,Dest.[ManualShipmentUserDefinedNumber05] = Src.[ManualShipmentUserDefinedNumber05]
					,Dest.[ManualShipmentUserDefinedLongText01] = Src.[ManualShipmentUserDefinedLongText01]
					,Dest.[ManualShipmentUserDefinedLongText02] = Src.[ManualShipmentUserDefinedLongText02]
					,Dest.[ManualShipmentUserDefinedLongText03] = Src.[ManualShipmentUserDefinedLongText03]
					,Dest.[ManualShipmentUserDefinedLongText04] = Src.[ManualShipmentUserDefinedLongText04]
					,Dest.[ManualShipmentUserDefinedLongText05] = Src.[ManualShipmentUserDefinedLongText05]
					,Dest.[ManualShipmentUserDefinedText01] = Src.[ManualShipmentUserDefinedText01]
					,Dest.[ManualShipmentUserDefinedText02] = Src.[ManualShipmentUserDefinedText02]
					,Dest.[ManualShipmentUserDefinedText03] = Src.[ManualShipmentUserDefinedText03]
					,Dest.[ManualShipmentUserDefinedText04] = Src.[ManualShipmentUserDefinedText04]
					,Dest.[ManualShipmentUserDefinedText05] = Src.[ManualShipmentUserDefinedText05]
					,Dest.[ManualShipmentUserDefinedText06] = Src.[ManualShipmentUserDefinedText06]
					,Dest.[ManualShipmentUserDefinedText07] = Src.[ManualShipmentUserDefinedText07]
					,Dest.[ManualShipmentUserDefinedText08] = Src.[ManualShipmentUserDefinedText08]
					,Dest.[ManualShipmentUserDefinedText09] = Src.[ManualShipmentUserDefinedText09]
					,Dest.[ManualShipmentUserDefinedText10] = Src.[ManualShipmentUserDefinedText10]
					,Dest.[ManualShipmentUserDefinedText11] = Src.[ManualShipmentUserDefinedText11]
					,Dest.[ManualShipmentUserDefinedText12] = Src.[ManualShipmentUserDefinedText12]
					,Dest.[ManualShipmentUserDefinedText13] = Src.[ManualShipmentUserDefinedText13]
					,Dest.[ManualShipmentUserDefinedText14] = Src.[ManualShipmentUserDefinedText14]
					,Dest.[ManualShipmentUserDefinedText15] = Src.[ManualShipmentUserDefinedText15]
					,Dest.[ManualShipmentChangesAcceptedDateTime] = Src.[ManualShipmentChangesAcceptedDateTime]
					,Dest.[ManualShipmentRuleType] = Src.[ManualShipmentRuleType]
					,Dest.[ManualShipmentCreationDataSource] = Src.[ManualShipmentCreationDataSource]
					,Dest.[ManualShipmentChangedDataStorageString] = Src.[ManualShipmentChangedDataStorageString]
					,Dest.[ManualShipmentExportLicense] = Src.[ManualShipmentExportLicense]
					,Dest.[CountryCode] = Src.[CountryCode]
					,Dest.[ManualShipmentOwnerLogin] = Src.[ManualShipmentOwnerLogin]
					,Dest.[ManualShipmentImportBatch] = Src.[ManualShipmentImportBatch]
					,Dest.[ManualShipmentNewEDIPending] = Src.[ManualShipmentNewEDIPending]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDManualShipment] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDManualShipment] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ManualShipments Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipments Dest ON Src.[IDManualShipment] = Dest.[IDManualShipment]
				WHERE Dest.[ManualShipmentEditDateTime] < Src.[ManualShipmentEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ManualShipments Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipments Dest WITH (NOLOCK) ON Src.[IDManualShipment] = Dest.[IDManualShipment]
					WHERE Dest.[IDManualShipment] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipments (
					[IDManualShipment]
					,[DataEntryDefinitionID]
					,[TransportStatusID]
					,[TransportStatusIDPrevious]
					,[ManualShipmentStatusChangeDateTime]
					,[ManualShipmentAddDateTime]
					,[ManualShipmentAddUserCode]
					,[ManualShipmentEditDateTime]
					,[ManualShipmentEditUserCode]
					,[ManualShipmentSONumber]
					,[ManualShipmentConsigneeFullCode]
					,[ManualShipmentCarrierCode]
					,[ManualShipmentVesselCode]
					,[ManualShipmentVesselName]
					,[ManualShipmentVoyageCode]
					,[ManualShipmentETD]
					,[ManualShipmentETA]
					,[ManualShipmentPortOfLoadingFullCode]
					,[ManualShipmentPortOfDischargeFullCode]
					,[ManualShipmentRemarks]
					,[ManualShipmentCBLNumber]
					,[ManualShipmentOriginService]
					,[ManualShipmentDestinationService]
					,[ManualShipmentBLNumber]
					,[ManualShipmentCityCode]
					,[ManualShipmentStatus]
					,[ManualShipmentConfirmedDate]
					,[ManualShipmentGoodsReceiptDate]
					,[ManualShipmentShipperSCVCode]
					,[ManualShipmentShipperCountryCode]
					,[ManualShipmentShipperCode]
					,[ManualShipmentShipperName]
					,[ManualShipmentShipperFunc]
					,[ManualShipmentConsigneeSCVCode]
					,[ManualShipmentConsigneeCountryCode]
					,[ManualShipmentConsigneeCode]
					,[ManualShipmentConsigneeName]
					,[ManualShipmentConsigneeFunc]
					,[ManualShipmentOfficeSCVCode]
					,[ManualShipmentOfficeCountryCode]
					,[ManualShipmentOfficeCode]
					,[ManualShipmentOfficeName]
					,[ManualShipmentOfficeFunc]
					,[ManualShipmentManufacturerSCVCode]
					,[ManualShipmentManufacturerCountryCode]
					,[ManualShipmentManufacturerCode]
					,[ManualShipmentManufacturerName]
					,[ManualShipmentManufacturerFunc]
					,[ManualShipmentBuyerSCVCode]
					,[ManualShipmentBuyerCountryCode]
					,[ManualShipmentBuyerCode]
					,[ManualShipmentBuyerName]
					,[ManualShipmentBuyerFunc]
					,[ManualShipmentSellerSCVCode]
					,[ManualShipmentSellerCountryCode]
					,[ManualShipmentSellerCode]
					,[ManualShipmentSellerName]
					,[ManualShipmentSellerFunc]
					,[ManualShipmentShipToLocationSCVCode]
					,[ManualShipmentShipToLocationCountryCode]
					,[ManualShipmentShipToLocationCode]
					,[ManualShipmentShipToLocationName]
					,[ManualShipmentShipToLocationFunc]
					,[ManualShipmentConsolidatorSCVCode]
					,[ManualShipmentConsolidatorCountryCode]
					,[ManualShipmentConsolidatorCode]
					,[ManualShipmentConsolidatorName]
					,[ManualShipmentConsolidatorFunc]
					,[ManualShipmentStuffingLocationSCVCode]
					,[ManualShipmentStuffingLocationCountryCode]
					,[ManualShipmentStuffingLocationCode]
					,[ManualShipmentStuffingLocationName]
					,[ManualShipmentStuffingLocationFunc]
					,[ManualShipmentReceiptPortCountryCode]
					,[ManualShipmentReceiptPortCityCode]
					,[ManualShipmentReceiptPortCityName]
					,[ManualShipmentReceiptPortSiteCode]
					,[ManualShipmentLoadPortCountryCode]
					,[ManualShipmentLoadPortCityCode]
					,[ManualShipmentLoadPortCityName]
					,[ManualShipmentLoadPortSiteCode]
					,[ManualShipmentDischargePortCountryCode]
					,[ManualShipmentDischargePortCityCode]
					,[ManualShipmentDischargePortCityName]
					,[ManualShipmentDischargePortSiteCode]
					,[ManualShipmentPODCountryCode]
					,[ManualShipmentPODCityCode]
					,[ManualShipmentPODCityName]
					,[ManualShipmentPODSiteCode]
					,[ManualShipmentCarrierPODCountryCode]
					,[ManualShipmentCarrierPODCityCode]
					,[ManualShipmentCarrierPODCityName]
					,[ManualShipmentCarrierPODSiteCode]
					,[ManualShipmentOriginCountryCode]
					,[ManualShipmentOriginCityCode]
					,[ManualShipmentOriginCityName]
					,[ManualShipmentOriginSiteCode]
					,[ManualShipmentOriginReceiptDate]
					,[ManualShipmentDestinationCountryCode]
					,[ManualShipmentDestinationCityCode]
					,[ManualShipmentDestinationCityName]
					,[ManualShipmentDestinationSiteCode]
					,[ManualShipmentDestinationDeliveryDate]
					,[ManualShipmentRemark]
					,[ManualShipmentBookDate]
					,[ManualShipmentLastReceivedDate]
					,[ManualShipmentSource]
					,[ManualShipmentReadyForFinancialSystem]
					,[ManualShipmentShippingBillNumber]
					,[ManualShipmentShippingBillDate]
					,[ManualShipmentCommercialInvoiceNumber]
					,[ManualShipmentExportCustomClearanceDate]
					,[ManualShipmentCartedDate]
					,[ManualShipmentBTTDate]
					,[ManualShipmentDocumentsReceivedDate]
					,[ManualShipmentCFSCYCutOffDate]
					,[ManualShipmentTargetDocumentsReceivedDate]
					,[ManualShipmentTargetDocumentDispatchDate]
					,[ManualShipmentFinancialDocumentNumber]
					,[ManualShipmentFinancialInvoiceNumber]
					,[ManualShipmentLastCFSActivityUserCode]
					,[ManualShipmentLastCFSActivityDateTime]
					,[ManualShipmentCFSStatus]
					,[ManualShipmentBLStatus]
					,[ManualShipmentReference]
					,[ManualShipmentServiceContractNumber]
					,[ManualShipmentShipmentTyp1]
					,[ManualShipmentShipmentTyp2]
					,[ManualShipmentSIStatus]
					,[ManualShipmentCBNumber]
					,[ManualShipmentShipperBECode]
					,[ManualShipmentConsigneeBECode]
					,[ManualShipmentOfficeBECode]
					,[ManualShipmentPORCountryCode]
					,[ManualShipmentPORCityCode]
					,[ManualShipmentPORCityName]
					,[ManualShipmentPORSiteCode]
					,[ManualShipmentPODPortCountryCode]
					,[ManualShipmentPODPortCityCode]
					,[ManualShipmentPODPortCityName]
					,[ManualShipmentPODPortSiteCode]
					,[ManualShipmentSubType]
					,[ManualShipmentVOCCCBLNumber1]
					,[ManualShipmentIsCBSplit]
					,[ManualShipmentIsReadyForFinancialSystem]
					,[ManualShipmentFinancialSystemPONumber]
					,[ManualShipmentFirstBLDraftRecvdDate]
					,[ManualShipmentFinalBlDraftRecvdDate]
					,[ManualShipmentCarrierInvoiceNumber]
					,[ManualShipmentFirstCarrierIvoiceRecvdDate]
					,[ManualShipmentFinalCarrierInvoiceRecvdDate]
					,[ManualShipmentCarrierInvoiceProcessDate]
					,[ManualShipmentCBLFirstReleasedDate]
					,[ManualShipmentCBLReleaseDate]
					,[ManualShipmentPhysicalBLReleaseDate]
					,[ManualShipmentSTCCode]
					,[ManualShipmentISFNumber]
					,[ManualShipmentMLOGInitialDate]
					,[ManualShipmentMLOGFirstSentDate]
					,[ManualShipmentISFCurrentStatus]
					,[ManualShipmentAMSStatusAdvisoryError]
					,[ManualShipmentCBPAcceptDate]
					,[ManualShipmentLatestSentDate]
					,[ManualShipmentISFRejectedErrorCode]
					,[ManualShipmentISFRejectedErrorMessage]
					,[ManualShipmentCBPAcceptWWarning]
					,[ManualShipmentCBPRejectedDate]
					,[ManualShipmentFeeder]
					,[ManualShipmentActualDeparture]
					,[ManualShipmentActualArrival]
					,[ManualShipmentPartialFlag]
					,[SubContextCode]
					,[ManualShipmentUserDefinedYesNo01]
					,[ManualShipmentUserDefinedYesNo02]
					,[ManualShipmentUserDefinedYesNo03]
					,[ManualShipmentUserDefinedYesNo04]
					,[ManualShipmentUserDefinedYesNo05]
					,[ManualShipmentUserDefinedDateTime01]
					,[ManualShipmentUserDefinedDateTime02]
					,[ManualShipmentUserDefinedDateTime03]
					,[ManualShipmentUserDefinedDateTime04]
					,[ManualShipmentUserDefinedDateTime05]
					,[ManualShipmentUserDefinedDateTime06]
					,[ManualShipmentUserDefinedDateTime07]
					,[ManualShipmentUserDefinedDateTime09]
					,[ManualShipmentUserDefinedDateTime10]
					,[ManualShipmentUserDefinedNumber01]
					,[ManualShipmentUserDefinedNumber02]
					,[ManualShipmentUserDefinedNumber03]
					,[ManualShipmentUserDefinedNumber04]
					,[ManualShipmentUserDefinedNumber05]
					,[ManualShipmentUserDefinedLongText01]
					,[ManualShipmentUserDefinedLongText02]
					,[ManualShipmentUserDefinedLongText03]
					,[ManualShipmentUserDefinedLongText04]
					,[ManualShipmentUserDefinedLongText05]
					,[ManualShipmentUserDefinedText01]
					,[ManualShipmentUserDefinedText02]
					,[ManualShipmentUserDefinedText03]
					,[ManualShipmentUserDefinedText04]
					,[ManualShipmentUserDefinedText05]
					,[ManualShipmentUserDefinedText06]
					,[ManualShipmentUserDefinedText07]
					,[ManualShipmentUserDefinedText08]
					,[ManualShipmentUserDefinedText09]
					,[ManualShipmentUserDefinedText10]
					,[ManualShipmentUserDefinedText11]
					,[ManualShipmentUserDefinedText12]
					,[ManualShipmentUserDefinedText13]
					,[ManualShipmentUserDefinedText14]
					,[ManualShipmentUserDefinedText15]
					,[ManualShipmentChangesAcceptedDateTime]
					,[ManualShipmentRuleType]
					,[ManualShipmentCreationDataSource]
					,[ManualShipmentChangedDataStorageString]
					,[ManualShipmentExportLicense]
					,[CountryCode]
					,[ManualShipmentOwnerLogin]
					,[ManualShipmentImportBatch]
					,[ManualShipmentNewEDIPending]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDManualShipment] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDManualShipment]
					,Src.[DataEntryDefinitionID]
					,Src.[TransportStatusID]
					,Src.[TransportStatusIDPrevious]
					,Src.[ManualShipmentStatusChangeDateTime]
					,Src.[ManualShipmentAddDateTime]
					,Src.[ManualShipmentAddUserCode]
					,Src.[ManualShipmentEditDateTime]
					,Src.[ManualShipmentEditUserCode]
					,Src.[ManualShipmentSONumber]
					,Src.[ManualShipmentConsigneeFullCode]
					,Src.[ManualShipmentCarrierCode]
					,Src.[ManualShipmentVesselCode]
					,Src.[ManualShipmentVesselName]
					,Src.[ManualShipmentVoyageCode]
					,Src.[ManualShipmentETD]
					,Src.[ManualShipmentETA]
					,Src.[ManualShipmentPortOfLoadingFullCode]
					,Src.[ManualShipmentPortOfDischargeFullCode]
					,Src.[ManualShipmentRemarks]
					,Src.[ManualShipmentCBLNumber]
					,Src.[ManualShipmentOriginService]
					,Src.[ManualShipmentDestinationService]
					,Src.[ManualShipmentBLNumber]
					,Src.[ManualShipmentCityCode]
					,Src.[ManualShipmentStatus]
					,Src.[ManualShipmentConfirmedDate]
					,Src.[ManualShipmentGoodsReceiptDate]
					,Src.[ManualShipmentShipperSCVCode]
					,Src.[ManualShipmentShipperCountryCode]
					,Src.[ManualShipmentShipperCode]
					,Src.[ManualShipmentShipperName]
					,Src.[ManualShipmentShipperFunc]
					,Src.[ManualShipmentConsigneeSCVCode]
					,Src.[ManualShipmentConsigneeCountryCode]
					,Src.[ManualShipmentConsigneeCode]
					,Src.[ManualShipmentConsigneeName]
					,Src.[ManualShipmentConsigneeFunc]
					,Src.[ManualShipmentOfficeSCVCode]
					,Src.[ManualShipmentOfficeCountryCode]
					,Src.[ManualShipmentOfficeCode]
					,Src.[ManualShipmentOfficeName]
					,Src.[ManualShipmentOfficeFunc]
					,Src.[ManualShipmentManufacturerSCVCode]
					,Src.[ManualShipmentManufacturerCountryCode]
					,Src.[ManualShipmentManufacturerCode]
					,Src.[ManualShipmentManufacturerName]
					,Src.[ManualShipmentManufacturerFunc]
					,Src.[ManualShipmentBuyerSCVCode]
					,Src.[ManualShipmentBuyerCountryCode]
					,Src.[ManualShipmentBuyerCode]
					,Src.[ManualShipmentBuyerName]
					,Src.[ManualShipmentBuyerFunc]
					,Src.[ManualShipmentSellerSCVCode]
					,Src.[ManualShipmentSellerCountryCode]
					,Src.[ManualShipmentSellerCode]
					,Src.[ManualShipmentSellerName]
					,Src.[ManualShipmentSellerFunc]
					,Src.[ManualShipmentShipToLocationSCVCode]
					,Src.[ManualShipmentShipToLocationCountryCode]
					,Src.[ManualShipmentShipToLocationCode]
					,Src.[ManualShipmentShipToLocationName]
					,Src.[ManualShipmentShipToLocationFunc]
					,Src.[ManualShipmentConsolidatorSCVCode]
					,Src.[ManualShipmentConsolidatorCountryCode]
					,Src.[ManualShipmentConsolidatorCode]
					,Src.[ManualShipmentConsolidatorName]
					,Src.[ManualShipmentConsolidatorFunc]
					,Src.[ManualShipmentStuffingLocationSCVCode]
					,Src.[ManualShipmentStuffingLocationCountryCode]
					,Src.[ManualShipmentStuffingLocationCode]
					,Src.[ManualShipmentStuffingLocationName]
					,Src.[ManualShipmentStuffingLocationFunc]
					,Src.[ManualShipmentReceiptPortCountryCode]
					,Src.[ManualShipmentReceiptPortCityCode]
					,Src.[ManualShipmentReceiptPortCityName]
					,Src.[ManualShipmentReceiptPortSiteCode]
					,Src.[ManualShipmentLoadPortCountryCode]
					,Src.[ManualShipmentLoadPortCityCode]
					,Src.[ManualShipmentLoadPortCityName]
					,Src.[ManualShipmentLoadPortSiteCode]
					,Src.[ManualShipmentDischargePortCountryCode]
					,Src.[ManualShipmentDischargePortCityCode]
					,Src.[ManualShipmentDischargePortCityName]
					,Src.[ManualShipmentDischargePortSiteCode]
					,Src.[ManualShipmentPODCountryCode]
					,Src.[ManualShipmentPODCityCode]
					,Src.[ManualShipmentPODCityName]
					,Src.[ManualShipmentPODSiteCode]
					,Src.[ManualShipmentCarrierPODCountryCode]
					,Src.[ManualShipmentCarrierPODCityCode]
					,Src.[ManualShipmentCarrierPODCityName]
					,Src.[ManualShipmentCarrierPODSiteCode]
					,Src.[ManualShipmentOriginCountryCode]
					,Src.[ManualShipmentOriginCityCode]
					,Src.[ManualShipmentOriginCityName]
					,Src.[ManualShipmentOriginSiteCode]
					,Src.[ManualShipmentOriginReceiptDate]
					,Src.[ManualShipmentDestinationCountryCode]
					,Src.[ManualShipmentDestinationCityCode]
					,Src.[ManualShipmentDestinationCityName]
					,Src.[ManualShipmentDestinationSiteCode]
					,Src.[ManualShipmentDestinationDeliveryDate]
					,Src.[ManualShipmentRemark]
					,Src.[ManualShipmentBookDate]
					,Src.[ManualShipmentLastReceivedDate]
					,Src.[ManualShipmentSource]
					,Src.[ManualShipmentReadyForFinancialSystem]
					,Src.[ManualShipmentShippingBillNumber]
					,Src.[ManualShipmentShippingBillDate]
					,Src.[ManualShipmentCommercialInvoiceNumber]
					,Src.[ManualShipmentExportCustomClearanceDate]
					,Src.[ManualShipmentCartedDate]
					,Src.[ManualShipmentBTTDate]
					,Src.[ManualShipmentDocumentsReceivedDate]
					,Src.[ManualShipmentCFSCYCutOffDate]
					,Src.[ManualShipmentTargetDocumentsReceivedDate]
					,Src.[ManualShipmentTargetDocumentDispatchDate]
					,Src.[ManualShipmentFinancialDocumentNumber]
					,Src.[ManualShipmentFinancialInvoiceNumber]
					,Src.[ManualShipmentLastCFSActivityUserCode]
					,Src.[ManualShipmentLastCFSActivityDateTime]
					,Src.[ManualShipmentCFSStatus]
					,Src.[ManualShipmentBLStatus]
					,Src.[ManualShipmentReference]
					,Src.[ManualShipmentServiceContractNumber]
					,Src.[ManualShipmentShipmentTyp1]
					,Src.[ManualShipmentShipmentTyp2]
					,Src.[ManualShipmentSIStatus]
					,Src.[ManualShipmentCBNumber]
					,Src.[ManualShipmentShipperBECode]
					,Src.[ManualShipmentConsigneeBECode]
					,Src.[ManualShipmentOfficeBECode]
					,Src.[ManualShipmentPORCountryCode]
					,Src.[ManualShipmentPORCityCode]
					,Src.[ManualShipmentPORCityName]
					,Src.[ManualShipmentPORSiteCode]
					,Src.[ManualShipmentPODPortCountryCode]
					,Src.[ManualShipmentPODPortCityCode]
					,Src.[ManualShipmentPODPortCityName]
					,Src.[ManualShipmentPODPortSiteCode]
					,Src.[ManualShipmentSubType]
					,Src.[ManualShipmentVOCCCBLNumber1]
					,Src.[ManualShipmentIsCBSplit]
					,Src.[ManualShipmentIsReadyForFinancialSystem]
					,Src.[ManualShipmentFinancialSystemPONumber]
					,Src.[ManualShipmentFirstBLDraftRecvdDate]
					,Src.[ManualShipmentFinalBlDraftRecvdDate]
					,Src.[ManualShipmentCarrierInvoiceNumber]
					,Src.[ManualShipmentFirstCarrierIvoiceRecvdDate]
					,Src.[ManualShipmentFinalCarrierInvoiceRecvdDate]
					,Src.[ManualShipmentCarrierInvoiceProcessDate]
					,Src.[ManualShipmentCBLFirstReleasedDate]
					,Src.[ManualShipmentCBLReleaseDate]
					,Src.[ManualShipmentPhysicalBLReleaseDate]
					,Src.[ManualShipmentSTCCode]
					,Src.[ManualShipmentISFNumber]
					,Src.[ManualShipmentMLOGInitialDate]
					,Src.[ManualShipmentMLOGFirstSentDate]
					,Src.[ManualShipmentISFCurrentStatus]
					,Src.[ManualShipmentAMSStatusAdvisoryError]
					,Src.[ManualShipmentCBPAcceptDate]
					,Src.[ManualShipmentLatestSentDate]
					,Src.[ManualShipmentISFRejectedErrorCode]
					,Src.[ManualShipmentISFRejectedErrorMessage]
					,Src.[ManualShipmentCBPAcceptWWarning]
					,Src.[ManualShipmentCBPRejectedDate]
					,Src.[ManualShipmentFeeder]
					,Src.[ManualShipmentActualDeparture]
					,Src.[ManualShipmentActualArrival]
					,Src.[ManualShipmentPartialFlag]
					,Src.[SubContextCode]
					,Src.[ManualShipmentUserDefinedYesNo01]
					,Src.[ManualShipmentUserDefinedYesNo02]
					,Src.[ManualShipmentUserDefinedYesNo03]
					,Src.[ManualShipmentUserDefinedYesNo04]
					,Src.[ManualShipmentUserDefinedYesNo05]
					,Src.[ManualShipmentUserDefinedDateTime01]
					,Src.[ManualShipmentUserDefinedDateTime02]
					,Src.[ManualShipmentUserDefinedDateTime03]
					,Src.[ManualShipmentUserDefinedDateTime04]
					,Src.[ManualShipmentUserDefinedDateTime05]
					,Src.[ManualShipmentUserDefinedDateTime06]
					,Src.[ManualShipmentUserDefinedDateTime07]
					,Src.[ManualShipmentUserDefinedDateTime09]
					,Src.[ManualShipmentUserDefinedDateTime10]
					,Src.[ManualShipmentUserDefinedNumber01]
					,Src.[ManualShipmentUserDefinedNumber02]
					,Src.[ManualShipmentUserDefinedNumber03]
					,Src.[ManualShipmentUserDefinedNumber04]
					,Src.[ManualShipmentUserDefinedNumber05]
					,Src.[ManualShipmentUserDefinedLongText01]
					,Src.[ManualShipmentUserDefinedLongText02]
					,Src.[ManualShipmentUserDefinedLongText03]
					,Src.[ManualShipmentUserDefinedLongText04]
					,Src.[ManualShipmentUserDefinedLongText05]
					,Src.[ManualShipmentUserDefinedText01]
					,Src.[ManualShipmentUserDefinedText02]
					,Src.[ManualShipmentUserDefinedText03]
					,Src.[ManualShipmentUserDefinedText04]
					,Src.[ManualShipmentUserDefinedText05]
					,Src.[ManualShipmentUserDefinedText06]
					,Src.[ManualShipmentUserDefinedText07]
					,Src.[ManualShipmentUserDefinedText08]
					,Src.[ManualShipmentUserDefinedText09]
					,Src.[ManualShipmentUserDefinedText10]
					,Src.[ManualShipmentUserDefinedText11]
					,Src.[ManualShipmentUserDefinedText12]
					,Src.[ManualShipmentUserDefinedText13]
					,Src.[ManualShipmentUserDefinedText14]
					,Src.[ManualShipmentUserDefinedText15]
					,Src.[ManualShipmentChangesAcceptedDateTime]
					,Src.[ManualShipmentRuleType]
					,Src.[ManualShipmentCreationDataSource]
					,Src.[ManualShipmentChangedDataStorageString]
					,Src.[ManualShipmentExportLicense]
					,Src.[CountryCode]
					,Src.[ManualShipmentOwnerLogin]
					,Src.[ManualShipmentImportBatch]
					,Src.[ManualShipmentNewEDIPending]
				FROM [dbo].ManualShipments Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipments Dest WITH (NOLOCK) ON Src.[IDManualShipment] = Dest.[IDManualShipment]
				WHERE Dest.[IDManualShipment] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ManualShipments: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ManualShipments` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------ManualShipmentDetails
	SET @CurrentTableName = 'ManualShipmentDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentDetails AS Dest
			USING (
				SELECT [IDManualShipmentDetail]
					,[ManualShipmentID]
					,[ManualShipmentDetailAddDateTime]
					,[ManualShipmentDetailAddUserCode]
					,[ManualShipmentDetailEditDateTime]
					,[ManualShipmentDetailEditUserCode]
					,[ManualShipmentDetailContainerCode]
					,[ManualShipmentDetailContainerType]
					,[ManualShipmentDetailContainerSize]
					,[ManualShipmentDetailSealNumber]
					,[ManualShipmentDetailCSNumber]
					,[ManualShipmentDetailSequence]
					,[ManualShipmentDetailContainerSubstituteSize]
					,[ManualShipmentDetailContainerSubstituteType]
					,[ManualShipmentDetailCSETD]
					,[ManualShipmentDetailCSETA]
					,[ManualShipmentDetailStuffingDate]
					,[ManualShipmentDetailCompletedDate]
					,[ManualShipmentDetailASNSubmittedDate]
					,[ManualShipmentDetailCSType]
					,[ManualShipmentDetailControlNumber]
					,[ManualShipmentDetailOriginPortCountryCode]
					,[ManualShipmentDetailOriginPortCityCode]
					,[ManualShipmentDetailOriginPortCityName]
					,[ManualShipmentDetailOriginPortSiteCode]
					,[ManualShipmentDetailDestinationPortCountryCode]
					,[ManualShipmentDetailDestinationPortCityCode]
					,[ManualShipmentDetailDestinationPortCityName]
					,[ManualShipmentDetailDestinationPortSiteCode]
					,[ManualShipmentDetailHubPortCountryCode]
					,[ManualShipmentDetailHubPortCityCode]
					,[ManualShipmentDetailHubPortCityName]
					,[ManualShipmentDetailHubPortSiteCode]
					,[ManualShipmentDetailSealNumber1]
					,[ManualShipmentDetailSealNumber2]
					,[ManualShipmentDetailSealNumber3]
					,[ManualShipmentDetailServiceType1]
					,[ManualShipmentDetailServiceType2]
					,[ManualShipmentDetailOTIFlag]
					,[ManualShipmentDetailMCCFlag]
					,[ManualShipmentDetailBusinessProcessType]
					,[ManualShipmentDetailIELFlag]
					,[ManualShipmentDetailSourceID]
				FROM dbo.ManualShipmentDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDManualShipmentDetail] = Src.[IDManualShipmentDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ManualShipmentID] = Src.[ManualShipmentID]
						,Dest.[ManualShipmentDetailAddDateTime] = Src.[ManualShipmentDetailAddDateTime]
						,Dest.[ManualShipmentDetailAddUserCode] = Src.[ManualShipmentDetailAddUserCode]
						,Dest.[ManualShipmentDetailEditDateTime] = Src.[ManualShipmentDetailEditDateTime]
						,Dest.[ManualShipmentDetailEditUserCode] = Src.[ManualShipmentDetailEditUserCode]
						,Dest.[ManualShipmentDetailContainerCode] = Src.[ManualShipmentDetailContainerCode]
						,Dest.[ManualShipmentDetailContainerType] = Src.[ManualShipmentDetailContainerType]
						,Dest.[ManualShipmentDetailContainerSize] = Src.[ManualShipmentDetailContainerSize]
						,Dest.[ManualShipmentDetailSealNumber] = Src.[ManualShipmentDetailSealNumber]
						,Dest.[ManualShipmentDetailCSNumber] = Src.[ManualShipmentDetailCSNumber]
						,Dest.[ManualShipmentDetailSequence] = Src.[ManualShipmentDetailSequence]
						,Dest.[ManualShipmentDetailContainerSubstituteSize] = Src.[ManualShipmentDetailContainerSubstituteSize]
						,Dest.[ManualShipmentDetailContainerSubstituteType] = Src.[ManualShipmentDetailContainerSubstituteType]
						,Dest.[ManualShipmentDetailCSETD] = Src.[ManualShipmentDetailCSETD]
						,Dest.[ManualShipmentDetailCSETA] = Src.[ManualShipmentDetailCSETA]
						,Dest.[ManualShipmentDetailStuffingDate] = Src.[ManualShipmentDetailStuffingDate]
						,Dest.[ManualShipmentDetailCompletedDate] = Src.[ManualShipmentDetailCompletedDate]
						,Dest.[ManualShipmentDetailASNSubmittedDate] = Src.[ManualShipmentDetailASNSubmittedDate]
						,Dest.[ManualShipmentDetailCSType] = Src.[ManualShipmentDetailCSType]
						,Dest.[ManualShipmentDetailControlNumber] = Src.[ManualShipmentDetailControlNumber]
						,Dest.[ManualShipmentDetailOriginPortCountryCode] = Src.[ManualShipmentDetailOriginPortCountryCode]
						,Dest.[ManualShipmentDetailOriginPortCityCode] = Src.[ManualShipmentDetailOriginPortCityCode]
						,Dest.[ManualShipmentDetailOriginPortCityName] = Src.[ManualShipmentDetailOriginPortCityName]
						,Dest.[ManualShipmentDetailOriginPortSiteCode] = Src.[ManualShipmentDetailOriginPortSiteCode]
						,Dest.[ManualShipmentDetailDestinationPortCountryCode] = Src.[ManualShipmentDetailDestinationPortCountryCode]
						,Dest.[ManualShipmentDetailDestinationPortCityCode] = Src.[ManualShipmentDetailDestinationPortCityCode]
						,Dest.[ManualShipmentDetailDestinationPortCityName] = Src.[ManualShipmentDetailDestinationPortCityName]
						,Dest.[ManualShipmentDetailDestinationPortSiteCode] = Src.[ManualShipmentDetailDestinationPortSiteCode]
						,Dest.[ManualShipmentDetailHubPortCountryCode] = Src.[ManualShipmentDetailHubPortCountryCode]
						,Dest.[ManualShipmentDetailHubPortCityCode] = Src.[ManualShipmentDetailHubPortCityCode]
						,Dest.[ManualShipmentDetailHubPortCityName] = Src.[ManualShipmentDetailHubPortCityName]
						,Dest.[ManualShipmentDetailHubPortSiteCode] = Src.[ManualShipmentDetailHubPortSiteCode]
						,Dest.[ManualShipmentDetailSealNumber1] = Src.[ManualShipmentDetailSealNumber1]
						,Dest.[ManualShipmentDetailSealNumber2] = Src.[ManualShipmentDetailSealNumber2]
						,Dest.[ManualShipmentDetailSealNumber3] = Src.[ManualShipmentDetailSealNumber3]
						,Dest.[ManualShipmentDetailServiceType1] = Src.[ManualShipmentDetailServiceType1]
						,Dest.[ManualShipmentDetailServiceType2] = Src.[ManualShipmentDetailServiceType2]
						,Dest.[ManualShipmentDetailOTIFlag] = Src.[ManualShipmentDetailOTIFlag]
						,Dest.[ManualShipmentDetailMCCFlag] = Src.[ManualShipmentDetailMCCFlag]
						,Dest.[ManualShipmentDetailBusinessProcessType] = Src.[ManualShipmentDetailBusinessProcessType]
						,Dest.[ManualShipmentDetailIELFlag] = Src.[ManualShipmentDetailIELFlag]
						,Dest.[ManualShipmentDetailSourceID] = Src.[ManualShipmentDetailSourceID]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDManualShipmentDetail]
						,[ManualShipmentID]
						,[ManualShipmentDetailAddDateTime]
						,[ManualShipmentDetailAddUserCode]
						,[ManualShipmentDetailEditDateTime]
						,[ManualShipmentDetailEditUserCode]
						,[ManualShipmentDetailContainerCode]
						,[ManualShipmentDetailContainerType]
						,[ManualShipmentDetailContainerSize]
						,[ManualShipmentDetailSealNumber]
						,[ManualShipmentDetailCSNumber]
						,[ManualShipmentDetailSequence]
						,[ManualShipmentDetailContainerSubstituteSize]
						,[ManualShipmentDetailContainerSubstituteType]
						,[ManualShipmentDetailCSETD]
						,[ManualShipmentDetailCSETA]
						,[ManualShipmentDetailStuffingDate]
						,[ManualShipmentDetailCompletedDate]
						,[ManualShipmentDetailASNSubmittedDate]
						,[ManualShipmentDetailCSType]
						,[ManualShipmentDetailControlNumber]
						,[ManualShipmentDetailOriginPortCountryCode]
						,[ManualShipmentDetailOriginPortCityCode]
						,[ManualShipmentDetailOriginPortCityName]
						,[ManualShipmentDetailOriginPortSiteCode]
						,[ManualShipmentDetailDestinationPortCountryCode]
						,[ManualShipmentDetailDestinationPortCityCode]
						,[ManualShipmentDetailDestinationPortCityName]
						,[ManualShipmentDetailDestinationPortSiteCode]
						,[ManualShipmentDetailHubPortCountryCode]
						,[ManualShipmentDetailHubPortCityCode]
						,[ManualShipmentDetailHubPortCityName]
						,[ManualShipmentDetailHubPortSiteCode]
						,[ManualShipmentDetailSealNumber1]
						,[ManualShipmentDetailSealNumber2]
						,[ManualShipmentDetailSealNumber3]
						,[ManualShipmentDetailServiceType1]
						,[ManualShipmentDetailServiceType2]
						,[ManualShipmentDetailOTIFlag]
						,[ManualShipmentDetailMCCFlag]
						,[ManualShipmentDetailBusinessProcessType]
						,[ManualShipmentDetailIELFlag]
						,[ManualShipmentDetailSourceID]
						)
					VALUES (
						Src.[IDManualShipmentDetail]
						,Src.[ManualShipmentID]
						,Src.[ManualShipmentDetailAddDateTime]
						,Src.[ManualShipmentDetailAddUserCode]
						,Src.[ManualShipmentDetailEditDateTime]
						,Src.[ManualShipmentDetailEditUserCode]
						,Src.[ManualShipmentDetailContainerCode]
						,Src.[ManualShipmentDetailContainerType]
						,Src.[ManualShipmentDetailContainerSize]
						,Src.[ManualShipmentDetailSealNumber]
						,Src.[ManualShipmentDetailCSNumber]
						,Src.[ManualShipmentDetailSequence]
						,Src.[ManualShipmentDetailContainerSubstituteSize]
						,Src.[ManualShipmentDetailContainerSubstituteType]
						,Src.[ManualShipmentDetailCSETD]
						,Src.[ManualShipmentDetailCSETA]
						,Src.[ManualShipmentDetailStuffingDate]
						,Src.[ManualShipmentDetailCompletedDate]
						,Src.[ManualShipmentDetailASNSubmittedDate]
						,Src.[ManualShipmentDetailCSType]
						,Src.[ManualShipmentDetailControlNumber]
						,Src.[ManualShipmentDetailOriginPortCountryCode]
						,Src.[ManualShipmentDetailOriginPortCityCode]
						,Src.[ManualShipmentDetailOriginPortCityName]
						,Src.[ManualShipmentDetailOriginPortSiteCode]
						,Src.[ManualShipmentDetailDestinationPortCountryCode]
						,Src.[ManualShipmentDetailDestinationPortCityCode]
						,Src.[ManualShipmentDetailDestinationPortCityName]
						,Src.[ManualShipmentDetailDestinationPortSiteCode]
						,Src.[ManualShipmentDetailHubPortCountryCode]
						,Src.[ManualShipmentDetailHubPortCityCode]
						,Src.[ManualShipmentDetailHubPortCityName]
						,Src.[ManualShipmentDetailHubPortSiteCode]
						,Src.[ManualShipmentDetailSealNumber1]
						,Src.[ManualShipmentDetailSealNumber2]
						,Src.[ManualShipmentDetailSealNumber3]
						,Src.[ManualShipmentDetailServiceType1]
						,Src.[ManualShipmentDetailServiceType2]
						,Src.[ManualShipmentDetailOTIFlag]
						,Src.[ManualShipmentDetailMCCFlag]
						,Src.[ManualShipmentDetailBusinessProcessType]
						,Src.[ManualShipmentDetailIELFlag]
						,Src.[ManualShipmentDetailSourceID]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDManualShipmentDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDManualShipmentDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ManualShipmentDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentDetails Dest WITH (NOLOCK) ON Src.IDManualShipmentDetail = Dest.IDManualShipmentDetail
					WHERE Dest.[ManualShipmentDetailEditDateTime] < Src.[ManualShipmentDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ManualShipmentID] = Src.[ManualShipmentID]
					,Dest.[ManualShipmentDetailAddDateTime] = Src.[ManualShipmentDetailAddDateTime]
					,Dest.[ManualShipmentDetailAddUserCode] = Src.[ManualShipmentDetailAddUserCode]
					,Dest.[ManualShipmentDetailEditDateTime] = Src.[ManualShipmentDetailEditDateTime]
					,Dest.[ManualShipmentDetailEditUserCode] = Src.[ManualShipmentDetailEditUserCode]
					,Dest.[ManualShipmentDetailContainerCode] = Src.[ManualShipmentDetailContainerCode]
					,Dest.[ManualShipmentDetailContainerType] = Src.[ManualShipmentDetailContainerType]
					,Dest.[ManualShipmentDetailContainerSize] = Src.[ManualShipmentDetailContainerSize]
					,Dest.[ManualShipmentDetailSealNumber] = Src.[ManualShipmentDetailSealNumber]
					,Dest.[ManualShipmentDetailCSNumber] = Src.[ManualShipmentDetailCSNumber]
					,Dest.[ManualShipmentDetailSequence] = Src.[ManualShipmentDetailSequence]
					,Dest.[ManualShipmentDetailContainerSubstituteSize] = Src.[ManualShipmentDetailContainerSubstituteSize]
					,Dest.[ManualShipmentDetailContainerSubstituteType] = Src.[ManualShipmentDetailContainerSubstituteType]
					,Dest.[ManualShipmentDetailCSETD] = Src.[ManualShipmentDetailCSETD]
					,Dest.[ManualShipmentDetailCSETA] = Src.[ManualShipmentDetailCSETA]
					,Dest.[ManualShipmentDetailStuffingDate] = Src.[ManualShipmentDetailStuffingDate]
					,Dest.[ManualShipmentDetailCompletedDate] = Src.[ManualShipmentDetailCompletedDate]
					,Dest.[ManualShipmentDetailASNSubmittedDate] = Src.[ManualShipmentDetailASNSubmittedDate]
					,Dest.[ManualShipmentDetailCSType] = Src.[ManualShipmentDetailCSType]
					,Dest.[ManualShipmentDetailControlNumber] = Src.[ManualShipmentDetailControlNumber]
					,Dest.[ManualShipmentDetailOriginPortCountryCode] = Src.[ManualShipmentDetailOriginPortCountryCode]
					,Dest.[ManualShipmentDetailOriginPortCityCode] = Src.[ManualShipmentDetailOriginPortCityCode]
					,Dest.[ManualShipmentDetailOriginPortCityName] = Src.[ManualShipmentDetailOriginPortCityName]
					,Dest.[ManualShipmentDetailOriginPortSiteCode] = Src.[ManualShipmentDetailOriginPortSiteCode]
					,Dest.[ManualShipmentDetailDestinationPortCountryCode] = Src.[ManualShipmentDetailDestinationPortCountryCode]
					,Dest.[ManualShipmentDetailDestinationPortCityCode] = Src.[ManualShipmentDetailDestinationPortCityCode]
					,Dest.[ManualShipmentDetailDestinationPortCityName] = Src.[ManualShipmentDetailDestinationPortCityName]
					,Dest.[ManualShipmentDetailDestinationPortSiteCode] = Src.[ManualShipmentDetailDestinationPortSiteCode]
					,Dest.[ManualShipmentDetailHubPortCountryCode] = Src.[ManualShipmentDetailHubPortCountryCode]
					,Dest.[ManualShipmentDetailHubPortCityCode] = Src.[ManualShipmentDetailHubPortCityCode]
					,Dest.[ManualShipmentDetailHubPortCityName] = Src.[ManualShipmentDetailHubPortCityName]
					,Dest.[ManualShipmentDetailHubPortSiteCode] = Src.[ManualShipmentDetailHubPortSiteCode]
					,Dest.[ManualShipmentDetailSealNumber1] = Src.[ManualShipmentDetailSealNumber1]
					,Dest.[ManualShipmentDetailSealNumber2] = Src.[ManualShipmentDetailSealNumber2]
					,Dest.[ManualShipmentDetailSealNumber3] = Src.[ManualShipmentDetailSealNumber3]
					,Dest.[ManualShipmentDetailServiceType1] = Src.[ManualShipmentDetailServiceType1]
					,Dest.[ManualShipmentDetailServiceType2] = Src.[ManualShipmentDetailServiceType2]
					,Dest.[ManualShipmentDetailOTIFlag] = Src.[ManualShipmentDetailOTIFlag]
					,Dest.[ManualShipmentDetailMCCFlag] = Src.[ManualShipmentDetailMCCFlag]
					,Dest.[ManualShipmentDetailBusinessProcessType] = Src.[ManualShipmentDetailBusinessProcessType]
					,Dest.[ManualShipmentDetailIELFlag] = Src.[ManualShipmentDetailIELFlag]
					,Dest.[ManualShipmentDetailSourceID] = Src.[ManualShipmentDetailSourceID]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDManualShipmentDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDManualShipmentDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ManualShipmentDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentDetails Dest ON Src.IDManualShipmentDetail = Dest.IDManualShipmentDetail
				WHERE Dest.[ManualShipmentDetailEditDateTime] < Src.[ManualShipmentDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ManualShipmentDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentDetails Dest WITH (NOLOCK) ON Src.IDManualShipmentDetail = Dest.IDManualShipmentDetail
					WHERE Dest.IDManualShipmentDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentDetails (
					[IDManualShipmentDetail]
					,[ManualShipmentID]
					,[ManualShipmentDetailAddDateTime]
					,[ManualShipmentDetailAddUserCode]
					,[ManualShipmentDetailEditDateTime]
					,[ManualShipmentDetailEditUserCode]
					,[ManualShipmentDetailContainerCode]
					,[ManualShipmentDetailContainerType]
					,[ManualShipmentDetailContainerSize]
					,[ManualShipmentDetailSealNumber]
					,[ManualShipmentDetailCSNumber]
					,[ManualShipmentDetailSequence]
					,[ManualShipmentDetailContainerSubstituteSize]
					,[ManualShipmentDetailContainerSubstituteType]
					,[ManualShipmentDetailCSETD]
					,[ManualShipmentDetailCSETA]
					,[ManualShipmentDetailStuffingDate]
					,[ManualShipmentDetailCompletedDate]
					,[ManualShipmentDetailASNSubmittedDate]
					,[ManualShipmentDetailCSType]
					,[ManualShipmentDetailControlNumber]
					,[ManualShipmentDetailOriginPortCountryCode]
					,[ManualShipmentDetailOriginPortCityCode]
					,[ManualShipmentDetailOriginPortCityName]
					,[ManualShipmentDetailOriginPortSiteCode]
					,[ManualShipmentDetailDestinationPortCountryCode]
					,[ManualShipmentDetailDestinationPortCityCode]
					,[ManualShipmentDetailDestinationPortCityName]
					,[ManualShipmentDetailDestinationPortSiteCode]
					,[ManualShipmentDetailHubPortCountryCode]
					,[ManualShipmentDetailHubPortCityCode]
					,[ManualShipmentDetailHubPortCityName]
					,[ManualShipmentDetailHubPortSiteCode]
					,[ManualShipmentDetailSealNumber1]
					,[ManualShipmentDetailSealNumber2]
					,[ManualShipmentDetailSealNumber3]
					,[ManualShipmentDetailServiceType1]
					,[ManualShipmentDetailServiceType2]
					,[ManualShipmentDetailOTIFlag]
					,[ManualShipmentDetailMCCFlag]
					,[ManualShipmentDetailBusinessProcessType]
					,[ManualShipmentDetailIELFlag]
					,[ManualShipmentDetailSourceID]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDManualShipmentDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDManualShipmentDetail]
					,Src.[ManualShipmentID]
					,Src.[ManualShipmentDetailAddDateTime]
					,Src.[ManualShipmentDetailAddUserCode]
					,Src.[ManualShipmentDetailEditDateTime]
					,Src.[ManualShipmentDetailEditUserCode]
					,Src.[ManualShipmentDetailContainerCode]
					,Src.[ManualShipmentDetailContainerType]
					,Src.[ManualShipmentDetailContainerSize]
					,Src.[ManualShipmentDetailSealNumber]
					,Src.[ManualShipmentDetailCSNumber]
					,Src.[ManualShipmentDetailSequence]
					,Src.[ManualShipmentDetailContainerSubstituteSize]
					,Src.[ManualShipmentDetailContainerSubstituteType]
					,Src.[ManualShipmentDetailCSETD]
					,Src.[ManualShipmentDetailCSETA]
					,Src.[ManualShipmentDetailStuffingDate]
					,Src.[ManualShipmentDetailCompletedDate]
					,Src.[ManualShipmentDetailASNSubmittedDate]
					,Src.[ManualShipmentDetailCSType]
					,Src.[ManualShipmentDetailControlNumber]
					,Src.[ManualShipmentDetailOriginPortCountryCode]
					,Src.[ManualShipmentDetailOriginPortCityCode]
					,Src.[ManualShipmentDetailOriginPortCityName]
					,Src.[ManualShipmentDetailOriginPortSiteCode]
					,Src.[ManualShipmentDetailDestinationPortCountryCode]
					,Src.[ManualShipmentDetailDestinationPortCityCode]
					,Src.[ManualShipmentDetailDestinationPortCityName]
					,Src.[ManualShipmentDetailDestinationPortSiteCode]
					,Src.[ManualShipmentDetailHubPortCountryCode]
					,Src.[ManualShipmentDetailHubPortCityCode]
					,Src.[ManualShipmentDetailHubPortCityName]
					,Src.[ManualShipmentDetailHubPortSiteCode]
					,Src.[ManualShipmentDetailSealNumber1]
					,Src.[ManualShipmentDetailSealNumber2]
					,Src.[ManualShipmentDetailSealNumber3]
					,Src.[ManualShipmentDetailServiceType1]
					,Src.[ManualShipmentDetailServiceType2]
					,Src.[ManualShipmentDetailOTIFlag]
					,Src.[ManualShipmentDetailMCCFlag]
					,Src.[ManualShipmentDetailBusinessProcessType]
					,Src.[ManualShipmentDetailIELFlag]
					,Src.[ManualShipmentDetailSourceID]
				FROM [dbo].ManualShipmentDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentDetails Dest WITH (NOLOCK) ON Src.IDManualShipmentDetail = Dest.IDManualShipmentDetail
				WHERE Dest.IDManualShipmentDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ManualShipmentDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ManualShipmentDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------ManualShipmentSubDetails
	SET @CurrentTableName = 'ManualShipmentSubDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentSubDetails AS Dest
			USING (
				SELECT [IDManualShipmentSubDetail]
					,[ManualShipmentDetailID]
					,[ManualShipmentSubDetailAddDateTime]
					,[ManualShipmentSubDetailAddUserCode]
					,[ManualShipmentSubDetailEditDateTime]
					,[ManualShipmentSubDetailEditUserCode]
					,[ManualShipmentSubDetailPONumber]
					,[ManualShipmentSubDetailHTSCode]
					,[ManualShipmentSubDetailSKUNumber]
					,[ManualShipmentSubDetailCommodity]
					,[ManualShipmentSubDetailPieces]
					,[ManualShipmentSubDetailPackages]
					,[ManualShipmentSubDetailWeight]
					,[ManualShipmentSubDetailMeasurement]
					,[ManualShipmentSubDetailQuantityPerPackage]
					,[ManualShipmentSubDetailSequenceInShipment]
					,[ManualShipmentSubDetailSequenceInDetail]
					,[ManualShipmentSubDetailOrderNumber]
					,[ManualShipmentSubDetailStowagePosition]
					,[ManualShipmentSubDetailProductSpecificLevelValue1]
					,[ManualShipmentSubDetailProductSpecificLevelValue2]
					,[ManualShipmentSubDetailProductSpecificLevelValue3]
					,[ManualShipmentSubDetailProductSpecificLevelValue4]
					,[ManualShipmentSubDetailPiecesUnit]
					,[ManualShipmentSubDetailPackagesUnit]
				FROM dbo.ManualShipmentSubDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDManualShipmentSubDetail] = Src.[IDManualShipmentSubDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ManualShipmentDetailID] = Src.[ManualShipmentDetailID]
						,Dest.[ManualShipmentSubDetailAddDateTime] = Src.[ManualShipmentSubDetailAddDateTime]
						,Dest.[ManualShipmentSubDetailAddUserCode] = Src.[ManualShipmentSubDetailAddUserCode]
						,Dest.[ManualShipmentSubDetailEditDateTime] = Src.[ManualShipmentSubDetailEditDateTime]
						,Dest.[ManualShipmentSubDetailEditUserCode] = Src.[ManualShipmentSubDetailEditUserCode]
						,Dest.[ManualShipmentSubDetailPONumber] = Src.[ManualShipmentSubDetailPONumber]
						,Dest.[ManualShipmentSubDetailHTSCode] = Src.[ManualShipmentSubDetailHTSCode]
						,Dest.[ManualShipmentSubDetailSKUNumber] = Src.[ManualShipmentSubDetailSKUNumber]
						,Dest.[ManualShipmentSubDetailCommodity] = Src.[ManualShipmentSubDetailCommodity]
						,Dest.[ManualShipmentSubDetailPieces] = Src.[ManualShipmentSubDetailPieces]
						,Dest.[ManualShipmentSubDetailPackages] = Src.[ManualShipmentSubDetailPackages]
						,Dest.[ManualShipmentSubDetailWeight] = Src.[ManualShipmentSubDetailWeight]
						,Dest.[ManualShipmentSubDetailMeasurement] = Src.[ManualShipmentSubDetailMeasurement]
						,Dest.[ManualShipmentSubDetailQuantityPerPackage] = Src.[ManualShipmentSubDetailQuantityPerPackage]
						,Dest.[ManualShipmentSubDetailSequenceInShipment] = Src.[ManualShipmentSubDetailSequenceInShipment]
						,Dest.[ManualShipmentSubDetailSequenceInDetail] = Src.[ManualShipmentSubDetailSequenceInDetail]
						,Dest.[ManualShipmentSubDetailOrderNumber] = Src.[ManualShipmentSubDetailOrderNumber]
						,Dest.[ManualShipmentSubDetailStowagePosition] = Src.[ManualShipmentSubDetailStowagePosition]
						,Dest.[ManualShipmentSubDetailProductSpecificLevelValue1] = Src.[ManualShipmentSubDetailProductSpecificLevelValue1]
						,Dest.[ManualShipmentSubDetailProductSpecificLevelValue2] = Src.[ManualShipmentSubDetailProductSpecificLevelValue2]
						,Dest.[ManualShipmentSubDetailProductSpecificLevelValue3] = Src.[ManualShipmentSubDetailProductSpecificLevelValue3]
						,Dest.[ManualShipmentSubDetailProductSpecificLevelValue4] = Src.[ManualShipmentSubDetailProductSpecificLevelValue4]
						,Dest.[ManualShipmentSubDetailPiecesUnit] = Src.[ManualShipmentSubDetailPiecesUnit]
						,Dest.[ManualShipmentSubDetailPackagesUnit] = Src.[ManualShipmentSubDetailPackagesUnit]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDManualShipmentSubDetail]
						,[ManualShipmentDetailID]
						,[ManualShipmentSubDetailAddDateTime]
						,[ManualShipmentSubDetailAddUserCode]
						,[ManualShipmentSubDetailEditDateTime]
						,[ManualShipmentSubDetailEditUserCode]
						,[ManualShipmentSubDetailPONumber]
						,[ManualShipmentSubDetailHTSCode]
						,[ManualShipmentSubDetailSKUNumber]
						,[ManualShipmentSubDetailCommodity]
						,[ManualShipmentSubDetailPieces]
						,[ManualShipmentSubDetailPackages]
						,[ManualShipmentSubDetailWeight]
						,[ManualShipmentSubDetailMeasurement]
						,[ManualShipmentSubDetailQuantityPerPackage]
						,[ManualShipmentSubDetailSequenceInShipment]
						,[ManualShipmentSubDetailSequenceInDetail]
						,[ManualShipmentSubDetailOrderNumber]
						,[ManualShipmentSubDetailStowagePosition]
						,[ManualShipmentSubDetailProductSpecificLevelValue1]
						,[ManualShipmentSubDetailProductSpecificLevelValue2]
						,[ManualShipmentSubDetailProductSpecificLevelValue3]
						,[ManualShipmentSubDetailProductSpecificLevelValue4]
						,[ManualShipmentSubDetailPiecesUnit]
						,[ManualShipmentSubDetailPackagesUnit]
						)
					VALUES (
						Src.[IDManualShipmentSubDetail]
						,Src.[ManualShipmentDetailID]
						,Src.[ManualShipmentSubDetailAddDateTime]
						,Src.[ManualShipmentSubDetailAddUserCode]
						,Src.[ManualShipmentSubDetailEditDateTime]
						,Src.[ManualShipmentSubDetailEditUserCode]
						,Src.[ManualShipmentSubDetailPONumber]
						,Src.[ManualShipmentSubDetailHTSCode]
						,Src.[ManualShipmentSubDetailSKUNumber]
						,Src.[ManualShipmentSubDetailCommodity]
						,Src.[ManualShipmentSubDetailPieces]
						,Src.[ManualShipmentSubDetailPackages]
						,Src.[ManualShipmentSubDetailWeight]
						,Src.[ManualShipmentSubDetailMeasurement]
						,Src.[ManualShipmentSubDetailQuantityPerPackage]
						,Src.[ManualShipmentSubDetailSequenceInShipment]
						,Src.[ManualShipmentSubDetailSequenceInDetail]
						,Src.[ManualShipmentSubDetailOrderNumber]
						,Src.[ManualShipmentSubDetailStowagePosition]
						,Src.[ManualShipmentSubDetailProductSpecificLevelValue1]
						,Src.[ManualShipmentSubDetailProductSpecificLevelValue2]
						,Src.[ManualShipmentSubDetailProductSpecificLevelValue3]
						,Src.[ManualShipmentSubDetailProductSpecificLevelValue4]
						,Src.[ManualShipmentSubDetailPiecesUnit]
						,Src.[ManualShipmentSubDetailPackagesUnit]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDManualShipmentSubDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDManualShipmentSubDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ManualShipmentSubDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentSubDetails Dest WITH (NOLOCK) ON Src.IDManualShipmentSubDetail = Dest.IDManualShipmentSubDetail
					WHERE Dest.[ManualShipmentSubDetailEditDateTime] < Src.[ManualShipmentSubDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ManualShipmentDetailID] = Src.[ManualShipmentDetailID]
					,Dest.[ManualShipmentSubDetailAddDateTime] = Src.[ManualShipmentSubDetailAddDateTime]
					,Dest.[ManualShipmentSubDetailAddUserCode] = Src.[ManualShipmentSubDetailAddUserCode]
					,Dest.[ManualShipmentSubDetailEditDateTime] = Src.[ManualShipmentSubDetailEditDateTime]
					,Dest.[ManualShipmentSubDetailEditUserCode] = Src.[ManualShipmentSubDetailEditUserCode]
					,Dest.[ManualShipmentSubDetailPONumber] = Src.[ManualShipmentSubDetailPONumber]
					,Dest.[ManualShipmentSubDetailHTSCode] = Src.[ManualShipmentSubDetailHTSCode]
					,Dest.[ManualShipmentSubDetailSKUNumber] = Src.[ManualShipmentSubDetailSKUNumber]
					,Dest.[ManualShipmentSubDetailCommodity] = Src.[ManualShipmentSubDetailCommodity]
					,Dest.[ManualShipmentSubDetailPieces] = Src.[ManualShipmentSubDetailPieces]
					,Dest.[ManualShipmentSubDetailPackages] = Src.[ManualShipmentSubDetailPackages]
					,Dest.[ManualShipmentSubDetailWeight] = Src.[ManualShipmentSubDetailWeight]
					,Dest.[ManualShipmentSubDetailMeasurement] = Src.[ManualShipmentSubDetailMeasurement]
					,Dest.[ManualShipmentSubDetailQuantityPerPackage] = Src.[ManualShipmentSubDetailQuantityPerPackage]
					,Dest.[ManualShipmentSubDetailSequenceInShipment] = Src.[ManualShipmentSubDetailSequenceInShipment]
					,Dest.[ManualShipmentSubDetailSequenceInDetail] = Src.[ManualShipmentSubDetailSequenceInDetail]
					,Dest.[ManualShipmentSubDetailOrderNumber] = Src.[ManualShipmentSubDetailOrderNumber]
					,Dest.[ManualShipmentSubDetailStowagePosition] = Src.[ManualShipmentSubDetailStowagePosition]
					,Dest.[ManualShipmentSubDetailProductSpecificLevelValue1] = Src.[ManualShipmentSubDetailProductSpecificLevelValue1]
					,Dest.[ManualShipmentSubDetailProductSpecificLevelValue2] = Src.[ManualShipmentSubDetailProductSpecificLevelValue2]
					,Dest.[ManualShipmentSubDetailProductSpecificLevelValue3] = Src.[ManualShipmentSubDetailProductSpecificLevelValue3]
					,Dest.[ManualShipmentSubDetailProductSpecificLevelValue4] = Src.[ManualShipmentSubDetailProductSpecificLevelValue4]
					,Dest.[ManualShipmentSubDetailPiecesUnit] = Src.[ManualShipmentSubDetailPiecesUnit]
					,Dest.[ManualShipmentSubDetailPackagesUnit] = Src.[ManualShipmentSubDetailPackagesUnit]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDManualShipmentSubDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDManualShipmentSubDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ManualShipmentSubDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentSubDetails Dest ON Src.IDManualShipmentSubDetail = Dest.IDManualShipmentSubDetail
				WHERE Dest.[ManualShipmentSubDetailEditDateTime] < Src.[ManualShipmentSubDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ManualShipmentSubDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentSubDetails Dest WITH (NOLOCK) ON Src.IDManualShipmentSubDetail = Dest.IDManualShipmentSubDetail
					WHERE Dest.IDManualShipmentSubDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentSubDetails (
					[IDManualShipmentSubDetail]
					,[ManualShipmentDetailID]
					,[ManualShipmentSubDetailAddDateTime]
					,[ManualShipmentSubDetailAddUserCode]
					,[ManualShipmentSubDetailEditDateTime]
					,[ManualShipmentSubDetailEditUserCode]
					,[ManualShipmentSubDetailPONumber]
					,[ManualShipmentSubDetailHTSCode]
					,[ManualShipmentSubDetailSKUNumber]
					,[ManualShipmentSubDetailCommodity]
					,[ManualShipmentSubDetailPieces]
					,[ManualShipmentSubDetailPackages]
					,[ManualShipmentSubDetailWeight]
					,[ManualShipmentSubDetailMeasurement]
					,[ManualShipmentSubDetailQuantityPerPackage]
					,[ManualShipmentSubDetailSequenceInShipment]
					,[ManualShipmentSubDetailSequenceInDetail]
					,[ManualShipmentSubDetailOrderNumber]
					,[ManualShipmentSubDetailStowagePosition]
					,[ManualShipmentSubDetailProductSpecificLevelValue1]
					,[ManualShipmentSubDetailProductSpecificLevelValue2]
					,[ManualShipmentSubDetailProductSpecificLevelValue3]
					,[ManualShipmentSubDetailProductSpecificLevelValue4]
					,[ManualShipmentSubDetailPiecesUnit]
					,[ManualShipmentSubDetailPackagesUnit]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDManualShipmentSubDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDManualShipmentSubDetail]
					,Src.[ManualShipmentDetailID]
					,Src.[ManualShipmentSubDetailAddDateTime]
					,Src.[ManualShipmentSubDetailAddUserCode]
					,Src.[ManualShipmentSubDetailEditDateTime]
					,Src.[ManualShipmentSubDetailEditUserCode]
					,Src.[ManualShipmentSubDetailPONumber]
					,Src.[ManualShipmentSubDetailHTSCode]
					,Src.[ManualShipmentSubDetailSKUNumber]
					,Src.[ManualShipmentSubDetailCommodity]
					,Src.[ManualShipmentSubDetailPieces]
					,Src.[ManualShipmentSubDetailPackages]
					,Src.[ManualShipmentSubDetailWeight]
					,Src.[ManualShipmentSubDetailMeasurement]
					,Src.[ManualShipmentSubDetailQuantityPerPackage]
					,Src.[ManualShipmentSubDetailSequenceInShipment]
					,Src.[ManualShipmentSubDetailSequenceInDetail]
					,Src.[ManualShipmentSubDetailOrderNumber]
					,Src.[ManualShipmentSubDetailStowagePosition]
					,Src.[ManualShipmentSubDetailProductSpecificLevelValue1]
					,Src.[ManualShipmentSubDetailProductSpecificLevelValue2]
					,Src.[ManualShipmentSubDetailProductSpecificLevelValue3]
					,Src.[ManualShipmentSubDetailProductSpecificLevelValue4]
					,Src.[ManualShipmentSubDetailPiecesUnit]
					,Src.[ManualShipmentSubDetailPackagesUnit]
				FROM [dbo].ManualShipmentSubDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentSubDetails Dest WITH (NOLOCK) ON Src.IDManualShipmentSubDetail = Dest.IDManualShipmentSubDetail
				WHERE Dest.IDManualShipmentSubDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ManualShipmentSubDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ManualShipmentSubDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------ManualShipmentLogs
	SET @CurrentTableName = 'ManualShipmentLogs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentLogs AS Dest
			USING (
				SELECT [IDManualShipmentLog]
					,[ManualShipmentID]
					,[ManualShipmentLogDateTime]
					,[ManualShipmentLogUserLogin]
					,[TransportStatusID]
					,[ManualShipmentLogEvent]
					,[ManualShipmentLogInfo]
					,[TransportEmailDefinitionID]
					,[ManualShipmentDetailID]
					,[ManualShipmentSubDetailID]
					,[ManualShipmentLogEmailID]
					,[ManualShipmentLogTechnicalInfo]
				FROM dbo.ManualShipmentLogs T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDManualShipmentLog] = Src.[IDManualShipmentLog])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ManualShipmentID] = Src.[ManualShipmentID]
						,Dest.[ManualShipmentLogDateTime] = Src.[ManualShipmentLogDateTime]
						,Dest.[ManualShipmentLogUserLogin] = Src.[ManualShipmentLogUserLogin]
						,Dest.[TransportStatusID] = Src.[TransportStatusID]
						,Dest.[ManualShipmentLogEvent] = Src.[ManualShipmentLogEvent]
						,Dest.[ManualShipmentLogInfo] = Src.[ManualShipmentLogInfo]
						,Dest.[TransportEmailDefinitionID] = Src.[TransportEmailDefinitionID]
						,Dest.[ManualShipmentDetailID] = Src.[ManualShipmentDetailID]
						,Dest.[ManualShipmentSubDetailID] = Src.[ManualShipmentSubDetailID]
						,Dest.[ManualShipmentLogEmailID] = Src.[ManualShipmentLogEmailID]
						,Dest.[ManualShipmentLogTechnicalInfo] = Src.[ManualShipmentLogTechnicalInfo]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDManualShipmentLog]
						,[ManualShipmentID]
						,[ManualShipmentLogDateTime]
						,[ManualShipmentLogUserLogin]
						,[TransportStatusID]
						,[ManualShipmentLogEvent]
						,[ManualShipmentLogInfo]
						,[TransportEmailDefinitionID]
						,[ManualShipmentDetailID]
						,[ManualShipmentSubDetailID]
						,[ManualShipmentLogEmailID]
						,[ManualShipmentLogTechnicalInfo]
						)
					VALUES (
						Src.[IDManualShipmentLog]
						,Src.[ManualShipmentID]
						,Src.[ManualShipmentLogDateTime]
						,Src.[ManualShipmentLogUserLogin]
						,Src.[TransportStatusID]
						,Src.[ManualShipmentLogEvent]
						,Src.[ManualShipmentLogInfo]
						,Src.[TransportEmailDefinitionID]
						,Src.[ManualShipmentDetailID]
						,Src.[ManualShipmentSubDetailID]
						,Src.[ManualShipmentLogEmailID]
						,Src.[ManualShipmentLogTechnicalInfo]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDManualShipmentLog] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDManualShipmentLog] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ManualShipmentLogs Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentLogs Dest WITH (NOLOCK) ON Src.IDManualShipmentLog = Dest.IDManualShipmentLog
					WHERE Dest.ManualShipmentLogDateTime < Src.ManualShipmentLogDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ManualShipmentID] = Src.[ManualShipmentID]
					,Dest.[ManualShipmentLogDateTime] = Src.[ManualShipmentLogDateTime]
					,Dest.[ManualShipmentLogUserLogin] = Src.[ManualShipmentLogUserLogin]
					,Dest.[TransportStatusID] = Src.[TransportStatusID]
					,Dest.[ManualShipmentLogEvent] = Src.[ManualShipmentLogEvent]
					,Dest.[ManualShipmentLogInfo] = Src.[ManualShipmentLogInfo]
					,Dest.[TransportEmailDefinitionID] = Src.[TransportEmailDefinitionID]
					,Dest.[ManualShipmentDetailID] = Src.[ManualShipmentDetailID]
					,Dest.[ManualShipmentSubDetailID] = Src.[ManualShipmentSubDetailID]
					,Dest.[ManualShipmentLogEmailID] = Src.[ManualShipmentLogEmailID]
					,Dest.[ManualShipmentLogTechnicalInfo] = Src.[ManualShipmentLogTechnicalInfo]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDManualShipmentLog AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDManualShipmentLog AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ManualShipmentLogs Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentLogs Dest ON Src.IDManualShipmentLog = Dest.IDManualShipmentLog
				WHERE Dest.ManualShipmentLogDateTime < Src.ManualShipmentLogDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ManualShipmentLogs Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentLogs Dest WITH (NOLOCK) ON Src.IDManualShipmentLog = Dest.IDManualShipmentLog
					WHERE Dest.IDManualShipmentLog IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentLogs (
					[IDManualShipmentLog]
					,[ManualShipmentID]
					,[ManualShipmentLogDateTime]
					,[ManualShipmentLogUserLogin]
					,[TransportStatusID]
					,[ManualShipmentLogEvent]
					,[ManualShipmentLogInfo]
					,[TransportEmailDefinitionID]
					,[ManualShipmentDetailID]
					,[ManualShipmentSubDetailID]
					,[ManualShipmentLogEmailID]
					,[ManualShipmentLogTechnicalInfo]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDManualShipmentLog AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDManualShipmentLog]
					,Src.[ManualShipmentID]
					,Src.[ManualShipmentLogDateTime]
					,Src.[ManualShipmentLogUserLogin]
					,Src.[TransportStatusID]
					,Src.[ManualShipmentLogEvent]
					,Src.[ManualShipmentLogInfo]
					,Src.[TransportEmailDefinitionID]
					,Src.[ManualShipmentDetailID]
					,Src.[ManualShipmentSubDetailID]
					,Src.[ManualShipmentLogEmailID]
					,Src.[ManualShipmentLogTechnicalInfo]
				FROM [dbo].ManualShipmentLogs Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ManualShipmentLogs Dest WITH (NOLOCK) ON Src.IDManualShipmentLog = Dest.IDManualShipmentLog
				WHERE Dest.IDManualShipmentLog IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ManualShipmentLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ManualShipmentLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------
	----DocumentManagement
	------DocumentOrders
	SET @CurrentTableName = 'DocumentOrders';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrders AS Dest
			USING (
				SELECT [IDDocumentOrder]
					,[DocumentOrderAddDateTime]
					,[DocumentOrderEditDateTime]
					,[DocumentOrderAddUserCode]
					,[DocumentOrderEditUserCode]
					,[SubContextCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[DocumentOrderStatusChangeDateTime]
					,[DocumentOrderNumber]
					,[DocumentOrderConsigneeCode]
					,[DocumentOrderPortOfDischargeCode]
					,[DocumentOrderPlaceOfDeliveryCode]
					,[DocumentOrderPortOfLoadingCode]
					,[DocumentOrderPlaceOfOriginCode]
					,[DocumentOrderCBLNumber]
					,[DocumentOrderVoyageCode]
					,[DocumentOrderCarrierBL]
					,[DocumentOrderCarrierCode]
					,[DocumentOrderVesselCode]
					,[DocumentOrderVesselName]
					,[DocumentOrderRequestDateTime]
					,[DocumentOrderLandedDateTime]
					,[DocumentOrderUserDefinedText01]
					,[DocumentOrderUserDefinedText02]
					,[DocumentOrderUserDefinedText03]
					,[DocumentOrderUserDefinedText04]
					,[DocumentOrderUserDefinedText05]
					,[DocumentOrderUserDefinedText06]
					,[DocumentOrderUserDefinedText07]
					,[DocumentOrderUserDefinedText08]
					,[DocumentOrderUserDefinedText09]
					,[DocumentOrderUserDefinedText10]
					,[DocumentOrderClientEmail]
					,[DocumentOrderContactName]
					,[DocumentOrderContactPhone]
					,[DocumentOrderContactEmail]
					,[DocumentOrderResponsibleEmail]
					,[DocumentOrderNotes]
					,[DocumentOrderActualDateTimeOfArrival]
					,[DocumentOrderEstimatedDateTimeOfArrival]
					,[DocumentOrderActualDateTimeOfDeparture]
					,[DocumentOrderEstimatedDateTimeOfDeparture]
					,[DocumentOrderUserDefinedDateTime01]
					,[DocumentOrderUserDefinedDateTime02]
					,[DocumentOrderUserDefinedDateTime03]
					,[DocumentOrderUserDefinedDateTime04]
					,[DocumentOrderUserDefinedDateTime05]
					,[DocumentOrderClientReference]
					,[DocumentOrderUserDefinedYesNo01]
					,[DocumentOrderUserDefinedYesNo02]
					,[DocumentOrderUserDefinedYesNo03]
					,[DocumentOrderUserDefinedYesNo04]
					,[DocumentOrderUserDefinedYesNo05]
					,[DocumentOrderUserDefinedDateTime06]
					,[DocumentOrderUserDefinedDateTime07]
					,[DocumentOrderUserDefinedDateTime09]
					,[DocumentOrderUserDefinedDateTime10]
					,[DocumentOrderUserDefinedNumber01]
					,[DocumentOrderUserDefinedNumber02]
					,[DocumentOrderUserDefinedNumber03]
					,[DocumentOrderUserDefinedNumber04]
					,[DocumentOrderUserDefinedNumber05]
					,[DocumentOrderUserDefinedLongText01]
					,[DocumentOrderUserDefinedLongText02]
					,[DocumentOrderUserDefinedLongText03]
					,[DocumentOrderUserDefinedLongText04]
					,[DocumentOrderUserDefinedLongText05]
					,[DocumentOrderUserDefinedText11]
					,[DocumentOrderUserDefinedText12]
					,[DocumentOrderUserDefinedText13]
					,[DocumentOrderUserDefinedText14]
					,[DocumentOrderUserDefinedText15]
					,[DocumentOrderChangesAcceptedDateTime]
					,[DocumentOrderRuleType]
					,[DocumentOrderCreationDataSource]
					,[DocumentOrderChangedDataStorageString]
					,[CountryCode]
					,[DocumentOrderOwnerLogin]
					,[DocumentOrderImportBatch]
					,[DocumentOrderNewEDIPending]
				FROM dbo.DocumentOrders T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDDocumentOrder] = Src.[IDDocumentOrder])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[DocumentOrderAddDateTime] = Src.[DocumentOrderAddDateTime]
						,Dest.[DocumentOrderEditDateTime] = Src.[DocumentOrderEditDateTime]
						,Dest.[DocumentOrderAddUserCode] = Src.[DocumentOrderAddUserCode]
						,Dest.[DocumentOrderEditUserCode] = Src.[DocumentOrderEditUserCode]
						,Dest.[SubContextCode] = Src.[SubContextCode]
						,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
						,Dest.[DocumentOrderStatusChangeDateTime] = Src.[DocumentOrderStatusChangeDateTime]
						,Dest.[DocumentOrderNumber] = Src.[DocumentOrderNumber]
						,Dest.[DocumentOrderConsigneeCode] = Src.[DocumentOrderConsigneeCode]
						,Dest.[DocumentOrderPortOfDischargeCode] = Src.[DocumentOrderPortOfDischargeCode]
						,Dest.[DocumentOrderPlaceOfDeliveryCode] = Src.[DocumentOrderPlaceOfDeliveryCode]
						,Dest.[DocumentOrderPortOfLoadingCode] = Src.[DocumentOrderPortOfLoadingCode]
						,Dest.[DocumentOrderPlaceOfOriginCode] = Src.[DocumentOrderPlaceOfOriginCode]
						,Dest.[DocumentOrderCBLNumber] = Src.[DocumentOrderCBLNumber]
						,Dest.[DocumentOrderVoyageCode] = Src.[DocumentOrderVoyageCode]
						,Dest.[DocumentOrderCarrierBL] = Src.[DocumentOrderCarrierBL]
						,Dest.[DocumentOrderCarrierCode] = Src.[DocumentOrderCarrierCode]
						,Dest.[DocumentOrderVesselCode] = Src.[DocumentOrderVesselCode]
						,Dest.[DocumentOrderVesselName] = Src.[DocumentOrderVesselName]
						,Dest.[DocumentOrderRequestDateTime] = Src.[DocumentOrderRequestDateTime]
						,Dest.[DocumentOrderLandedDateTime] = Src.[DocumentOrderLandedDateTime]
						,Dest.[DocumentOrderUserDefinedText01] = Src.[DocumentOrderUserDefinedText01]
						,Dest.[DocumentOrderUserDefinedText02] = Src.[DocumentOrderUserDefinedText02]
						,Dest.[DocumentOrderUserDefinedText03] = Src.[DocumentOrderUserDefinedText03]
						,Dest.[DocumentOrderUserDefinedText04] = Src.[DocumentOrderUserDefinedText04]
						,Dest.[DocumentOrderUserDefinedText05] = Src.[DocumentOrderUserDefinedText05]
						,Dest.[DocumentOrderUserDefinedText06] = Src.[DocumentOrderUserDefinedText06]
						,Dest.[DocumentOrderUserDefinedText07] = Src.[DocumentOrderUserDefinedText07]
						,Dest.[DocumentOrderUserDefinedText08] = Src.[DocumentOrderUserDefinedText08]
						,Dest.[DocumentOrderUserDefinedText09] = Src.[DocumentOrderUserDefinedText09]
						,Dest.[DocumentOrderUserDefinedText10] = Src.[DocumentOrderUserDefinedText10]
						,Dest.[DocumentOrderClientEmail] = Src.[DocumentOrderClientEmail]
						,Dest.[DocumentOrderContactName] = Src.[DocumentOrderContactName]
						,Dest.[DocumentOrderContactPhone] = Src.[DocumentOrderContactPhone]
						,Dest.[DocumentOrderContactEmail] = Src.[DocumentOrderContactEmail]
						,Dest.[DocumentOrderResponsibleEmail] = Src.[DocumentOrderResponsibleEmail]
						,Dest.[DocumentOrderNotes] = Src.[DocumentOrderNotes]
						,Dest.[DocumentOrderActualDateTimeOfArrival] = Src.[DocumentOrderActualDateTimeOfArrival]
						,Dest.[DocumentOrderEstimatedDateTimeOfArrival] = Src.[DocumentOrderEstimatedDateTimeOfArrival]
						,Dest.[DocumentOrderActualDateTimeOfDeparture] = Src.[DocumentOrderActualDateTimeOfDeparture]
						,Dest.[DocumentOrderEstimatedDateTimeOfDeparture] = Src.[DocumentOrderEstimatedDateTimeOfDeparture]
						,Dest.[DocumentOrderUserDefinedDateTime01] = Src.[DocumentOrderUserDefinedDateTime01]
						,Dest.[DocumentOrderUserDefinedDateTime02] = Src.[DocumentOrderUserDefinedDateTime02]
						,Dest.[DocumentOrderUserDefinedDateTime03] = Src.[DocumentOrderUserDefinedDateTime03]
						,Dest.[DocumentOrderUserDefinedDateTime04] = Src.[DocumentOrderUserDefinedDateTime04]
						,Dest.[DocumentOrderUserDefinedDateTime05] = Src.[DocumentOrderUserDefinedDateTime05]
						,Dest.[DocumentOrderClientReference] = Src.[DocumentOrderClientReference]
						,Dest.[DocumentOrderUserDefinedYesNo01] = Src.[DocumentOrderUserDefinedYesNo01]
						,Dest.[DocumentOrderUserDefinedYesNo02] = Src.[DocumentOrderUserDefinedYesNo02]
						,Dest.[DocumentOrderUserDefinedYesNo03] = Src.[DocumentOrderUserDefinedYesNo03]
						,Dest.[DocumentOrderUserDefinedYesNo04] = Src.[DocumentOrderUserDefinedYesNo04]
						,Dest.[DocumentOrderUserDefinedYesNo05] = Src.[DocumentOrderUserDefinedYesNo05]
						,Dest.[DocumentOrderUserDefinedDateTime06] = Src.[DocumentOrderUserDefinedDateTime06]
						,Dest.[DocumentOrderUserDefinedDateTime07] = Src.[DocumentOrderUserDefinedDateTime07]
						,Dest.[DocumentOrderUserDefinedDateTime09] = Src.[DocumentOrderUserDefinedDateTime09]
						,Dest.[DocumentOrderUserDefinedDateTime10] = Src.[DocumentOrderUserDefinedDateTime10]
						,Dest.[DocumentOrderUserDefinedNumber01] = Src.[DocumentOrderUserDefinedNumber01]
						,Dest.[DocumentOrderUserDefinedNumber02] = Src.[DocumentOrderUserDefinedNumber02]
						,Dest.[DocumentOrderUserDefinedNumber03] = Src.[DocumentOrderUserDefinedNumber03]
						,Dest.[DocumentOrderUserDefinedNumber04] = Src.[DocumentOrderUserDefinedNumber04]
						,Dest.[DocumentOrderUserDefinedNumber05] = Src.[DocumentOrderUserDefinedNumber05]
						,Dest.[DocumentOrderUserDefinedLongText01] = Src.[DocumentOrderUserDefinedLongText01]
						,Dest.[DocumentOrderUserDefinedLongText02] = Src.[DocumentOrderUserDefinedLongText02]
						,Dest.[DocumentOrderUserDefinedLongText03] = Src.[DocumentOrderUserDefinedLongText03]
						,Dest.[DocumentOrderUserDefinedLongText04] = Src.[DocumentOrderUserDefinedLongText04]
						,Dest.[DocumentOrderUserDefinedLongText05] = Src.[DocumentOrderUserDefinedLongText05]
						,Dest.[DocumentOrderUserDefinedText11] = Src.[DocumentOrderUserDefinedText11]
						,Dest.[DocumentOrderUserDefinedText12] = Src.[DocumentOrderUserDefinedText12]
						,Dest.[DocumentOrderUserDefinedText13] = Src.[DocumentOrderUserDefinedText13]
						,Dest.[DocumentOrderUserDefinedText14] = Src.[DocumentOrderUserDefinedText14]
						,Dest.[DocumentOrderUserDefinedText15] = Src.[DocumentOrderUserDefinedText15]
						,Dest.[DocumentOrderChangesAcceptedDateTime] = Src.[DocumentOrderChangesAcceptedDateTime]
						,Dest.[DocumentOrderRuleType] = Src.[DocumentOrderRuleType]
						,Dest.[DocumentOrderCreationDataSource] = Src.[DocumentOrderCreationDataSource]
						,Dest.[DocumentOrderChangedDataStorageString] = Src.[DocumentOrderChangedDataStorageString]
						,Dest.[CountryCode] = Src.[CountryCode]
						,Dest.[DocumentOrderOwnerLogin] = Src.[DocumentOrderOwnerLogin]
						,Dest.[DocumentOrderImportBatch] = Src.[DocumentOrderImportBatch]
						,Dest.[DocumentOrderNewEDIPending] = Src.[DocumentOrderNewEDIPending]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDDocumentOrder]
						,[DocumentOrderAddDateTime]
						,[DocumentOrderEditDateTime]
						,[DocumentOrderAddUserCode]
						,[DocumentOrderEditUserCode]
						,[SubContextCode]
						,[DataEntryDefinitionID]
						,[StatusID]
						,[StatusIDPrevious]
						,[DocumentOrderStatusChangeDateTime]
						,[DocumentOrderNumber]
						,[DocumentOrderConsigneeCode]
						,[DocumentOrderPortOfDischargeCode]
						,[DocumentOrderPlaceOfDeliveryCode]
						,[DocumentOrderPortOfLoadingCode]
						,[DocumentOrderPlaceOfOriginCode]
						,[DocumentOrderCBLNumber]
						,[DocumentOrderVoyageCode]
						,[DocumentOrderCarrierBL]
						,[DocumentOrderCarrierCode]
						,[DocumentOrderVesselCode]
						,[DocumentOrderVesselName]
						,[DocumentOrderRequestDateTime]
						,[DocumentOrderLandedDateTime]
						,[DocumentOrderUserDefinedText01]
						,[DocumentOrderUserDefinedText02]
						,[DocumentOrderUserDefinedText03]
						,[DocumentOrderUserDefinedText04]
						,[DocumentOrderUserDefinedText05]
						,[DocumentOrderUserDefinedText06]
						,[DocumentOrderUserDefinedText07]
						,[DocumentOrderUserDefinedText08]
						,[DocumentOrderUserDefinedText09]
						,[DocumentOrderUserDefinedText10]
						,[DocumentOrderClientEmail]
						,[DocumentOrderContactName]
						,[DocumentOrderContactPhone]
						,[DocumentOrderContactEmail]
						,[DocumentOrderResponsibleEmail]
						,[DocumentOrderNotes]
						,[DocumentOrderActualDateTimeOfArrival]
						,[DocumentOrderEstimatedDateTimeOfArrival]
						,[DocumentOrderActualDateTimeOfDeparture]
						,[DocumentOrderEstimatedDateTimeOfDeparture]
						,[DocumentOrderUserDefinedDateTime01]
						,[DocumentOrderUserDefinedDateTime02]
						,[DocumentOrderUserDefinedDateTime03]
						,[DocumentOrderUserDefinedDateTime04]
						,[DocumentOrderUserDefinedDateTime05]
						,[DocumentOrderClientReference]
						,[DocumentOrderUserDefinedYesNo01]
						,[DocumentOrderUserDefinedYesNo02]
						,[DocumentOrderUserDefinedYesNo03]
						,[DocumentOrderUserDefinedYesNo04]
						,[DocumentOrderUserDefinedYesNo05]
						,[DocumentOrderUserDefinedDateTime06]
						,[DocumentOrderUserDefinedDateTime07]
						,[DocumentOrderUserDefinedDateTime09]
						,[DocumentOrderUserDefinedDateTime10]
						,[DocumentOrderUserDefinedNumber01]
						,[DocumentOrderUserDefinedNumber02]
						,[DocumentOrderUserDefinedNumber03]
						,[DocumentOrderUserDefinedNumber04]
						,[DocumentOrderUserDefinedNumber05]
						,[DocumentOrderUserDefinedLongText01]
						,[DocumentOrderUserDefinedLongText02]
						,[DocumentOrderUserDefinedLongText03]
						,[DocumentOrderUserDefinedLongText04]
						,[DocumentOrderUserDefinedLongText05]
						,[DocumentOrderUserDefinedText11]
						,[DocumentOrderUserDefinedText12]
						,[DocumentOrderUserDefinedText13]
						,[DocumentOrderUserDefinedText14]
						,[DocumentOrderUserDefinedText15]
						,[DocumentOrderChangesAcceptedDateTime]
						,[DocumentOrderRuleType]
						,[DocumentOrderCreationDataSource]
						,[DocumentOrderChangedDataStorageString]
						,[CountryCode]
						,[DocumentOrderOwnerLogin]
						,[DocumentOrderImportBatch]
						,[DocumentOrderNewEDIPending]
						)
					VALUES (
						Src.[IDDocumentOrder]
						,Src.[DocumentOrderAddDateTime]
						,Src.[DocumentOrderEditDateTime]
						,Src.[DocumentOrderAddUserCode]
						,Src.[DocumentOrderEditUserCode]
						,Src.[SubContextCode]
						,Src.[DataEntryDefinitionID]
						,Src.[StatusID]
						,Src.[StatusIDPrevious]
						,Src.[DocumentOrderStatusChangeDateTime]
						,Src.[DocumentOrderNumber]
						,Src.[DocumentOrderConsigneeCode]
						,Src.[DocumentOrderPortOfDischargeCode]
						,Src.[DocumentOrderPlaceOfDeliveryCode]
						,Src.[DocumentOrderPortOfLoadingCode]
						,Src.[DocumentOrderPlaceOfOriginCode]
						,Src.[DocumentOrderCBLNumber]
						,Src.[DocumentOrderVoyageCode]
						,Src.[DocumentOrderCarrierBL]
						,Src.[DocumentOrderCarrierCode]
						,Src.[DocumentOrderVesselCode]
						,Src.[DocumentOrderVesselName]
						,Src.[DocumentOrderRequestDateTime]
						,Src.[DocumentOrderLandedDateTime]
						,Src.[DocumentOrderUserDefinedText01]
						,Src.[DocumentOrderUserDefinedText02]
						,Src.[DocumentOrderUserDefinedText03]
						,Src.[DocumentOrderUserDefinedText04]
						,Src.[DocumentOrderUserDefinedText05]
						,Src.[DocumentOrderUserDefinedText06]
						,Src.[DocumentOrderUserDefinedText07]
						,Src.[DocumentOrderUserDefinedText08]
						,Src.[DocumentOrderUserDefinedText09]
						,Src.[DocumentOrderUserDefinedText10]
						,Src.[DocumentOrderClientEmail]
						,Src.[DocumentOrderContactName]
						,Src.[DocumentOrderContactPhone]
						,Src.[DocumentOrderContactEmail]
						,Src.[DocumentOrderResponsibleEmail]
						,Src.[DocumentOrderNotes]
						,Src.[DocumentOrderActualDateTimeOfArrival]
						,Src.[DocumentOrderEstimatedDateTimeOfArrival]
						,Src.[DocumentOrderActualDateTimeOfDeparture]
						,Src.[DocumentOrderEstimatedDateTimeOfDeparture]
						,Src.[DocumentOrderUserDefinedDateTime01]
						,Src.[DocumentOrderUserDefinedDateTime02]
						,Src.[DocumentOrderUserDefinedDateTime03]
						,Src.[DocumentOrderUserDefinedDateTime04]
						,Src.[DocumentOrderUserDefinedDateTime05]
						,Src.[DocumentOrderClientReference]
						,Src.[DocumentOrderUserDefinedYesNo01]
						,Src.[DocumentOrderUserDefinedYesNo02]
						,Src.[DocumentOrderUserDefinedYesNo03]
						,Src.[DocumentOrderUserDefinedYesNo04]
						,Src.[DocumentOrderUserDefinedYesNo05]
						,Src.[DocumentOrderUserDefinedDateTime06]
						,Src.[DocumentOrderUserDefinedDateTime07]
						,Src.[DocumentOrderUserDefinedDateTime09]
						,Src.[DocumentOrderUserDefinedDateTime10]
						,Src.[DocumentOrderUserDefinedNumber01]
						,Src.[DocumentOrderUserDefinedNumber02]
						,Src.[DocumentOrderUserDefinedNumber03]
						,Src.[DocumentOrderUserDefinedNumber04]
						,Src.[DocumentOrderUserDefinedNumber05]
						,Src.[DocumentOrderUserDefinedLongText01]
						,Src.[DocumentOrderUserDefinedLongText02]
						,Src.[DocumentOrderUserDefinedLongText03]
						,Src.[DocumentOrderUserDefinedLongText04]
						,Src.[DocumentOrderUserDefinedLongText05]
						,Src.[DocumentOrderUserDefinedText11]
						,Src.[DocumentOrderUserDefinedText12]
						,Src.[DocumentOrderUserDefinedText13]
						,Src.[DocumentOrderUserDefinedText14]
						,Src.[DocumentOrderUserDefinedText15]
						,Src.[DocumentOrderChangesAcceptedDateTime]
						,Src.[DocumentOrderRuleType]
						,Src.[DocumentOrderCreationDataSource]
						,Src.[DocumentOrderChangedDataStorageString]
						,Src.[CountryCode]
						,Src.[DocumentOrderOwnerLogin]
						,Src.[DocumentOrderImportBatch]
						,Src.[DocumentOrderNewEDIPending]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDDocumentOrder] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDDocumentOrder] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].DocumentOrders Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrders Dest WITH (NOLOCK) ON Src.IDDocumentOrder = Dest.IDDocumentOrder
					WHERE Dest.[DocumentOrderEditDateTime] < Src.[DocumentOrderEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[DocumentOrderAddDateTime] = Src.[DocumentOrderAddDateTime]
					,Dest.[DocumentOrderEditDateTime] = Src.[DocumentOrderEditDateTime]
					,Dest.[DocumentOrderAddUserCode] = Src.[DocumentOrderAddUserCode]
					,Dest.[DocumentOrderEditUserCode] = Src.[DocumentOrderEditUserCode]
					,Dest.[SubContextCode] = Src.[SubContextCode]
					,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
					,Dest.[StatusID] = Src.[StatusID]
					,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
					,Dest.[DocumentOrderStatusChangeDateTime] = Src.[DocumentOrderStatusChangeDateTime]
					,Dest.[DocumentOrderNumber] = Src.[DocumentOrderNumber]
					,Dest.[DocumentOrderConsigneeCode] = Src.[DocumentOrderConsigneeCode]
					,Dest.[DocumentOrderPortOfDischargeCode] = Src.[DocumentOrderPortOfDischargeCode]
					,Dest.[DocumentOrderPlaceOfDeliveryCode] = Src.[DocumentOrderPlaceOfDeliveryCode]
					,Dest.[DocumentOrderPortOfLoadingCode] = Src.[DocumentOrderPortOfLoadingCode]
					,Dest.[DocumentOrderPlaceOfOriginCode] = Src.[DocumentOrderPlaceOfOriginCode]
					,Dest.[DocumentOrderCBLNumber] = Src.[DocumentOrderCBLNumber]
					,Dest.[DocumentOrderVoyageCode] = Src.[DocumentOrderVoyageCode]
					,Dest.[DocumentOrderCarrierBL] = Src.[DocumentOrderCarrierBL]
					,Dest.[DocumentOrderCarrierCode] = Src.[DocumentOrderCarrierCode]
					,Dest.[DocumentOrderVesselCode] = Src.[DocumentOrderVesselCode]
					,Dest.[DocumentOrderVesselName] = Src.[DocumentOrderVesselName]
					,Dest.[DocumentOrderRequestDateTime] = Src.[DocumentOrderRequestDateTime]
					,Dest.[DocumentOrderLandedDateTime] = Src.[DocumentOrderLandedDateTime]
					,Dest.[DocumentOrderUserDefinedText01] = Src.[DocumentOrderUserDefinedText01]
					,Dest.[DocumentOrderUserDefinedText02] = Src.[DocumentOrderUserDefinedText02]
					,Dest.[DocumentOrderUserDefinedText03] = Src.[DocumentOrderUserDefinedText03]
					,Dest.[DocumentOrderUserDefinedText04] = Src.[DocumentOrderUserDefinedText04]
					,Dest.[DocumentOrderUserDefinedText05] = Src.[DocumentOrderUserDefinedText05]
					,Dest.[DocumentOrderUserDefinedText06] = Src.[DocumentOrderUserDefinedText06]
					,Dest.[DocumentOrderUserDefinedText07] = Src.[DocumentOrderUserDefinedText07]
					,Dest.[DocumentOrderUserDefinedText08] = Src.[DocumentOrderUserDefinedText08]
					,Dest.[DocumentOrderUserDefinedText09] = Src.[DocumentOrderUserDefinedText09]
					,Dest.[DocumentOrderUserDefinedText10] = Src.[DocumentOrderUserDefinedText10]
					,Dest.[DocumentOrderClientEmail] = Src.[DocumentOrderClientEmail]
					,Dest.[DocumentOrderContactName] = Src.[DocumentOrderContactName]
					,Dest.[DocumentOrderContactPhone] = Src.[DocumentOrderContactPhone]
					,Dest.[DocumentOrderContactEmail] = Src.[DocumentOrderContactEmail]
					,Dest.[DocumentOrderResponsibleEmail] = Src.[DocumentOrderResponsibleEmail]
					,Dest.[DocumentOrderNotes] = Src.[DocumentOrderNotes]
					,Dest.[DocumentOrderActualDateTimeOfArrival] = Src.[DocumentOrderActualDateTimeOfArrival]
					,Dest.[DocumentOrderEstimatedDateTimeOfArrival] = Src.[DocumentOrderEstimatedDateTimeOfArrival]
					,Dest.[DocumentOrderActualDateTimeOfDeparture] = Src.[DocumentOrderActualDateTimeOfDeparture]
					,Dest.[DocumentOrderEstimatedDateTimeOfDeparture] = Src.[DocumentOrderEstimatedDateTimeOfDeparture]
					,Dest.[DocumentOrderUserDefinedDateTime01] = Src.[DocumentOrderUserDefinedDateTime01]
					,Dest.[DocumentOrderUserDefinedDateTime02] = Src.[DocumentOrderUserDefinedDateTime02]
					,Dest.[DocumentOrderUserDefinedDateTime03] = Src.[DocumentOrderUserDefinedDateTime03]
					,Dest.[DocumentOrderUserDefinedDateTime04] = Src.[DocumentOrderUserDefinedDateTime04]
					,Dest.[DocumentOrderUserDefinedDateTime05] = Src.[DocumentOrderUserDefinedDateTime05]
					,Dest.[DocumentOrderClientReference] = Src.[DocumentOrderClientReference]
					,Dest.[DocumentOrderUserDefinedYesNo01] = Src.[DocumentOrderUserDefinedYesNo01]
					,Dest.[DocumentOrderUserDefinedYesNo02] = Src.[DocumentOrderUserDefinedYesNo02]
					,Dest.[DocumentOrderUserDefinedYesNo03] = Src.[DocumentOrderUserDefinedYesNo03]
					,Dest.[DocumentOrderUserDefinedYesNo04] = Src.[DocumentOrderUserDefinedYesNo04]
					,Dest.[DocumentOrderUserDefinedYesNo05] = Src.[DocumentOrderUserDefinedYesNo05]
					,Dest.[DocumentOrderUserDefinedDateTime06] = Src.[DocumentOrderUserDefinedDateTime06]
					,Dest.[DocumentOrderUserDefinedDateTime07] = Src.[DocumentOrderUserDefinedDateTime07]
					,Dest.[DocumentOrderUserDefinedDateTime09] = Src.[DocumentOrderUserDefinedDateTime09]
					,Dest.[DocumentOrderUserDefinedDateTime10] = Src.[DocumentOrderUserDefinedDateTime10]
					,Dest.[DocumentOrderUserDefinedNumber01] = Src.[DocumentOrderUserDefinedNumber01]
					,Dest.[DocumentOrderUserDefinedNumber02] = Src.[DocumentOrderUserDefinedNumber02]
					,Dest.[DocumentOrderUserDefinedNumber03] = Src.[DocumentOrderUserDefinedNumber03]
					,Dest.[DocumentOrderUserDefinedNumber04] = Src.[DocumentOrderUserDefinedNumber04]
					,Dest.[DocumentOrderUserDefinedNumber05] = Src.[DocumentOrderUserDefinedNumber05]
					,Dest.[DocumentOrderUserDefinedLongText01] = Src.[DocumentOrderUserDefinedLongText01]
					,Dest.[DocumentOrderUserDefinedLongText02] = Src.[DocumentOrderUserDefinedLongText02]
					,Dest.[DocumentOrderUserDefinedLongText03] = Src.[DocumentOrderUserDefinedLongText03]
					,Dest.[DocumentOrderUserDefinedLongText04] = Src.[DocumentOrderUserDefinedLongText04]
					,Dest.[DocumentOrderUserDefinedLongText05] = Src.[DocumentOrderUserDefinedLongText05]
					,Dest.[DocumentOrderUserDefinedText11] = Src.[DocumentOrderUserDefinedText11]
					,Dest.[DocumentOrderUserDefinedText12] = Src.[DocumentOrderUserDefinedText12]
					,Dest.[DocumentOrderUserDefinedText13] = Src.[DocumentOrderUserDefinedText13]
					,Dest.[DocumentOrderUserDefinedText14] = Src.[DocumentOrderUserDefinedText14]
					,Dest.[DocumentOrderUserDefinedText15] = Src.[DocumentOrderUserDefinedText15]
					,Dest.[DocumentOrderChangesAcceptedDateTime] = Src.[DocumentOrderChangesAcceptedDateTime]
					,Dest.[DocumentOrderRuleType] = Src.[DocumentOrderRuleType]
					,Dest.[DocumentOrderCreationDataSource] = Src.[DocumentOrderCreationDataSource]
					,Dest.[DocumentOrderChangedDataStorageString] = Src.[DocumentOrderChangedDataStorageString]
					,Dest.[CountryCode] = Src.[CountryCode]
					,Dest.[DocumentOrderOwnerLogin] = Src.[DocumentOrderOwnerLogin]
					,Dest.[DocumentOrderImportBatch] = Src.[DocumentOrderImportBatch]
					,Dest.[DocumentOrderNewEDIPending] = Src.[DocumentOrderNewEDIPending]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDDocumentOrder AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDDocumentOrder AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].DocumentOrders Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrders Dest ON Src.IDDocumentOrder = Dest.IDDocumentOrder
				WHERE Dest.[DocumentOrderEditDateTime] < Src.[DocumentOrderEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].DocumentOrders Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrders Dest WITH (NOLOCK) ON Src.IDDocumentOrder = Dest.IDDocumentOrder
					WHERE Dest.IDDocumentOrder IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrders (
					[IDDocumentOrder]
					,[DocumentOrderAddDateTime]
					,[DocumentOrderEditDateTime]
					,[DocumentOrderAddUserCode]
					,[DocumentOrderEditUserCode]
					,[SubContextCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[DocumentOrderStatusChangeDateTime]
					,[DocumentOrderNumber]
					,[DocumentOrderConsigneeCode]
					,[DocumentOrderPortOfDischargeCode]
					,[DocumentOrderPlaceOfDeliveryCode]
					,[DocumentOrderPortOfLoadingCode]
					,[DocumentOrderPlaceOfOriginCode]
					,[DocumentOrderCBLNumber]
					,[DocumentOrderVoyageCode]
					,[DocumentOrderCarrierBL]
					,[DocumentOrderCarrierCode]
					,[DocumentOrderVesselCode]
					,[DocumentOrderVesselName]
					,[DocumentOrderRequestDateTime]
					,[DocumentOrderLandedDateTime]
					,[DocumentOrderUserDefinedText01]
					,[DocumentOrderUserDefinedText02]
					,[DocumentOrderUserDefinedText03]
					,[DocumentOrderUserDefinedText04]
					,[DocumentOrderUserDefinedText05]
					,[DocumentOrderUserDefinedText06]
					,[DocumentOrderUserDefinedText07]
					,[DocumentOrderUserDefinedText08]
					,[DocumentOrderUserDefinedText09]
					,[DocumentOrderUserDefinedText10]
					,[DocumentOrderClientEmail]
					,[DocumentOrderContactName]
					,[DocumentOrderContactPhone]
					,[DocumentOrderContactEmail]
					,[DocumentOrderResponsibleEmail]
					,[DocumentOrderNotes]
					,[DocumentOrderActualDateTimeOfArrival]
					,[DocumentOrderEstimatedDateTimeOfArrival]
					,[DocumentOrderActualDateTimeOfDeparture]
					,[DocumentOrderEstimatedDateTimeOfDeparture]
					,[DocumentOrderUserDefinedDateTime01]
					,[DocumentOrderUserDefinedDateTime02]
					,[DocumentOrderUserDefinedDateTime03]
					,[DocumentOrderUserDefinedDateTime04]
					,[DocumentOrderUserDefinedDateTime05]
					,[DocumentOrderClientReference]
					,[DocumentOrderUserDefinedYesNo01]
					,[DocumentOrderUserDefinedYesNo02]
					,[DocumentOrderUserDefinedYesNo03]
					,[DocumentOrderUserDefinedYesNo04]
					,[DocumentOrderUserDefinedYesNo05]
					,[DocumentOrderUserDefinedDateTime06]
					,[DocumentOrderUserDefinedDateTime07]
					,[DocumentOrderUserDefinedDateTime09]
					,[DocumentOrderUserDefinedDateTime10]
					,[DocumentOrderUserDefinedNumber01]
					,[DocumentOrderUserDefinedNumber02]
					,[DocumentOrderUserDefinedNumber03]
					,[DocumentOrderUserDefinedNumber04]
					,[DocumentOrderUserDefinedNumber05]
					,[DocumentOrderUserDefinedLongText01]
					,[DocumentOrderUserDefinedLongText02]
					,[DocumentOrderUserDefinedLongText03]
					,[DocumentOrderUserDefinedLongText04]
					,[DocumentOrderUserDefinedLongText05]
					,[DocumentOrderUserDefinedText11]
					,[DocumentOrderUserDefinedText12]
					,[DocumentOrderUserDefinedText13]
					,[DocumentOrderUserDefinedText14]
					,[DocumentOrderUserDefinedText15]
					,[DocumentOrderChangesAcceptedDateTime]
					,[DocumentOrderRuleType]
					,[DocumentOrderCreationDataSource]
					,[DocumentOrderChangedDataStorageString]
					,[CountryCode]
					,[DocumentOrderOwnerLogin]
					,[DocumentOrderImportBatch]
					,[DocumentOrderNewEDIPending]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDDocumentOrder AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDDocumentOrder]
					,Src.[DocumentOrderAddDateTime]
					,Src.[DocumentOrderEditDateTime]
					,Src.[DocumentOrderAddUserCode]
					,Src.[DocumentOrderEditUserCode]
					,Src.[SubContextCode]
					,Src.[DataEntryDefinitionID]
					,Src.[StatusID]
					,Src.[StatusIDPrevious]
					,Src.[DocumentOrderStatusChangeDateTime]
					,Src.[DocumentOrderNumber]
					,Src.[DocumentOrderConsigneeCode]
					,Src.[DocumentOrderPortOfDischargeCode]
					,Src.[DocumentOrderPlaceOfDeliveryCode]
					,Src.[DocumentOrderPortOfLoadingCode]
					,Src.[DocumentOrderPlaceOfOriginCode]
					,Src.[DocumentOrderCBLNumber]
					,Src.[DocumentOrderVoyageCode]
					,Src.[DocumentOrderCarrierBL]
					,Src.[DocumentOrderCarrierCode]
					,Src.[DocumentOrderVesselCode]
					,Src.[DocumentOrderVesselName]
					,Src.[DocumentOrderRequestDateTime]
					,Src.[DocumentOrderLandedDateTime]
					,Src.[DocumentOrderUserDefinedText01]
					,Src.[DocumentOrderUserDefinedText02]
					,Src.[DocumentOrderUserDefinedText03]
					,Src.[DocumentOrderUserDefinedText04]
					,Src.[DocumentOrderUserDefinedText05]
					,Src.[DocumentOrderUserDefinedText06]
					,Src.[DocumentOrderUserDefinedText07]
					,Src.[DocumentOrderUserDefinedText08]
					,Src.[DocumentOrderUserDefinedText09]
					,Src.[DocumentOrderUserDefinedText10]
					,Src.[DocumentOrderClientEmail]
					,Src.[DocumentOrderContactName]
					,Src.[DocumentOrderContactPhone]
					,Src.[DocumentOrderContactEmail]
					,Src.[DocumentOrderResponsibleEmail]
					,Src.[DocumentOrderNotes]
					,Src.[DocumentOrderActualDateTimeOfArrival]
					,Src.[DocumentOrderEstimatedDateTimeOfArrival]
					,Src.[DocumentOrderActualDateTimeOfDeparture]
					,Src.[DocumentOrderEstimatedDateTimeOfDeparture]
					,Src.[DocumentOrderUserDefinedDateTime01]
					,Src.[DocumentOrderUserDefinedDateTime02]
					,Src.[DocumentOrderUserDefinedDateTime03]
					,Src.[DocumentOrderUserDefinedDateTime04]
					,Src.[DocumentOrderUserDefinedDateTime05]
					,Src.[DocumentOrderClientReference]
					,Src.[DocumentOrderUserDefinedYesNo01]
					,Src.[DocumentOrderUserDefinedYesNo02]
					,Src.[DocumentOrderUserDefinedYesNo03]
					,Src.[DocumentOrderUserDefinedYesNo04]
					,Src.[DocumentOrderUserDefinedYesNo05]
					,Src.[DocumentOrderUserDefinedDateTime06]
					,Src.[DocumentOrderUserDefinedDateTime07]
					,Src.[DocumentOrderUserDefinedDateTime09]
					,Src.[DocumentOrderUserDefinedDateTime10]
					,Src.[DocumentOrderUserDefinedNumber01]
					,Src.[DocumentOrderUserDefinedNumber02]
					,Src.[DocumentOrderUserDefinedNumber03]
					,Src.[DocumentOrderUserDefinedNumber04]
					,Src.[DocumentOrderUserDefinedNumber05]
					,Src.[DocumentOrderUserDefinedLongText01]
					,Src.[DocumentOrderUserDefinedLongText02]
					,Src.[DocumentOrderUserDefinedLongText03]
					,Src.[DocumentOrderUserDefinedLongText04]
					,Src.[DocumentOrderUserDefinedLongText05]
					,Src.[DocumentOrderUserDefinedText11]
					,Src.[DocumentOrderUserDefinedText12]
					,Src.[DocumentOrderUserDefinedText13]
					,Src.[DocumentOrderUserDefinedText14]
					,Src.[DocumentOrderUserDefinedText15]
					,Src.[DocumentOrderChangesAcceptedDateTime]
					,Src.[DocumentOrderRuleType]
					,Src.[DocumentOrderCreationDataSource]
					,Src.[DocumentOrderChangedDataStorageString]
					,Src.[CountryCode]
					,Src.[DocumentOrderOwnerLogin]
					,Src.[DocumentOrderImportBatch]
					,Src.[DocumentOrderNewEDIPending]
				FROM [dbo].DocumentOrders Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrders Dest WITH (NOLOCK) ON Src.IDDocumentOrder = Dest.IDDocumentOrder
				WHERE Dest.IDDocumentOrder IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') DocumentOrders: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `DocumentOrders` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------DocumentOrderDetails
	SET @CurrentTableName = 'DocumentOrderDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrderDetails AS Dest
			USING (
				SELECT [IDDocumentOrderDetail]
					,[DocumentOrderID]
					,[DocumentOrderDetailAddDateTime]
					,[DocumentOrderDetailEditDateTime]
					,[DocumentOrderDetailAddUserCode]
					,[DocumentOrderDetailEditUserCode]
					,[DocumentOrderDetailDocumentCode]
					,[DocumentOrderDetailAllDocumentsReceived]
					,[DocumentOrderDetailDocumentReceivedDateTime]
					,[DocumentOrderDetailUserDefinedYesNo01]
					,[DocumentOrderDetailUserDefinedYesNo02]
					,[DocumentOrderDetailUserDefinedYesNo03]
					,[DocumentOrderDetailUserDefinedYesNo04]
					,[DocumentOrderDetailUserDefinedYesNo05]
					,[DocumentOrderDetailUserDefinedDateTime01]
					,[DocumentOrderDetailUserDefinedDateTime02]
					,[DocumentOrderDetailUserDefinedDateTime03]
					,[DocumentOrderDetailUserDefinedDateTime04]
					,[DocumentOrderDetailUserDefinedDateTime05]
					,[DocumentOrderDetailUserDefinedDateTime06]
					,[DocumentOrderDetailUserDefinedDateTime07]
					,[DocumentOrderDetailUserDefinedDateTime09]
					,[DocumentOrderDetailUserDefinedDateTime10]
					,[DocumentOrderDetailUserDefinedNumber01]
					,[DocumentOrderDetailUserDefinedNumber02]
					,[DocumentOrderDetailUserDefinedNumber03]
					,[DocumentOrderDetailUserDefinedNumber04]
					,[DocumentOrderDetailUserDefinedNumber05]
					,[DocumentOrderDetailUserDefinedLongText01]
					,[DocumentOrderDetailUserDefinedLongText02]
					,[DocumentOrderDetailUserDefinedLongText03]
					,[DocumentOrderDetailUserDefinedLongText04]
					,[DocumentOrderDetailUserDefinedLongText05]
					,[DocumentOrderDetailUserDefinedText01]
					,[DocumentOrderDetailUserDefinedText02]
					,[DocumentOrderDetailUserDefinedText03]
					,[DocumentOrderDetailUserDefinedText04]
					,[DocumentOrderDetailUserDefinedText05]
					,[DocumentOrderDetailUserDefinedText06]
					,[DocumentOrderDetailUserDefinedText07]
					,[DocumentOrderDetailUserDefinedText08]
					,[DocumentOrderDetailUserDefinedText09]
					,[DocumentOrderDetailUserDefinedText10]
					,[DocumentOrderDetailUserDefinedText11]
					,[DocumentOrderDetailUserDefinedText12]
					,[DocumentOrderDetailUserDefinedText13]
					,[DocumentOrderDetailUserDefinedText14]
					,[DocumentOrderDetailUserDefinedText15]
					,[DocumentOrderDetailSourceID]
				FROM dbo.DocumentOrderDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDDocumentOrderDetail] = Src.[IDDocumentOrderDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[DocumentOrderID] = Src.[DocumentOrderID]
						,Dest.[DocumentOrderDetailAddDateTime] = Src.[DocumentOrderDetailAddDateTime]
						,Dest.[DocumentOrderDetailEditDateTime] = Src.[DocumentOrderDetailEditDateTime]
						,Dest.[DocumentOrderDetailAddUserCode] = Src.[DocumentOrderDetailAddUserCode]
						,Dest.[DocumentOrderDetailEditUserCode] = Src.[DocumentOrderDetailEditUserCode]
						,Dest.[DocumentOrderDetailDocumentCode] = Src.[DocumentOrderDetailDocumentCode]
						,Dest.[DocumentOrderDetailAllDocumentsReceived] = Src.[DocumentOrderDetailAllDocumentsReceived]
						,Dest.[DocumentOrderDetailDocumentReceivedDateTime] = Src.[DocumentOrderDetailDocumentReceivedDateTime]
						,Dest.[DocumentOrderDetailUserDefinedYesNo01] = Src.[DocumentOrderDetailUserDefinedYesNo01]
						,Dest.[DocumentOrderDetailUserDefinedYesNo02] = Src.[DocumentOrderDetailUserDefinedYesNo02]
						,Dest.[DocumentOrderDetailUserDefinedYesNo03] = Src.[DocumentOrderDetailUserDefinedYesNo03]
						,Dest.[DocumentOrderDetailUserDefinedYesNo04] = Src.[DocumentOrderDetailUserDefinedYesNo04]
						,Dest.[DocumentOrderDetailUserDefinedYesNo05] = Src.[DocumentOrderDetailUserDefinedYesNo05]
						,Dest.[DocumentOrderDetailUserDefinedDateTime01] = Src.[DocumentOrderDetailUserDefinedDateTime01]
						,Dest.[DocumentOrderDetailUserDefinedDateTime02] = Src.[DocumentOrderDetailUserDefinedDateTime02]
						,Dest.[DocumentOrderDetailUserDefinedDateTime03] = Src.[DocumentOrderDetailUserDefinedDateTime03]
						,Dest.[DocumentOrderDetailUserDefinedDateTime04] = Src.[DocumentOrderDetailUserDefinedDateTime04]
						,Dest.[DocumentOrderDetailUserDefinedDateTime05] = Src.[DocumentOrderDetailUserDefinedDateTime05]
						,Dest.[DocumentOrderDetailUserDefinedDateTime06] = Src.[DocumentOrderDetailUserDefinedDateTime06]
						,Dest.[DocumentOrderDetailUserDefinedDateTime07] = Src.[DocumentOrderDetailUserDefinedDateTime07]
						,Dest.[DocumentOrderDetailUserDefinedDateTime09] = Src.[DocumentOrderDetailUserDefinedDateTime09]
						,Dest.[DocumentOrderDetailUserDefinedDateTime10] = Src.[DocumentOrderDetailUserDefinedDateTime10]
						,Dest.[DocumentOrderDetailUserDefinedNumber01] = Src.[DocumentOrderDetailUserDefinedNumber01]
						,Dest.[DocumentOrderDetailUserDefinedNumber02] = Src.[DocumentOrderDetailUserDefinedNumber02]
						,Dest.[DocumentOrderDetailUserDefinedNumber03] = Src.[DocumentOrderDetailUserDefinedNumber03]
						,Dest.[DocumentOrderDetailUserDefinedNumber04] = Src.[DocumentOrderDetailUserDefinedNumber04]
						,Dest.[DocumentOrderDetailUserDefinedNumber05] = Src.[DocumentOrderDetailUserDefinedNumber05]
						,Dest.[DocumentOrderDetailUserDefinedLongText01] = Src.[DocumentOrderDetailUserDefinedLongText01]
						,Dest.[DocumentOrderDetailUserDefinedLongText02] = Src.[DocumentOrderDetailUserDefinedLongText02]
						,Dest.[DocumentOrderDetailUserDefinedLongText03] = Src.[DocumentOrderDetailUserDefinedLongText03]
						,Dest.[DocumentOrderDetailUserDefinedLongText04] = Src.[DocumentOrderDetailUserDefinedLongText04]
						,Dest.[DocumentOrderDetailUserDefinedLongText05] = Src.[DocumentOrderDetailUserDefinedLongText05]
						,Dest.[DocumentOrderDetailUserDefinedText01] = Src.[DocumentOrderDetailUserDefinedText01]
						,Dest.[DocumentOrderDetailUserDefinedText02] = Src.[DocumentOrderDetailUserDefinedText02]
						,Dest.[DocumentOrderDetailUserDefinedText03] = Src.[DocumentOrderDetailUserDefinedText03]
						,Dest.[DocumentOrderDetailUserDefinedText04] = Src.[DocumentOrderDetailUserDefinedText04]
						,Dest.[DocumentOrderDetailUserDefinedText05] = Src.[DocumentOrderDetailUserDefinedText05]
						,Dest.[DocumentOrderDetailUserDefinedText06] = Src.[DocumentOrderDetailUserDefinedText06]
						,Dest.[DocumentOrderDetailUserDefinedText07] = Src.[DocumentOrderDetailUserDefinedText07]
						,Dest.[DocumentOrderDetailUserDefinedText08] = Src.[DocumentOrderDetailUserDefinedText08]
						,Dest.[DocumentOrderDetailUserDefinedText09] = Src.[DocumentOrderDetailUserDefinedText09]
						,Dest.[DocumentOrderDetailUserDefinedText10] = Src.[DocumentOrderDetailUserDefinedText10]
						,Dest.[DocumentOrderDetailUserDefinedText11] = Src.[DocumentOrderDetailUserDefinedText11]
						,Dest.[DocumentOrderDetailUserDefinedText12] = Src.[DocumentOrderDetailUserDefinedText12]
						,Dest.[DocumentOrderDetailUserDefinedText13] = Src.[DocumentOrderDetailUserDefinedText13]
						,Dest.[DocumentOrderDetailUserDefinedText14] = Src.[DocumentOrderDetailUserDefinedText14]
						,Dest.[DocumentOrderDetailUserDefinedText15] = Src.[DocumentOrderDetailUserDefinedText15]
						,Dest.[DocumentOrderDetailSourceID] = Src.[DocumentOrderDetailSourceID]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDDocumentOrderDetail]
						,[DocumentOrderID]
						,[DocumentOrderDetailAddDateTime]
						,[DocumentOrderDetailEditDateTime]
						,[DocumentOrderDetailAddUserCode]
						,[DocumentOrderDetailEditUserCode]
						,[DocumentOrderDetailDocumentCode]
						,[DocumentOrderDetailAllDocumentsReceived]
						,[DocumentOrderDetailDocumentReceivedDateTime]
						,[DocumentOrderDetailUserDefinedYesNo01]
						,[DocumentOrderDetailUserDefinedYesNo02]
						,[DocumentOrderDetailUserDefinedYesNo03]
						,[DocumentOrderDetailUserDefinedYesNo04]
						,[DocumentOrderDetailUserDefinedYesNo05]
						,[DocumentOrderDetailUserDefinedDateTime01]
						,[DocumentOrderDetailUserDefinedDateTime02]
						,[DocumentOrderDetailUserDefinedDateTime03]
						,[DocumentOrderDetailUserDefinedDateTime04]
						,[DocumentOrderDetailUserDefinedDateTime05]
						,[DocumentOrderDetailUserDefinedDateTime06]
						,[DocumentOrderDetailUserDefinedDateTime07]
						,[DocumentOrderDetailUserDefinedDateTime09]
						,[DocumentOrderDetailUserDefinedDateTime10]
						,[DocumentOrderDetailUserDefinedNumber01]
						,[DocumentOrderDetailUserDefinedNumber02]
						,[DocumentOrderDetailUserDefinedNumber03]
						,[DocumentOrderDetailUserDefinedNumber04]
						,[DocumentOrderDetailUserDefinedNumber05]
						,[DocumentOrderDetailUserDefinedLongText01]
						,[DocumentOrderDetailUserDefinedLongText02]
						,[DocumentOrderDetailUserDefinedLongText03]
						,[DocumentOrderDetailUserDefinedLongText04]
						,[DocumentOrderDetailUserDefinedLongText05]
						,[DocumentOrderDetailUserDefinedText01]
						,[DocumentOrderDetailUserDefinedText02]
						,[DocumentOrderDetailUserDefinedText03]
						,[DocumentOrderDetailUserDefinedText04]
						,[DocumentOrderDetailUserDefinedText05]
						,[DocumentOrderDetailUserDefinedText06]
						,[DocumentOrderDetailUserDefinedText07]
						,[DocumentOrderDetailUserDefinedText08]
						,[DocumentOrderDetailUserDefinedText09]
						,[DocumentOrderDetailUserDefinedText10]
						,[DocumentOrderDetailUserDefinedText11]
						,[DocumentOrderDetailUserDefinedText12]
						,[DocumentOrderDetailUserDefinedText13]
						,[DocumentOrderDetailUserDefinedText14]
						,[DocumentOrderDetailUserDefinedText15]
						,[DocumentOrderDetailSourceID]
						)
					VALUES (
						Src.[IDDocumentOrderDetail]
						,Src.[DocumentOrderID]
						,Src.[DocumentOrderDetailAddDateTime]
						,Src.[DocumentOrderDetailEditDateTime]
						,Src.[DocumentOrderDetailAddUserCode]
						,Src.[DocumentOrderDetailEditUserCode]
						,Src.[DocumentOrderDetailDocumentCode]
						,Src.[DocumentOrderDetailAllDocumentsReceived]
						,Src.[DocumentOrderDetailDocumentReceivedDateTime]
						,Src.[DocumentOrderDetailUserDefinedYesNo01]
						,Src.[DocumentOrderDetailUserDefinedYesNo02]
						,Src.[DocumentOrderDetailUserDefinedYesNo03]
						,Src.[DocumentOrderDetailUserDefinedYesNo04]
						,Src.[DocumentOrderDetailUserDefinedYesNo05]
						,Src.[DocumentOrderDetailUserDefinedDateTime01]
						,Src.[DocumentOrderDetailUserDefinedDateTime02]
						,Src.[DocumentOrderDetailUserDefinedDateTime03]
						,Src.[DocumentOrderDetailUserDefinedDateTime04]
						,Src.[DocumentOrderDetailUserDefinedDateTime05]
						,Src.[DocumentOrderDetailUserDefinedDateTime06]
						,Src.[DocumentOrderDetailUserDefinedDateTime07]
						,Src.[DocumentOrderDetailUserDefinedDateTime09]
						,Src.[DocumentOrderDetailUserDefinedDateTime10]
						,Src.[DocumentOrderDetailUserDefinedNumber01]
						,Src.[DocumentOrderDetailUserDefinedNumber02]
						,Src.[DocumentOrderDetailUserDefinedNumber03]
						,Src.[DocumentOrderDetailUserDefinedNumber04]
						,Src.[DocumentOrderDetailUserDefinedNumber05]
						,Src.[DocumentOrderDetailUserDefinedLongText01]
						,Src.[DocumentOrderDetailUserDefinedLongText02]
						,Src.[DocumentOrderDetailUserDefinedLongText03]
						,Src.[DocumentOrderDetailUserDefinedLongText04]
						,Src.[DocumentOrderDetailUserDefinedLongText05]
						,Src.[DocumentOrderDetailUserDefinedText01]
						,Src.[DocumentOrderDetailUserDefinedText02]
						,Src.[DocumentOrderDetailUserDefinedText03]
						,Src.[DocumentOrderDetailUserDefinedText04]
						,Src.[DocumentOrderDetailUserDefinedText05]
						,Src.[DocumentOrderDetailUserDefinedText06]
						,Src.[DocumentOrderDetailUserDefinedText07]
						,Src.[DocumentOrderDetailUserDefinedText08]
						,Src.[DocumentOrderDetailUserDefinedText09]
						,Src.[DocumentOrderDetailUserDefinedText10]
						,Src.[DocumentOrderDetailUserDefinedText11]
						,Src.[DocumentOrderDetailUserDefinedText12]
						,Src.[DocumentOrderDetailUserDefinedText13]
						,Src.[DocumentOrderDetailUserDefinedText14]
						,Src.[DocumentOrderDetailUserDefinedText15]
						,Src.[DocumentOrderDetailSourceID]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDDocumentOrderDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDDocumentOrderDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].DocumentOrderDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrderDetails Dest WITH (NOLOCK) ON Src.IDDocumentOrderDetail = Dest.IDDocumentOrderDetail
					WHERE Dest.[DocumentOrderDetailEditDateTime] < Src.[DocumentOrderDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[DocumentOrderID] = Src.[DocumentOrderID]
					,Dest.[DocumentOrderDetailAddDateTime] = Src.[DocumentOrderDetailAddDateTime]
					,Dest.[DocumentOrderDetailEditDateTime] = Src.[DocumentOrderDetailEditDateTime]
					,Dest.[DocumentOrderDetailAddUserCode] = Src.[DocumentOrderDetailAddUserCode]
					,Dest.[DocumentOrderDetailEditUserCode] = Src.[DocumentOrderDetailEditUserCode]
					,Dest.[DocumentOrderDetailDocumentCode] = Src.[DocumentOrderDetailDocumentCode]
					,Dest.[DocumentOrderDetailAllDocumentsReceived] = Src.[DocumentOrderDetailAllDocumentsReceived]
					,Dest.[DocumentOrderDetailDocumentReceivedDateTime] = Src.[DocumentOrderDetailDocumentReceivedDateTime]
					,Dest.[DocumentOrderDetailUserDefinedYesNo01] = Src.[DocumentOrderDetailUserDefinedYesNo01]
					,Dest.[DocumentOrderDetailUserDefinedYesNo02] = Src.[DocumentOrderDetailUserDefinedYesNo02]
					,Dest.[DocumentOrderDetailUserDefinedYesNo03] = Src.[DocumentOrderDetailUserDefinedYesNo03]
					,Dest.[DocumentOrderDetailUserDefinedYesNo04] = Src.[DocumentOrderDetailUserDefinedYesNo04]
					,Dest.[DocumentOrderDetailUserDefinedYesNo05] = Src.[DocumentOrderDetailUserDefinedYesNo05]
					,Dest.[DocumentOrderDetailUserDefinedDateTime01] = Src.[DocumentOrderDetailUserDefinedDateTime01]
					,Dest.[DocumentOrderDetailUserDefinedDateTime02] = Src.[DocumentOrderDetailUserDefinedDateTime02]
					,Dest.[DocumentOrderDetailUserDefinedDateTime03] = Src.[DocumentOrderDetailUserDefinedDateTime03]
					,Dest.[DocumentOrderDetailUserDefinedDateTime04] = Src.[DocumentOrderDetailUserDefinedDateTime04]
					,Dest.[DocumentOrderDetailUserDefinedDateTime05] = Src.[DocumentOrderDetailUserDefinedDateTime05]
					,Dest.[DocumentOrderDetailUserDefinedDateTime06] = Src.[DocumentOrderDetailUserDefinedDateTime06]
					,Dest.[DocumentOrderDetailUserDefinedDateTime07] = Src.[DocumentOrderDetailUserDefinedDateTime07]
					,Dest.[DocumentOrderDetailUserDefinedDateTime09] = Src.[DocumentOrderDetailUserDefinedDateTime09]
					,Dest.[DocumentOrderDetailUserDefinedDateTime10] = Src.[DocumentOrderDetailUserDefinedDateTime10]
					,Dest.[DocumentOrderDetailUserDefinedNumber01] = Src.[DocumentOrderDetailUserDefinedNumber01]
					,Dest.[DocumentOrderDetailUserDefinedNumber02] = Src.[DocumentOrderDetailUserDefinedNumber02]
					,Dest.[DocumentOrderDetailUserDefinedNumber03] = Src.[DocumentOrderDetailUserDefinedNumber03]
					,Dest.[DocumentOrderDetailUserDefinedNumber04] = Src.[DocumentOrderDetailUserDefinedNumber04]
					,Dest.[DocumentOrderDetailUserDefinedNumber05] = Src.[DocumentOrderDetailUserDefinedNumber05]
					,Dest.[DocumentOrderDetailUserDefinedLongText01] = Src.[DocumentOrderDetailUserDefinedLongText01]
					,Dest.[DocumentOrderDetailUserDefinedLongText02] = Src.[DocumentOrderDetailUserDefinedLongText02]
					,Dest.[DocumentOrderDetailUserDefinedLongText03] = Src.[DocumentOrderDetailUserDefinedLongText03]
					,Dest.[DocumentOrderDetailUserDefinedLongText04] = Src.[DocumentOrderDetailUserDefinedLongText04]
					,Dest.[DocumentOrderDetailUserDefinedLongText05] = Src.[DocumentOrderDetailUserDefinedLongText05]
					,Dest.[DocumentOrderDetailUserDefinedText01] = Src.[DocumentOrderDetailUserDefinedText01]
					,Dest.[DocumentOrderDetailUserDefinedText02] = Src.[DocumentOrderDetailUserDefinedText02]
					,Dest.[DocumentOrderDetailUserDefinedText03] = Src.[DocumentOrderDetailUserDefinedText03]
					,Dest.[DocumentOrderDetailUserDefinedText04] = Src.[DocumentOrderDetailUserDefinedText04]
					,Dest.[DocumentOrderDetailUserDefinedText05] = Src.[DocumentOrderDetailUserDefinedText05]
					,Dest.[DocumentOrderDetailUserDefinedText06] = Src.[DocumentOrderDetailUserDefinedText06]
					,Dest.[DocumentOrderDetailUserDefinedText07] = Src.[DocumentOrderDetailUserDefinedText07]
					,Dest.[DocumentOrderDetailUserDefinedText08] = Src.[DocumentOrderDetailUserDefinedText08]
					,Dest.[DocumentOrderDetailUserDefinedText09] = Src.[DocumentOrderDetailUserDefinedText09]
					,Dest.[DocumentOrderDetailUserDefinedText10] = Src.[DocumentOrderDetailUserDefinedText10]
					,Dest.[DocumentOrderDetailUserDefinedText11] = Src.[DocumentOrderDetailUserDefinedText11]
					,Dest.[DocumentOrderDetailUserDefinedText12] = Src.[DocumentOrderDetailUserDefinedText12]
					,Dest.[DocumentOrderDetailUserDefinedText13] = Src.[DocumentOrderDetailUserDefinedText13]
					,Dest.[DocumentOrderDetailUserDefinedText14] = Src.[DocumentOrderDetailUserDefinedText14]
					,Dest.[DocumentOrderDetailUserDefinedText15] = Src.[DocumentOrderDetailUserDefinedText15]
					,Dest.[DocumentOrderDetailSourceID] = Src.[DocumentOrderDetailSourceID]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDDocumentOrderDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDDocumentOrderDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].DocumentOrderDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrderDetails Dest ON Src.IDDocumentOrderDetail = Dest.IDDocumentOrderDetail
				WHERE Dest.[DocumentOrderDetailEditDateTime] < Src.[DocumentOrderDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].DocumentOrderDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrderDetails Dest WITH (NOLOCK) ON Src.IDDocumentOrderDetail = Dest.IDDocumentOrderDetail
					WHERE Dest.IDDocumentOrderDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrderDetails (
					[IDDocumentOrderDetail]
					,[DocumentOrderID]
					,[DocumentOrderDetailAddDateTime]
					,[DocumentOrderDetailEditDateTime]
					,[DocumentOrderDetailAddUserCode]
					,[DocumentOrderDetailEditUserCode]
					,[DocumentOrderDetailDocumentCode]
					,[DocumentOrderDetailAllDocumentsReceived]
					,[DocumentOrderDetailDocumentReceivedDateTime]
					,[DocumentOrderDetailUserDefinedYesNo01]
					,[DocumentOrderDetailUserDefinedYesNo02]
					,[DocumentOrderDetailUserDefinedYesNo03]
					,[DocumentOrderDetailUserDefinedYesNo04]
					,[DocumentOrderDetailUserDefinedYesNo05]
					,[DocumentOrderDetailUserDefinedDateTime01]
					,[DocumentOrderDetailUserDefinedDateTime02]
					,[DocumentOrderDetailUserDefinedDateTime03]
					,[DocumentOrderDetailUserDefinedDateTime04]
					,[DocumentOrderDetailUserDefinedDateTime05]
					,[DocumentOrderDetailUserDefinedDateTime06]
					,[DocumentOrderDetailUserDefinedDateTime07]
					,[DocumentOrderDetailUserDefinedDateTime09]
					,[DocumentOrderDetailUserDefinedDateTime10]
					,[DocumentOrderDetailUserDefinedNumber01]
					,[DocumentOrderDetailUserDefinedNumber02]
					,[DocumentOrderDetailUserDefinedNumber03]
					,[DocumentOrderDetailUserDefinedNumber04]
					,[DocumentOrderDetailUserDefinedNumber05]
					,[DocumentOrderDetailUserDefinedLongText01]
					,[DocumentOrderDetailUserDefinedLongText02]
					,[DocumentOrderDetailUserDefinedLongText03]
					,[DocumentOrderDetailUserDefinedLongText04]
					,[DocumentOrderDetailUserDefinedLongText05]
					,[DocumentOrderDetailUserDefinedText01]
					,[DocumentOrderDetailUserDefinedText02]
					,[DocumentOrderDetailUserDefinedText03]
					,[DocumentOrderDetailUserDefinedText04]
					,[DocumentOrderDetailUserDefinedText05]
					,[DocumentOrderDetailUserDefinedText06]
					,[DocumentOrderDetailUserDefinedText07]
					,[DocumentOrderDetailUserDefinedText08]
					,[DocumentOrderDetailUserDefinedText09]
					,[DocumentOrderDetailUserDefinedText10]
					,[DocumentOrderDetailUserDefinedText11]
					,[DocumentOrderDetailUserDefinedText12]
					,[DocumentOrderDetailUserDefinedText13]
					,[DocumentOrderDetailUserDefinedText14]
					,[DocumentOrderDetailUserDefinedText15]
					,[DocumentOrderDetailSourceID]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDDocumentOrderDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDDocumentOrderDetail]
					,Src.[DocumentOrderID]
					,Src.[DocumentOrderDetailAddDateTime]
					,Src.[DocumentOrderDetailEditDateTime]
					,Src.[DocumentOrderDetailAddUserCode]
					,Src.[DocumentOrderDetailEditUserCode]
					,Src.[DocumentOrderDetailDocumentCode]
					,Src.[DocumentOrderDetailAllDocumentsReceived]
					,Src.[DocumentOrderDetailDocumentReceivedDateTime]
					,Src.[DocumentOrderDetailUserDefinedYesNo01]
					,Src.[DocumentOrderDetailUserDefinedYesNo02]
					,Src.[DocumentOrderDetailUserDefinedYesNo03]
					,Src.[DocumentOrderDetailUserDefinedYesNo04]
					,Src.[DocumentOrderDetailUserDefinedYesNo05]
					,Src.[DocumentOrderDetailUserDefinedDateTime01]
					,Src.[DocumentOrderDetailUserDefinedDateTime02]
					,Src.[DocumentOrderDetailUserDefinedDateTime03]
					,Src.[DocumentOrderDetailUserDefinedDateTime04]
					,Src.[DocumentOrderDetailUserDefinedDateTime05]
					,Src.[DocumentOrderDetailUserDefinedDateTime06]
					,Src.[DocumentOrderDetailUserDefinedDateTime07]
					,Src.[DocumentOrderDetailUserDefinedDateTime09]
					,Src.[DocumentOrderDetailUserDefinedDateTime10]
					,Src.[DocumentOrderDetailUserDefinedNumber01]
					,Src.[DocumentOrderDetailUserDefinedNumber02]
					,Src.[DocumentOrderDetailUserDefinedNumber03]
					,Src.[DocumentOrderDetailUserDefinedNumber04]
					,Src.[DocumentOrderDetailUserDefinedNumber05]
					,Src.[DocumentOrderDetailUserDefinedLongText01]
					,Src.[DocumentOrderDetailUserDefinedLongText02]
					,Src.[DocumentOrderDetailUserDefinedLongText03]
					,Src.[DocumentOrderDetailUserDefinedLongText04]
					,Src.[DocumentOrderDetailUserDefinedLongText05]
					,Src.[DocumentOrderDetailUserDefinedText01]
					,Src.[DocumentOrderDetailUserDefinedText02]
					,Src.[DocumentOrderDetailUserDefinedText03]
					,Src.[DocumentOrderDetailUserDefinedText04]
					,Src.[DocumentOrderDetailUserDefinedText05]
					,Src.[DocumentOrderDetailUserDefinedText06]
					,Src.[DocumentOrderDetailUserDefinedText07]
					,Src.[DocumentOrderDetailUserDefinedText08]
					,Src.[DocumentOrderDetailUserDefinedText09]
					,Src.[DocumentOrderDetailUserDefinedText10]
					,Src.[DocumentOrderDetailUserDefinedText11]
					,Src.[DocumentOrderDetailUserDefinedText12]
					,Src.[DocumentOrderDetailUserDefinedText13]
					,Src.[DocumentOrderDetailUserDefinedText14]
					,Src.[DocumentOrderDetailUserDefinedText15]
					,Src.[DocumentOrderDetailSourceID]
				FROM [dbo].DocumentOrderDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentOrderDetails Dest WITH (NOLOCK) ON Src.IDDocumentOrderDetail = Dest.IDDocumentOrderDetail
				WHERE Dest.IDDocumentOrderDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') DocumentOrderDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `DocumentOrderDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------DocumentManagementLogs
	SET @CurrentTableName = 'DocumentManagementLogs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentManagementLogs AS Dest
			USING (
				SELECT [IDDocumentManagementLog]
					,[DocumentOrderID]
					,[DocumentManagementLogDateTime]
					,[DocumentManagementLogUserLogin]
					,[StatusID]
					,[DocumentManagementLogEvent]
					,[DocumentManagementLogInfo]
					,[EmailDefinitionID]
					,[DocumentManagementLogEmailID]
					,[DocumentOrderDetailID]
					,[DocumentManagementLogTechnicalInfo]
				FROM dbo.DocumentManagementLogs T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDDocumentManagementLog] = Src.[IDDocumentManagementLog])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[DocumentOrderID] = Src.[DocumentOrderID]
						,Dest.[DocumentManagementLogDateTime] = Src.[DocumentManagementLogDateTime]
						,Dest.[DocumentManagementLogUserLogin] = Src.[DocumentManagementLogUserLogin]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[DocumentManagementLogEvent] = Src.[DocumentManagementLogEvent]
						,Dest.[DocumentManagementLogInfo] = Src.[DocumentManagementLogInfo]
						,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
						,Dest.[DocumentManagementLogEmailID] = Src.[DocumentManagementLogEmailID]
						,Dest.[DocumentOrderDetailID] = Src.[DocumentOrderDetailID]
						,Dest.[DocumentManagementLogTechnicalInfo] = Src.[DocumentManagementLogTechnicalInfo]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDDocumentManagementLog]
						,[DocumentOrderID]
						,[DocumentManagementLogDateTime]
						,[DocumentManagementLogUserLogin]
						,[StatusID]
						,[DocumentManagementLogEvent]
						,[DocumentManagementLogInfo]
						,[EmailDefinitionID]
						,[DocumentManagementLogEmailID]
						,[DocumentOrderDetailID]
						,[DocumentManagementLogTechnicalInfo]
						)
					VALUES (
						Src.[IDDocumentManagementLog]
						,Src.[DocumentOrderID]
						,Src.[DocumentManagementLogDateTime]
						,Src.[DocumentManagementLogUserLogin]
						,Src.[StatusID]
						,Src.[DocumentManagementLogEvent]
						,Src.[DocumentManagementLogInfo]
						,Src.[EmailDefinitionID]
						,Src.[DocumentManagementLogEmailID]
						,Src.[DocumentOrderDetailID]
						,Src.[DocumentManagementLogTechnicalInfo]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDDocumentManagementLog] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDDocumentManagementLog] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].DocumentManagementLogs Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentManagementLogs Dest WITH (NOLOCK) ON Src.IDDocumentManagementLog = Dest.IDDocumentManagementLog
					WHERE Dest.[DocumentManagementLogDateTime] < Src.[DocumentManagementLogDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[DocumentOrderID] = Src.[DocumentOrderID]
					,Dest.[DocumentManagementLogDateTime] = Src.[DocumentManagementLogDateTime]
					,Dest.[DocumentManagementLogUserLogin] = Src.[DocumentManagementLogUserLogin]
					,Dest.[StatusID] = Src.[StatusID]
					,Dest.[DocumentManagementLogEvent] = Src.[DocumentManagementLogEvent]
					,Dest.[DocumentManagementLogInfo] = Src.[DocumentManagementLogInfo]
					,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
					,Dest.[DocumentManagementLogEmailID] = Src.[DocumentManagementLogEmailID]
					,Dest.[DocumentOrderDetailID] = Src.[DocumentOrderDetailID]
					,Dest.[DocumentManagementLogTechnicalInfo] = Src.[DocumentManagementLogTechnicalInfo]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDDocumentManagementLog AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDDocumentManagementLog AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].DocumentManagementLogs Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentManagementLogs Dest ON Src.IDDocumentManagementLog = Dest.IDDocumentManagementLog
				WHERE Dest.[DocumentManagementLogDateTime] < Src.[DocumentManagementLogDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].DocumentManagementLogs Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentManagementLogs Dest WITH (NOLOCK) ON Src.IDDocumentManagementLog = Dest.IDDocumentManagementLog
					WHERE Dest.IDDocumentManagementLog IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentManagementLogs (
					[IDDocumentManagementLog]
					,[DocumentOrderID]
					,[DocumentManagementLogDateTime]
					,[DocumentManagementLogUserLogin]
					,[StatusID]
					,[DocumentManagementLogEvent]
					,[DocumentManagementLogInfo]
					,[EmailDefinitionID]
					,[DocumentManagementLogEmailID]
					,[DocumentOrderDetailID]
					,[DocumentManagementLogTechnicalInfo]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDDocumentManagementLog AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDDocumentManagementLog]
					,Src.[DocumentOrderID]
					,Src.[DocumentManagementLogDateTime]
					,Src.[DocumentManagementLogUserLogin]
					,Src.[StatusID]
					,Src.[DocumentManagementLogEvent]
					,Src.[DocumentManagementLogInfo]
					,Src.[EmailDefinitionID]
					,Src.[DocumentManagementLogEmailID]
					,Src.[DocumentOrderDetailID]
					,Src.[DocumentManagementLogTechnicalInfo]
				FROM [dbo].DocumentManagementLogs Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.DocumentManagementLogs Dest WITH (NOLOCK) ON Src.IDDocumentManagementLog = Dest.IDDocumentManagementLog
				WHERE Dest.IDDocumentManagementLog IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') DocumentManagementLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `DocumentManagementLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----Warehousing
	------WarehouseOrders
	SET @CurrentTableName = 'WarehouseOrders';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrders AS Dest
			USING (
				SELECT [IDWarehouseOrder]
					,[WarehouseOrderAddDateTime]
					,[WarehouseOrderEditDateTime]
					,[WarehouseOrderAddUserCode]
					,[WarehouseOrderEditUserCode]
					,[SubContextCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[WarehouseOrderStatusChangeDateTime]
					,[WarehouseOrderNumber]
					,[WarehouseOrderUserDefinedText01]
					,[WarehouseOrderUserDefinedText02]
					,[WarehouseOrderUserDefinedText03]
					,[WarehouseOrderUserDefinedText04]
					,[WarehouseOrderUserDefinedText05]
					,[WarehouseOrderUserDefinedDateTime01]
					,[WarehouseOrderUserDefinedDateTime02]
					,[WarehouseOrderUserDefinedDateTime03]
					,[WarehouseOrderUserDefinedDateTime04]
					,[WarehouseOrderUserDefinedDateTime05]
					,[CompanyIDWarehouse]
					,[WarehouseOrderWarehouseCompanyName]
					,[WarehouseOrderWarehouseStreet]
					,[WarehouseOrderWarehouseCity]
					,[WarehouseOrderWarehouseZipCode]
					,[WarehouseOrderWarehouseCountry]
					,[WarehouseOrderWarehousePhone]
					,[WarehouseOrderWarehouseFax]
					,[WarehouseOrderWarehouseEmail]
					,[WarehouseOrderWarehouseContact]
					,[WarehouseOrderVolume]
					,[WarehouseOrderPackages]
					,[WarehouseOrderQuantity]
					,[WarehouseOrderWeight]
					,[WarehouseOrderPallets]
					,[WarehouseOrderEstimatedCompletionDateTime]
					,[WarehouseOrderActualCompletionDateTime]
					,[WarehouseOrderDangerousGoods]
					,[WarehouseOrderInboundDateTime]
					,[WarehouseOrderUserDefinedYesNo01]
					,[WarehouseOrderUserDefinedYesNo02]
					,[WarehouseOrderUserDefinedYesNo03]
					,[WarehouseOrderUserDefinedYesNo04]
					,[WarehouseOrderUserDefinedYesNo05]
					,[WarehouseOrderUserDefinedDateTime06]
					,[WarehouseOrderUserDefinedDateTime07]
					,[WarehouseOrderUserDefinedDateTime09]
					,[WarehouseOrderUserDefinedDateTime10]
					,[WarehouseOrderUserDefinedNumber01]
					,[WarehouseOrderUserDefinedNumber02]
					,[WarehouseOrderUserDefinedNumber03]
					,[WarehouseOrderUserDefinedNumber04]
					,[WarehouseOrderUserDefinedNumber05]
					,[WarehouseOrderUserDefinedLongText01]
					,[WarehouseOrderUserDefinedLongText02]
					,[WarehouseOrderUserDefinedLongText03]
					,[WarehouseOrderUserDefinedLongText04]
					,[WarehouseOrderUserDefinedLongText05]
					,[WarehouseOrderUserDefinedText06]
					,[WarehouseOrderUserDefinedText07]
					,[WarehouseOrderUserDefinedText08]
					,[WarehouseOrderUserDefinedText09]
					,[WarehouseOrderUserDefinedText10]
					,[WarehouseOrderUserDefinedText11]
					,[WarehouseOrderUserDefinedText12]
					,[WarehouseOrderUserDefinedText13]
					,[WarehouseOrderUserDefinedText14]
					,[WarehouseOrderUserDefinedText15]
					,[WarehouseOrderChangesAcceptedDateTime]
					,[WarehouseOrderRuleType]
					,[WarehouseOrderCreationDataSource]
					,[WarehouseOrderChangedDataStorageString]
					,[CountryCode]
					,[WarehouseOrderOwnerLogin]
					,[WarehouseOrderImportBatch]
					,[WarehouseOrderNewEDIPending]
				FROM dbo.WarehouseOrders T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDWarehouseOrder] = Src.[IDWarehouseOrder])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[WarehouseOrderAddDateTime] = Src.[WarehouseOrderAddDateTime]
						,Dest.[WarehouseOrderEditDateTime] = Src.[WarehouseOrderEditDateTime]
						,Dest.[WarehouseOrderAddUserCode] = Src.[WarehouseOrderAddUserCode]
						,Dest.[WarehouseOrderEditUserCode] = Src.[WarehouseOrderEditUserCode]
						,Dest.[SubContextCode] = Src.[SubContextCode]
						,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
						,Dest.[WarehouseOrderStatusChangeDateTime] = Src.[WarehouseOrderStatusChangeDateTime]
						,Dest.[WarehouseOrderNumber] = Src.[WarehouseOrderNumber]
						,Dest.[WarehouseOrderUserDefinedText01] = Src.[WarehouseOrderUserDefinedText01]
						,Dest.[WarehouseOrderUserDefinedText02] = Src.[WarehouseOrderUserDefinedText02]
						,Dest.[WarehouseOrderUserDefinedText03] = Src.[WarehouseOrderUserDefinedText03]
						,Dest.[WarehouseOrderUserDefinedText04] = Src.[WarehouseOrderUserDefinedText04]
						,Dest.[WarehouseOrderUserDefinedText05] = Src.[WarehouseOrderUserDefinedText05]
						,Dest.[WarehouseOrderUserDefinedDateTime01] = Src.[WarehouseOrderUserDefinedDateTime01]
						,Dest.[WarehouseOrderUserDefinedDateTime02] = Src.[WarehouseOrderUserDefinedDateTime02]
						,Dest.[WarehouseOrderUserDefinedDateTime03] = Src.[WarehouseOrderUserDefinedDateTime03]
						,Dest.[WarehouseOrderUserDefinedDateTime04] = Src.[WarehouseOrderUserDefinedDateTime04]
						,Dest.[WarehouseOrderUserDefinedDateTime05] = Src.[WarehouseOrderUserDefinedDateTime05]
						,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
						,Dest.[WarehouseOrderWarehouseCompanyName] = Src.[WarehouseOrderWarehouseCompanyName]
						,Dest.[WarehouseOrderWarehouseStreet] = Src.[WarehouseOrderWarehouseStreet]
						,Dest.[WarehouseOrderWarehouseCity] = Src.[WarehouseOrderWarehouseCity]
						,Dest.[WarehouseOrderWarehouseZipCode] = Src.[WarehouseOrderWarehouseZipCode]
						,Dest.[WarehouseOrderWarehouseCountry] = Src.[WarehouseOrderWarehouseCountry]
						,Dest.[WarehouseOrderWarehousePhone] = Src.[WarehouseOrderWarehousePhone]
						,Dest.[WarehouseOrderWarehouseFax] = Src.[WarehouseOrderWarehouseFax]
						,Dest.[WarehouseOrderWarehouseEmail] = Src.[WarehouseOrderWarehouseEmail]
						,Dest.[WarehouseOrderWarehouseContact] = Src.[WarehouseOrderWarehouseContact]
						,Dest.[WarehouseOrderVolume] = Src.[WarehouseOrderVolume]
						,Dest.[WarehouseOrderPackages] = Src.[WarehouseOrderPackages]
						,Dest.[WarehouseOrderQuantity] = Src.[WarehouseOrderQuantity]
						,Dest.[WarehouseOrderWeight] = Src.[WarehouseOrderWeight]
						,Dest.[WarehouseOrderPallets] = Src.[WarehouseOrderPallets]
						,Dest.[WarehouseOrderEstimatedCompletionDateTime] = Src.[WarehouseOrderEstimatedCompletionDateTime]
						,Dest.[WarehouseOrderActualCompletionDateTime] = Src.[WarehouseOrderActualCompletionDateTime]
						,Dest.[WarehouseOrderDangerousGoods] = Src.[WarehouseOrderDangerousGoods]
						,Dest.[WarehouseOrderInboundDateTime] = Src.[WarehouseOrderInboundDateTime]
						,Dest.[WarehouseOrderUserDefinedYesNo01] = Src.[WarehouseOrderUserDefinedYesNo01]
						,Dest.[WarehouseOrderUserDefinedYesNo02] = Src.[WarehouseOrderUserDefinedYesNo02]
						,Dest.[WarehouseOrderUserDefinedYesNo03] = Src.[WarehouseOrderUserDefinedYesNo03]
						,Dest.[WarehouseOrderUserDefinedYesNo04] = Src.[WarehouseOrderUserDefinedYesNo04]
						,Dest.[WarehouseOrderUserDefinedYesNo05] = Src.[WarehouseOrderUserDefinedYesNo05]
						,Dest.[WarehouseOrderUserDefinedDateTime06] = Src.[WarehouseOrderUserDefinedDateTime06]
						,Dest.[WarehouseOrderUserDefinedDateTime07] = Src.[WarehouseOrderUserDefinedDateTime07]
						,Dest.[WarehouseOrderUserDefinedDateTime09] = Src.[WarehouseOrderUserDefinedDateTime09]
						,Dest.[WarehouseOrderUserDefinedDateTime10] = Src.[WarehouseOrderUserDefinedDateTime10]
						,Dest.[WarehouseOrderUserDefinedNumber01] = Src.[WarehouseOrderUserDefinedNumber01]
						,Dest.[WarehouseOrderUserDefinedNumber02] = Src.[WarehouseOrderUserDefinedNumber02]
						,Dest.[WarehouseOrderUserDefinedNumber03] = Src.[WarehouseOrderUserDefinedNumber03]
						,Dest.[WarehouseOrderUserDefinedNumber04] = Src.[WarehouseOrderUserDefinedNumber04]
						,Dest.[WarehouseOrderUserDefinedNumber05] = Src.[WarehouseOrderUserDefinedNumber05]
						,Dest.[WarehouseOrderUserDefinedLongText01] = Src.[WarehouseOrderUserDefinedLongText01]
						,Dest.[WarehouseOrderUserDefinedLongText02] = Src.[WarehouseOrderUserDefinedLongText02]
						,Dest.[WarehouseOrderUserDefinedLongText03] = Src.[WarehouseOrderUserDefinedLongText03]
						,Dest.[WarehouseOrderUserDefinedLongText04] = Src.[WarehouseOrderUserDefinedLongText04]
						,Dest.[WarehouseOrderUserDefinedLongText05] = Src.[WarehouseOrderUserDefinedLongText05]
						,Dest.[WarehouseOrderUserDefinedText06] = Src.[WarehouseOrderUserDefinedText06]
						,Dest.[WarehouseOrderUserDefinedText07] = Src.[WarehouseOrderUserDefinedText07]
						,Dest.[WarehouseOrderUserDefinedText08] = Src.[WarehouseOrderUserDefinedText08]
						,Dest.[WarehouseOrderUserDefinedText09] = Src.[WarehouseOrderUserDefinedText09]
						,Dest.[WarehouseOrderUserDefinedText10] = Src.[WarehouseOrderUserDefinedText10]
						,Dest.[WarehouseOrderUserDefinedText11] = Src.[WarehouseOrderUserDefinedText11]
						,Dest.[WarehouseOrderUserDefinedText12] = Src.[WarehouseOrderUserDefinedText12]
						,Dest.[WarehouseOrderUserDefinedText13] = Src.[WarehouseOrderUserDefinedText13]
						,Dest.[WarehouseOrderUserDefinedText14] = Src.[WarehouseOrderUserDefinedText14]
						,Dest.[WarehouseOrderUserDefinedText15] = Src.[WarehouseOrderUserDefinedText15]
						,Dest.[WarehouseOrderChangesAcceptedDateTime] = Src.[WarehouseOrderChangesAcceptedDateTime]
						,Dest.[WarehouseOrderRuleType] = Src.[WarehouseOrderRuleType]
						,Dest.[WarehouseOrderCreationDataSource] = Src.[WarehouseOrderCreationDataSource]
						,Dest.[WarehouseOrderChangedDataStorageString] = Src.[WarehouseOrderChangedDataStorageString]
						,Dest.[CountryCode] = Src.[CountryCode]
						,Dest.[WarehouseOrderOwnerLogin] = Src.[WarehouseOrderOwnerLogin]
						,Dest.[WarehouseOrderImportBatch] = Src.[WarehouseOrderImportBatch]
						,Dest.[WarehouseOrderNewEDIPending] = Src.[WarehouseOrderNewEDIPending]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDWarehouseOrder]
						,[WarehouseOrderAddDateTime]
						,[WarehouseOrderEditDateTime]
						,[WarehouseOrderAddUserCode]
						,[WarehouseOrderEditUserCode]
						,[SubContextCode]
						,[DataEntryDefinitionID]
						,[StatusID]
						,[StatusIDPrevious]
						,[WarehouseOrderStatusChangeDateTime]
						,[WarehouseOrderNumber]
						,[WarehouseOrderUserDefinedText01]
						,[WarehouseOrderUserDefinedText02]
						,[WarehouseOrderUserDefinedText03]
						,[WarehouseOrderUserDefinedText04]
						,[WarehouseOrderUserDefinedText05]
						,[WarehouseOrderUserDefinedDateTime01]
						,[WarehouseOrderUserDefinedDateTime02]
						,[WarehouseOrderUserDefinedDateTime03]
						,[WarehouseOrderUserDefinedDateTime04]
						,[WarehouseOrderUserDefinedDateTime05]
						,[CompanyIDWarehouse]
						,[WarehouseOrderWarehouseCompanyName]
						,[WarehouseOrderWarehouseStreet]
						,[WarehouseOrderWarehouseCity]
						,[WarehouseOrderWarehouseZipCode]
						,[WarehouseOrderWarehouseCountry]
						,[WarehouseOrderWarehousePhone]
						,[WarehouseOrderWarehouseFax]
						,[WarehouseOrderWarehouseEmail]
						,[WarehouseOrderWarehouseContact]
						,[WarehouseOrderVolume]
						,[WarehouseOrderPackages]
						,[WarehouseOrderQuantity]
						,[WarehouseOrderWeight]
						,[WarehouseOrderPallets]
						,[WarehouseOrderEstimatedCompletionDateTime]
						,[WarehouseOrderActualCompletionDateTime]
						,[WarehouseOrderDangerousGoods]
						,[WarehouseOrderInboundDateTime]
						,[WarehouseOrderUserDefinedYesNo01]
						,[WarehouseOrderUserDefinedYesNo02]
						,[WarehouseOrderUserDefinedYesNo03]
						,[WarehouseOrderUserDefinedYesNo04]
						,[WarehouseOrderUserDefinedYesNo05]
						,[WarehouseOrderUserDefinedDateTime06]
						,[WarehouseOrderUserDefinedDateTime07]
						,[WarehouseOrderUserDefinedDateTime09]
						,[WarehouseOrderUserDefinedDateTime10]
						,[WarehouseOrderUserDefinedNumber01]
						,[WarehouseOrderUserDefinedNumber02]
						,[WarehouseOrderUserDefinedNumber03]
						,[WarehouseOrderUserDefinedNumber04]
						,[WarehouseOrderUserDefinedNumber05]
						,[WarehouseOrderUserDefinedLongText01]
						,[WarehouseOrderUserDefinedLongText02]
						,[WarehouseOrderUserDefinedLongText03]
						,[WarehouseOrderUserDefinedLongText04]
						,[WarehouseOrderUserDefinedLongText05]
						,[WarehouseOrderUserDefinedText06]
						,[WarehouseOrderUserDefinedText07]
						,[WarehouseOrderUserDefinedText08]
						,[WarehouseOrderUserDefinedText09]
						,[WarehouseOrderUserDefinedText10]
						,[WarehouseOrderUserDefinedText11]
						,[WarehouseOrderUserDefinedText12]
						,[WarehouseOrderUserDefinedText13]
						,[WarehouseOrderUserDefinedText14]
						,[WarehouseOrderUserDefinedText15]
						,[WarehouseOrderChangesAcceptedDateTime]
						,[WarehouseOrderRuleType]
						,[WarehouseOrderCreationDataSource]
						,[WarehouseOrderChangedDataStorageString]
						,[CountryCode]
						,[WarehouseOrderOwnerLogin]
						,[WarehouseOrderImportBatch]
						,[WarehouseOrderNewEDIPending]
						)
					VALUES (
						Src.[IDWarehouseOrder]
						,Src.[WarehouseOrderAddDateTime]
						,Src.[WarehouseOrderEditDateTime]
						,Src.[WarehouseOrderAddUserCode]
						,Src.[WarehouseOrderEditUserCode]
						,Src.[SubContextCode]
						,Src.[DataEntryDefinitionID]
						,Src.[StatusID]
						,Src.[StatusIDPrevious]
						,Src.[WarehouseOrderStatusChangeDateTime]
						,Src.[WarehouseOrderNumber]
						,Src.[WarehouseOrderUserDefinedText01]
						,Src.[WarehouseOrderUserDefinedText02]
						,Src.[WarehouseOrderUserDefinedText03]
						,Src.[WarehouseOrderUserDefinedText04]
						,Src.[WarehouseOrderUserDefinedText05]
						,Src.[WarehouseOrderUserDefinedDateTime01]
						,Src.[WarehouseOrderUserDefinedDateTime02]
						,Src.[WarehouseOrderUserDefinedDateTime03]
						,Src.[WarehouseOrderUserDefinedDateTime04]
						,Src.[WarehouseOrderUserDefinedDateTime05]
						,Src.[CompanyIDWarehouse]
						,Src.[WarehouseOrderWarehouseCompanyName]
						,Src.[WarehouseOrderWarehouseStreet]
						,Src.[WarehouseOrderWarehouseCity]
						,Src.[WarehouseOrderWarehouseZipCode]
						,Src.[WarehouseOrderWarehouseCountry]
						,Src.[WarehouseOrderWarehousePhone]
						,Src.[WarehouseOrderWarehouseFax]
						,Src.[WarehouseOrderWarehouseEmail]
						,Src.[WarehouseOrderWarehouseContact]
						,Src.[WarehouseOrderVolume]
						,Src.[WarehouseOrderPackages]
						,Src.[WarehouseOrderQuantity]
						,Src.[WarehouseOrderWeight]
						,Src.[WarehouseOrderPallets]
						,Src.[WarehouseOrderEstimatedCompletionDateTime]
						,Src.[WarehouseOrderActualCompletionDateTime]
						,Src.[WarehouseOrderDangerousGoods]
						,Src.[WarehouseOrderInboundDateTime]
						,Src.[WarehouseOrderUserDefinedYesNo01]
						,Src.[WarehouseOrderUserDefinedYesNo02]
						,Src.[WarehouseOrderUserDefinedYesNo03]
						,Src.[WarehouseOrderUserDefinedYesNo04]
						,Src.[WarehouseOrderUserDefinedYesNo05]
						,Src.[WarehouseOrderUserDefinedDateTime06]
						,Src.[WarehouseOrderUserDefinedDateTime07]
						,Src.[WarehouseOrderUserDefinedDateTime09]
						,Src.[WarehouseOrderUserDefinedDateTime10]
						,Src.[WarehouseOrderUserDefinedNumber01]
						,Src.[WarehouseOrderUserDefinedNumber02]
						,Src.[WarehouseOrderUserDefinedNumber03]
						,Src.[WarehouseOrderUserDefinedNumber04]
						,Src.[WarehouseOrderUserDefinedNumber05]
						,Src.[WarehouseOrderUserDefinedLongText01]
						,Src.[WarehouseOrderUserDefinedLongText02]
						,Src.[WarehouseOrderUserDefinedLongText03]
						,Src.[WarehouseOrderUserDefinedLongText04]
						,Src.[WarehouseOrderUserDefinedLongText05]
						,Src.[WarehouseOrderUserDefinedText06]
						,Src.[WarehouseOrderUserDefinedText07]
						,Src.[WarehouseOrderUserDefinedText08]
						,Src.[WarehouseOrderUserDefinedText09]
						,Src.[WarehouseOrderUserDefinedText10]
						,Src.[WarehouseOrderUserDefinedText11]
						,Src.[WarehouseOrderUserDefinedText12]
						,Src.[WarehouseOrderUserDefinedText13]
						,Src.[WarehouseOrderUserDefinedText14]
						,Src.[WarehouseOrderUserDefinedText15]
						,Src.[WarehouseOrderChangesAcceptedDateTime]
						,Src.[WarehouseOrderRuleType]
						,Src.[WarehouseOrderCreationDataSource]
						,Src.[WarehouseOrderChangedDataStorageString]
						,Src.[CountryCode]
						,Src.[WarehouseOrderOwnerLogin]
						,Src.[WarehouseOrderImportBatch]
						,Src.[WarehouseOrderNewEDIPending]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDWarehouseOrder] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDWarehouseOrder] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].WarehouseOrders Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrders Dest WITH (NOLOCK) ON Src.IDWarehouseOrder = Dest.IDWarehouseOrder
					WHERE Dest.WarehouseOrderEditDateTime < Src.WarehouseOrderEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[WarehouseOrderAddDateTime] = Src.[WarehouseOrderAddDateTime]
					,Dest.[WarehouseOrderEditDateTime] = Src.[WarehouseOrderEditDateTime]
					,Dest.[WarehouseOrderAddUserCode] = Src.[WarehouseOrderAddUserCode]
					,Dest.[WarehouseOrderEditUserCode] = Src.[WarehouseOrderEditUserCode]
					,Dest.[SubContextCode] = Src.[SubContextCode]
					,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
					,Dest.[StatusID] = Src.[StatusID]
					,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
					,Dest.[WarehouseOrderStatusChangeDateTime] = Src.[WarehouseOrderStatusChangeDateTime]
					,Dest.[WarehouseOrderNumber] = Src.[WarehouseOrderNumber]
					,Dest.[WarehouseOrderUserDefinedText01] = Src.[WarehouseOrderUserDefinedText01]
					,Dest.[WarehouseOrderUserDefinedText02] = Src.[WarehouseOrderUserDefinedText02]
					,Dest.[WarehouseOrderUserDefinedText03] = Src.[WarehouseOrderUserDefinedText03]
					,Dest.[WarehouseOrderUserDefinedText04] = Src.[WarehouseOrderUserDefinedText04]
					,Dest.[WarehouseOrderUserDefinedText05] = Src.[WarehouseOrderUserDefinedText05]
					,Dest.[WarehouseOrderUserDefinedDateTime01] = Src.[WarehouseOrderUserDefinedDateTime01]
					,Dest.[WarehouseOrderUserDefinedDateTime02] = Src.[WarehouseOrderUserDefinedDateTime02]
					,Dest.[WarehouseOrderUserDefinedDateTime03] = Src.[WarehouseOrderUserDefinedDateTime03]
					,Dest.[WarehouseOrderUserDefinedDateTime04] = Src.[WarehouseOrderUserDefinedDateTime04]
					,Dest.[WarehouseOrderUserDefinedDateTime05] = Src.[WarehouseOrderUserDefinedDateTime05]
					,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
					,Dest.[WarehouseOrderWarehouseCompanyName] = Src.[WarehouseOrderWarehouseCompanyName]
					,Dest.[WarehouseOrderWarehouseStreet] = Src.[WarehouseOrderWarehouseStreet]
					,Dest.[WarehouseOrderWarehouseCity] = Src.[WarehouseOrderWarehouseCity]
					,Dest.[WarehouseOrderWarehouseZipCode] = Src.[WarehouseOrderWarehouseZipCode]
					,Dest.[WarehouseOrderWarehouseCountry] = Src.[WarehouseOrderWarehouseCountry]
					,Dest.[WarehouseOrderWarehousePhone] = Src.[WarehouseOrderWarehousePhone]
					,Dest.[WarehouseOrderWarehouseFax] = Src.[WarehouseOrderWarehouseFax]
					,Dest.[WarehouseOrderWarehouseEmail] = Src.[WarehouseOrderWarehouseEmail]
					,Dest.[WarehouseOrderWarehouseContact] = Src.[WarehouseOrderWarehouseContact]
					,Dest.[WarehouseOrderVolume] = Src.[WarehouseOrderVolume]
					,Dest.[WarehouseOrderPackages] = Src.[WarehouseOrderPackages]
					,Dest.[WarehouseOrderQuantity] = Src.[WarehouseOrderQuantity]
					,Dest.[WarehouseOrderWeight] = Src.[WarehouseOrderWeight]
					,Dest.[WarehouseOrderPallets] = Src.[WarehouseOrderPallets]
					,Dest.[WarehouseOrderEstimatedCompletionDateTime] = Src.[WarehouseOrderEstimatedCompletionDateTime]
					,Dest.[WarehouseOrderActualCompletionDateTime] = Src.[WarehouseOrderActualCompletionDateTime]
					,Dest.[WarehouseOrderDangerousGoods] = Src.[WarehouseOrderDangerousGoods]
					,Dest.[WarehouseOrderInboundDateTime] = Src.[WarehouseOrderInboundDateTime]
					,Dest.[WarehouseOrderUserDefinedYesNo01] = Src.[WarehouseOrderUserDefinedYesNo01]
					,Dest.[WarehouseOrderUserDefinedYesNo02] = Src.[WarehouseOrderUserDefinedYesNo02]
					,Dest.[WarehouseOrderUserDefinedYesNo03] = Src.[WarehouseOrderUserDefinedYesNo03]
					,Dest.[WarehouseOrderUserDefinedYesNo04] = Src.[WarehouseOrderUserDefinedYesNo04]
					,Dest.[WarehouseOrderUserDefinedYesNo05] = Src.[WarehouseOrderUserDefinedYesNo05]
					,Dest.[WarehouseOrderUserDefinedDateTime06] = Src.[WarehouseOrderUserDefinedDateTime06]
					,Dest.[WarehouseOrderUserDefinedDateTime07] = Src.[WarehouseOrderUserDefinedDateTime07]
					,Dest.[WarehouseOrderUserDefinedDateTime09] = Src.[WarehouseOrderUserDefinedDateTime09]
					,Dest.[WarehouseOrderUserDefinedDateTime10] = Src.[WarehouseOrderUserDefinedDateTime10]
					,Dest.[WarehouseOrderUserDefinedNumber01] = Src.[WarehouseOrderUserDefinedNumber01]
					,Dest.[WarehouseOrderUserDefinedNumber02] = Src.[WarehouseOrderUserDefinedNumber02]
					,Dest.[WarehouseOrderUserDefinedNumber03] = Src.[WarehouseOrderUserDefinedNumber03]
					,Dest.[WarehouseOrderUserDefinedNumber04] = Src.[WarehouseOrderUserDefinedNumber04]
					,Dest.[WarehouseOrderUserDefinedNumber05] = Src.[WarehouseOrderUserDefinedNumber05]
					,Dest.[WarehouseOrderUserDefinedLongText01] = Src.[WarehouseOrderUserDefinedLongText01]
					,Dest.[WarehouseOrderUserDefinedLongText02] = Src.[WarehouseOrderUserDefinedLongText02]
					,Dest.[WarehouseOrderUserDefinedLongText03] = Src.[WarehouseOrderUserDefinedLongText03]
					,Dest.[WarehouseOrderUserDefinedLongText04] = Src.[WarehouseOrderUserDefinedLongText04]
					,Dest.[WarehouseOrderUserDefinedLongText05] = Src.[WarehouseOrderUserDefinedLongText05]
					,Dest.[WarehouseOrderUserDefinedText06] = Src.[WarehouseOrderUserDefinedText06]
					,Dest.[WarehouseOrderUserDefinedText07] = Src.[WarehouseOrderUserDefinedText07]
					,Dest.[WarehouseOrderUserDefinedText08] = Src.[WarehouseOrderUserDefinedText08]
					,Dest.[WarehouseOrderUserDefinedText09] = Src.[WarehouseOrderUserDefinedText09]
					,Dest.[WarehouseOrderUserDefinedText10] = Src.[WarehouseOrderUserDefinedText10]
					,Dest.[WarehouseOrderUserDefinedText11] = Src.[WarehouseOrderUserDefinedText11]
					,Dest.[WarehouseOrderUserDefinedText12] = Src.[WarehouseOrderUserDefinedText12]
					,Dest.[WarehouseOrderUserDefinedText13] = Src.[WarehouseOrderUserDefinedText13]
					,Dest.[WarehouseOrderUserDefinedText14] = Src.[WarehouseOrderUserDefinedText14]
					,Dest.[WarehouseOrderUserDefinedText15] = Src.[WarehouseOrderUserDefinedText15]
					,Dest.[WarehouseOrderChangesAcceptedDateTime] = Src.[WarehouseOrderChangesAcceptedDateTime]
					,Dest.[WarehouseOrderRuleType] = Src.[WarehouseOrderRuleType]
					,Dest.[WarehouseOrderCreationDataSource] = Src.[WarehouseOrderCreationDataSource]
					,Dest.[WarehouseOrderChangedDataStorageString] = Src.[WarehouseOrderChangedDataStorageString]
					,Dest.[CountryCode] = Src.[CountryCode]
					,Dest.[WarehouseOrderOwnerLogin] = Src.[WarehouseOrderOwnerLogin]
					,Dest.[WarehouseOrderImportBatch] = Src.[WarehouseOrderImportBatch]
					,Dest.[WarehouseOrderNewEDIPending] = Src.[WarehouseOrderNewEDIPending]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDWarehouseOrder AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDWarehouseOrder AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].WarehouseOrders Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrders Dest ON Src.IDWarehouseOrder = Dest.IDWarehouseOrder
				WHERE Dest.WarehouseOrderEditDateTime < Src.WarehouseOrderEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].WarehouseOrders Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrders Dest WITH (NOLOCK) ON Src.IDWarehouseOrder = Dest.IDWarehouseOrder
					WHERE Dest.IDWarehouseOrder IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrders (
					[IDWarehouseOrder]
					,[WarehouseOrderAddDateTime]
					,[WarehouseOrderEditDateTime]
					,[WarehouseOrderAddUserCode]
					,[WarehouseOrderEditUserCode]
					,[SubContextCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[WarehouseOrderStatusChangeDateTime]
					,[WarehouseOrderNumber]
					,[WarehouseOrderUserDefinedText01]
					,[WarehouseOrderUserDefinedText02]
					,[WarehouseOrderUserDefinedText03]
					,[WarehouseOrderUserDefinedText04]
					,[WarehouseOrderUserDefinedText05]
					,[WarehouseOrderUserDefinedDateTime01]
					,[WarehouseOrderUserDefinedDateTime02]
					,[WarehouseOrderUserDefinedDateTime03]
					,[WarehouseOrderUserDefinedDateTime04]
					,[WarehouseOrderUserDefinedDateTime05]
					,[CompanyIDWarehouse]
					,[WarehouseOrderWarehouseCompanyName]
					,[WarehouseOrderWarehouseStreet]
					,[WarehouseOrderWarehouseCity]
					,[WarehouseOrderWarehouseZipCode]
					,[WarehouseOrderWarehouseCountry]
					,[WarehouseOrderWarehousePhone]
					,[WarehouseOrderWarehouseFax]
					,[WarehouseOrderWarehouseEmail]
					,[WarehouseOrderWarehouseContact]
					,[WarehouseOrderVolume]
					,[WarehouseOrderPackages]
					,[WarehouseOrderQuantity]
					,[WarehouseOrderWeight]
					,[WarehouseOrderPallets]
					,[WarehouseOrderEstimatedCompletionDateTime]
					,[WarehouseOrderActualCompletionDateTime]
					,[WarehouseOrderDangerousGoods]
					,[WarehouseOrderInboundDateTime]
					,[WarehouseOrderUserDefinedYesNo01]
					,[WarehouseOrderUserDefinedYesNo02]
					,[WarehouseOrderUserDefinedYesNo03]
					,[WarehouseOrderUserDefinedYesNo04]
					,[WarehouseOrderUserDefinedYesNo05]
					,[WarehouseOrderUserDefinedDateTime06]
					,[WarehouseOrderUserDefinedDateTime07]
					,[WarehouseOrderUserDefinedDateTime09]
					,[WarehouseOrderUserDefinedDateTime10]
					,[WarehouseOrderUserDefinedNumber01]
					,[WarehouseOrderUserDefinedNumber02]
					,[WarehouseOrderUserDefinedNumber03]
					,[WarehouseOrderUserDefinedNumber04]
					,[WarehouseOrderUserDefinedNumber05]
					,[WarehouseOrderUserDefinedLongText01]
					,[WarehouseOrderUserDefinedLongText02]
					,[WarehouseOrderUserDefinedLongText03]
					,[WarehouseOrderUserDefinedLongText04]
					,[WarehouseOrderUserDefinedLongText05]
					,[WarehouseOrderUserDefinedText06]
					,[WarehouseOrderUserDefinedText07]
					,[WarehouseOrderUserDefinedText08]
					,[WarehouseOrderUserDefinedText09]
					,[WarehouseOrderUserDefinedText10]
					,[WarehouseOrderUserDefinedText11]
					,[WarehouseOrderUserDefinedText12]
					,[WarehouseOrderUserDefinedText13]
					,[WarehouseOrderUserDefinedText14]
					,[WarehouseOrderUserDefinedText15]
					,[WarehouseOrderChangesAcceptedDateTime]
					,[WarehouseOrderRuleType]
					,[WarehouseOrderCreationDataSource]
					,[WarehouseOrderChangedDataStorageString]
					,[CountryCode]
					,[WarehouseOrderOwnerLogin]
					,[WarehouseOrderImportBatch]
					,[WarehouseOrderNewEDIPending]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDWarehouseOrder AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDWarehouseOrder]
					,Src.[WarehouseOrderAddDateTime]
					,Src.[WarehouseOrderEditDateTime]
					,Src.[WarehouseOrderAddUserCode]
					,Src.[WarehouseOrderEditUserCode]
					,Src.[SubContextCode]
					,Src.[DataEntryDefinitionID]
					,Src.[StatusID]
					,Src.[StatusIDPrevious]
					,Src.[WarehouseOrderStatusChangeDateTime]
					,Src.[WarehouseOrderNumber]
					,Src.[WarehouseOrderUserDefinedText01]
					,Src.[WarehouseOrderUserDefinedText02]
					,Src.[WarehouseOrderUserDefinedText03]
					,Src.[WarehouseOrderUserDefinedText04]
					,Src.[WarehouseOrderUserDefinedText05]
					,Src.[WarehouseOrderUserDefinedDateTime01]
					,Src.[WarehouseOrderUserDefinedDateTime02]
					,Src.[WarehouseOrderUserDefinedDateTime03]
					,Src.[WarehouseOrderUserDefinedDateTime04]
					,Src.[WarehouseOrderUserDefinedDateTime05]
					,Src.[CompanyIDWarehouse]
					,Src.[WarehouseOrderWarehouseCompanyName]
					,Src.[WarehouseOrderWarehouseStreet]
					,Src.[WarehouseOrderWarehouseCity]
					,Src.[WarehouseOrderWarehouseZipCode]
					,Src.[WarehouseOrderWarehouseCountry]
					,Src.[WarehouseOrderWarehousePhone]
					,Src.[WarehouseOrderWarehouseFax]
					,Src.[WarehouseOrderWarehouseEmail]
					,Src.[WarehouseOrderWarehouseContact]
					,Src.[WarehouseOrderVolume]
					,Src.[WarehouseOrderPackages]
					,Src.[WarehouseOrderQuantity]
					,Src.[WarehouseOrderWeight]
					,Src.[WarehouseOrderPallets]
					,Src.[WarehouseOrderEstimatedCompletionDateTime]
					,Src.[WarehouseOrderActualCompletionDateTime]
					,Src.[WarehouseOrderDangerousGoods]
					,Src.[WarehouseOrderInboundDateTime]
					,Src.[WarehouseOrderUserDefinedYesNo01]
					,Src.[WarehouseOrderUserDefinedYesNo02]
					,Src.[WarehouseOrderUserDefinedYesNo03]
					,Src.[WarehouseOrderUserDefinedYesNo04]
					,Src.[WarehouseOrderUserDefinedYesNo05]
					,Src.[WarehouseOrderUserDefinedDateTime06]
					,Src.[WarehouseOrderUserDefinedDateTime07]
					,Src.[WarehouseOrderUserDefinedDateTime09]
					,Src.[WarehouseOrderUserDefinedDateTime10]
					,Src.[WarehouseOrderUserDefinedNumber01]
					,Src.[WarehouseOrderUserDefinedNumber02]
					,Src.[WarehouseOrderUserDefinedNumber03]
					,Src.[WarehouseOrderUserDefinedNumber04]
					,Src.[WarehouseOrderUserDefinedNumber05]
					,Src.[WarehouseOrderUserDefinedLongText01]
					,Src.[WarehouseOrderUserDefinedLongText02]
					,Src.[WarehouseOrderUserDefinedLongText03]
					,Src.[WarehouseOrderUserDefinedLongText04]
					,Src.[WarehouseOrderUserDefinedLongText05]
					,Src.[WarehouseOrderUserDefinedText06]
					,Src.[WarehouseOrderUserDefinedText07]
					,Src.[WarehouseOrderUserDefinedText08]
					,Src.[WarehouseOrderUserDefinedText09]
					,Src.[WarehouseOrderUserDefinedText10]
					,Src.[WarehouseOrderUserDefinedText11]
					,Src.[WarehouseOrderUserDefinedText12]
					,Src.[WarehouseOrderUserDefinedText13]
					,Src.[WarehouseOrderUserDefinedText14]
					,Src.[WarehouseOrderUserDefinedText15]
					,Src.[WarehouseOrderChangesAcceptedDateTime]
					,Src.[WarehouseOrderRuleType]
					,Src.[WarehouseOrderCreationDataSource]
					,Src.[WarehouseOrderChangedDataStorageString]
					,Src.[CountryCode]
					,Src.[WarehouseOrderOwnerLogin]
					,Src.[WarehouseOrderImportBatch]
					,Src.[WarehouseOrderNewEDIPending]
				FROM [dbo].WarehouseOrders Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrders Dest WITH (NOLOCK) ON Src.IDWarehouseOrder = Dest.IDWarehouseOrder
				WHERE Dest.IDWarehouseOrder IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') WarehouseOrders: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `WarehouseOrders` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------WarehouseOrderDetails
	SET @CurrentTableName = 'WarehouseOrderDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrderDetails AS Dest
			USING (
				SELECT [IDWarehouseOrderDetail]
					,[WarehouseOrderID]
					,[WarehouseOrderDetailAddDateTime]
					,[WarehouseOrderDetailEditDateTime]
					,[WarehouseOrderDetailAddUserCode]
					,[WarehouseOrderDetailEditUserCode]
					,[WarehouseOrderDetailVesselCode]
					,[WarehouseOrderDetailVoyageCode]
					,[WarehouseOrderDetailVesselName]
					,[WarehouseOrderDetailOriginService]
					,[WarehouseOrderDetailDestinationService]
					,[CompanyIDCarrier]
					,[WarehouseOrderDetailEquipmentNumber]
					,[WarehouseOrderDetailEquipmentType]
					,[WarehouseOrderDetailEquipmentSize]
					,[WarehouseOrderDetailSeal]
					,[WarehouseOrderDetailCBL]
					,[WarehouseOrderDetailHBL]
					,[WarehouseOrderDetailNotes]
					,[WarehouseOrderDetailCommodity]
					,[WarehouseOrderDetailCSNumber]
					,[WarehouseOrderDetailFCRNumber]
					,[WarehouseOrderDetailPONumber]
					,[WarehouseOrderDetailSKUNumber]
					,[WarehouseOrderDetailClientReference]
					,[WarehouseOrderDetailEstimatedDateTimeOfDeparture]
					,[WarehouseOrderDetailEstimatedDateTimeOfArrival]
					,[WarehouseOrderDetailActualDateTimeOfDeparture]
					,[WarehouseOrderDetailActualDateTimeOfArrival]
					,[WarehouseOrderDetailQuantity]
					,[WarehouseOrderDetailWeight]
					,[WarehouseOrderDetailVolume]
					,[WarehouseOrderDetailPackages]
					,[WarehouseOrderDetailCustomsTypeCode]
					,[WarehouseOrderDetailCargoReleaseNumber]
					,[WarehouseOrderDetailOnShipmentDateTime]
					,[WarehouseOrderDetailOutboundDateTime]
					,[WarehouseOrderDetailStowagePosition]
					,[WarehouseOrderDetailUserDefinedText01]
					,[WarehouseOrderDetailUserDefinedText02]
					,[WarehouseOrderDetailUserDefinedText03]
					,[WarehouseOrderDetailUserDefinedText04]
					,[WarehouseOrderDetailUserDefinedText05]
					,[WarehouseOrderDetailUserDefinedDateTime01]
					,[WarehouseOrderDetailUserDefinedDateTime02]
					,[WarehouseOrderDetailUserDefinedDateTime03]
					,[WarehouseOrderDetailUserDefinedDateTime04]
					,[WarehouseOrderDetailUserDefinedDateTime05]
					,[WarehouseOrderDetailLeaveInContainer]
					,[WarehouseOrderDetailUserDefinedYesNo01]
					,[WarehouseOrderDetailUserDefinedYesNo02]
					,[WarehouseOrderDetailUserDefinedYesNo03]
					,[WarehouseOrderDetailUserDefinedYesNo04]
					,[WarehouseOrderDetailUserDefinedYesNo05]
					,[WarehouseOrderDetailUserDefinedDateTime06]
					,[WarehouseOrderDetailUserDefinedDateTime07]
					,[WarehouseOrderDetailUserDefinedDateTime09]
					,[WarehouseOrderDetailUserDefinedDateTime10]
					,[WarehouseOrderDetailUserDefinedNumber01]
					,[WarehouseOrderDetailUserDefinedNumber02]
					,[WarehouseOrderDetailUserDefinedNumber03]
					,[WarehouseOrderDetailUserDefinedNumber04]
					,[WarehouseOrderDetailUserDefinedNumber05]
					,[WarehouseOrderDetailUserDefinedLongText01]
					,[WarehouseOrderDetailUserDefinedLongText02]
					,[WarehouseOrderDetailUserDefinedLongText03]
					,[WarehouseOrderDetailUserDefinedLongText04]
					,[WarehouseOrderDetailUserDefinedLongText05]
					,[WarehouseOrderDetailUserDefinedText06]
					,[WarehouseOrderDetailUserDefinedText07]
					,[WarehouseOrderDetailUserDefinedText08]
					,[WarehouseOrderDetailUserDefinedText09]
					,[WarehouseOrderDetailUserDefinedText10]
					,[WarehouseOrderDetailUserDefinedText11]
					,[WarehouseOrderDetailUserDefinedText12]
					,[WarehouseOrderDetailUserDefinedText13]
					,[WarehouseOrderDetailUserDefinedText14]
					,[WarehouseOrderDetailUserDefinedText15]
					,[ShipmentID]
					,[WarehouseOrderDetailUserDefinedText16]
					,[WarehouseOrderDetailUserDefinedText17]
					,[WarehouseOrderDetailUserDefinedText18]
					,[WarehouseOrderDetailUserDefinedText19]
					,[WarehouseOrderDetailUserDefinedText20]
					,[WarehouseOrderDetailSourceID]
				FROM dbo.WarehouseOrderDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDWarehouseOrderDetail] = Src.[IDWarehouseOrderDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[WarehouseOrderID] = Src.[WarehouseOrderID]
						,Dest.[WarehouseOrderDetailAddDateTime] = Src.[WarehouseOrderDetailAddDateTime]
						,Dest.[WarehouseOrderDetailEditDateTime] = Src.[WarehouseOrderDetailEditDateTime]
						,Dest.[WarehouseOrderDetailAddUserCode] = Src.[WarehouseOrderDetailAddUserCode]
						,Dest.[WarehouseOrderDetailEditUserCode] = Src.[WarehouseOrderDetailEditUserCode]
						,Dest.[WarehouseOrderDetailVesselCode] = Src.[WarehouseOrderDetailVesselCode]
						,Dest.[WarehouseOrderDetailVoyageCode] = Src.[WarehouseOrderDetailVoyageCode]
						,Dest.[WarehouseOrderDetailVesselName] = Src.[WarehouseOrderDetailVesselName]
						,Dest.[WarehouseOrderDetailOriginService] = Src.[WarehouseOrderDetailOriginService]
						,Dest.[WarehouseOrderDetailDestinationService] = Src.[WarehouseOrderDetailDestinationService]
						,Dest.[CompanyIDCarrier] = Src.[CompanyIDCarrier]
						,Dest.[WarehouseOrderDetailEquipmentNumber] = Src.[WarehouseOrderDetailEquipmentNumber]
						,Dest.[WarehouseOrderDetailEquipmentType] = Src.[WarehouseOrderDetailEquipmentType]
						,Dest.[WarehouseOrderDetailEquipmentSize] = Src.[WarehouseOrderDetailEquipmentSize]
						,Dest.[WarehouseOrderDetailSeal] = Src.[WarehouseOrderDetailSeal]
						,Dest.[WarehouseOrderDetailCBL] = Src.[WarehouseOrderDetailCBL]
						,Dest.[WarehouseOrderDetailHBL] = Src.[WarehouseOrderDetailHBL]
						,Dest.[WarehouseOrderDetailNotes] = Src.[WarehouseOrderDetailNotes]
						,Dest.[WarehouseOrderDetailCommodity] = Src.[WarehouseOrderDetailCommodity]
						,Dest.[WarehouseOrderDetailCSNumber] = Src.[WarehouseOrderDetailCSNumber]
						,Dest.[WarehouseOrderDetailFCRNumber] = Src.[WarehouseOrderDetailFCRNumber]
						,Dest.[WarehouseOrderDetailPONumber] = Src.[WarehouseOrderDetailPONumber]
						,Dest.[WarehouseOrderDetailSKUNumber] = Src.[WarehouseOrderDetailSKUNumber]
						,Dest.[WarehouseOrderDetailClientReference] = Src.[WarehouseOrderDetailClientReference]
						,Dest.[WarehouseOrderDetailEstimatedDateTimeOfDeparture] = Src.[WarehouseOrderDetailEstimatedDateTimeOfDeparture]
						,Dest.[WarehouseOrderDetailEstimatedDateTimeOfArrival] = Src.[WarehouseOrderDetailEstimatedDateTimeOfArrival]
						,Dest.[WarehouseOrderDetailActualDateTimeOfDeparture] = Src.[WarehouseOrderDetailActualDateTimeOfDeparture]
						,Dest.[WarehouseOrderDetailActualDateTimeOfArrival] = Src.[WarehouseOrderDetailActualDateTimeOfArrival]
						,Dest.[WarehouseOrderDetailQuantity] = Src.[WarehouseOrderDetailQuantity]
						,Dest.[WarehouseOrderDetailWeight] = Src.[WarehouseOrderDetailWeight]
						,Dest.[WarehouseOrderDetailVolume] = Src.[WarehouseOrderDetailVolume]
						,Dest.[WarehouseOrderDetailPackages] = Src.[WarehouseOrderDetailPackages]
						,Dest.[WarehouseOrderDetailCustomsTypeCode] = Src.[WarehouseOrderDetailCustomsTypeCode]
						,Dest.[WarehouseOrderDetailCargoReleaseNumber] = Src.[WarehouseOrderDetailCargoReleaseNumber]
						,Dest.[WarehouseOrderDetailOnShipmentDateTime] = Src.[WarehouseOrderDetailOnShipmentDateTime]
						,Dest.[WarehouseOrderDetailOutboundDateTime] = Src.[WarehouseOrderDetailOutboundDateTime]
						,Dest.[WarehouseOrderDetailStowagePosition] = Src.[WarehouseOrderDetailStowagePosition]
						,Dest.[WarehouseOrderDetailUserDefinedText01] = Src.[WarehouseOrderDetailUserDefinedText01]
						,Dest.[WarehouseOrderDetailUserDefinedText02] = Src.[WarehouseOrderDetailUserDefinedText02]
						,Dest.[WarehouseOrderDetailUserDefinedText03] = Src.[WarehouseOrderDetailUserDefinedText03]
						,Dest.[WarehouseOrderDetailUserDefinedText04] = Src.[WarehouseOrderDetailUserDefinedText04]
						,Dest.[WarehouseOrderDetailUserDefinedText05] = Src.[WarehouseOrderDetailUserDefinedText05]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime01] = Src.[WarehouseOrderDetailUserDefinedDateTime01]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime02] = Src.[WarehouseOrderDetailUserDefinedDateTime02]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime03] = Src.[WarehouseOrderDetailUserDefinedDateTime03]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime04] = Src.[WarehouseOrderDetailUserDefinedDateTime04]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime05] = Src.[WarehouseOrderDetailUserDefinedDateTime05]
						,Dest.[WarehouseOrderDetailLeaveInContainer] = Src.[WarehouseOrderDetailLeaveInContainer]
						,Dest.[WarehouseOrderDetailUserDefinedYesNo01] = Src.[WarehouseOrderDetailUserDefinedYesNo01]
						,Dest.[WarehouseOrderDetailUserDefinedYesNo02] = Src.[WarehouseOrderDetailUserDefinedYesNo02]
						,Dest.[WarehouseOrderDetailUserDefinedYesNo03] = Src.[WarehouseOrderDetailUserDefinedYesNo03]
						,Dest.[WarehouseOrderDetailUserDefinedYesNo04] = Src.[WarehouseOrderDetailUserDefinedYesNo04]
						,Dest.[WarehouseOrderDetailUserDefinedYesNo05] = Src.[WarehouseOrderDetailUserDefinedYesNo05]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime06] = Src.[WarehouseOrderDetailUserDefinedDateTime06]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime07] = Src.[WarehouseOrderDetailUserDefinedDateTime07]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime09] = Src.[WarehouseOrderDetailUserDefinedDateTime09]
						,Dest.[WarehouseOrderDetailUserDefinedDateTime10] = Src.[WarehouseOrderDetailUserDefinedDateTime10]
						,Dest.[WarehouseOrderDetailUserDefinedNumber01] = Src.[WarehouseOrderDetailUserDefinedNumber01]
						,Dest.[WarehouseOrderDetailUserDefinedNumber02] = Src.[WarehouseOrderDetailUserDefinedNumber02]
						,Dest.[WarehouseOrderDetailUserDefinedNumber03] = Src.[WarehouseOrderDetailUserDefinedNumber03]
						,Dest.[WarehouseOrderDetailUserDefinedNumber04] = Src.[WarehouseOrderDetailUserDefinedNumber04]
						,Dest.[WarehouseOrderDetailUserDefinedNumber05] = Src.[WarehouseOrderDetailUserDefinedNumber05]
						,Dest.[WarehouseOrderDetailUserDefinedLongText01] = Src.[WarehouseOrderDetailUserDefinedLongText01]
						,Dest.[WarehouseOrderDetailUserDefinedLongText02] = Src.[WarehouseOrderDetailUserDefinedLongText02]
						,Dest.[WarehouseOrderDetailUserDefinedLongText03] = Src.[WarehouseOrderDetailUserDefinedLongText03]
						,Dest.[WarehouseOrderDetailUserDefinedLongText04] = Src.[WarehouseOrderDetailUserDefinedLongText04]
						,Dest.[WarehouseOrderDetailUserDefinedLongText05] = Src.[WarehouseOrderDetailUserDefinedLongText05]
						,Dest.[WarehouseOrderDetailUserDefinedText06] = Src.[WarehouseOrderDetailUserDefinedText06]
						,Dest.[WarehouseOrderDetailUserDefinedText07] = Src.[WarehouseOrderDetailUserDefinedText07]
						,Dest.[WarehouseOrderDetailUserDefinedText08] = Src.[WarehouseOrderDetailUserDefinedText08]
						,Dest.[WarehouseOrderDetailUserDefinedText09] = Src.[WarehouseOrderDetailUserDefinedText09]
						,Dest.[WarehouseOrderDetailUserDefinedText10] = Src.[WarehouseOrderDetailUserDefinedText10]
						,Dest.[WarehouseOrderDetailUserDefinedText11] = Src.[WarehouseOrderDetailUserDefinedText11]
						,Dest.[WarehouseOrderDetailUserDefinedText12] = Src.[WarehouseOrderDetailUserDefinedText12]
						,Dest.[WarehouseOrderDetailUserDefinedText13] = Src.[WarehouseOrderDetailUserDefinedText13]
						,Dest.[WarehouseOrderDetailUserDefinedText14] = Src.[WarehouseOrderDetailUserDefinedText14]
						,Dest.[WarehouseOrderDetailUserDefinedText15] = Src.[WarehouseOrderDetailUserDefinedText15]
						,Dest.[ShipmentID] = Src.[ShipmentID]
						,Dest.[WarehouseOrderDetailUserDefinedText16] = Src.[WarehouseOrderDetailUserDefinedText16]
						,Dest.[WarehouseOrderDetailUserDefinedText17] = Src.[WarehouseOrderDetailUserDefinedText17]
						,Dest.[WarehouseOrderDetailUserDefinedText18] = Src.[WarehouseOrderDetailUserDefinedText18]
						,Dest.[WarehouseOrderDetailUserDefinedText19] = Src.[WarehouseOrderDetailUserDefinedText19]
						,Dest.[WarehouseOrderDetailUserDefinedText20] = Src.[WarehouseOrderDetailUserDefinedText20]
						,Dest.[WarehouseOrderDetailSourceID] = Src.[WarehouseOrderDetailSourceID]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDWarehouseOrderDetail]
						,[WarehouseOrderID]
						,[WarehouseOrderDetailAddDateTime]
						,[WarehouseOrderDetailEditDateTime]
						,[WarehouseOrderDetailAddUserCode]
						,[WarehouseOrderDetailEditUserCode]
						,[WarehouseOrderDetailVesselCode]
						,[WarehouseOrderDetailVoyageCode]
						,[WarehouseOrderDetailVesselName]
						,[WarehouseOrderDetailOriginService]
						,[WarehouseOrderDetailDestinationService]
						,[CompanyIDCarrier]
						,[WarehouseOrderDetailEquipmentNumber]
						,[WarehouseOrderDetailEquipmentType]
						,[WarehouseOrderDetailEquipmentSize]
						,[WarehouseOrderDetailSeal]
						,[WarehouseOrderDetailCBL]
						,[WarehouseOrderDetailHBL]
						,[WarehouseOrderDetailNotes]
						,[WarehouseOrderDetailCommodity]
						,[WarehouseOrderDetailCSNumber]
						,[WarehouseOrderDetailFCRNumber]
						,[WarehouseOrderDetailPONumber]
						,[WarehouseOrderDetailSKUNumber]
						,[WarehouseOrderDetailClientReference]
						,[WarehouseOrderDetailEstimatedDateTimeOfDeparture]
						,[WarehouseOrderDetailEstimatedDateTimeOfArrival]
						,[WarehouseOrderDetailActualDateTimeOfDeparture]
						,[WarehouseOrderDetailActualDateTimeOfArrival]
						,[WarehouseOrderDetailQuantity]
						,[WarehouseOrderDetailWeight]
						,[WarehouseOrderDetailVolume]
						,[WarehouseOrderDetailPackages]
						,[WarehouseOrderDetailCustomsTypeCode]
						,[WarehouseOrderDetailCargoReleaseNumber]
						,[WarehouseOrderDetailOnShipmentDateTime]
						,[WarehouseOrderDetailOutboundDateTime]
						,[WarehouseOrderDetailStowagePosition]
						,[WarehouseOrderDetailUserDefinedText01]
						,[WarehouseOrderDetailUserDefinedText02]
						,[WarehouseOrderDetailUserDefinedText03]
						,[WarehouseOrderDetailUserDefinedText04]
						,[WarehouseOrderDetailUserDefinedText05]
						,[WarehouseOrderDetailUserDefinedDateTime01]
						,[WarehouseOrderDetailUserDefinedDateTime02]
						,[WarehouseOrderDetailUserDefinedDateTime03]
						,[WarehouseOrderDetailUserDefinedDateTime04]
						,[WarehouseOrderDetailUserDefinedDateTime05]
						,[WarehouseOrderDetailLeaveInContainer]
						,[WarehouseOrderDetailUserDefinedYesNo01]
						,[WarehouseOrderDetailUserDefinedYesNo02]
						,[WarehouseOrderDetailUserDefinedYesNo03]
						,[WarehouseOrderDetailUserDefinedYesNo04]
						,[WarehouseOrderDetailUserDefinedYesNo05]
						,[WarehouseOrderDetailUserDefinedDateTime06]
						,[WarehouseOrderDetailUserDefinedDateTime07]
						,[WarehouseOrderDetailUserDefinedDateTime09]
						,[WarehouseOrderDetailUserDefinedDateTime10]
						,[WarehouseOrderDetailUserDefinedNumber01]
						,[WarehouseOrderDetailUserDefinedNumber02]
						,[WarehouseOrderDetailUserDefinedNumber03]
						,[WarehouseOrderDetailUserDefinedNumber04]
						,[WarehouseOrderDetailUserDefinedNumber05]
						,[WarehouseOrderDetailUserDefinedLongText01]
						,[WarehouseOrderDetailUserDefinedLongText02]
						,[WarehouseOrderDetailUserDefinedLongText03]
						,[WarehouseOrderDetailUserDefinedLongText04]
						,[WarehouseOrderDetailUserDefinedLongText05]
						,[WarehouseOrderDetailUserDefinedText06]
						,[WarehouseOrderDetailUserDefinedText07]
						,[WarehouseOrderDetailUserDefinedText08]
						,[WarehouseOrderDetailUserDefinedText09]
						,[WarehouseOrderDetailUserDefinedText10]
						,[WarehouseOrderDetailUserDefinedText11]
						,[WarehouseOrderDetailUserDefinedText12]
						,[WarehouseOrderDetailUserDefinedText13]
						,[WarehouseOrderDetailUserDefinedText14]
						,[WarehouseOrderDetailUserDefinedText15]
						,[ShipmentID]
						,[WarehouseOrderDetailUserDefinedText16]
						,[WarehouseOrderDetailUserDefinedText17]
						,[WarehouseOrderDetailUserDefinedText18]
						,[WarehouseOrderDetailUserDefinedText19]
						,[WarehouseOrderDetailUserDefinedText20]
						,[WarehouseOrderDetailSourceID]
						)
					VALUES (
						Src.[IDWarehouseOrderDetail]
						,Src.[WarehouseOrderID]
						,Src.[WarehouseOrderDetailAddDateTime]
						,Src.[WarehouseOrderDetailEditDateTime]
						,Src.[WarehouseOrderDetailAddUserCode]
						,Src.[WarehouseOrderDetailEditUserCode]
						,Src.[WarehouseOrderDetailVesselCode]
						,Src.[WarehouseOrderDetailVoyageCode]
						,Src.[WarehouseOrderDetailVesselName]
						,Src.[WarehouseOrderDetailOriginService]
						,Src.[WarehouseOrderDetailDestinationService]
						,Src.[CompanyIDCarrier]
						,Src.[WarehouseOrderDetailEquipmentNumber]
						,Src.[WarehouseOrderDetailEquipmentType]
						,Src.[WarehouseOrderDetailEquipmentSize]
						,Src.[WarehouseOrderDetailSeal]
						,Src.[WarehouseOrderDetailCBL]
						,Src.[WarehouseOrderDetailHBL]
						,Src.[WarehouseOrderDetailNotes]
						,Src.[WarehouseOrderDetailCommodity]
						,Src.[WarehouseOrderDetailCSNumber]
						,Src.[WarehouseOrderDetailFCRNumber]
						,Src.[WarehouseOrderDetailPONumber]
						,Src.[WarehouseOrderDetailSKUNumber]
						,Src.[WarehouseOrderDetailClientReference]
						,Src.[WarehouseOrderDetailEstimatedDateTimeOfDeparture]
						,Src.[WarehouseOrderDetailEstimatedDateTimeOfArrival]
						,Src.[WarehouseOrderDetailActualDateTimeOfDeparture]
						,Src.[WarehouseOrderDetailActualDateTimeOfArrival]
						,Src.[WarehouseOrderDetailQuantity]
						,Src.[WarehouseOrderDetailWeight]
						,Src.[WarehouseOrderDetailVolume]
						,Src.[WarehouseOrderDetailPackages]
						,Src.[WarehouseOrderDetailCustomsTypeCode]
						,Src.[WarehouseOrderDetailCargoReleaseNumber]
						,Src.[WarehouseOrderDetailOnShipmentDateTime]
						,Src.[WarehouseOrderDetailOutboundDateTime]
						,Src.[WarehouseOrderDetailStowagePosition]
						,Src.[WarehouseOrderDetailUserDefinedText01]
						,Src.[WarehouseOrderDetailUserDefinedText02]
						,Src.[WarehouseOrderDetailUserDefinedText03]
						,Src.[WarehouseOrderDetailUserDefinedText04]
						,Src.[WarehouseOrderDetailUserDefinedText05]
						,Src.[WarehouseOrderDetailUserDefinedDateTime01]
						,Src.[WarehouseOrderDetailUserDefinedDateTime02]
						,Src.[WarehouseOrderDetailUserDefinedDateTime03]
						,Src.[WarehouseOrderDetailUserDefinedDateTime04]
						,Src.[WarehouseOrderDetailUserDefinedDateTime05]
						,Src.[WarehouseOrderDetailLeaveInContainer]
						,Src.[WarehouseOrderDetailUserDefinedYesNo01]
						,Src.[WarehouseOrderDetailUserDefinedYesNo02]
						,Src.[WarehouseOrderDetailUserDefinedYesNo03]
						,Src.[WarehouseOrderDetailUserDefinedYesNo04]
						,Src.[WarehouseOrderDetailUserDefinedYesNo05]
						,Src.[WarehouseOrderDetailUserDefinedDateTime06]
						,Src.[WarehouseOrderDetailUserDefinedDateTime07]
						,Src.[WarehouseOrderDetailUserDefinedDateTime09]
						,Src.[WarehouseOrderDetailUserDefinedDateTime10]
						,Src.[WarehouseOrderDetailUserDefinedNumber01]
						,Src.[WarehouseOrderDetailUserDefinedNumber02]
						,Src.[WarehouseOrderDetailUserDefinedNumber03]
						,Src.[WarehouseOrderDetailUserDefinedNumber04]
						,Src.[WarehouseOrderDetailUserDefinedNumber05]
						,Src.[WarehouseOrderDetailUserDefinedLongText01]
						,Src.[WarehouseOrderDetailUserDefinedLongText02]
						,Src.[WarehouseOrderDetailUserDefinedLongText03]
						,Src.[WarehouseOrderDetailUserDefinedLongText04]
						,Src.[WarehouseOrderDetailUserDefinedLongText05]
						,Src.[WarehouseOrderDetailUserDefinedText06]
						,Src.[WarehouseOrderDetailUserDefinedText07]
						,Src.[WarehouseOrderDetailUserDefinedText08]
						,Src.[WarehouseOrderDetailUserDefinedText09]
						,Src.[WarehouseOrderDetailUserDefinedText10]
						,Src.[WarehouseOrderDetailUserDefinedText11]
						,Src.[WarehouseOrderDetailUserDefinedText12]
						,Src.[WarehouseOrderDetailUserDefinedText13]
						,Src.[WarehouseOrderDetailUserDefinedText14]
						,Src.[WarehouseOrderDetailUserDefinedText15]
						,Src.[ShipmentID]
						,Src.[WarehouseOrderDetailUserDefinedText16]
						,Src.[WarehouseOrderDetailUserDefinedText17]
						,Src.[WarehouseOrderDetailUserDefinedText18]
						,Src.[WarehouseOrderDetailUserDefinedText19]
						,Src.[WarehouseOrderDetailUserDefinedText20]
						,Src.[WarehouseOrderDetailSourceID]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDWarehouseOrderDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDWarehouseOrderDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].WarehouseOrderDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrderDetails Dest WITH (NOLOCK) ON Src.IDWarehouseOrderDetail = Dest.IDWarehouseOrderDetail
					WHERE Dest.[WarehouseOrderDetailEditDateTime] < Src.[WarehouseOrderDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[WarehouseOrderID] = Src.[WarehouseOrderID]
					,Dest.[WarehouseOrderDetailAddDateTime] = Src.[WarehouseOrderDetailAddDateTime]
					,Dest.[WarehouseOrderDetailEditDateTime] = Src.[WarehouseOrderDetailEditDateTime]
					,Dest.[WarehouseOrderDetailAddUserCode] = Src.[WarehouseOrderDetailAddUserCode]
					,Dest.[WarehouseOrderDetailEditUserCode] = Src.[WarehouseOrderDetailEditUserCode]
					,Dest.[WarehouseOrderDetailVesselCode] = Src.[WarehouseOrderDetailVesselCode]
					,Dest.[WarehouseOrderDetailVoyageCode] = Src.[WarehouseOrderDetailVoyageCode]
					,Dest.[WarehouseOrderDetailVesselName] = Src.[WarehouseOrderDetailVesselName]
					,Dest.[WarehouseOrderDetailOriginService] = Src.[WarehouseOrderDetailOriginService]
					,Dest.[WarehouseOrderDetailDestinationService] = Src.[WarehouseOrderDetailDestinationService]
					,Dest.[CompanyIDCarrier] = Src.[CompanyIDCarrier]
					,Dest.[WarehouseOrderDetailEquipmentNumber] = Src.[WarehouseOrderDetailEquipmentNumber]
					,Dest.[WarehouseOrderDetailEquipmentType] = Src.[WarehouseOrderDetailEquipmentType]
					,Dest.[WarehouseOrderDetailEquipmentSize] = Src.[WarehouseOrderDetailEquipmentSize]
					,Dest.[WarehouseOrderDetailSeal] = Src.[WarehouseOrderDetailSeal]
					,Dest.[WarehouseOrderDetailCBL] = Src.[WarehouseOrderDetailCBL]
					,Dest.[WarehouseOrderDetailHBL] = Src.[WarehouseOrderDetailHBL]
					,Dest.[WarehouseOrderDetailNotes] = Src.[WarehouseOrderDetailNotes]
					,Dest.[WarehouseOrderDetailCommodity] = Src.[WarehouseOrderDetailCommodity]
					,Dest.[WarehouseOrderDetailCSNumber] = Src.[WarehouseOrderDetailCSNumber]
					,Dest.[WarehouseOrderDetailFCRNumber] = Src.[WarehouseOrderDetailFCRNumber]
					,Dest.[WarehouseOrderDetailPONumber] = Src.[WarehouseOrderDetailPONumber]
					,Dest.[WarehouseOrderDetailSKUNumber] = Src.[WarehouseOrderDetailSKUNumber]
					,Dest.[WarehouseOrderDetailClientReference] = Src.[WarehouseOrderDetailClientReference]
					,Dest.[WarehouseOrderDetailEstimatedDateTimeOfDeparture] = Src.[WarehouseOrderDetailEstimatedDateTimeOfDeparture]
					,Dest.[WarehouseOrderDetailEstimatedDateTimeOfArrival] = Src.[WarehouseOrderDetailEstimatedDateTimeOfArrival]
					,Dest.[WarehouseOrderDetailActualDateTimeOfDeparture] = Src.[WarehouseOrderDetailActualDateTimeOfDeparture]
					,Dest.[WarehouseOrderDetailActualDateTimeOfArrival] = Src.[WarehouseOrderDetailActualDateTimeOfArrival]
					,Dest.[WarehouseOrderDetailQuantity] = Src.[WarehouseOrderDetailQuantity]
					,Dest.[WarehouseOrderDetailWeight] = Src.[WarehouseOrderDetailWeight]
					,Dest.[WarehouseOrderDetailVolume] = Src.[WarehouseOrderDetailVolume]
					,Dest.[WarehouseOrderDetailPackages] = Src.[WarehouseOrderDetailPackages]
					,Dest.[WarehouseOrderDetailCustomsTypeCode] = Src.[WarehouseOrderDetailCustomsTypeCode]
					,Dest.[WarehouseOrderDetailCargoReleaseNumber] = Src.[WarehouseOrderDetailCargoReleaseNumber]
					,Dest.[WarehouseOrderDetailOnShipmentDateTime] = Src.[WarehouseOrderDetailOnShipmentDateTime]
					,Dest.[WarehouseOrderDetailOutboundDateTime] = Src.[WarehouseOrderDetailOutboundDateTime]
					,Dest.[WarehouseOrderDetailStowagePosition] = Src.[WarehouseOrderDetailStowagePosition]
					,Dest.[WarehouseOrderDetailUserDefinedText01] = Src.[WarehouseOrderDetailUserDefinedText01]
					,Dest.[WarehouseOrderDetailUserDefinedText02] = Src.[WarehouseOrderDetailUserDefinedText02]
					,Dest.[WarehouseOrderDetailUserDefinedText03] = Src.[WarehouseOrderDetailUserDefinedText03]
					,Dest.[WarehouseOrderDetailUserDefinedText04] = Src.[WarehouseOrderDetailUserDefinedText04]
					,Dest.[WarehouseOrderDetailUserDefinedText05] = Src.[WarehouseOrderDetailUserDefinedText05]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime01] = Src.[WarehouseOrderDetailUserDefinedDateTime01]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime02] = Src.[WarehouseOrderDetailUserDefinedDateTime02]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime03] = Src.[WarehouseOrderDetailUserDefinedDateTime03]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime04] = Src.[WarehouseOrderDetailUserDefinedDateTime04]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime05] = Src.[WarehouseOrderDetailUserDefinedDateTime05]
					,Dest.[WarehouseOrderDetailLeaveInContainer] = Src.[WarehouseOrderDetailLeaveInContainer]
					,Dest.[WarehouseOrderDetailUserDefinedYesNo01] = Src.[WarehouseOrderDetailUserDefinedYesNo01]
					,Dest.[WarehouseOrderDetailUserDefinedYesNo02] = Src.[WarehouseOrderDetailUserDefinedYesNo02]
					,Dest.[WarehouseOrderDetailUserDefinedYesNo03] = Src.[WarehouseOrderDetailUserDefinedYesNo03]
					,Dest.[WarehouseOrderDetailUserDefinedYesNo04] = Src.[WarehouseOrderDetailUserDefinedYesNo04]
					,Dest.[WarehouseOrderDetailUserDefinedYesNo05] = Src.[WarehouseOrderDetailUserDefinedYesNo05]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime06] = Src.[WarehouseOrderDetailUserDefinedDateTime06]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime07] = Src.[WarehouseOrderDetailUserDefinedDateTime07]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime09] = Src.[WarehouseOrderDetailUserDefinedDateTime09]
					,Dest.[WarehouseOrderDetailUserDefinedDateTime10] = Src.[WarehouseOrderDetailUserDefinedDateTime10]
					,Dest.[WarehouseOrderDetailUserDefinedNumber01] = Src.[WarehouseOrderDetailUserDefinedNumber01]
					,Dest.[WarehouseOrderDetailUserDefinedNumber02] = Src.[WarehouseOrderDetailUserDefinedNumber02]
					,Dest.[WarehouseOrderDetailUserDefinedNumber03] = Src.[WarehouseOrderDetailUserDefinedNumber03]
					,Dest.[WarehouseOrderDetailUserDefinedNumber04] = Src.[WarehouseOrderDetailUserDefinedNumber04]
					,Dest.[WarehouseOrderDetailUserDefinedNumber05] = Src.[WarehouseOrderDetailUserDefinedNumber05]
					,Dest.[WarehouseOrderDetailUserDefinedLongText01] = Src.[WarehouseOrderDetailUserDefinedLongText01]
					,Dest.[WarehouseOrderDetailUserDefinedLongText02] = Src.[WarehouseOrderDetailUserDefinedLongText02]
					,Dest.[WarehouseOrderDetailUserDefinedLongText03] = Src.[WarehouseOrderDetailUserDefinedLongText03]
					,Dest.[WarehouseOrderDetailUserDefinedLongText04] = Src.[WarehouseOrderDetailUserDefinedLongText04]
					,Dest.[WarehouseOrderDetailUserDefinedLongText05] = Src.[WarehouseOrderDetailUserDefinedLongText05]
					,Dest.[WarehouseOrderDetailUserDefinedText06] = Src.[WarehouseOrderDetailUserDefinedText06]
					,Dest.[WarehouseOrderDetailUserDefinedText07] = Src.[WarehouseOrderDetailUserDefinedText07]
					,Dest.[WarehouseOrderDetailUserDefinedText08] = Src.[WarehouseOrderDetailUserDefinedText08]
					,Dest.[WarehouseOrderDetailUserDefinedText09] = Src.[WarehouseOrderDetailUserDefinedText09]
					,Dest.[WarehouseOrderDetailUserDefinedText10] = Src.[WarehouseOrderDetailUserDefinedText10]
					,Dest.[WarehouseOrderDetailUserDefinedText11] = Src.[WarehouseOrderDetailUserDefinedText11]
					,Dest.[WarehouseOrderDetailUserDefinedText12] = Src.[WarehouseOrderDetailUserDefinedText12]
					,Dest.[WarehouseOrderDetailUserDefinedText13] = Src.[WarehouseOrderDetailUserDefinedText13]
					,Dest.[WarehouseOrderDetailUserDefinedText14] = Src.[WarehouseOrderDetailUserDefinedText14]
					,Dest.[WarehouseOrderDetailUserDefinedText15] = Src.[WarehouseOrderDetailUserDefinedText15]
					,Dest.[ShipmentID] = Src.[ShipmentID]
					,Dest.[WarehouseOrderDetailUserDefinedText16] = Src.[WarehouseOrderDetailUserDefinedText16]
					,Dest.[WarehouseOrderDetailUserDefinedText17] = Src.[WarehouseOrderDetailUserDefinedText17]
					,Dest.[WarehouseOrderDetailUserDefinedText18] = Src.[WarehouseOrderDetailUserDefinedText18]
					,Dest.[WarehouseOrderDetailUserDefinedText19] = Src.[WarehouseOrderDetailUserDefinedText19]
					,Dest.[WarehouseOrderDetailUserDefinedText20] = Src.[WarehouseOrderDetailUserDefinedText20]
					,Dest.[WarehouseOrderDetailSourceID] = Src.[WarehouseOrderDetailSourceID]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDWarehouseOrderDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDWarehouseOrderDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].WarehouseOrderDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrderDetails Dest ON Src.IDWarehouseOrderDetail = Dest.IDWarehouseOrderDetail
				WHERE Dest.[WarehouseOrderDetailEditDateTime] < Src.[WarehouseOrderDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].WarehouseOrderDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrderDetails Dest WITH (NOLOCK) ON Src.IDWarehouseOrderDetail = Dest.IDWarehouseOrderDetail
					WHERE Dest.IDWarehouseOrderDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrderDetails (
					[IDWarehouseOrderDetail]
					,[WarehouseOrderID]
					,[WarehouseOrderDetailAddDateTime]
					,[WarehouseOrderDetailEditDateTime]
					,[WarehouseOrderDetailAddUserCode]
					,[WarehouseOrderDetailEditUserCode]
					,[WarehouseOrderDetailVesselCode]
					,[WarehouseOrderDetailVoyageCode]
					,[WarehouseOrderDetailVesselName]
					,[WarehouseOrderDetailOriginService]
					,[WarehouseOrderDetailDestinationService]
					,[CompanyIDCarrier]
					,[WarehouseOrderDetailEquipmentNumber]
					,[WarehouseOrderDetailEquipmentType]
					,[WarehouseOrderDetailEquipmentSize]
					,[WarehouseOrderDetailSeal]
					,[WarehouseOrderDetailCBL]
					,[WarehouseOrderDetailHBL]
					,[WarehouseOrderDetailNotes]
					,[WarehouseOrderDetailCommodity]
					,[WarehouseOrderDetailCSNumber]
					,[WarehouseOrderDetailFCRNumber]
					,[WarehouseOrderDetailPONumber]
					,[WarehouseOrderDetailSKUNumber]
					,[WarehouseOrderDetailClientReference]
					,[WarehouseOrderDetailEstimatedDateTimeOfDeparture]
					,[WarehouseOrderDetailEstimatedDateTimeOfArrival]
					,[WarehouseOrderDetailActualDateTimeOfDeparture]
					,[WarehouseOrderDetailActualDateTimeOfArrival]
					,[WarehouseOrderDetailQuantity]
					,[WarehouseOrderDetailWeight]
					,[WarehouseOrderDetailVolume]
					,[WarehouseOrderDetailPackages]
					,[WarehouseOrderDetailCustomsTypeCode]
					,[WarehouseOrderDetailCargoReleaseNumber]
					,[WarehouseOrderDetailOnShipmentDateTime]
					,[WarehouseOrderDetailOutboundDateTime]
					,[WarehouseOrderDetailStowagePosition]
					,[WarehouseOrderDetailUserDefinedText01]
					,[WarehouseOrderDetailUserDefinedText02]
					,[WarehouseOrderDetailUserDefinedText03]
					,[WarehouseOrderDetailUserDefinedText04]
					,[WarehouseOrderDetailUserDefinedText05]
					,[WarehouseOrderDetailUserDefinedDateTime01]
					,[WarehouseOrderDetailUserDefinedDateTime02]
					,[WarehouseOrderDetailUserDefinedDateTime03]
					,[WarehouseOrderDetailUserDefinedDateTime04]
					,[WarehouseOrderDetailUserDefinedDateTime05]
					,[WarehouseOrderDetailLeaveInContainer]
					,[WarehouseOrderDetailUserDefinedYesNo01]
					,[WarehouseOrderDetailUserDefinedYesNo02]
					,[WarehouseOrderDetailUserDefinedYesNo03]
					,[WarehouseOrderDetailUserDefinedYesNo04]
					,[WarehouseOrderDetailUserDefinedYesNo05]
					,[WarehouseOrderDetailUserDefinedDateTime06]
					,[WarehouseOrderDetailUserDefinedDateTime07]
					,[WarehouseOrderDetailUserDefinedDateTime09]
					,[WarehouseOrderDetailUserDefinedDateTime10]
					,[WarehouseOrderDetailUserDefinedNumber01]
					,[WarehouseOrderDetailUserDefinedNumber02]
					,[WarehouseOrderDetailUserDefinedNumber03]
					,[WarehouseOrderDetailUserDefinedNumber04]
					,[WarehouseOrderDetailUserDefinedNumber05]
					,[WarehouseOrderDetailUserDefinedLongText01]
					,[WarehouseOrderDetailUserDefinedLongText02]
					,[WarehouseOrderDetailUserDefinedLongText03]
					,[WarehouseOrderDetailUserDefinedLongText04]
					,[WarehouseOrderDetailUserDefinedLongText05]
					,[WarehouseOrderDetailUserDefinedText06]
					,[WarehouseOrderDetailUserDefinedText07]
					,[WarehouseOrderDetailUserDefinedText08]
					,[WarehouseOrderDetailUserDefinedText09]
					,[WarehouseOrderDetailUserDefinedText10]
					,[WarehouseOrderDetailUserDefinedText11]
					,[WarehouseOrderDetailUserDefinedText12]
					,[WarehouseOrderDetailUserDefinedText13]
					,[WarehouseOrderDetailUserDefinedText14]
					,[WarehouseOrderDetailUserDefinedText15]
					,[ShipmentID]
					,[WarehouseOrderDetailUserDefinedText16]
					,[WarehouseOrderDetailUserDefinedText17]
					,[WarehouseOrderDetailUserDefinedText18]
					,[WarehouseOrderDetailUserDefinedText19]
					,[WarehouseOrderDetailUserDefinedText20]
					,[WarehouseOrderDetailSourceID]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDWarehouseOrderDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDWarehouseOrderDetail]
					,Src.[WarehouseOrderID]
					,Src.[WarehouseOrderDetailAddDateTime]
					,Src.[WarehouseOrderDetailEditDateTime]
					,Src.[WarehouseOrderDetailAddUserCode]
					,Src.[WarehouseOrderDetailEditUserCode]
					,Src.[WarehouseOrderDetailVesselCode]
					,Src.[WarehouseOrderDetailVoyageCode]
					,Src.[WarehouseOrderDetailVesselName]
					,Src.[WarehouseOrderDetailOriginService]
					,Src.[WarehouseOrderDetailDestinationService]
					,Src.[CompanyIDCarrier]
					,Src.[WarehouseOrderDetailEquipmentNumber]
					,Src.[WarehouseOrderDetailEquipmentType]
					,Src.[WarehouseOrderDetailEquipmentSize]
					,Src.[WarehouseOrderDetailSeal]
					,Src.[WarehouseOrderDetailCBL]
					,Src.[WarehouseOrderDetailHBL]
					,Src.[WarehouseOrderDetailNotes]
					,Src.[WarehouseOrderDetailCommodity]
					,Src.[WarehouseOrderDetailCSNumber]
					,Src.[WarehouseOrderDetailFCRNumber]
					,Src.[WarehouseOrderDetailPONumber]
					,Src.[WarehouseOrderDetailSKUNumber]
					,Src.[WarehouseOrderDetailClientReference]
					,Src.[WarehouseOrderDetailEstimatedDateTimeOfDeparture]
					,Src.[WarehouseOrderDetailEstimatedDateTimeOfArrival]
					,Src.[WarehouseOrderDetailActualDateTimeOfDeparture]
					,Src.[WarehouseOrderDetailActualDateTimeOfArrival]
					,Src.[WarehouseOrderDetailQuantity]
					,Src.[WarehouseOrderDetailWeight]
					,Src.[WarehouseOrderDetailVolume]
					,Src.[WarehouseOrderDetailPackages]
					,Src.[WarehouseOrderDetailCustomsTypeCode]
					,Src.[WarehouseOrderDetailCargoReleaseNumber]
					,Src.[WarehouseOrderDetailOnShipmentDateTime]
					,Src.[WarehouseOrderDetailOutboundDateTime]
					,Src.[WarehouseOrderDetailStowagePosition]
					,Src.[WarehouseOrderDetailUserDefinedText01]
					,Src.[WarehouseOrderDetailUserDefinedText02]
					,Src.[WarehouseOrderDetailUserDefinedText03]
					,Src.[WarehouseOrderDetailUserDefinedText04]
					,Src.[WarehouseOrderDetailUserDefinedText05]
					,Src.[WarehouseOrderDetailUserDefinedDateTime01]
					,Src.[WarehouseOrderDetailUserDefinedDateTime02]
					,Src.[WarehouseOrderDetailUserDefinedDateTime03]
					,Src.[WarehouseOrderDetailUserDefinedDateTime04]
					,Src.[WarehouseOrderDetailUserDefinedDateTime05]
					,Src.[WarehouseOrderDetailLeaveInContainer]
					,Src.[WarehouseOrderDetailUserDefinedYesNo01]
					,Src.[WarehouseOrderDetailUserDefinedYesNo02]
					,Src.[WarehouseOrderDetailUserDefinedYesNo03]
					,Src.[WarehouseOrderDetailUserDefinedYesNo04]
					,Src.[WarehouseOrderDetailUserDefinedYesNo05]
					,Src.[WarehouseOrderDetailUserDefinedDateTime06]
					,Src.[WarehouseOrderDetailUserDefinedDateTime07]
					,Src.[WarehouseOrderDetailUserDefinedDateTime09]
					,Src.[WarehouseOrderDetailUserDefinedDateTime10]
					,Src.[WarehouseOrderDetailUserDefinedNumber01]
					,Src.[WarehouseOrderDetailUserDefinedNumber02]
					,Src.[WarehouseOrderDetailUserDefinedNumber03]
					,Src.[WarehouseOrderDetailUserDefinedNumber04]
					,Src.[WarehouseOrderDetailUserDefinedNumber05]
					,Src.[WarehouseOrderDetailUserDefinedLongText01]
					,Src.[WarehouseOrderDetailUserDefinedLongText02]
					,Src.[WarehouseOrderDetailUserDefinedLongText03]
					,Src.[WarehouseOrderDetailUserDefinedLongText04]
					,Src.[WarehouseOrderDetailUserDefinedLongText05]
					,Src.[WarehouseOrderDetailUserDefinedText06]
					,Src.[WarehouseOrderDetailUserDefinedText07]
					,Src.[WarehouseOrderDetailUserDefinedText08]
					,Src.[WarehouseOrderDetailUserDefinedText09]
					,Src.[WarehouseOrderDetailUserDefinedText10]
					,Src.[WarehouseOrderDetailUserDefinedText11]
					,Src.[WarehouseOrderDetailUserDefinedText12]
					,Src.[WarehouseOrderDetailUserDefinedText13]
					,Src.[WarehouseOrderDetailUserDefinedText14]
					,Src.[WarehouseOrderDetailUserDefinedText15]
					,Src.[ShipmentID]
					,Src.[WarehouseOrderDetailUserDefinedText16]
					,Src.[WarehouseOrderDetailUserDefinedText17]
					,Src.[WarehouseOrderDetailUserDefinedText18]
					,Src.[WarehouseOrderDetailUserDefinedText19]
					,Src.[WarehouseOrderDetailUserDefinedText20]
					,Src.[WarehouseOrderDetailSourceID]
				FROM [dbo].WarehouseOrderDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseOrderDetails Dest WITH (NOLOCK) ON Src.IDWarehouseOrderDetail = Dest.IDWarehouseOrderDetail
				WHERE Dest.IDWarehouseOrderDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') WarehouseOrderDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `WarehouseOrderDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------WarehouseLogs
	SET @CurrentTableName = 'WarehouseLogs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseLogs AS Dest
			USING (
				SELECT [IDWarehouseLog]
					,[WarehouseOrderID]
					,[WarehouseLogDateTime]
					,[WarehouseLogUserLogin]
					,[StatusID]
					,[WarehouseLogEvent]
					,[WarehouseLogInfo]
					,[EmailDefinitionID]
					,[WarehouseLogEmailID]
					,[WarehouseOrderDetailID]
					,[WarehouseLogTechnicalInfo]
				FROM dbo.WarehouseLogs T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDWarehouseLog] = Src.[IDWarehouseLog])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[WarehouseOrderID] = Src.[WarehouseOrderID]
						,Dest.[WarehouseLogDateTime] = Src.[WarehouseLogDateTime]
						,Dest.[WarehouseLogUserLogin] = Src.[WarehouseLogUserLogin]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[WarehouseLogEvent] = Src.[WarehouseLogEvent]
						,Dest.[WarehouseLogInfo] = Src.[WarehouseLogInfo]
						,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
						,Dest.[WarehouseLogEmailID] = Src.[WarehouseLogEmailID]
						,Dest.[WarehouseOrderDetailID] = Src.[WarehouseOrderDetailID]
						,Dest.[WarehouseLogTechnicalInfo] = Src.[WarehouseLogTechnicalInfo]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDWarehouseLog]
						,[WarehouseOrderID]
						,[WarehouseLogDateTime]
						,[WarehouseLogUserLogin]
						,[StatusID]
						,[WarehouseLogEvent]
						,[WarehouseLogInfo]
						,[EmailDefinitionID]
						,[WarehouseLogEmailID]
						,[WarehouseOrderDetailID]
						,[WarehouseLogTechnicalInfo]
						)
					VALUES (
						Src.[IDWarehouseLog]
						,Src.[WarehouseOrderID]
						,Src.[WarehouseLogDateTime]
						,Src.[WarehouseLogUserLogin]
						,Src.[StatusID]
						,Src.[WarehouseLogEvent]
						,Src.[WarehouseLogInfo]
						,Src.[EmailDefinitionID]
						,Src.[WarehouseLogEmailID]
						,Src.[WarehouseOrderDetailID]
						,Src.[WarehouseLogTechnicalInfo]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDWarehouseLog] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDWarehouseLog] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			--WHILE EXISTS (
			--		SELECT 1
			--		FROM [dbo].WarehouseLogs Src WITH (NOLOCK)
			--		INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseLogs Dest WITH (NOLOCK) ON Src.IDWarehouseLog = Dest.IDWarehouseLog
			--		)
			--	--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime
			--BEGIN
			--	UPDATE TOP (@BatchSizeForArchival) Dest
			--	SET Dest.[WarehouseOrderID] = Src.[WarehouseOrderID]
			--		,Dest.[WarehouseLogDateTime] = Src.[WarehouseLogDateTime]
			--		,Dest.[WarehouseLogUserLogin] = Src.[WarehouseLogUserLogin]
			--		,Dest.[StatusID] = Src.[StatusID]
			--		,Dest.[WarehouseLogEvent] = Src.[WarehouseLogEvent]
			--		,Dest.[WarehouseLogInfo] = Src.[WarehouseLogInfo]
			--		,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
			--		,Dest.[WarehouseLogEmailID] = Src.[WarehouseLogEmailID]
			--		,Dest.[WarehouseOrderDetailID] = Src.[WarehouseOrderDetailID]
			--		,Dest.[WarehouseLogTechnicalInfo] = Src.[WarehouseLogTechnicalInfo]
			--	OUTPUT 'UPDATE'
			--		,CAST(Inserted.IDWarehouseLog AS VARCHAR(50)) AS 'Inserted'
			--		,CAST(Deleted.IDWarehouseLog AS VARCHAR(50)) AS 'Deleted'
			--	INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
			--	FROM [dbo].WarehouseLogs Src WITH (NOLOCK)
			--	INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseLogs Dest ON Src.IDWarehouseLog = Dest.IDWarehouseLog
			--		--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime
			--		;
			--END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].WarehouseLogs Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseLogs Dest WITH (NOLOCK) ON Src.IDWarehouseLog = Dest.IDWarehouseLog
					WHERE Dest.IDWarehouseLog IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseLogs (
					[IDWarehouseLog]
					,[WarehouseOrderID]
					,[WarehouseLogDateTime]
					,[WarehouseLogUserLogin]
					,[StatusID]
					,[WarehouseLogEvent]
					,[WarehouseLogInfo]
					,[EmailDefinitionID]
					,[WarehouseLogEmailID]
					,[WarehouseOrderDetailID]
					,[WarehouseLogTechnicalInfo]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDWarehouseLog AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDWarehouseLog]
					,Src.[WarehouseOrderID]
					,Src.[WarehouseLogDateTime]
					,Src.[WarehouseLogUserLogin]
					,Src.[StatusID]
					,Src.[WarehouseLogEvent]
					,Src.[WarehouseLogInfo]
					,Src.[EmailDefinitionID]
					,Src.[WarehouseLogEmailID]
					,Src.[WarehouseOrderDetailID]
					,Src.[WarehouseLogTechnicalInfo]
				FROM [dbo].WarehouseLogs Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.WarehouseLogs Dest WITH (NOLOCK) ON Src.IDWarehouseLog = Dest.IDWarehouseLog
				WHERE Dest.IDWarehouseLog IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') WarehouseLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `WarehouseLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----Issues
	-----IssueDetails
	SET @CurrentTableName = 'IssueDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueDetails AS Dest
			USING (
				SELECT [IDIssueDetail]
					,[IssueID]
					,[IssueDetailAddDateTime]
					,[IssueDetailEditDateTime]
					,[IssueDetailAddUserCode]
					,[IssueDetailEditUserCode]
					,[IssueDetailUserDefinedText01]
					,[IssueDetailUserDefinedText02]
					,[IssueDetailUserDefinedText03]
					,[IssueDetailUserDefinedText04]
					,[IssueDetailUserDefinedText05]
					,[IssueDetailUserDefinedText06]
					,[IssueDetailUserDefinedText07]
					,[IssueDetailUserDefinedText08]
					,[IssueDetailUserDefinedText09]
					,[IssueDetailUserDefinedText10]
					,[IssueDetailUserDefinedText11]
					,[IssueDetailUserDefinedText12]
					,[IssueDetailUserDefinedText13]
					,[IssueDetailUserDefinedText14]
					,[IssueDetailUserDefinedText15]
					,[IssueDetailUserDefinedText16]
					,[IssueDetailUserDefinedText17]
					,[IssueDetailUserDefinedText18]
					,[IssueDetailUserDefinedText19]
					,[IssueDetailUserDefinedText20]
					,[IssueDetailUserDefinedLongText01]
					,[IssueDetailUserDefinedLongText02]
					,[IssueDetailUserDefinedLongText03]
					,[IssueDetailUserDefinedLongText04]
					,[IssueDetailUserDefinedLongText05]
					,[IssueDetailUserDefinedDateTime01]
					,[IssueDetailUserDefinedDateTime02]
					,[IssueDetailUserDefinedDateTime03]
					,[IssueDetailUserDefinedDateTime04]
					,[IssueDetailUserDefinedDateTime05]
					,[IssueDetailUserDefinedDateTime06]
					,[IssueDetailUserDefinedDateTime07]
					,[IssueDetailUserDefinedDateTime08]
					,[IssueDetailUserDefinedDateTime09]
					,[IssueDetailUserDefinedDateTime10]
					,[IssueDetailUserDefinedNumber01]
					,[IssueDetailUserDefinedNumber02]
					,[IssueDetailUserDefinedNumber03]
					,[IssueDetailUserDefinedNumber04]
					,[IssueDetailUserDefinedNumber05]
					,[IssueDetailUserDefinedNumber06]
					,[IssueDetailUserDefinedNumber07]
					,[IssueDetailUserDefinedNumber08]
					,[IssueDetailUserDefinedNumber09]
					,[IssueDetailUserDefinedNumber10]
					,[IssueDetailUserDefinedYesNo01]
					,[IssueDetailUserDefinedYesNo02]
					,[IssueDetailUserDefinedYesNo03]
					,[IssueDetailUserDefinedYesNo04]
					,[IssueDetailUserDefinedYesNo05]
					,[IssueDetailUserDefinedYesNo06]
					,[IssueDetailUserDefinedYesNo07]
					,[IssueDetailUserDefinedYesNo08]
					,[IssueDetailUserDefinedYesNo09]
					,[IssueDetailUserDefinedYesNo10]
					,[IssueDetailSourceID]
					,[IssueDetailSourceNumber]
				FROM dbo.IssueDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDIssueDetail] = Src.[IDIssueDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[IssueID] = Src.[IssueID]
						,Dest.[IssueDetailAddDateTime] = Src.[IssueDetailAddDateTime]
						,Dest.[IssueDetailEditDateTime] = Src.[IssueDetailEditDateTime]
						,Dest.[IssueDetailAddUserCode] = Src.[IssueDetailAddUserCode]
						,Dest.[IssueDetailEditUserCode] = Src.[IssueDetailEditUserCode]
						,Dest.[IssueDetailUserDefinedText01] = Src.[IssueDetailUserDefinedText01]
						,Dest.[IssueDetailUserDefinedText02] = Src.[IssueDetailUserDefinedText02]
						,Dest.[IssueDetailUserDefinedText03] = Src.[IssueDetailUserDefinedText03]
						,Dest.[IssueDetailUserDefinedText04] = Src.[IssueDetailUserDefinedText04]
						,Dest.[IssueDetailUserDefinedText05] = Src.[IssueDetailUserDefinedText05]
						,Dest.[IssueDetailUserDefinedText06] = Src.[IssueDetailUserDefinedText06]
						,Dest.[IssueDetailUserDefinedText07] = Src.[IssueDetailUserDefinedText07]
						,Dest.[IssueDetailUserDefinedText08] = Src.[IssueDetailUserDefinedText08]
						,Dest.[IssueDetailUserDefinedText09] = Src.[IssueDetailUserDefinedText09]
						,Dest.[IssueDetailUserDefinedText10] = Src.[IssueDetailUserDefinedText10]
						,Dest.[IssueDetailUserDefinedText11] = Src.[IssueDetailUserDefinedText11]
						,Dest.[IssueDetailUserDefinedText12] = Src.[IssueDetailUserDefinedText12]
						,Dest.[IssueDetailUserDefinedText13] = Src.[IssueDetailUserDefinedText13]
						,Dest.[IssueDetailUserDefinedText14] = Src.[IssueDetailUserDefinedText14]
						,Dest.[IssueDetailUserDefinedText15] = Src.[IssueDetailUserDefinedText15]
						,Dest.[IssueDetailUserDefinedText16] = Src.[IssueDetailUserDefinedText16]
						,Dest.[IssueDetailUserDefinedText17] = Src.[IssueDetailUserDefinedText17]
						,Dest.[IssueDetailUserDefinedText18] = Src.[IssueDetailUserDefinedText18]
						,Dest.[IssueDetailUserDefinedText19] = Src.[IssueDetailUserDefinedText19]
						,Dest.[IssueDetailUserDefinedText20] = Src.[IssueDetailUserDefinedText20]
						,Dest.[IssueDetailUserDefinedLongText01] = Src.[IssueDetailUserDefinedLongText01]
						,Dest.[IssueDetailUserDefinedLongText02] = Src.[IssueDetailUserDefinedLongText02]
						,Dest.[IssueDetailUserDefinedLongText03] = Src.[IssueDetailUserDefinedLongText03]
						,Dest.[IssueDetailUserDefinedLongText04] = Src.[IssueDetailUserDefinedLongText04]
						,Dest.[IssueDetailUserDefinedLongText05] = Src.[IssueDetailUserDefinedLongText05]
						,Dest.[IssueDetailUserDefinedDateTime01] = Src.[IssueDetailUserDefinedDateTime01]
						,Dest.[IssueDetailUserDefinedDateTime02] = Src.[IssueDetailUserDefinedDateTime02]
						,Dest.[IssueDetailUserDefinedDateTime03] = Src.[IssueDetailUserDefinedDateTime03]
						,Dest.[IssueDetailUserDefinedDateTime04] = Src.[IssueDetailUserDefinedDateTime04]
						,Dest.[IssueDetailUserDefinedDateTime05] = Src.[IssueDetailUserDefinedDateTime05]
						,Dest.[IssueDetailUserDefinedDateTime06] = Src.[IssueDetailUserDefinedDateTime06]
						,Dest.[IssueDetailUserDefinedDateTime07] = Src.[IssueDetailUserDefinedDateTime07]
						,Dest.[IssueDetailUserDefinedDateTime08] = Src.[IssueDetailUserDefinedDateTime08]
						,Dest.[IssueDetailUserDefinedDateTime09] = Src.[IssueDetailUserDefinedDateTime09]
						,Dest.[IssueDetailUserDefinedDateTime10] = Src.[IssueDetailUserDefinedDateTime10]
						,Dest.[IssueDetailUserDefinedNumber01] = Src.[IssueDetailUserDefinedNumber01]
						,Dest.[IssueDetailUserDefinedNumber02] = Src.[IssueDetailUserDefinedNumber02]
						,Dest.[IssueDetailUserDefinedNumber03] = Src.[IssueDetailUserDefinedNumber03]
						,Dest.[IssueDetailUserDefinedNumber04] = Src.[IssueDetailUserDefinedNumber04]
						,Dest.[IssueDetailUserDefinedNumber05] = Src.[IssueDetailUserDefinedNumber05]
						,Dest.[IssueDetailUserDefinedNumber06] = Src.[IssueDetailUserDefinedNumber06]
						,Dest.[IssueDetailUserDefinedNumber07] = Src.[IssueDetailUserDefinedNumber07]
						,Dest.[IssueDetailUserDefinedNumber08] = Src.[IssueDetailUserDefinedNumber08]
						,Dest.[IssueDetailUserDefinedNumber09] = Src.[IssueDetailUserDefinedNumber09]
						,Dest.[IssueDetailUserDefinedNumber10] = Src.[IssueDetailUserDefinedNumber10]
						,Dest.[IssueDetailUserDefinedYesNo01] = Src.[IssueDetailUserDefinedYesNo01]
						,Dest.[IssueDetailUserDefinedYesNo02] = Src.[IssueDetailUserDefinedYesNo02]
						,Dest.[IssueDetailUserDefinedYesNo03] = Src.[IssueDetailUserDefinedYesNo03]
						,Dest.[IssueDetailUserDefinedYesNo04] = Src.[IssueDetailUserDefinedYesNo04]
						,Dest.[IssueDetailUserDefinedYesNo05] = Src.[IssueDetailUserDefinedYesNo05]
						,Dest.[IssueDetailUserDefinedYesNo06] = Src.[IssueDetailUserDefinedYesNo06]
						,Dest.[IssueDetailUserDefinedYesNo07] = Src.[IssueDetailUserDefinedYesNo07]
						,Dest.[IssueDetailUserDefinedYesNo08] = Src.[IssueDetailUserDefinedYesNo08]
						,Dest.[IssueDetailUserDefinedYesNo09] = Src.[IssueDetailUserDefinedYesNo09]
						,Dest.[IssueDetailUserDefinedYesNo10] = Src.[IssueDetailUserDefinedYesNo10]
						,Dest.[IssueDetailSourceID] = Src.[IssueDetailSourceID]
						,Dest.[IssueDetailSourceNumber] = Src.[IssueDetailSourceNumber]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDIssueDetail]
						,[IssueID]
						,[IssueDetailAddDateTime]
						,[IssueDetailEditDateTime]
						,[IssueDetailAddUserCode]
						,[IssueDetailEditUserCode]
						,[IssueDetailUserDefinedText01]
						,[IssueDetailUserDefinedText02]
						,[IssueDetailUserDefinedText03]
						,[IssueDetailUserDefinedText04]
						,[IssueDetailUserDefinedText05]
						,[IssueDetailUserDefinedText06]
						,[IssueDetailUserDefinedText07]
						,[IssueDetailUserDefinedText08]
						,[IssueDetailUserDefinedText09]
						,[IssueDetailUserDefinedText10]
						,[IssueDetailUserDefinedText11]
						,[IssueDetailUserDefinedText12]
						,[IssueDetailUserDefinedText13]
						,[IssueDetailUserDefinedText14]
						,[IssueDetailUserDefinedText15]
						,[IssueDetailUserDefinedText16]
						,[IssueDetailUserDefinedText17]
						,[IssueDetailUserDefinedText18]
						,[IssueDetailUserDefinedText19]
						,[IssueDetailUserDefinedText20]
						,[IssueDetailUserDefinedLongText01]
						,[IssueDetailUserDefinedLongText02]
						,[IssueDetailUserDefinedLongText03]
						,[IssueDetailUserDefinedLongText04]
						,[IssueDetailUserDefinedLongText05]
						,[IssueDetailUserDefinedDateTime01]
						,[IssueDetailUserDefinedDateTime02]
						,[IssueDetailUserDefinedDateTime03]
						,[IssueDetailUserDefinedDateTime04]
						,[IssueDetailUserDefinedDateTime05]
						,[IssueDetailUserDefinedDateTime06]
						,[IssueDetailUserDefinedDateTime07]
						,[IssueDetailUserDefinedDateTime08]
						,[IssueDetailUserDefinedDateTime09]
						,[IssueDetailUserDefinedDateTime10]
						,[IssueDetailUserDefinedNumber01]
						,[IssueDetailUserDefinedNumber02]
						,[IssueDetailUserDefinedNumber03]
						,[IssueDetailUserDefinedNumber04]
						,[IssueDetailUserDefinedNumber05]
						,[IssueDetailUserDefinedNumber06]
						,[IssueDetailUserDefinedNumber07]
						,[IssueDetailUserDefinedNumber08]
						,[IssueDetailUserDefinedNumber09]
						,[IssueDetailUserDefinedNumber10]
						,[IssueDetailUserDefinedYesNo01]
						,[IssueDetailUserDefinedYesNo02]
						,[IssueDetailUserDefinedYesNo03]
						,[IssueDetailUserDefinedYesNo04]
						,[IssueDetailUserDefinedYesNo05]
						,[IssueDetailUserDefinedYesNo06]
						,[IssueDetailUserDefinedYesNo07]
						,[IssueDetailUserDefinedYesNo08]
						,[IssueDetailUserDefinedYesNo09]
						,[IssueDetailUserDefinedYesNo10]
						,[IssueDetailSourceID]
						,[IssueDetailSourceNumber]
						)
					VALUES (
						Src.[IDIssueDetail]
						,Src.[IssueID]
						,Src.[IssueDetailAddDateTime]
						,Src.[IssueDetailEditDateTime]
						,Src.[IssueDetailAddUserCode]
						,Src.[IssueDetailEditUserCode]
						,Src.[IssueDetailUserDefinedText01]
						,Src.[IssueDetailUserDefinedText02]
						,Src.[IssueDetailUserDefinedText03]
						,Src.[IssueDetailUserDefinedText04]
						,Src.[IssueDetailUserDefinedText05]
						,Src.[IssueDetailUserDefinedText06]
						,Src.[IssueDetailUserDefinedText07]
						,Src.[IssueDetailUserDefinedText08]
						,Src.[IssueDetailUserDefinedText09]
						,Src.[IssueDetailUserDefinedText10]
						,Src.[IssueDetailUserDefinedText11]
						,Src.[IssueDetailUserDefinedText12]
						,Src.[IssueDetailUserDefinedText13]
						,Src.[IssueDetailUserDefinedText14]
						,Src.[IssueDetailUserDefinedText15]
						,Src.[IssueDetailUserDefinedText16]
						,Src.[IssueDetailUserDefinedText17]
						,Src.[IssueDetailUserDefinedText18]
						,Src.[IssueDetailUserDefinedText19]
						,Src.[IssueDetailUserDefinedText20]
						,Src.[IssueDetailUserDefinedLongText01]
						,Src.[IssueDetailUserDefinedLongText02]
						,Src.[IssueDetailUserDefinedLongText03]
						,Src.[IssueDetailUserDefinedLongText04]
						,Src.[IssueDetailUserDefinedLongText05]
						,Src.[IssueDetailUserDefinedDateTime01]
						,Src.[IssueDetailUserDefinedDateTime02]
						,Src.[IssueDetailUserDefinedDateTime03]
						,Src.[IssueDetailUserDefinedDateTime04]
						,Src.[IssueDetailUserDefinedDateTime05]
						,Src.[IssueDetailUserDefinedDateTime06]
						,Src.[IssueDetailUserDefinedDateTime07]
						,Src.[IssueDetailUserDefinedDateTime08]
						,Src.[IssueDetailUserDefinedDateTime09]
						,Src.[IssueDetailUserDefinedDateTime10]
						,Src.[IssueDetailUserDefinedNumber01]
						,Src.[IssueDetailUserDefinedNumber02]
						,Src.[IssueDetailUserDefinedNumber03]
						,Src.[IssueDetailUserDefinedNumber04]
						,Src.[IssueDetailUserDefinedNumber05]
						,Src.[IssueDetailUserDefinedNumber06]
						,Src.[IssueDetailUserDefinedNumber07]
						,Src.[IssueDetailUserDefinedNumber08]
						,Src.[IssueDetailUserDefinedNumber09]
						,Src.[IssueDetailUserDefinedNumber10]
						,Src.[IssueDetailUserDefinedYesNo01]
						,Src.[IssueDetailUserDefinedYesNo02]
						,Src.[IssueDetailUserDefinedYesNo03]
						,Src.[IssueDetailUserDefinedYesNo04]
						,Src.[IssueDetailUserDefinedYesNo05]
						,Src.[IssueDetailUserDefinedYesNo06]
						,Src.[IssueDetailUserDefinedYesNo07]
						,Src.[IssueDetailUserDefinedYesNo08]
						,Src.[IssueDetailUserDefinedYesNo09]
						,Src.[IssueDetailUserDefinedYesNo10]
						,Src.[IssueDetailSourceID]
						,Src.[IssueDetailSourceNumber]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDIssueDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDIssueDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].IssueDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueDetails Dest WITH (NOLOCK) ON Src.IDIssueDetail = Dest.IDIssueDetail
					WHERE Dest.[IssueDetailEditDateTime] < Src.[IssueDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[IssueID] = Src.[IssueID]
					,Dest.[IssueDetailAddDateTime] = Src.[IssueDetailAddDateTime]
					,Dest.[IssueDetailEditDateTime] = Src.[IssueDetailEditDateTime]
					,Dest.[IssueDetailAddUserCode] = Src.[IssueDetailAddUserCode]
					,Dest.[IssueDetailEditUserCode] = Src.[IssueDetailEditUserCode]
					,Dest.[IssueDetailUserDefinedText01] = Src.[IssueDetailUserDefinedText01]
					,Dest.[IssueDetailUserDefinedText02] = Src.[IssueDetailUserDefinedText02]
					,Dest.[IssueDetailUserDefinedText03] = Src.[IssueDetailUserDefinedText03]
					,Dest.[IssueDetailUserDefinedText04] = Src.[IssueDetailUserDefinedText04]
					,Dest.[IssueDetailUserDefinedText05] = Src.[IssueDetailUserDefinedText05]
					,Dest.[IssueDetailUserDefinedText06] = Src.[IssueDetailUserDefinedText06]
					,Dest.[IssueDetailUserDefinedText07] = Src.[IssueDetailUserDefinedText07]
					,Dest.[IssueDetailUserDefinedText08] = Src.[IssueDetailUserDefinedText08]
					,Dest.[IssueDetailUserDefinedText09] = Src.[IssueDetailUserDefinedText09]
					,Dest.[IssueDetailUserDefinedText10] = Src.[IssueDetailUserDefinedText10]
					,Dest.[IssueDetailUserDefinedText11] = Src.[IssueDetailUserDefinedText11]
					,Dest.[IssueDetailUserDefinedText12] = Src.[IssueDetailUserDefinedText12]
					,Dest.[IssueDetailUserDefinedText13] = Src.[IssueDetailUserDefinedText13]
					,Dest.[IssueDetailUserDefinedText14] = Src.[IssueDetailUserDefinedText14]
					,Dest.[IssueDetailUserDefinedText15] = Src.[IssueDetailUserDefinedText15]
					,Dest.[IssueDetailUserDefinedText16] = Src.[IssueDetailUserDefinedText16]
					,Dest.[IssueDetailUserDefinedText17] = Src.[IssueDetailUserDefinedText17]
					,Dest.[IssueDetailUserDefinedText18] = Src.[IssueDetailUserDefinedText18]
					,Dest.[IssueDetailUserDefinedText19] = Src.[IssueDetailUserDefinedText19]
					,Dest.[IssueDetailUserDefinedText20] = Src.[IssueDetailUserDefinedText20]
					,Dest.[IssueDetailUserDefinedLongText01] = Src.[IssueDetailUserDefinedLongText01]
					,Dest.[IssueDetailUserDefinedLongText02] = Src.[IssueDetailUserDefinedLongText02]
					,Dest.[IssueDetailUserDefinedLongText03] = Src.[IssueDetailUserDefinedLongText03]
					,Dest.[IssueDetailUserDefinedLongText04] = Src.[IssueDetailUserDefinedLongText04]
					,Dest.[IssueDetailUserDefinedLongText05] = Src.[IssueDetailUserDefinedLongText05]
					,Dest.[IssueDetailUserDefinedDateTime01] = Src.[IssueDetailUserDefinedDateTime01]
					,Dest.[IssueDetailUserDefinedDateTime02] = Src.[IssueDetailUserDefinedDateTime02]
					,Dest.[IssueDetailUserDefinedDateTime03] = Src.[IssueDetailUserDefinedDateTime03]
					,Dest.[IssueDetailUserDefinedDateTime04] = Src.[IssueDetailUserDefinedDateTime04]
					,Dest.[IssueDetailUserDefinedDateTime05] = Src.[IssueDetailUserDefinedDateTime05]
					,Dest.[IssueDetailUserDefinedDateTime06] = Src.[IssueDetailUserDefinedDateTime06]
					,Dest.[IssueDetailUserDefinedDateTime07] = Src.[IssueDetailUserDefinedDateTime07]
					,Dest.[IssueDetailUserDefinedDateTime08] = Src.[IssueDetailUserDefinedDateTime08]
					,Dest.[IssueDetailUserDefinedDateTime09] = Src.[IssueDetailUserDefinedDateTime09]
					,Dest.[IssueDetailUserDefinedDateTime10] = Src.[IssueDetailUserDefinedDateTime10]
					,Dest.[IssueDetailUserDefinedNumber01] = Src.[IssueDetailUserDefinedNumber01]
					,Dest.[IssueDetailUserDefinedNumber02] = Src.[IssueDetailUserDefinedNumber02]
					,Dest.[IssueDetailUserDefinedNumber03] = Src.[IssueDetailUserDefinedNumber03]
					,Dest.[IssueDetailUserDefinedNumber04] = Src.[IssueDetailUserDefinedNumber04]
					,Dest.[IssueDetailUserDefinedNumber05] = Src.[IssueDetailUserDefinedNumber05]
					,Dest.[IssueDetailUserDefinedNumber06] = Src.[IssueDetailUserDefinedNumber06]
					,Dest.[IssueDetailUserDefinedNumber07] = Src.[IssueDetailUserDefinedNumber07]
					,Dest.[IssueDetailUserDefinedNumber08] = Src.[IssueDetailUserDefinedNumber08]
					,Dest.[IssueDetailUserDefinedNumber09] = Src.[IssueDetailUserDefinedNumber09]
					,Dest.[IssueDetailUserDefinedNumber10] = Src.[IssueDetailUserDefinedNumber10]
					,Dest.[IssueDetailUserDefinedYesNo01] = Src.[IssueDetailUserDefinedYesNo01]
					,Dest.[IssueDetailUserDefinedYesNo02] = Src.[IssueDetailUserDefinedYesNo02]
					,Dest.[IssueDetailUserDefinedYesNo03] = Src.[IssueDetailUserDefinedYesNo03]
					,Dest.[IssueDetailUserDefinedYesNo04] = Src.[IssueDetailUserDefinedYesNo04]
					,Dest.[IssueDetailUserDefinedYesNo05] = Src.[IssueDetailUserDefinedYesNo05]
					,Dest.[IssueDetailUserDefinedYesNo06] = Src.[IssueDetailUserDefinedYesNo06]
					,Dest.[IssueDetailUserDefinedYesNo07] = Src.[IssueDetailUserDefinedYesNo07]
					,Dest.[IssueDetailUserDefinedYesNo08] = Src.[IssueDetailUserDefinedYesNo08]
					,Dest.[IssueDetailUserDefinedYesNo09] = Src.[IssueDetailUserDefinedYesNo09]
					,Dest.[IssueDetailUserDefinedYesNo10] = Src.[IssueDetailUserDefinedYesNo10]
					,Dest.[IssueDetailSourceID] = Src.[IssueDetailSourceID]
					,Dest.[IssueDetailSourceNumber] = Src.[IssueDetailSourceNumber]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDIssueDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDIssueDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].IssueDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueDetails Dest ON Src.IDIssueDetail = Dest.IDIssueDetail
				WHERE Dest.[IssueDetailEditDateTime] < Src.[IssueDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].IssueDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueDetails Dest WITH (NOLOCK) ON Src.IDIssueDetail = Dest.IDIssueDetail
					WHERE Dest.IDIssueDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueDetails (
					[IDIssueDetail]
					,[IssueID]
					,[IssueDetailAddDateTime]
					,[IssueDetailEditDateTime]
					,[IssueDetailAddUserCode]
					,[IssueDetailEditUserCode]
					,[IssueDetailUserDefinedText01]
					,[IssueDetailUserDefinedText02]
					,[IssueDetailUserDefinedText03]
					,[IssueDetailUserDefinedText04]
					,[IssueDetailUserDefinedText05]
					,[IssueDetailUserDefinedText06]
					,[IssueDetailUserDefinedText07]
					,[IssueDetailUserDefinedText08]
					,[IssueDetailUserDefinedText09]
					,[IssueDetailUserDefinedText10]
					,[IssueDetailUserDefinedText11]
					,[IssueDetailUserDefinedText12]
					,[IssueDetailUserDefinedText13]
					,[IssueDetailUserDefinedText14]
					,[IssueDetailUserDefinedText15]
					,[IssueDetailUserDefinedText16]
					,[IssueDetailUserDefinedText17]
					,[IssueDetailUserDefinedText18]
					,[IssueDetailUserDefinedText19]
					,[IssueDetailUserDefinedText20]
					,[IssueDetailUserDefinedLongText01]
					,[IssueDetailUserDefinedLongText02]
					,[IssueDetailUserDefinedLongText03]
					,[IssueDetailUserDefinedLongText04]
					,[IssueDetailUserDefinedLongText05]
					,[IssueDetailUserDefinedDateTime01]
					,[IssueDetailUserDefinedDateTime02]
					,[IssueDetailUserDefinedDateTime03]
					,[IssueDetailUserDefinedDateTime04]
					,[IssueDetailUserDefinedDateTime05]
					,[IssueDetailUserDefinedDateTime06]
					,[IssueDetailUserDefinedDateTime07]
					,[IssueDetailUserDefinedDateTime08]
					,[IssueDetailUserDefinedDateTime09]
					,[IssueDetailUserDefinedDateTime10]
					,[IssueDetailUserDefinedNumber01]
					,[IssueDetailUserDefinedNumber02]
					,[IssueDetailUserDefinedNumber03]
					,[IssueDetailUserDefinedNumber04]
					,[IssueDetailUserDefinedNumber05]
					,[IssueDetailUserDefinedNumber06]
					,[IssueDetailUserDefinedNumber07]
					,[IssueDetailUserDefinedNumber08]
					,[IssueDetailUserDefinedNumber09]
					,[IssueDetailUserDefinedNumber10]
					,[IssueDetailUserDefinedYesNo01]
					,[IssueDetailUserDefinedYesNo02]
					,[IssueDetailUserDefinedYesNo03]
					,[IssueDetailUserDefinedYesNo04]
					,[IssueDetailUserDefinedYesNo05]
					,[IssueDetailUserDefinedYesNo06]
					,[IssueDetailUserDefinedYesNo07]
					,[IssueDetailUserDefinedYesNo08]
					,[IssueDetailUserDefinedYesNo09]
					,[IssueDetailUserDefinedYesNo10]
					,[IssueDetailSourceID]
					,[IssueDetailSourceNumber]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDIssueDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDIssueDetail]
					,Src.[IssueID]
					,Src.[IssueDetailAddDateTime]
					,Src.[IssueDetailEditDateTime]
					,Src.[IssueDetailAddUserCode]
					,Src.[IssueDetailEditUserCode]
					,Src.[IssueDetailUserDefinedText01]
					,Src.[IssueDetailUserDefinedText02]
					,Src.[IssueDetailUserDefinedText03]
					,Src.[IssueDetailUserDefinedText04]
					,Src.[IssueDetailUserDefinedText05]
					,Src.[IssueDetailUserDefinedText06]
					,Src.[IssueDetailUserDefinedText07]
					,Src.[IssueDetailUserDefinedText08]
					,Src.[IssueDetailUserDefinedText09]
					,Src.[IssueDetailUserDefinedText10]
					,Src.[IssueDetailUserDefinedText11]
					,Src.[IssueDetailUserDefinedText12]
					,Src.[IssueDetailUserDefinedText13]
					,Src.[IssueDetailUserDefinedText14]
					,Src.[IssueDetailUserDefinedText15]
					,Src.[IssueDetailUserDefinedText16]
					,Src.[IssueDetailUserDefinedText17]
					,Src.[IssueDetailUserDefinedText18]
					,Src.[IssueDetailUserDefinedText19]
					,Src.[IssueDetailUserDefinedText20]
					,Src.[IssueDetailUserDefinedLongText01]
					,Src.[IssueDetailUserDefinedLongText02]
					,Src.[IssueDetailUserDefinedLongText03]
					,Src.[IssueDetailUserDefinedLongText04]
					,Src.[IssueDetailUserDefinedLongText05]
					,Src.[IssueDetailUserDefinedDateTime01]
					,Src.[IssueDetailUserDefinedDateTime02]
					,Src.[IssueDetailUserDefinedDateTime03]
					,Src.[IssueDetailUserDefinedDateTime04]
					,Src.[IssueDetailUserDefinedDateTime05]
					,Src.[IssueDetailUserDefinedDateTime06]
					,Src.[IssueDetailUserDefinedDateTime07]
					,Src.[IssueDetailUserDefinedDateTime08]
					,Src.[IssueDetailUserDefinedDateTime09]
					,Src.[IssueDetailUserDefinedDateTime10]
					,Src.[IssueDetailUserDefinedNumber01]
					,Src.[IssueDetailUserDefinedNumber02]
					,Src.[IssueDetailUserDefinedNumber03]
					,Src.[IssueDetailUserDefinedNumber04]
					,Src.[IssueDetailUserDefinedNumber05]
					,Src.[IssueDetailUserDefinedNumber06]
					,Src.[IssueDetailUserDefinedNumber07]
					,Src.[IssueDetailUserDefinedNumber08]
					,Src.[IssueDetailUserDefinedNumber09]
					,Src.[IssueDetailUserDefinedNumber10]
					,Src.[IssueDetailUserDefinedYesNo01]
					,Src.[IssueDetailUserDefinedYesNo02]
					,Src.[IssueDetailUserDefinedYesNo03]
					,Src.[IssueDetailUserDefinedYesNo04]
					,Src.[IssueDetailUserDefinedYesNo05]
					,Src.[IssueDetailUserDefinedYesNo06]
					,Src.[IssueDetailUserDefinedYesNo07]
					,Src.[IssueDetailUserDefinedYesNo08]
					,Src.[IssueDetailUserDefinedYesNo09]
					,Src.[IssueDetailUserDefinedYesNo10]
					,Src.[IssueDetailSourceID]
					,Src.[IssueDetailSourceNumber]
				FROM [dbo].IssueDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueDetails Dest WITH (NOLOCK) ON Src.IDIssueDetail = Dest.IDIssueDetail
				WHERE Dest.IDIssueDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') IssueDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `IssueDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------IssuesFiles
	SET @CurrentTableName = 'IssueFiles';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueFiles AS Dest
			USING (
				SELECT [IDIssueFile]
					,[IssueID]
					,[IssueFileAddDateTime]
					,[IssueFileEditDateTime]
					,[IssueFileAddUserCode]
					,[IssueFileEditUserCode]
					,[IssueFileName]
					,[IssueFileSaveFileName]
					,[IssueFileNotes]
					,[IssueFileType]
					,[IssueFileCompressedData]
				FROM dbo.IssueFiles T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDIssueFile] = Src.[IDIssueFile])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[IssueID] = Src.[IssueID]
						,Dest.[IssueFileAddDateTime] = Src.[IssueFileAddDateTime]
						,Dest.[IssueFileEditDateTime] = Src.[IssueFileEditDateTime]
						,Dest.[IssueFileAddUserCode] = Src.[IssueFileAddUserCode]
						,Dest.[IssueFileEditUserCode] = Src.[IssueFileEditUserCode]
						,Dest.[IssueFileName] = Src.[IssueFileName]
						,Dest.[IssueFileSaveFileName] = Src.[IssueFileSaveFileName]
						,Dest.[IssueFileNotes] = Src.[IssueFileNotes]
						,Dest.[IssueFileType] = Src.[IssueFileType]
						,Dest.[IssueFileCompressedData] = Src.[IssueFileCompressedData]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDIssueFile]
						,[IssueID]
						,[IssueFileAddDateTime]
						,[IssueFileEditDateTime]
						,[IssueFileAddUserCode]
						,[IssueFileEditUserCode]
						,[IssueFileName]
						,[IssueFileSaveFileName]
						,[IssueFileNotes]
						,[IssueFileType]
						,[IssueFileCompressedData]
						)
					VALUES (
						Src.[IDIssueFile]
						,Src.[IssueID]
						,Src.[IssueFileAddDateTime]
						,Src.[IssueFileEditDateTime]
						,Src.[IssueFileAddUserCode]
						,Src.[IssueFileEditUserCode]
						,Src.[IssueFileName]
						,Src.[IssueFileSaveFileName]
						,Src.[IssueFileNotes]
						,Src.[IssueFileType]
						,Src.[IssueFileCompressedData]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDIssueFile] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDIssueFile] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].IssueFiles Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueFiles Dest WITH (NOLOCK) ON Src.IDIssueFile = Dest.IDIssueFile
					WHERE Dest.[IssueFileEditDateTime] < Src.[IssueFileEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[IssueID] = Src.[IssueID]
					,Dest.[IssueFileAddDateTime] = Src.[IssueFileAddDateTime]
					,Dest.[IssueFileEditDateTime] = Src.[IssueFileEditDateTime]
					,Dest.[IssueFileAddUserCode] = Src.[IssueFileAddUserCode]
					,Dest.[IssueFileEditUserCode] = Src.[IssueFileEditUserCode]
					,Dest.[IssueFileName] = Src.[IssueFileName]
					,Dest.[IssueFileSaveFileName] = Src.[IssueFileSaveFileName]
					,Dest.[IssueFileNotes] = Src.[IssueFileNotes]
					,Dest.[IssueFileType] = Src.[IssueFileType]
					,Dest.[IssueFileCompressedData] = Src.[IssueFileCompressedData]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDIssueFile AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDIssueFile AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].IssueFiles Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueFiles Dest ON Src.IDIssueFile = Dest.IDIssueFile
				WHERE Dest.[IssueFileEditDateTime] < Src.[IssueFileEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].IssueFiles Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueFiles Dest WITH (NOLOCK) ON Src.IDIssueFile = Dest.IDIssueFile
					WHERE Dest.IDIssueFile IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueFiles (
					[IDIssueFile]
					,[IssueID]
					,[IssueFileAddDateTime]
					,[IssueFileEditDateTime]
					,[IssueFileAddUserCode]
					,[IssueFileEditUserCode]
					,[IssueFileName]
					,[IssueFileSaveFileName]
					,[IssueFileNotes]
					,[IssueFileType]
					,[IssueFileCompressedData]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDIssueFile AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDIssueFile]
					,Src.[IssueID]
					,Src.[IssueFileAddDateTime]
					,Src.[IssueFileEditDateTime]
					,Src.[IssueFileAddUserCode]
					,Src.[IssueFileEditUserCode]
					,Src.[IssueFileName]
					,Src.[IssueFileSaveFileName]
					,Src.[IssueFileNotes]
					,Src.[IssueFileType]
					,Src.[IssueFileCompressedData]
				FROM [dbo].IssueFiles Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueFiles Dest WITH (NOLOCK) ON Src.IDIssueFile = Dest.IDIssueFile
				WHERE Dest.IDIssueFile IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') IssuesFiles: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `IssuesFiles` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------Issues
	SET @CurrentTableName = 'Issues';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Issues AS Dest
			USING (
				SELECT [IDIssue]
					,[IssueAddDateTime]
					,[IssueEditDateTime]
					,[IssueAddUserCode]
					,[IssueEditUserCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[IssueUserDefinedText01]
					,[IssueUserDefinedText02]
					,[IssueUserDefinedText03]
					,[IssueUserDefinedText04]
					,[IssueUserDefinedText05]
					,[IssueUserDefinedText06]
					,[IssueUserDefinedText07]
					,[IssueUserDefinedText08]
					,[IssueUserDefinedText09]
					,[IssueUserDefinedText10]
					,[IssueUserDefinedText11]
					,[IssueUserDefinedText12]
					,[IssueUserDefinedText13]
					,[IssueUserDefinedText14]
					,[IssueUserDefinedText15]
					,[IssueUserDefinedText16]
					,[IssueUserDefinedText17]
					,[IssueUserDefinedText18]
					,[IssueUserDefinedText19]
					,[IssueUserDefinedText20]
					,[IssueUserDefinedLongText01]
					,[IssueUserDefinedLongText02]
					,[IssueUserDefinedLongText03]
					,[IssueUserDefinedLongText04]
					,[IssueUserDefinedLongText05]
					,[IssueUserDefinedDateTime01]
					,[IssueUserDefinedDateTime02]
					,[IssueUserDefinedDateTime03]
					,[IssueUserDefinedDateTime04]
					,[IssueUserDefinedDateTime05]
					,[IssueUserDefinedDateTime06]
					,[IssueUserDefinedDateTime07]
					,[IssueUserDefinedDateTime08]
					,[IssueUserDefinedDateTime09]
					,[IssueUserDefinedDateTime10]
					,[IssueUserDefinedNumber01]
					,[IssueUserDefinedNumber02]
					,[IssueUserDefinedNumber03]
					,[IssueUserDefinedNumber04]
					,[IssueUserDefinedNumber05]
					,[IssueUserDefinedNumber06]
					,[IssueUserDefinedNumber07]
					,[IssueUserDefinedNumber08]
					,[IssueUserDefinedNumber09]
					,[IssueUserDefinedNumber10]
					,[IssueUserDefinedYesNo01]
					,[IssueUserDefinedYesNo02]
					,[IssueUserDefinedYesNo03]
					,[IssueUserDefinedYesNo04]
					,[IssueUserDefinedYesNo05]
					,[IssueUserDefinedYesNo06]
					,[IssueUserDefinedYesNo07]
					,[IssueUserDefinedYesNo08]
					,[IssueUserDefinedYesNo09]
					,[IssueUserDefinedYesNo10]
					,[IssueStatusChangeDateTime]
					,[IssueOwnerLogin]
					,[IssueChangesAcceptedDateTime]
					,[IssueChangedDataStorageString]
					,[IssueRuleType]
					,[IssueCreationDataSource]
					,[IssueNumber]
					,[IssueUserDefinedText21]
					,[IssueUserDefinedText22]
					,[IssueUserDefinedText23]
					,[IssueUserDefinedText24]
					,[IssueUserDefinedText25]
					,[IssueUserDefinedText26]
					,[IssueUserDefinedText27]
					,[IssueUserDefinedText28]
					,[IssueUserDefinedText29]
					,[IssueUserDefinedText30]
					,[IssueForTransportDetails]
					,[IssueUserDefinedLongText06]
					,[IssueUserDefinedLongText07]
					,[IssueUserDefinedLongText08]
					,[IssueUserDefinedLongText09]
					,[IssueUserDefinedLongText10]
					,[IssueImportBatch]
					,[IssueNewEDIPending]
				FROM dbo.Issues I WITH (NOLOCK)
				INNER JOIN TransportStatuses TS WITH (NOLOCK) ON I.StatusID = TS.IDTransportStatus
				WHERE TS.TransportStatusDisplayName IN (
						'Delivered'
						,'Finished'
						)
					AND I.IssueEditDateTime <= @IssueArchiveAfterDays
				) AS Src
				ON (Dest.[IDIssue] = Src.[IDIssue])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[IssueAddDateTime] = Src.[IssueAddDateTime]
						,Dest.[IssueEditDateTime] = Src.[IssueEditDateTime]
						,Dest.[IssueAddUserCode] = Src.[IssueAddUserCode]
						,Dest.[IssueEditUserCode] = Src.[IssueEditUserCode]
						,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
						,Dest.[IssueUserDefinedText01] = Src.[IssueUserDefinedText01]
						,Dest.[IssueUserDefinedText02] = Src.[IssueUserDefinedText02]
						,Dest.[IssueUserDefinedText03] = Src.[IssueUserDefinedText03]
						,Dest.[IssueUserDefinedText04] = Src.[IssueUserDefinedText04]
						,Dest.[IssueUserDefinedText05] = Src.[IssueUserDefinedText05]
						,Dest.[IssueUserDefinedText06] = Src.[IssueUserDefinedText06]
						,Dest.[IssueUserDefinedText07] = Src.[IssueUserDefinedText07]
						,Dest.[IssueUserDefinedText08] = Src.[IssueUserDefinedText08]
						,Dest.[IssueUserDefinedText09] = Src.[IssueUserDefinedText09]
						,Dest.[IssueUserDefinedText10] = Src.[IssueUserDefinedText10]
						,Dest.[IssueUserDefinedText11] = Src.[IssueUserDefinedText11]
						,Dest.[IssueUserDefinedText12] = Src.[IssueUserDefinedText12]
						,Dest.[IssueUserDefinedText13] = Src.[IssueUserDefinedText13]
						,Dest.[IssueUserDefinedText14] = Src.[IssueUserDefinedText14]
						,Dest.[IssueUserDefinedText15] = Src.[IssueUserDefinedText15]
						,Dest.[IssueUserDefinedText16] = Src.[IssueUserDefinedText16]
						,Dest.[IssueUserDefinedText17] = Src.[IssueUserDefinedText17]
						,Dest.[IssueUserDefinedText18] = Src.[IssueUserDefinedText18]
						,Dest.[IssueUserDefinedText19] = Src.[IssueUserDefinedText19]
						,Dest.[IssueUserDefinedText20] = Src.[IssueUserDefinedText20]
						,Dest.[IssueUserDefinedLongText01] = Src.[IssueUserDefinedLongText01]
						,Dest.[IssueUserDefinedLongText02] = Src.[IssueUserDefinedLongText02]
						,Dest.[IssueUserDefinedLongText03] = Src.[IssueUserDefinedLongText03]
						,Dest.[IssueUserDefinedLongText04] = Src.[IssueUserDefinedLongText04]
						,Dest.[IssueUserDefinedLongText05] = Src.[IssueUserDefinedLongText05]
						,Dest.[IssueUserDefinedDateTime01] = Src.[IssueUserDefinedDateTime01]
						,Dest.[IssueUserDefinedDateTime02] = Src.[IssueUserDefinedDateTime02]
						,Dest.[IssueUserDefinedDateTime03] = Src.[IssueUserDefinedDateTime03]
						,Dest.[IssueUserDefinedDateTime04] = Src.[IssueUserDefinedDateTime04]
						,Dest.[IssueUserDefinedDateTime05] = Src.[IssueUserDefinedDateTime05]
						,Dest.[IssueUserDefinedDateTime06] = Src.[IssueUserDefinedDateTime06]
						,Dest.[IssueUserDefinedDateTime07] = Src.[IssueUserDefinedDateTime07]
						,Dest.[IssueUserDefinedDateTime08] = Src.[IssueUserDefinedDateTime08]
						,Dest.[IssueUserDefinedDateTime09] = Src.[IssueUserDefinedDateTime09]
						,Dest.[IssueUserDefinedDateTime10] = Src.[IssueUserDefinedDateTime10]
						,Dest.[IssueUserDefinedNumber01] = Src.[IssueUserDefinedNumber01]
						,Dest.[IssueUserDefinedNumber02] = Src.[IssueUserDefinedNumber02]
						,Dest.[IssueUserDefinedNumber03] = Src.[IssueUserDefinedNumber03]
						,Dest.[IssueUserDefinedNumber04] = Src.[IssueUserDefinedNumber04]
						,Dest.[IssueUserDefinedNumber05] = Src.[IssueUserDefinedNumber05]
						,Dest.[IssueUserDefinedNumber06] = Src.[IssueUserDefinedNumber06]
						,Dest.[IssueUserDefinedNumber07] = Src.[IssueUserDefinedNumber07]
						,Dest.[IssueUserDefinedNumber08] = Src.[IssueUserDefinedNumber08]
						,Dest.[IssueUserDefinedNumber09] = Src.[IssueUserDefinedNumber09]
						,Dest.[IssueUserDefinedNumber10] = Src.[IssueUserDefinedNumber10]
						,Dest.[IssueUserDefinedYesNo01] = Src.[IssueUserDefinedYesNo01]
						,Dest.[IssueUserDefinedYesNo02] = Src.[IssueUserDefinedYesNo02]
						,Dest.[IssueUserDefinedYesNo03] = Src.[IssueUserDefinedYesNo03]
						,Dest.[IssueUserDefinedYesNo04] = Src.[IssueUserDefinedYesNo04]
						,Dest.[IssueUserDefinedYesNo05] = Src.[IssueUserDefinedYesNo05]
						,Dest.[IssueUserDefinedYesNo06] = Src.[IssueUserDefinedYesNo06]
						,Dest.[IssueUserDefinedYesNo07] = Src.[IssueUserDefinedYesNo07]
						,Dest.[IssueUserDefinedYesNo08] = Src.[IssueUserDefinedYesNo08]
						,Dest.[IssueUserDefinedYesNo09] = Src.[IssueUserDefinedYesNo09]
						,Dest.[IssueUserDefinedYesNo10] = Src.[IssueUserDefinedYesNo10]
						,Dest.[IssueStatusChangeDateTime] = Src.[IssueStatusChangeDateTime]
						,Dest.[IssueOwnerLogin] = Src.[IssueOwnerLogin]
						,Dest.[IssueChangesAcceptedDateTime] = Src.[IssueChangesAcceptedDateTime]
						,Dest.[IssueChangedDataStorageString] = Src.[IssueChangedDataStorageString]
						,Dest.[IssueRuleType] = Src.[IssueRuleType]
						,Dest.[IssueCreationDataSource] = Src.[IssueCreationDataSource]
						,Dest.[IssueNumber] = Src.[IssueNumber]
						,Dest.[IssueUserDefinedText21] = Src.[IssueUserDefinedText21]
						,Dest.[IssueUserDefinedText22] = Src.[IssueUserDefinedText22]
						,Dest.[IssueUserDefinedText23] = Src.[IssueUserDefinedText23]
						,Dest.[IssueUserDefinedText24] = Src.[IssueUserDefinedText24]
						,Dest.[IssueUserDefinedText25] = Src.[IssueUserDefinedText25]
						,Dest.[IssueUserDefinedText26] = Src.[IssueUserDefinedText26]
						,Dest.[IssueUserDefinedText27] = Src.[IssueUserDefinedText27]
						,Dest.[IssueUserDefinedText28] = Src.[IssueUserDefinedText28]
						,Dest.[IssueUserDefinedText29] = Src.[IssueUserDefinedText29]
						,Dest.[IssueUserDefinedText30] = Src.[IssueUserDefinedText30]
						,Dest.[IssueForTransportDetails] = Src.[IssueForTransportDetails]
						,Dest.[IssueUserDefinedLongText06] = Src.[IssueUserDefinedLongText06]
						,Dest.[IssueUserDefinedLongText07] = Src.[IssueUserDefinedLongText07]
						,Dest.[IssueUserDefinedLongText08] = Src.[IssueUserDefinedLongText08]
						,Dest.[IssueUserDefinedLongText09] = Src.[IssueUserDefinedLongText09]
						,Dest.[IssueUserDefinedLongText10] = Src.[IssueUserDefinedLongText10]
						,Dest.[IssueImportBatch] = Src.[IssueImportBatch]
						,Dest.[IssueNewEDIPending] = Src.[IssueNewEDIPending]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDIssue]
						,[IssueAddDateTime]
						,[IssueEditDateTime]
						,[IssueAddUserCode]
						,[IssueEditUserCode]
						,[DataEntryDefinitionID]
						,[StatusID]
						,[StatusIDPrevious]
						,[IssueUserDefinedText01]
						,[IssueUserDefinedText02]
						,[IssueUserDefinedText03]
						,[IssueUserDefinedText04]
						,[IssueUserDefinedText05]
						,[IssueUserDefinedText06]
						,[IssueUserDefinedText07]
						,[IssueUserDefinedText08]
						,[IssueUserDefinedText09]
						,[IssueUserDefinedText10]
						,[IssueUserDefinedText11]
						,[IssueUserDefinedText12]
						,[IssueUserDefinedText13]
						,[IssueUserDefinedText14]
						,[IssueUserDefinedText15]
						,[IssueUserDefinedText16]
						,[IssueUserDefinedText17]
						,[IssueUserDefinedText18]
						,[IssueUserDefinedText19]
						,[IssueUserDefinedText20]
						,[IssueUserDefinedLongText01]
						,[IssueUserDefinedLongText02]
						,[IssueUserDefinedLongText03]
						,[IssueUserDefinedLongText04]
						,[IssueUserDefinedLongText05]
						,[IssueUserDefinedDateTime01]
						,[IssueUserDefinedDateTime02]
						,[IssueUserDefinedDateTime03]
						,[IssueUserDefinedDateTime04]
						,[IssueUserDefinedDateTime05]
						,[IssueUserDefinedDateTime06]
						,[IssueUserDefinedDateTime07]
						,[IssueUserDefinedDateTime08]
						,[IssueUserDefinedDateTime09]
						,[IssueUserDefinedDateTime10]
						,[IssueUserDefinedNumber01]
						,[IssueUserDefinedNumber02]
						,[IssueUserDefinedNumber03]
						,[IssueUserDefinedNumber04]
						,[IssueUserDefinedNumber05]
						,[IssueUserDefinedNumber06]
						,[IssueUserDefinedNumber07]
						,[IssueUserDefinedNumber08]
						,[IssueUserDefinedNumber09]
						,[IssueUserDefinedNumber10]
						,[IssueUserDefinedYesNo01]
						,[IssueUserDefinedYesNo02]
						,[IssueUserDefinedYesNo03]
						,[IssueUserDefinedYesNo04]
						,[IssueUserDefinedYesNo05]
						,[IssueUserDefinedYesNo06]
						,[IssueUserDefinedYesNo07]
						,[IssueUserDefinedYesNo08]
						,[IssueUserDefinedYesNo09]
						,[IssueUserDefinedYesNo10]
						,[IssueStatusChangeDateTime]
						,[IssueOwnerLogin]
						,[IssueChangesAcceptedDateTime]
						,[IssueChangedDataStorageString]
						,[IssueRuleType]
						,[IssueCreationDataSource]
						,[IssueNumber]
						,[IssueUserDefinedText21]
						,[IssueUserDefinedText22]
						,[IssueUserDefinedText23]
						,[IssueUserDefinedText24]
						,[IssueUserDefinedText25]
						,[IssueUserDefinedText26]
						,[IssueUserDefinedText27]
						,[IssueUserDefinedText28]
						,[IssueUserDefinedText29]
						,[IssueUserDefinedText30]
						,[IssueForTransportDetails]
						,[IssueUserDefinedLongText06]
						,[IssueUserDefinedLongText07]
						,[IssueUserDefinedLongText08]
						,[IssueUserDefinedLongText09]
						,[IssueUserDefinedLongText10]
						,[IssueImportBatch]
						,[IssueNewEDIPending]
						)
					VALUES (
						Src.[IDIssue]
						,Src.[IssueAddDateTime]
						,Src.[IssueEditDateTime]
						,Src.[IssueAddUserCode]
						,Src.[IssueEditUserCode]
						,Src.[DataEntryDefinitionID]
						,Src.[StatusID]
						,Src.[StatusIDPrevious]
						,Src.[IssueUserDefinedText01]
						,Src.[IssueUserDefinedText02]
						,Src.[IssueUserDefinedText03]
						,Src.[IssueUserDefinedText04]
						,Src.[IssueUserDefinedText05]
						,Src.[IssueUserDefinedText06]
						,Src.[IssueUserDefinedText07]
						,Src.[IssueUserDefinedText08]
						,Src.[IssueUserDefinedText09]
						,Src.[IssueUserDefinedText10]
						,Src.[IssueUserDefinedText11]
						,Src.[IssueUserDefinedText12]
						,Src.[IssueUserDefinedText13]
						,Src.[IssueUserDefinedText14]
						,Src.[IssueUserDefinedText15]
						,Src.[IssueUserDefinedText16]
						,Src.[IssueUserDefinedText17]
						,Src.[IssueUserDefinedText18]
						,Src.[IssueUserDefinedText19]
						,Src.[IssueUserDefinedText20]
						,Src.[IssueUserDefinedLongText01]
						,Src.[IssueUserDefinedLongText02]
						,Src.[IssueUserDefinedLongText03]
						,Src.[IssueUserDefinedLongText04]
						,Src.[IssueUserDefinedLongText05]
						,Src.[IssueUserDefinedDateTime01]
						,Src.[IssueUserDefinedDateTime02]
						,Src.[IssueUserDefinedDateTime03]
						,Src.[IssueUserDefinedDateTime04]
						,Src.[IssueUserDefinedDateTime05]
						,Src.[IssueUserDefinedDateTime06]
						,Src.[IssueUserDefinedDateTime07]
						,Src.[IssueUserDefinedDateTime08]
						,Src.[IssueUserDefinedDateTime09]
						,Src.[IssueUserDefinedDateTime10]
						,Src.[IssueUserDefinedNumber01]
						,Src.[IssueUserDefinedNumber02]
						,Src.[IssueUserDefinedNumber03]
						,Src.[IssueUserDefinedNumber04]
						,Src.[IssueUserDefinedNumber05]
						,Src.[IssueUserDefinedNumber06]
						,Src.[IssueUserDefinedNumber07]
						,Src.[IssueUserDefinedNumber08]
						,Src.[IssueUserDefinedNumber09]
						,Src.[IssueUserDefinedNumber10]
						,Src.[IssueUserDefinedYesNo01]
						,Src.[IssueUserDefinedYesNo02]
						,Src.[IssueUserDefinedYesNo03]
						,Src.[IssueUserDefinedYesNo04]
						,Src.[IssueUserDefinedYesNo05]
						,Src.[IssueUserDefinedYesNo06]
						,Src.[IssueUserDefinedYesNo07]
						,Src.[IssueUserDefinedYesNo08]
						,Src.[IssueUserDefinedYesNo09]
						,Src.[IssueUserDefinedYesNo10]
						,Src.[IssueStatusChangeDateTime]
						,Src.[IssueOwnerLogin]
						,Src.[IssueChangesAcceptedDateTime]
						,Src.[IssueChangedDataStorageString]
						,Src.[IssueRuleType]
						,Src.[IssueCreationDataSource]
						,Src.[IssueNumber]
						,Src.[IssueUserDefinedText21]
						,Src.[IssueUserDefinedText22]
						,Src.[IssueUserDefinedText23]
						,Src.[IssueUserDefinedText24]
						,Src.[IssueUserDefinedText25]
						,Src.[IssueUserDefinedText26]
						,Src.[IssueUserDefinedText27]
						,Src.[IssueUserDefinedText28]
						,Src.[IssueUserDefinedText29]
						,Src.[IssueUserDefinedText30]
						,Src.[IssueForTransportDetails]
						,Src.[IssueUserDefinedLongText06]
						,Src.[IssueUserDefinedLongText07]
						,Src.[IssueUserDefinedLongText08]
						,Src.[IssueUserDefinedLongText09]
						,Src.[IssueUserDefinedLongText10]
						,Src.[IssueImportBatch]
						,Src.[IssueNewEDIPending]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDIssue] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDIssue] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Issues Src WITH (NOLOCK)
					INNER JOIN TransportStatuses TS WITH (NOLOCK) ON Src.StatusID = TS.IDTransportStatus
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Issues Dest WITH (NOLOCK) ON Src.IDIssue = Dest.IDIssue
					WHERE TS.TransportStatusDisplayName IN (
							'Delivered'
							,'Finished'
							)
						AND Src.IssueEditDateTime <= @IssueArchiveAfterDays
						AND Dest.[IssueEditDateTime] < Src.[IssueEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[IssueAddDateTime] = Src.[IssueAddDateTime]
					,Dest.[IssueEditDateTime] = Src.[IssueEditDateTime]
					,Dest.[IssueAddUserCode] = Src.[IssueAddUserCode]
					,Dest.[IssueEditUserCode] = Src.[IssueEditUserCode]
					,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
					,Dest.[StatusID] = Src.[StatusID]
					,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
					,Dest.[IssueUserDefinedText01] = Src.[IssueUserDefinedText01]
					,Dest.[IssueUserDefinedText02] = Src.[IssueUserDefinedText02]
					,Dest.[IssueUserDefinedText03] = Src.[IssueUserDefinedText03]
					,Dest.[IssueUserDefinedText04] = Src.[IssueUserDefinedText04]
					,Dest.[IssueUserDefinedText05] = Src.[IssueUserDefinedText05]
					,Dest.[IssueUserDefinedText06] = Src.[IssueUserDefinedText06]
					,Dest.[IssueUserDefinedText07] = Src.[IssueUserDefinedText07]
					,Dest.[IssueUserDefinedText08] = Src.[IssueUserDefinedText08]
					,Dest.[IssueUserDefinedText09] = Src.[IssueUserDefinedText09]
					,Dest.[IssueUserDefinedText10] = Src.[IssueUserDefinedText10]
					,Dest.[IssueUserDefinedText11] = Src.[IssueUserDefinedText11]
					,Dest.[IssueUserDefinedText12] = Src.[IssueUserDefinedText12]
					,Dest.[IssueUserDefinedText13] = Src.[IssueUserDefinedText13]
					,Dest.[IssueUserDefinedText14] = Src.[IssueUserDefinedText14]
					,Dest.[IssueUserDefinedText15] = Src.[IssueUserDefinedText15]
					,Dest.[IssueUserDefinedText16] = Src.[IssueUserDefinedText16]
					,Dest.[IssueUserDefinedText17] = Src.[IssueUserDefinedText17]
					,Dest.[IssueUserDefinedText18] = Src.[IssueUserDefinedText18]
					,Dest.[IssueUserDefinedText19] = Src.[IssueUserDefinedText19]
					,Dest.[IssueUserDefinedText20] = Src.[IssueUserDefinedText20]
					,Dest.[IssueUserDefinedLongText01] = Src.[IssueUserDefinedLongText01]
					,Dest.[IssueUserDefinedLongText02] = Src.[IssueUserDefinedLongText02]
					,Dest.[IssueUserDefinedLongText03] = Src.[IssueUserDefinedLongText03]
					,Dest.[IssueUserDefinedLongText04] = Src.[IssueUserDefinedLongText04]
					,Dest.[IssueUserDefinedLongText05] = Src.[IssueUserDefinedLongText05]
					,Dest.[IssueUserDefinedDateTime01] = Src.[IssueUserDefinedDateTime01]
					,Dest.[IssueUserDefinedDateTime02] = Src.[IssueUserDefinedDateTime02]
					,Dest.[IssueUserDefinedDateTime03] = Src.[IssueUserDefinedDateTime03]
					,Dest.[IssueUserDefinedDateTime04] = Src.[IssueUserDefinedDateTime04]
					,Dest.[IssueUserDefinedDateTime05] = Src.[IssueUserDefinedDateTime05]
					,Dest.[IssueUserDefinedDateTime06] = Src.[IssueUserDefinedDateTime06]
					,Dest.[IssueUserDefinedDateTime07] = Src.[IssueUserDefinedDateTime07]
					,Dest.[IssueUserDefinedDateTime08] = Src.[IssueUserDefinedDateTime08]
					,Dest.[IssueUserDefinedDateTime09] = Src.[IssueUserDefinedDateTime09]
					,Dest.[IssueUserDefinedDateTime10] = Src.[IssueUserDefinedDateTime10]
					,Dest.[IssueUserDefinedNumber01] = Src.[IssueUserDefinedNumber01]
					,Dest.[IssueUserDefinedNumber02] = Src.[IssueUserDefinedNumber02]
					,Dest.[IssueUserDefinedNumber03] = Src.[IssueUserDefinedNumber03]
					,Dest.[IssueUserDefinedNumber04] = Src.[IssueUserDefinedNumber04]
					,Dest.[IssueUserDefinedNumber05] = Src.[IssueUserDefinedNumber05]
					,Dest.[IssueUserDefinedNumber06] = Src.[IssueUserDefinedNumber06]
					,Dest.[IssueUserDefinedNumber07] = Src.[IssueUserDefinedNumber07]
					,Dest.[IssueUserDefinedNumber08] = Src.[IssueUserDefinedNumber08]
					,Dest.[IssueUserDefinedNumber09] = Src.[IssueUserDefinedNumber09]
					,Dest.[IssueUserDefinedNumber10] = Src.[IssueUserDefinedNumber10]
					,Dest.[IssueUserDefinedYesNo01] = Src.[IssueUserDefinedYesNo01]
					,Dest.[IssueUserDefinedYesNo02] = Src.[IssueUserDefinedYesNo02]
					,Dest.[IssueUserDefinedYesNo03] = Src.[IssueUserDefinedYesNo03]
					,Dest.[IssueUserDefinedYesNo04] = Src.[IssueUserDefinedYesNo04]
					,Dest.[IssueUserDefinedYesNo05] = Src.[IssueUserDefinedYesNo05]
					,Dest.[IssueUserDefinedYesNo06] = Src.[IssueUserDefinedYesNo06]
					,Dest.[IssueUserDefinedYesNo07] = Src.[IssueUserDefinedYesNo07]
					,Dest.[IssueUserDefinedYesNo08] = Src.[IssueUserDefinedYesNo08]
					,Dest.[IssueUserDefinedYesNo09] = Src.[IssueUserDefinedYesNo09]
					,Dest.[IssueUserDefinedYesNo10] = Src.[IssueUserDefinedYesNo10]
					,Dest.[IssueStatusChangeDateTime] = Src.[IssueStatusChangeDateTime]
					,Dest.[IssueOwnerLogin] = Src.[IssueOwnerLogin]
					,Dest.[IssueChangesAcceptedDateTime] = Src.[IssueChangesAcceptedDateTime]
					,Dest.[IssueChangedDataStorageString] = Src.[IssueChangedDataStorageString]
					,Dest.[IssueRuleType] = Src.[IssueRuleType]
					,Dest.[IssueCreationDataSource] = Src.[IssueCreationDataSource]
					,Dest.[IssueNumber] = Src.[IssueNumber]
					,Dest.[IssueUserDefinedText21] = Src.[IssueUserDefinedText21]
					,Dest.[IssueUserDefinedText22] = Src.[IssueUserDefinedText22]
					,Dest.[IssueUserDefinedText23] = Src.[IssueUserDefinedText23]
					,Dest.[IssueUserDefinedText24] = Src.[IssueUserDefinedText24]
					,Dest.[IssueUserDefinedText25] = Src.[IssueUserDefinedText25]
					,Dest.[IssueUserDefinedText26] = Src.[IssueUserDefinedText26]
					,Dest.[IssueUserDefinedText27] = Src.[IssueUserDefinedText27]
					,Dest.[IssueUserDefinedText28] = Src.[IssueUserDefinedText28]
					,Dest.[IssueUserDefinedText29] = Src.[IssueUserDefinedText29]
					,Dest.[IssueUserDefinedText30] = Src.[IssueUserDefinedText30]
					,Dest.[IssueForTransportDetails] = Src.[IssueForTransportDetails]
					,Dest.[IssueUserDefinedLongText06] = Src.[IssueUserDefinedLongText06]
					,Dest.[IssueUserDefinedLongText07] = Src.[IssueUserDefinedLongText07]
					,Dest.[IssueUserDefinedLongText08] = Src.[IssueUserDefinedLongText08]
					,Dest.[IssueUserDefinedLongText09] = Src.[IssueUserDefinedLongText09]
					,Dest.[IssueUserDefinedLongText10] = Src.[IssueUserDefinedLongText10]
					,Dest.[IssueImportBatch] = Src.[IssueImportBatch]
					,Dest.[IssueNewEDIPending] = Src.[IssueNewEDIPending]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDIssue AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDIssue AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Issues Src WITH (NOLOCK)
				INNER JOIN TransportStatuses TS WITH (NOLOCK) ON Src.StatusID = TS.IDTransportStatus
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Issues Dest WITH (NOLOCK) ON Src.IDIssue = Dest.IDIssue
				WHERE TS.TransportStatusDisplayName IN (
						'Delivered'
						,'Finished'
						)
					AND Src.IssueEditDateTime <= @IssueArchiveAfterDays
					AND Dest.[IssueEditDateTime] < Src.[IssueEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Issues Src WITH (NOLOCK)
					INNER JOIN TransportStatuses TS WITH (NOLOCK) ON Src.StatusID = TS.IDTransportStatus
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Issues Dest WITH (NOLOCK) ON Src.IDIssue = Dest.IDIssue
					WHERE TS.TransportStatusDisplayName IN (
							'Delivered'
							,'Finished'
							)
						AND Src.IssueEditDateTime <= @IssueArchiveAfterDays
						AND Dest.IDIssue IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Issues (
					[IDIssue]
					,[IssueAddDateTime]
					,[IssueEditDateTime]
					,[IssueAddUserCode]
					,[IssueEditUserCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[IssueUserDefinedText01]
					,[IssueUserDefinedText02]
					,[IssueUserDefinedText03]
					,[IssueUserDefinedText04]
					,[IssueUserDefinedText05]
					,[IssueUserDefinedText06]
					,[IssueUserDefinedText07]
					,[IssueUserDefinedText08]
					,[IssueUserDefinedText09]
					,[IssueUserDefinedText10]
					,[IssueUserDefinedText11]
					,[IssueUserDefinedText12]
					,[IssueUserDefinedText13]
					,[IssueUserDefinedText14]
					,[IssueUserDefinedText15]
					,[IssueUserDefinedText16]
					,[IssueUserDefinedText17]
					,[IssueUserDefinedText18]
					,[IssueUserDefinedText19]
					,[IssueUserDefinedText20]
					,[IssueUserDefinedLongText01]
					,[IssueUserDefinedLongText02]
					,[IssueUserDefinedLongText03]
					,[IssueUserDefinedLongText04]
					,[IssueUserDefinedLongText05]
					,[IssueUserDefinedDateTime01]
					,[IssueUserDefinedDateTime02]
					,[IssueUserDefinedDateTime03]
					,[IssueUserDefinedDateTime04]
					,[IssueUserDefinedDateTime05]
					,[IssueUserDefinedDateTime06]
					,[IssueUserDefinedDateTime07]
					,[IssueUserDefinedDateTime08]
					,[IssueUserDefinedDateTime09]
					,[IssueUserDefinedDateTime10]
					,[IssueUserDefinedNumber01]
					,[IssueUserDefinedNumber02]
					,[IssueUserDefinedNumber03]
					,[IssueUserDefinedNumber04]
					,[IssueUserDefinedNumber05]
					,[IssueUserDefinedNumber06]
					,[IssueUserDefinedNumber07]
					,[IssueUserDefinedNumber08]
					,[IssueUserDefinedNumber09]
					,[IssueUserDefinedNumber10]
					,[IssueUserDefinedYesNo01]
					,[IssueUserDefinedYesNo02]
					,[IssueUserDefinedYesNo03]
					,[IssueUserDefinedYesNo04]
					,[IssueUserDefinedYesNo05]
					,[IssueUserDefinedYesNo06]
					,[IssueUserDefinedYesNo07]
					,[IssueUserDefinedYesNo08]
					,[IssueUserDefinedYesNo09]
					,[IssueUserDefinedYesNo10]
					,[IssueStatusChangeDateTime]
					,[IssueOwnerLogin]
					,[IssueChangesAcceptedDateTime]
					,[IssueChangedDataStorageString]
					,[IssueRuleType]
					,[IssueCreationDataSource]
					,[IssueNumber]
					,[IssueUserDefinedText21]
					,[IssueUserDefinedText22]
					,[IssueUserDefinedText23]
					,[IssueUserDefinedText24]
					,[IssueUserDefinedText25]
					,[IssueUserDefinedText26]
					,[IssueUserDefinedText27]
					,[IssueUserDefinedText28]
					,[IssueUserDefinedText29]
					,[IssueUserDefinedText30]
					,[IssueForTransportDetails]
					,[IssueUserDefinedLongText06]
					,[IssueUserDefinedLongText07]
					,[IssueUserDefinedLongText08]
					,[IssueUserDefinedLongText09]
					,[IssueUserDefinedLongText10]
					,[IssueImportBatch]
					,[IssueNewEDIPending]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDIssue AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDIssue]
					,Src.[IssueAddDateTime]
					,Src.[IssueEditDateTime]
					,Src.[IssueAddUserCode]
					,Src.[IssueEditUserCode]
					,Src.[DataEntryDefinitionID]
					,Src.[StatusID]
					,Src.[StatusIDPrevious]
					,Src.[IssueUserDefinedText01]
					,Src.[IssueUserDefinedText02]
					,Src.[IssueUserDefinedText03]
					,Src.[IssueUserDefinedText04]
					,Src.[IssueUserDefinedText05]
					,Src.[IssueUserDefinedText06]
					,Src.[IssueUserDefinedText07]
					,Src.[IssueUserDefinedText08]
					,Src.[IssueUserDefinedText09]
					,Src.[IssueUserDefinedText10]
					,Src.[IssueUserDefinedText11]
					,Src.[IssueUserDefinedText12]
					,Src.[IssueUserDefinedText13]
					,Src.[IssueUserDefinedText14]
					,Src.[IssueUserDefinedText15]
					,Src.[IssueUserDefinedText16]
					,Src.[IssueUserDefinedText17]
					,Src.[IssueUserDefinedText18]
					,Src.[IssueUserDefinedText19]
					,Src.[IssueUserDefinedText20]
					,Src.[IssueUserDefinedLongText01]
					,Src.[IssueUserDefinedLongText02]
					,Src.[IssueUserDefinedLongText03]
					,Src.[IssueUserDefinedLongText04]
					,Src.[IssueUserDefinedLongText05]
					,Src.[IssueUserDefinedDateTime01]
					,Src.[IssueUserDefinedDateTime02]
					,Src.[IssueUserDefinedDateTime03]
					,Src.[IssueUserDefinedDateTime04]
					,Src.[IssueUserDefinedDateTime05]
					,Src.[IssueUserDefinedDateTime06]
					,Src.[IssueUserDefinedDateTime07]
					,Src.[IssueUserDefinedDateTime08]
					,Src.[IssueUserDefinedDateTime09]
					,Src.[IssueUserDefinedDateTime10]
					,Src.[IssueUserDefinedNumber01]
					,Src.[IssueUserDefinedNumber02]
					,Src.[IssueUserDefinedNumber03]
					,Src.[IssueUserDefinedNumber04]
					,Src.[IssueUserDefinedNumber05]
					,Src.[IssueUserDefinedNumber06]
					,Src.[IssueUserDefinedNumber07]
					,Src.[IssueUserDefinedNumber08]
					,Src.[IssueUserDefinedNumber09]
					,Src.[IssueUserDefinedNumber10]
					,Src.[IssueUserDefinedYesNo01]
					,Src.[IssueUserDefinedYesNo02]
					,Src.[IssueUserDefinedYesNo03]
					,Src.[IssueUserDefinedYesNo04]
					,Src.[IssueUserDefinedYesNo05]
					,Src.[IssueUserDefinedYesNo06]
					,Src.[IssueUserDefinedYesNo07]
					,Src.[IssueUserDefinedYesNo08]
					,Src.[IssueUserDefinedYesNo09]
					,Src.[IssueUserDefinedYesNo10]
					,Src.[IssueStatusChangeDateTime]
					,Src.[IssueOwnerLogin]
					,Src.[IssueChangesAcceptedDateTime]
					,Src.[IssueChangedDataStorageString]
					,Src.[IssueRuleType]
					,Src.[IssueCreationDataSource]
					,Src.[IssueNumber]
					,Src.[IssueUserDefinedText21]
					,Src.[IssueUserDefinedText22]
					,Src.[IssueUserDefinedText23]
					,Src.[IssueUserDefinedText24]
					,Src.[IssueUserDefinedText25]
					,Src.[IssueUserDefinedText26]
					,Src.[IssueUserDefinedText27]
					,Src.[IssueUserDefinedText28]
					,Src.[IssueUserDefinedText29]
					,Src.[IssueUserDefinedText30]
					,Src.[IssueForTransportDetails]
					,Src.[IssueUserDefinedLongText06]
					,Src.[IssueUserDefinedLongText07]
					,Src.[IssueUserDefinedLongText08]
					,Src.[IssueUserDefinedLongText09]
					,Src.[IssueUserDefinedLongText10]
					,Src.[IssueImportBatch]
					,Src.[IssueNewEDIPending]
				FROM [dbo].Issues Src WITH (NOLOCK)
				INNER JOIN TransportStatuses TS WITH (NOLOCK) ON Src.StatusID = TS.IDTransportStatus
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Issues Dest WITH (NOLOCK) ON Src.IDIssue = Dest.IDIssue
				WHERE TS.TransportStatusDisplayName IN (
						'Delivered'
						,'Finished'
						)
					AND Src.IssueEditDateTime <= @IssueArchiveAfterDays
					AND Dest.IDIssue IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Issues: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Issues` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------IssueLogs
	SET @CurrentTableName = 'IssueLogs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueLogs AS Dest
			USING (
				SELECT [IDIssueLog]
					,[IssueID]
					,[IssueLogDateTime]
					,[IssueLogUserLogin]
					,[StatusID]
					,[IssueLogEvent]
					,[IssueLogInfo]
					,[EmailDefinitionID]
					,[IssueLogEmailID]
					,[IssueFileID]
					,[IssueLogTechnicalInfo]
				FROM dbo.IssueLogs T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDIssueLog] = Src.[IDIssueLog])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[IssueID] = Src.[IssueID]
						,Dest.[IssueLogDateTime] = Src.[IssueLogDateTime]
						,Dest.[IssueLogUserLogin] = Src.[IssueLogUserLogin]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[IssueLogEvent] = Src.[IssueLogEvent]
						,Dest.[IssueLogInfo] = Src.[IssueLogInfo]
						,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
						,Dest.[IssueLogEmailID] = Src.[IssueLogEmailID]
						,Dest.[IssueFileID] = Src.[IssueFileID]
						,Dest.[IssueLogTechnicalInfo] = Src.[IssueLogTechnicalInfo]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDIssueLog]
						,[IssueID]
						,[IssueLogDateTime]
						,[IssueLogUserLogin]
						,[StatusID]
						,[IssueLogEvent]
						,[IssueLogInfo]
						,[EmailDefinitionID]
						,[IssueLogEmailID]
						,[IssueFileID]
						,[IssueLogTechnicalInfo]
						)
					VALUES (
						Src.[IDIssueLog]
						,Src.[IssueID]
						,Src.[IssueLogDateTime]
						,Src.[IssueLogUserLogin]
						,Src.[StatusID]
						,Src.[IssueLogEvent]
						,Src.[IssueLogInfo]
						,Src.[EmailDefinitionID]
						,Src.[IssueLogEmailID]
						,Src.[IssueFileID]
						,Src.[IssueLogTechnicalInfo]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDIssueLog] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDIssueLog] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			--WHILE EXISTS (
			--		SELECT 1
			--		FROM [dbo].IssueLogs Src WITH (NOLOCK)
			--		INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueLogs Dest WITH (NOLOCK) ON Src.IDIssueLog = Dest.IDIssueLog
			--		)
			--	--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime
			--BEGIN
			--	UPDATE TOP (@BatchSizeForArchival) Dest
			--	SET Dest.[IssueID] = Src.[IssueID]
			--		,Dest.[IssueLogDateTime] = Src.[IssueLogDateTime]
			--		,Dest.[IssueLogUserLogin] = Src.[IssueLogUserLogin]
			--		,Dest.[StatusID] = Src.[StatusID]
			--		,Dest.[IssueLogEvent] = Src.[IssueLogEvent]
			--		,Dest.[IssueLogInfo] = Src.[IssueLogInfo]
			--		,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
			--		,Dest.[IssueLogEmailID] = Src.[IssueLogEmailID]
			--		,Dest.[IssueFileID] = Src.[IssueFileID]
			--		,Dest.[IssueLogTechnicalInfo] = Src.[IssueLogTechnicalInfo]
			--	OUTPUT 'UPDATE'
			--		,CAST(Inserted.IDIssueLog AS VARCHAR(50)) AS 'Inserted'
			--		,CAST(Deleted.IDIssueLog AS VARCHAR(50)) AS 'Deleted'
			--	INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
			--	FROM [dbo].IssueLogs Src WITH (NOLOCK)
			--	INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueLogs Dest ON Src.IDIssueLog = Dest.IDIssueLog
			--		--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime
			--		;
			--END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].IssueLogs Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Issues I WITH (NOLOCK) ON Src.IssueID = I.IDIssue
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueLogs Dest WITH (NOLOCK) ON Src.IDIssueLog = Dest.IDIssueLog
					WHERE Dest.IDIssueLog IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueLogs (
					[IDIssueLog]
					,[IssueID]
					,[IssueLogDateTime]
					,[IssueLogUserLogin]
					,[StatusID]
					,[IssueLogEvent]
					,[IssueLogInfo]
					,[EmailDefinitionID]
					,[IssueLogEmailID]
					,[IssueFileID]
					,[IssueLogTechnicalInfo]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDIssueLog AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDIssueLog]
					,Src.[IssueID]
					,Src.[IssueLogDateTime]
					,Src.[IssueLogUserLogin]
					,Src.[StatusID]
					,Src.[IssueLogEvent]
					,Src.[IssueLogInfo]
					,Src.[EmailDefinitionID]
					,Src.[IssueLogEmailID]
					,Src.[IssueFileID]
					,Src.[IssueLogTechnicalInfo]
				FROM [dbo].IssueLogs Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Issues I WITH (NOLOCK) ON Src.IssueID = I.IDIssue
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.IssueLogs Dest WITH (NOLOCK) ON Src.IDIssueLog = Dest.IDIssueLog
				WHERE Dest.IDIssueLog IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') IssueLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `IssueLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END



	----ValueAddedServices
	SET @CurrentTableName = 'ValueAddedServices';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServices AS Dest
			USING (
				SELECT [IDValueAddedService]
					,[OrderID]
					,[ReceiptID]
					,[ValueAddedServiceType]
					,[ValueAddedServiceContainerCode]
					,[ValueAddedServiceReceiver]
					,[ValueAddedServiceFinalReceiver]
					,[ValueAddedServiceDeliveryNoteNumber]
					,[ValueAddedServiceUserDefinedText01]
					,[ValueAddedServiceUserDefinedText02]
					,[ValueAddedServiceUserDefinedText03]
					,[ValueAddedServiceUserDefinedText04]
					,[ValueAddedServiceUserDefinedText05]
					,[ValueAddedServiceUserDefinedText06]
					,[ValueAddedServiceUserDefinedText07]
					,[ValueAddedServiceUserDefinedText08]
					,[ValueAddedServiceUserDefinedText09]
					,[ValueAddedServiceUserDefinedText10]
					,[ValueAddedServiceUserDefinedDateTime01]
					,[ValueAddedServiceUserDefinedDateTime02]
					,[ValueAddedServiceUserDefinedDateTime03]
					,[ValueAddedServiceUserDefinedDateTime04]
					,[ValueAddedServiceUserDefinedDateTime05]
					,[ValueAddedServiceUserDefinedNumber01]
					,[ValueAddedServiceUserDefinedNumber02]
					,[ValueAddedServiceUserDefinedNumber03]
					,[ValueAddedServiceUserDefinedNumber04]
					,[ValueAddedServiceUserDefinedNumber05]
					,[ValueAddedServiceUserDefinedYesNo01]
					,[ValueAddedServiceUserDefinedYesNo02]
					,[ValueAddedServiceUserDefinedYesNo03]
					,[ValueAddedServiceUserDefinedYesNo04]
					,[ValueAddedServiceUserDefinedYesNo05]
					,[ValueAddedServiceUserDefinedLongText01]
					,[ValueAddedServiceUserDefinedLongText02]
					,[ValueAddedServiceUserDefinedLongText03]
					,[ValueAddedServiceUserDefinedLongText04]
					,[ValueAddedServiceUserDefinedLongText05]
					,[ValueAddedServiceAddDateTime]
					,[ValueAddedServiceEditDateTime]
					,[ValueAddedServiceAddUserCode]
					,[ValueAddedServiceEditUserCode]
					,[DataEntryDefinitionID]
					,[ValueAddedServiceForTransportDetails]
					,[ValueAddedServiceOwnerLogin]
					,[ValueAddedServiceChangesAcceptedDateTime]
					,[ValueAddedServiceChangedDataStorageString]
					,[ValueAddedServiceRuleType]
					,[ValueAddedServiceCreationDataSource]
					,[StatusID]
					,[StatusIDPrevious]
					,[ValueAddedServiceStatusChangeDateTime]
					,[ValueAddedServiceImportBatch]
					,[ValueAddedServiceNewEDIPending]
				FROM dbo.ValueAddedServices T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDValueAddedService] = Src.[IDValueAddedService])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[OrderID] = Src.[OrderID]
						,Dest.[ReceiptID] = Src.[ReceiptID]
						,Dest.[ValueAddedServiceType] = Src.[ValueAddedServiceType]
						,Dest.[ValueAddedServiceContainerCode] = Src.[ValueAddedServiceContainerCode]
						,Dest.[ValueAddedServiceReceiver] = Src.[ValueAddedServiceReceiver]
						,Dest.[ValueAddedServiceFinalReceiver] = Src.[ValueAddedServiceFinalReceiver]
						,Dest.[ValueAddedServiceDeliveryNoteNumber] = Src.[ValueAddedServiceDeliveryNoteNumber]
						,Dest.[ValueAddedServiceUserDefinedText01] = Src.[ValueAddedServiceUserDefinedText01]
						,Dest.[ValueAddedServiceUserDefinedText02] = Src.[ValueAddedServiceUserDefinedText02]
						,Dest.[ValueAddedServiceUserDefinedText03] = Src.[ValueAddedServiceUserDefinedText03]
						,Dest.[ValueAddedServiceUserDefinedText04] = Src.[ValueAddedServiceUserDefinedText04]
						,Dest.[ValueAddedServiceUserDefinedText05] = Src.[ValueAddedServiceUserDefinedText05]
						,Dest.[ValueAddedServiceUserDefinedText06] = Src.[ValueAddedServiceUserDefinedText06]
						,Dest.[ValueAddedServiceUserDefinedText07] = Src.[ValueAddedServiceUserDefinedText07]
						,Dest.[ValueAddedServiceUserDefinedText08] = Src.[ValueAddedServiceUserDefinedText08]
						,Dest.[ValueAddedServiceUserDefinedText09] = Src.[ValueAddedServiceUserDefinedText09]
						,Dest.[ValueAddedServiceUserDefinedText10] = Src.[ValueAddedServiceUserDefinedText10]
						,Dest.[ValueAddedServiceUserDefinedDateTime01] = Src.[ValueAddedServiceUserDefinedDateTime01]
						,Dest.[ValueAddedServiceUserDefinedDateTime02] = Src.[ValueAddedServiceUserDefinedDateTime02]
						,Dest.[ValueAddedServiceUserDefinedDateTime03] = Src.[ValueAddedServiceUserDefinedDateTime03]
						,Dest.[ValueAddedServiceUserDefinedDateTime04] = Src.[ValueAddedServiceUserDefinedDateTime04]
						,Dest.[ValueAddedServiceUserDefinedDateTime05] = Src.[ValueAddedServiceUserDefinedDateTime05]
						,Dest.[ValueAddedServiceUserDefinedNumber01] = Src.[ValueAddedServiceUserDefinedNumber01]
						,Dest.[ValueAddedServiceUserDefinedNumber02] = Src.[ValueAddedServiceUserDefinedNumber02]
						,Dest.[ValueAddedServiceUserDefinedNumber03] = Src.[ValueAddedServiceUserDefinedNumber03]
						,Dest.[ValueAddedServiceUserDefinedNumber04] = Src.[ValueAddedServiceUserDefinedNumber04]
						,Dest.[ValueAddedServiceUserDefinedNumber05] = Src.[ValueAddedServiceUserDefinedNumber05]
						,Dest.[ValueAddedServiceUserDefinedYesNo01] = Src.[ValueAddedServiceUserDefinedYesNo01]
						,Dest.[ValueAddedServiceUserDefinedYesNo02] = Src.[ValueAddedServiceUserDefinedYesNo02]
						,Dest.[ValueAddedServiceUserDefinedYesNo03] = Src.[ValueAddedServiceUserDefinedYesNo03]
						,Dest.[ValueAddedServiceUserDefinedYesNo04] = Src.[ValueAddedServiceUserDefinedYesNo04]
						,Dest.[ValueAddedServiceUserDefinedYesNo05] = Src.[ValueAddedServiceUserDefinedYesNo05]
						,Dest.[ValueAddedServiceUserDefinedLongText01] = Src.[ValueAddedServiceUserDefinedLongText01]
						,Dest.[ValueAddedServiceUserDefinedLongText02] = Src.[ValueAddedServiceUserDefinedLongText02]
						,Dest.[ValueAddedServiceUserDefinedLongText03] = Src.[ValueAddedServiceUserDefinedLongText03]
						,Dest.[ValueAddedServiceUserDefinedLongText04] = Src.[ValueAddedServiceUserDefinedLongText04]
						,Dest.[ValueAddedServiceUserDefinedLongText05] = Src.[ValueAddedServiceUserDefinedLongText05]
						,Dest.[ValueAddedServiceAddDateTime] = Src.[ValueAddedServiceAddDateTime]
						,Dest.[ValueAddedServiceEditDateTime] = Src.[ValueAddedServiceEditDateTime]
						,Dest.[ValueAddedServiceAddUserCode] = Src.[ValueAddedServiceAddUserCode]
						,Dest.[ValueAddedServiceEditUserCode] = Src.[ValueAddedServiceEditUserCode]
						,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
						,Dest.[ValueAddedServiceForTransportDetails] = Src.[ValueAddedServiceForTransportDetails]
						,Dest.[ValueAddedServiceOwnerLogin] = Src.[ValueAddedServiceOwnerLogin]
						,Dest.[ValueAddedServiceChangesAcceptedDateTime] = Src.[ValueAddedServiceChangesAcceptedDateTime]
						,Dest.[ValueAddedServiceChangedDataStorageString] = Src.[ValueAddedServiceChangedDataStorageString]
						,Dest.[ValueAddedServiceRuleType] = Src.[ValueAddedServiceRuleType]
						,Dest.[ValueAddedServiceCreationDataSource] = Src.[ValueAddedServiceCreationDataSource]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
						,Dest.[ValueAddedServiceStatusChangeDateTime] = Src.[ValueAddedServiceStatusChangeDateTime]
						,Dest.[ValueAddedServiceImportBatch] = Src.[ValueAddedServiceImportBatch]
						,Dest.[ValueAddedServiceNewEDIPending] = Src.[ValueAddedServiceNewEDIPending]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDValueAddedService]
						,[OrderID]
						,[ReceiptID]
						,[ValueAddedServiceType]
						,[ValueAddedServiceContainerCode]
						,[ValueAddedServiceReceiver]
						,[ValueAddedServiceFinalReceiver]
						,[ValueAddedServiceDeliveryNoteNumber]
						,[ValueAddedServiceUserDefinedText01]
						,[ValueAddedServiceUserDefinedText02]
						,[ValueAddedServiceUserDefinedText03]
						,[ValueAddedServiceUserDefinedText04]
						,[ValueAddedServiceUserDefinedText05]
						,[ValueAddedServiceUserDefinedText06]
						,[ValueAddedServiceUserDefinedText07]
						,[ValueAddedServiceUserDefinedText08]
						,[ValueAddedServiceUserDefinedText09]
						,[ValueAddedServiceUserDefinedText10]
						,[ValueAddedServiceUserDefinedDateTime01]
						,[ValueAddedServiceUserDefinedDateTime02]
						,[ValueAddedServiceUserDefinedDateTime03]
						,[ValueAddedServiceUserDefinedDateTime04]
						,[ValueAddedServiceUserDefinedDateTime05]
						,[ValueAddedServiceUserDefinedNumber01]
						,[ValueAddedServiceUserDefinedNumber02]
						,[ValueAddedServiceUserDefinedNumber03]
						,[ValueAddedServiceUserDefinedNumber04]
						,[ValueAddedServiceUserDefinedNumber05]
						,[ValueAddedServiceUserDefinedYesNo01]
						,[ValueAddedServiceUserDefinedYesNo02]
						,[ValueAddedServiceUserDefinedYesNo03]
						,[ValueAddedServiceUserDefinedYesNo04]
						,[ValueAddedServiceUserDefinedYesNo05]
						,[ValueAddedServiceUserDefinedLongText01]
						,[ValueAddedServiceUserDefinedLongText02]
						,[ValueAddedServiceUserDefinedLongText03]
						,[ValueAddedServiceUserDefinedLongText04]
						,[ValueAddedServiceUserDefinedLongText05]
						,[ValueAddedServiceAddDateTime]
						,[ValueAddedServiceEditDateTime]
						,[ValueAddedServiceAddUserCode]
						,[ValueAddedServiceEditUserCode]
						,[DataEntryDefinitionID]
						,[ValueAddedServiceForTransportDetails]
						,[ValueAddedServiceOwnerLogin]
						,[ValueAddedServiceChangesAcceptedDateTime]
						,[ValueAddedServiceChangedDataStorageString]
						,[ValueAddedServiceRuleType]
						,[ValueAddedServiceCreationDataSource]
						,[StatusID]
						,[StatusIDPrevious]
						,[ValueAddedServiceStatusChangeDateTime]
						,[ValueAddedServiceImportBatch]
						,[ValueAddedServiceNewEDIPending]
						)
					VALUES (
						Src.[IDValueAddedService]
						,Src.[OrderID]
						,Src.[ReceiptID]
						,Src.[ValueAddedServiceType]
						,Src.[ValueAddedServiceContainerCode]
						,Src.[ValueAddedServiceReceiver]
						,Src.[ValueAddedServiceFinalReceiver]
						,Src.[ValueAddedServiceDeliveryNoteNumber]
						,Src.[ValueAddedServiceUserDefinedText01]
						,Src.[ValueAddedServiceUserDefinedText02]
						,Src.[ValueAddedServiceUserDefinedText03]
						,Src.[ValueAddedServiceUserDefinedText04]
						,Src.[ValueAddedServiceUserDefinedText05]
						,Src.[ValueAddedServiceUserDefinedText06]
						,Src.[ValueAddedServiceUserDefinedText07]
						,Src.[ValueAddedServiceUserDefinedText08]
						,Src.[ValueAddedServiceUserDefinedText09]
						,Src.[ValueAddedServiceUserDefinedText10]
						,Src.[ValueAddedServiceUserDefinedDateTime01]
						,Src.[ValueAddedServiceUserDefinedDateTime02]
						,Src.[ValueAddedServiceUserDefinedDateTime03]
						,Src.[ValueAddedServiceUserDefinedDateTime04]
						,Src.[ValueAddedServiceUserDefinedDateTime05]
						,Src.[ValueAddedServiceUserDefinedNumber01]
						,Src.[ValueAddedServiceUserDefinedNumber02]
						,Src.[ValueAddedServiceUserDefinedNumber03]
						,Src.[ValueAddedServiceUserDefinedNumber04]
						,Src.[ValueAddedServiceUserDefinedNumber05]
						,Src.[ValueAddedServiceUserDefinedYesNo01]
						,Src.[ValueAddedServiceUserDefinedYesNo02]
						,Src.[ValueAddedServiceUserDefinedYesNo03]
						,Src.[ValueAddedServiceUserDefinedYesNo04]
						,Src.[ValueAddedServiceUserDefinedYesNo05]
						,Src.[ValueAddedServiceUserDefinedLongText01]
						,Src.[ValueAddedServiceUserDefinedLongText02]
						,Src.[ValueAddedServiceUserDefinedLongText03]
						,Src.[ValueAddedServiceUserDefinedLongText04]
						,Src.[ValueAddedServiceUserDefinedLongText05]
						,Src.[ValueAddedServiceAddDateTime]
						,Src.[ValueAddedServiceEditDateTime]
						,Src.[ValueAddedServiceAddUserCode]
						,Src.[ValueAddedServiceEditUserCode]
						,Src.[DataEntryDefinitionID]
						,Src.[ValueAddedServiceForTransportDetails]
						,Src.[ValueAddedServiceOwnerLogin]
						,Src.[ValueAddedServiceChangesAcceptedDateTime]
						,Src.[ValueAddedServiceChangedDataStorageString]
						,Src.[ValueAddedServiceRuleType]
						,Src.[ValueAddedServiceCreationDataSource]
						,Src.[StatusID]
						,Src.[StatusIDPrevious]
						,Src.[ValueAddedServiceStatusChangeDateTime]
						,Src.[ValueAddedServiceImportBatch]
						,Src.[ValueAddedServiceNewEDIPending]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDValueAddedService] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDValueAddedService] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ValueAddedServices Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServices Dest WITH (NOLOCK) ON Src.IDValueAddedService = Dest.IDValueAddedService
					WHERE Dest.[ValueAddedServiceEditDateTime] < Src.[ValueAddedServiceEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[OrderID] = Src.[OrderID]
					,Dest.[ReceiptID] = Src.[ReceiptID]
					,Dest.[ValueAddedServiceType] = Src.[ValueAddedServiceType]
					,Dest.[ValueAddedServiceContainerCode] = Src.[ValueAddedServiceContainerCode]
					,Dest.[ValueAddedServiceReceiver] = Src.[ValueAddedServiceReceiver]
					,Dest.[ValueAddedServiceFinalReceiver] = Src.[ValueAddedServiceFinalReceiver]
					,Dest.[ValueAddedServiceDeliveryNoteNumber] = Src.[ValueAddedServiceDeliveryNoteNumber]
					,Dest.[ValueAddedServiceUserDefinedText01] = Src.[ValueAddedServiceUserDefinedText01]
					,Dest.[ValueAddedServiceUserDefinedText02] = Src.[ValueAddedServiceUserDefinedText02]
					,Dest.[ValueAddedServiceUserDefinedText03] = Src.[ValueAddedServiceUserDefinedText03]
					,Dest.[ValueAddedServiceUserDefinedText04] = Src.[ValueAddedServiceUserDefinedText04]
					,Dest.[ValueAddedServiceUserDefinedText05] = Src.[ValueAddedServiceUserDefinedText05]
					,Dest.[ValueAddedServiceUserDefinedText06] = Src.[ValueAddedServiceUserDefinedText06]
					,Dest.[ValueAddedServiceUserDefinedText07] = Src.[ValueAddedServiceUserDefinedText07]
					,Dest.[ValueAddedServiceUserDefinedText08] = Src.[ValueAddedServiceUserDefinedText08]
					,Dest.[ValueAddedServiceUserDefinedText09] = Src.[ValueAddedServiceUserDefinedText09]
					,Dest.[ValueAddedServiceUserDefinedText10] = Src.[ValueAddedServiceUserDefinedText10]
					,Dest.[ValueAddedServiceUserDefinedDateTime01] = Src.[ValueAddedServiceUserDefinedDateTime01]
					,Dest.[ValueAddedServiceUserDefinedDateTime02] = Src.[ValueAddedServiceUserDefinedDateTime02]
					,Dest.[ValueAddedServiceUserDefinedDateTime03] = Src.[ValueAddedServiceUserDefinedDateTime03]
					,Dest.[ValueAddedServiceUserDefinedDateTime04] = Src.[ValueAddedServiceUserDefinedDateTime04]
					,Dest.[ValueAddedServiceUserDefinedDateTime05] = Src.[ValueAddedServiceUserDefinedDateTime05]
					,Dest.[ValueAddedServiceUserDefinedNumber01] = Src.[ValueAddedServiceUserDefinedNumber01]
					,Dest.[ValueAddedServiceUserDefinedNumber02] = Src.[ValueAddedServiceUserDefinedNumber02]
					,Dest.[ValueAddedServiceUserDefinedNumber03] = Src.[ValueAddedServiceUserDefinedNumber03]
					,Dest.[ValueAddedServiceUserDefinedNumber04] = Src.[ValueAddedServiceUserDefinedNumber04]
					,Dest.[ValueAddedServiceUserDefinedNumber05] = Src.[ValueAddedServiceUserDefinedNumber05]
					,Dest.[ValueAddedServiceUserDefinedYesNo01] = Src.[ValueAddedServiceUserDefinedYesNo01]
					,Dest.[ValueAddedServiceUserDefinedYesNo02] = Src.[ValueAddedServiceUserDefinedYesNo02]
					,Dest.[ValueAddedServiceUserDefinedYesNo03] = Src.[ValueAddedServiceUserDefinedYesNo03]
					,Dest.[ValueAddedServiceUserDefinedYesNo04] = Src.[ValueAddedServiceUserDefinedYesNo04]
					,Dest.[ValueAddedServiceUserDefinedYesNo05] = Src.[ValueAddedServiceUserDefinedYesNo05]
					,Dest.[ValueAddedServiceUserDefinedLongText01] = Src.[ValueAddedServiceUserDefinedLongText01]
					,Dest.[ValueAddedServiceUserDefinedLongText02] = Src.[ValueAddedServiceUserDefinedLongText02]
					,Dest.[ValueAddedServiceUserDefinedLongText03] = Src.[ValueAddedServiceUserDefinedLongText03]
					,Dest.[ValueAddedServiceUserDefinedLongText04] = Src.[ValueAddedServiceUserDefinedLongText04]
					,Dest.[ValueAddedServiceUserDefinedLongText05] = Src.[ValueAddedServiceUserDefinedLongText05]
					,Dest.[ValueAddedServiceAddDateTime] = Src.[ValueAddedServiceAddDateTime]
					,Dest.[ValueAddedServiceEditDateTime] = Src.[ValueAddedServiceEditDateTime]
					,Dest.[ValueAddedServiceAddUserCode] = Src.[ValueAddedServiceAddUserCode]
					,Dest.[ValueAddedServiceEditUserCode] = Src.[ValueAddedServiceEditUserCode]
					,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
					,Dest.[ValueAddedServiceForTransportDetails] = Src.[ValueAddedServiceForTransportDetails]
					,Dest.[ValueAddedServiceOwnerLogin] = Src.[ValueAddedServiceOwnerLogin]
					,Dest.[ValueAddedServiceChangesAcceptedDateTime] = Src.[ValueAddedServiceChangesAcceptedDateTime]
					,Dest.[ValueAddedServiceChangedDataStorageString] = Src.[ValueAddedServiceChangedDataStorageString]
					,Dest.[ValueAddedServiceRuleType] = Src.[ValueAddedServiceRuleType]
					,Dest.[ValueAddedServiceCreationDataSource] = Src.[ValueAddedServiceCreationDataSource]
					,Dest.[StatusID] = Src.[StatusID]
					,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
					,Dest.[ValueAddedServiceStatusChangeDateTime] = Src.[ValueAddedServiceStatusChangeDateTime]
					,Dest.[ValueAddedServiceImportBatch] = Src.[ValueAddedServiceImportBatch]
					,Dest.[ValueAddedServiceNewEDIPending] = Src.[ValueAddedServiceNewEDIPending]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDValueAddedService AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDValueAddedService AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ValueAddedServices Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServices Dest ON Src.IDValueAddedService = Dest.IDValueAddedService
				WHERE Dest.[ValueAddedServiceEditDateTime] < Src.[ValueAddedServiceEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ValueAddedServices Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServices Dest WITH (NOLOCK) ON Src.IDValueAddedService = Dest.IDValueAddedService
					WHERE Dest.IDValueAddedService IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServices (
					[IDValueAddedService]
					,[OrderID]
					,[ReceiptID]
					,[ValueAddedServiceType]
					,[ValueAddedServiceContainerCode]
					,[ValueAddedServiceReceiver]
					,[ValueAddedServiceFinalReceiver]
					,[ValueAddedServiceDeliveryNoteNumber]
					,[ValueAddedServiceUserDefinedText01]
					,[ValueAddedServiceUserDefinedText02]
					,[ValueAddedServiceUserDefinedText03]
					,[ValueAddedServiceUserDefinedText04]
					,[ValueAddedServiceUserDefinedText05]
					,[ValueAddedServiceUserDefinedText06]
					,[ValueAddedServiceUserDefinedText07]
					,[ValueAddedServiceUserDefinedText08]
					,[ValueAddedServiceUserDefinedText09]
					,[ValueAddedServiceUserDefinedText10]
					,[ValueAddedServiceUserDefinedDateTime01]
					,[ValueAddedServiceUserDefinedDateTime02]
					,[ValueAddedServiceUserDefinedDateTime03]
					,[ValueAddedServiceUserDefinedDateTime04]
					,[ValueAddedServiceUserDefinedDateTime05]
					,[ValueAddedServiceUserDefinedNumber01]
					,[ValueAddedServiceUserDefinedNumber02]
					,[ValueAddedServiceUserDefinedNumber03]
					,[ValueAddedServiceUserDefinedNumber04]
					,[ValueAddedServiceUserDefinedNumber05]
					,[ValueAddedServiceUserDefinedYesNo01]
					,[ValueAddedServiceUserDefinedYesNo02]
					,[ValueAddedServiceUserDefinedYesNo03]
					,[ValueAddedServiceUserDefinedYesNo04]
					,[ValueAddedServiceUserDefinedYesNo05]
					,[ValueAddedServiceUserDefinedLongText01]
					,[ValueAddedServiceUserDefinedLongText02]
					,[ValueAddedServiceUserDefinedLongText03]
					,[ValueAddedServiceUserDefinedLongText04]
					,[ValueAddedServiceUserDefinedLongText05]
					,[ValueAddedServiceAddDateTime]
					,[ValueAddedServiceEditDateTime]
					,[ValueAddedServiceAddUserCode]
					,[ValueAddedServiceEditUserCode]
					,[DataEntryDefinitionID]
					,[ValueAddedServiceForTransportDetails]
					,[ValueAddedServiceOwnerLogin]
					,[ValueAddedServiceChangesAcceptedDateTime]
					,[ValueAddedServiceChangedDataStorageString]
					,[ValueAddedServiceRuleType]
					,[ValueAddedServiceCreationDataSource]
					,[StatusID]
					,[StatusIDPrevious]
					,[ValueAddedServiceStatusChangeDateTime]
					,[ValueAddedServiceImportBatch]
					,[ValueAddedServiceNewEDIPending]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDValueAddedService AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDValueAddedService]
					,Src.[OrderID]
					,Src.[ReceiptID]
					,Src.[ValueAddedServiceType]
					,Src.[ValueAddedServiceContainerCode]
					,Src.[ValueAddedServiceReceiver]
					,Src.[ValueAddedServiceFinalReceiver]
					,Src.[ValueAddedServiceDeliveryNoteNumber]
					,Src.[ValueAddedServiceUserDefinedText01]
					,Src.[ValueAddedServiceUserDefinedText02]
					,Src.[ValueAddedServiceUserDefinedText03]
					,Src.[ValueAddedServiceUserDefinedText04]
					,Src.[ValueAddedServiceUserDefinedText05]
					,Src.[ValueAddedServiceUserDefinedText06]
					,Src.[ValueAddedServiceUserDefinedText07]
					,Src.[ValueAddedServiceUserDefinedText08]
					,Src.[ValueAddedServiceUserDefinedText09]
					,Src.[ValueAddedServiceUserDefinedText10]
					,Src.[ValueAddedServiceUserDefinedDateTime01]
					,Src.[ValueAddedServiceUserDefinedDateTime02]
					,Src.[ValueAddedServiceUserDefinedDateTime03]
					,Src.[ValueAddedServiceUserDefinedDateTime04]
					,Src.[ValueAddedServiceUserDefinedDateTime05]
					,Src.[ValueAddedServiceUserDefinedNumber01]
					,Src.[ValueAddedServiceUserDefinedNumber02]
					,Src.[ValueAddedServiceUserDefinedNumber03]
					,Src.[ValueAddedServiceUserDefinedNumber04]
					,Src.[ValueAddedServiceUserDefinedNumber05]
					,Src.[ValueAddedServiceUserDefinedYesNo01]
					,Src.[ValueAddedServiceUserDefinedYesNo02]
					,Src.[ValueAddedServiceUserDefinedYesNo03]
					,Src.[ValueAddedServiceUserDefinedYesNo04]
					,Src.[ValueAddedServiceUserDefinedYesNo05]
					,Src.[ValueAddedServiceUserDefinedLongText01]
					,Src.[ValueAddedServiceUserDefinedLongText02]
					,Src.[ValueAddedServiceUserDefinedLongText03]
					,Src.[ValueAddedServiceUserDefinedLongText04]
					,Src.[ValueAddedServiceUserDefinedLongText05]
					,Src.[ValueAddedServiceAddDateTime]
					,Src.[ValueAddedServiceEditDateTime]
					,Src.[ValueAddedServiceAddUserCode]
					,Src.[ValueAddedServiceEditUserCode]
					,Src.[DataEntryDefinitionID]
					,Src.[ValueAddedServiceForTransportDetails]
					,Src.[ValueAddedServiceOwnerLogin]
					,Src.[ValueAddedServiceChangesAcceptedDateTime]
					,Src.[ValueAddedServiceChangedDataStorageString]
					,Src.[ValueAddedServiceRuleType]
					,Src.[ValueAddedServiceCreationDataSource]
					,Src.[StatusID]
					,Src.[StatusIDPrevious]
					,Src.[ValueAddedServiceStatusChangeDateTime]
					,Src.[ValueAddedServiceImportBatch]
					,Src.[ValueAddedServiceNewEDIPending]
				FROM [dbo].ValueAddedServices Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServices Dest WITH (NOLOCK) ON Src.IDValueAddedService = Dest.IDValueAddedService
				WHERE Dest.IDValueAddedService IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ValueAddedServices: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ValueAddedServices` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------ValueAddedServiceDetails
	SET @CurrentTableName = 'ValueAddedServiceDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceDetails AS Dest
			USING (
				SELECT [IDValueAddedServiceDetail]
					,[ValueAddedServiceID]
					,[ValueAddedServiceDetailPONumber]
					,[ValueAddedServiceDetailArticle]
					,[ValueAddedServiceDetailCommodity]
					,[ValueAddedServiceDetailDescription]
					,[ValueAddedServiceDetailQuantityInPieces]
					,[ValueAddedServiceDetailQuantityInPackages]
					,[ValueAddedServiceDetailQuantityInPallets]
					,[ValueAddedServiceDetailVASQuantityInPieces]
					,[ValueAddedServiceDetailVASQuantityInPackages]
					,[ValueAddedServiceDetailVASQuantityInPallets]
					,[ValueAddedServiceDetailNotes]
					,[ValueAddedServiceDetailUserDefinedText01]
					,[ValueAddedServiceDetailUserDefinedText02]
					,[ValueAddedServiceDetailUserDefinedText03]
					,[ValueAddedServiceDetailUserDefinedText04]
					,[ValueAddedServiceDetailUserDefinedText05]
					,[ValueAddedServiceDetailUserDefinedText06]
					,[ValueAddedServiceDetailUserDefinedText07]
					,[ValueAddedServiceDetailUserDefinedText08]
					,[ValueAddedServiceDetailUserDefinedText09]
					,[ValueAddedServiceDetailUserDefinedText10]
					,[ValueAddedServiceDetailUserDefinedDateTime01]
					,[ValueAddedServiceDetailUserDefinedDateTime02]
					,[ValueAddedServiceDetailUserDefinedDateTime03]
					,[ValueAddedServiceDetailUserDefinedDateTime04]
					,[ValueAddedServiceDetailUserDefinedDateTime05]
					,[ValueAddedServiceDetailUserDefinedNumber01]
					,[ValueAddedServiceDetailUserDefinedNumber02]
					,[ValueAddedServiceDetailUserDefinedNumber03]
					,[ValueAddedServiceDetailUserDefinedNumber04]
					,[ValueAddedServiceDetailUserDefinedNumber05]
					,[ValueAddedServiceDetailUserDefinedYesNo01]
					,[ValueAddedServiceDetailUserDefinedYesNo02]
					,[ValueAddedServiceDetailUserDefinedYesNo03]
					,[ValueAddedServiceDetailUserDefinedYesNo04]
					,[ValueAddedServiceDetailUserDefinedYesNo05]
					,[ValueAddedServiceDetailUserDefinedLongText01]
					,[ValueAddedServiceDetailUserDefinedLongText02]
					,[ValueAddedServiceDetailUserDefinedLongText03]
					,[ValueAddedServiceDetailUserDefinedLongText04]
					,[ValueAddedServiceDetailUserDefinedLongText05]
					,[ValueAddedServiceDetailAddDateTime]
					,[ValueAddedServiceDetailEditDateTime]
					,[ValueAddedServiceDetailAddUserCode]
					,[ValueAddedServiceDetailEditUserCode]
					,[ValueAddedServiceDetailSourceID]
				FROM dbo.ValueAddedServiceDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDValueAddedServiceDetail] = Src.[IDValueAddedServiceDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ValueAddedServiceID] = Src.[ValueAddedServiceID]
						,Dest.[ValueAddedServiceDetailPONumber] = Src.[ValueAddedServiceDetailPONumber]
						,Dest.[ValueAddedServiceDetailArticle] = Src.[ValueAddedServiceDetailArticle]
						,Dest.[ValueAddedServiceDetailCommodity] = Src.[ValueAddedServiceDetailCommodity]
						,Dest.[ValueAddedServiceDetailDescription] = Src.[ValueAddedServiceDetailDescription]
						,Dest.[ValueAddedServiceDetailQuantityInPieces] = Src.[ValueAddedServiceDetailQuantityInPieces]
						,Dest.[ValueAddedServiceDetailQuantityInPackages] = Src.[ValueAddedServiceDetailQuantityInPackages]
						,Dest.[ValueAddedServiceDetailQuantityInPallets] = Src.[ValueAddedServiceDetailQuantityInPallets]
						,Dest.[ValueAddedServiceDetailVASQuantityInPieces] = Src.[ValueAddedServiceDetailVASQuantityInPieces]
						,Dest.[ValueAddedServiceDetailVASQuantityInPackages] = Src.[ValueAddedServiceDetailVASQuantityInPackages]
						,Dest.[ValueAddedServiceDetailVASQuantityInPallets] = Src.[ValueAddedServiceDetailVASQuantityInPallets]
						,Dest.[ValueAddedServiceDetailNotes] = Src.[ValueAddedServiceDetailNotes]
						,Dest.[ValueAddedServiceDetailUserDefinedText01] = Src.[ValueAddedServiceDetailUserDefinedText01]
						,Dest.[ValueAddedServiceDetailUserDefinedText02] = Src.[ValueAddedServiceDetailUserDefinedText02]
						,Dest.[ValueAddedServiceDetailUserDefinedText03] = Src.[ValueAddedServiceDetailUserDefinedText03]
						,Dest.[ValueAddedServiceDetailUserDefinedText04] = Src.[ValueAddedServiceDetailUserDefinedText04]
						,Dest.[ValueAddedServiceDetailUserDefinedText05] = Src.[ValueAddedServiceDetailUserDefinedText05]
						,Dest.[ValueAddedServiceDetailUserDefinedText06] = Src.[ValueAddedServiceDetailUserDefinedText06]
						,Dest.[ValueAddedServiceDetailUserDefinedText07] = Src.[ValueAddedServiceDetailUserDefinedText07]
						,Dest.[ValueAddedServiceDetailUserDefinedText08] = Src.[ValueAddedServiceDetailUserDefinedText08]
						,Dest.[ValueAddedServiceDetailUserDefinedText09] = Src.[ValueAddedServiceDetailUserDefinedText09]
						,Dest.[ValueAddedServiceDetailUserDefinedText10] = Src.[ValueAddedServiceDetailUserDefinedText10]
						,Dest.[ValueAddedServiceDetailUserDefinedDateTime01] = Src.[ValueAddedServiceDetailUserDefinedDateTime01]
						,Dest.[ValueAddedServiceDetailUserDefinedDateTime02] = Src.[ValueAddedServiceDetailUserDefinedDateTime02]
						,Dest.[ValueAddedServiceDetailUserDefinedDateTime03] = Src.[ValueAddedServiceDetailUserDefinedDateTime03]
						,Dest.[ValueAddedServiceDetailUserDefinedDateTime04] = Src.[ValueAddedServiceDetailUserDefinedDateTime04]
						,Dest.[ValueAddedServiceDetailUserDefinedDateTime05] = Src.[ValueAddedServiceDetailUserDefinedDateTime05]
						,Dest.[ValueAddedServiceDetailUserDefinedNumber01] = Src.[ValueAddedServiceDetailUserDefinedNumber01]
						,Dest.[ValueAddedServiceDetailUserDefinedNumber02] = Src.[ValueAddedServiceDetailUserDefinedNumber02]
						,Dest.[ValueAddedServiceDetailUserDefinedNumber03] = Src.[ValueAddedServiceDetailUserDefinedNumber03]
						,Dest.[ValueAddedServiceDetailUserDefinedNumber04] = Src.[ValueAddedServiceDetailUserDefinedNumber04]
						,Dest.[ValueAddedServiceDetailUserDefinedNumber05] = Src.[ValueAddedServiceDetailUserDefinedNumber05]
						,Dest.[ValueAddedServiceDetailUserDefinedYesNo01] = Src.[ValueAddedServiceDetailUserDefinedYesNo01]
						,Dest.[ValueAddedServiceDetailUserDefinedYesNo02] = Src.[ValueAddedServiceDetailUserDefinedYesNo02]
						,Dest.[ValueAddedServiceDetailUserDefinedYesNo03] = Src.[ValueAddedServiceDetailUserDefinedYesNo03]
						,Dest.[ValueAddedServiceDetailUserDefinedYesNo04] = Src.[ValueAddedServiceDetailUserDefinedYesNo04]
						,Dest.[ValueAddedServiceDetailUserDefinedYesNo05] = Src.[ValueAddedServiceDetailUserDefinedYesNo05]
						,Dest.[ValueAddedServiceDetailUserDefinedLongText01] = Src.[ValueAddedServiceDetailUserDefinedLongText01]
						,Dest.[ValueAddedServiceDetailUserDefinedLongText02] = Src.[ValueAddedServiceDetailUserDefinedLongText02]
						,Dest.[ValueAddedServiceDetailUserDefinedLongText03] = Src.[ValueAddedServiceDetailUserDefinedLongText03]
						,Dest.[ValueAddedServiceDetailUserDefinedLongText04] = Src.[ValueAddedServiceDetailUserDefinedLongText04]
						,Dest.[ValueAddedServiceDetailUserDefinedLongText05] = Src.[ValueAddedServiceDetailUserDefinedLongText05]
						,Dest.[ValueAddedServiceDetailAddDateTime] = Src.[ValueAddedServiceDetailAddDateTime]
						,Dest.[ValueAddedServiceDetailEditDateTime] = Src.[ValueAddedServiceDetailEditDateTime]
						,Dest.[ValueAddedServiceDetailAddUserCode] = Src.[ValueAddedServiceDetailAddUserCode]
						,Dest.[ValueAddedServiceDetailEditUserCode] = Src.[ValueAddedServiceDetailEditUserCode]
						,Dest.[ValueAddedServiceDetailSourceID] = Src.[ValueAddedServiceDetailSourceID]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDValueAddedServiceDetail]
						,[ValueAddedServiceID]
						,[ValueAddedServiceDetailPONumber]
						,[ValueAddedServiceDetailArticle]
						,[ValueAddedServiceDetailCommodity]
						,[ValueAddedServiceDetailDescription]
						,[ValueAddedServiceDetailQuantityInPieces]
						,[ValueAddedServiceDetailQuantityInPackages]
						,[ValueAddedServiceDetailQuantityInPallets]
						,[ValueAddedServiceDetailVASQuantityInPieces]
						,[ValueAddedServiceDetailVASQuantityInPackages]
						,[ValueAddedServiceDetailVASQuantityInPallets]
						,[ValueAddedServiceDetailNotes]
						,[ValueAddedServiceDetailUserDefinedText01]
						,[ValueAddedServiceDetailUserDefinedText02]
						,[ValueAddedServiceDetailUserDefinedText03]
						,[ValueAddedServiceDetailUserDefinedText04]
						,[ValueAddedServiceDetailUserDefinedText05]
						,[ValueAddedServiceDetailUserDefinedText06]
						,[ValueAddedServiceDetailUserDefinedText07]
						,[ValueAddedServiceDetailUserDefinedText08]
						,[ValueAddedServiceDetailUserDefinedText09]
						,[ValueAddedServiceDetailUserDefinedText10]
						,[ValueAddedServiceDetailUserDefinedDateTime01]
						,[ValueAddedServiceDetailUserDefinedDateTime02]
						,[ValueAddedServiceDetailUserDefinedDateTime03]
						,[ValueAddedServiceDetailUserDefinedDateTime04]
						,[ValueAddedServiceDetailUserDefinedDateTime05]
						,[ValueAddedServiceDetailUserDefinedNumber01]
						,[ValueAddedServiceDetailUserDefinedNumber02]
						,[ValueAddedServiceDetailUserDefinedNumber03]
						,[ValueAddedServiceDetailUserDefinedNumber04]
						,[ValueAddedServiceDetailUserDefinedNumber05]
						,[ValueAddedServiceDetailUserDefinedYesNo01]
						,[ValueAddedServiceDetailUserDefinedYesNo02]
						,[ValueAddedServiceDetailUserDefinedYesNo03]
						,[ValueAddedServiceDetailUserDefinedYesNo04]
						,[ValueAddedServiceDetailUserDefinedYesNo05]
						,[ValueAddedServiceDetailUserDefinedLongText01]
						,[ValueAddedServiceDetailUserDefinedLongText02]
						,[ValueAddedServiceDetailUserDefinedLongText03]
						,[ValueAddedServiceDetailUserDefinedLongText04]
						,[ValueAddedServiceDetailUserDefinedLongText05]
						,[ValueAddedServiceDetailAddDateTime]
						,[ValueAddedServiceDetailEditDateTime]
						,[ValueAddedServiceDetailAddUserCode]
						,[ValueAddedServiceDetailEditUserCode]
						,[ValueAddedServiceDetailSourceID]
						)
					VALUES (
						Src.[IDValueAddedServiceDetail]
						,Src.[ValueAddedServiceID]
						,Src.[ValueAddedServiceDetailPONumber]
						,Src.[ValueAddedServiceDetailArticle]
						,Src.[ValueAddedServiceDetailCommodity]
						,Src.[ValueAddedServiceDetailDescription]
						,Src.[ValueAddedServiceDetailQuantityInPieces]
						,Src.[ValueAddedServiceDetailQuantityInPackages]
						,Src.[ValueAddedServiceDetailQuantityInPallets]
						,Src.[ValueAddedServiceDetailVASQuantityInPieces]
						,Src.[ValueAddedServiceDetailVASQuantityInPackages]
						,Src.[ValueAddedServiceDetailVASQuantityInPallets]
						,Src.[ValueAddedServiceDetailNotes]
						,Src.[ValueAddedServiceDetailUserDefinedText01]
						,Src.[ValueAddedServiceDetailUserDefinedText02]
						,Src.[ValueAddedServiceDetailUserDefinedText03]
						,Src.[ValueAddedServiceDetailUserDefinedText04]
						,Src.[ValueAddedServiceDetailUserDefinedText05]
						,Src.[ValueAddedServiceDetailUserDefinedText06]
						,Src.[ValueAddedServiceDetailUserDefinedText07]
						,Src.[ValueAddedServiceDetailUserDefinedText08]
						,Src.[ValueAddedServiceDetailUserDefinedText09]
						,Src.[ValueAddedServiceDetailUserDefinedText10]
						,Src.[ValueAddedServiceDetailUserDefinedDateTime01]
						,Src.[ValueAddedServiceDetailUserDefinedDateTime02]
						,Src.[ValueAddedServiceDetailUserDefinedDateTime03]
						,Src.[ValueAddedServiceDetailUserDefinedDateTime04]
						,Src.[ValueAddedServiceDetailUserDefinedDateTime05]
						,Src.[ValueAddedServiceDetailUserDefinedNumber01]
						,Src.[ValueAddedServiceDetailUserDefinedNumber02]
						,Src.[ValueAddedServiceDetailUserDefinedNumber03]
						,Src.[ValueAddedServiceDetailUserDefinedNumber04]
						,Src.[ValueAddedServiceDetailUserDefinedNumber05]
						,Src.[ValueAddedServiceDetailUserDefinedYesNo01]
						,Src.[ValueAddedServiceDetailUserDefinedYesNo02]
						,Src.[ValueAddedServiceDetailUserDefinedYesNo03]
						,Src.[ValueAddedServiceDetailUserDefinedYesNo04]
						,Src.[ValueAddedServiceDetailUserDefinedYesNo05]
						,Src.[ValueAddedServiceDetailUserDefinedLongText01]
						,Src.[ValueAddedServiceDetailUserDefinedLongText02]
						,Src.[ValueAddedServiceDetailUserDefinedLongText03]
						,Src.[ValueAddedServiceDetailUserDefinedLongText04]
						,Src.[ValueAddedServiceDetailUserDefinedLongText05]
						,Src.[ValueAddedServiceDetailAddDateTime]
						,Src.[ValueAddedServiceDetailEditDateTime]
						,Src.[ValueAddedServiceDetailAddUserCode]
						,Src.[ValueAddedServiceDetailEditUserCode]
						,Src.[ValueAddedServiceDetailSourceID]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDValueAddedServiceDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDValueAddedServiceDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ValueAddedServiceDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceDetails Dest WITH (NOLOCK) ON Src.IDValueAddedServiceDetail = Dest.IDValueAddedServiceDetail
					WHERE Dest.[ValueAddedServiceDetailEditDateTime] < Src.[ValueAddedServiceDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ValueAddedServiceID] = Src.[ValueAddedServiceID]
					,Dest.[ValueAddedServiceDetailPONumber] = Src.[ValueAddedServiceDetailPONumber]
					,Dest.[ValueAddedServiceDetailArticle] = Src.[ValueAddedServiceDetailArticle]
					,Dest.[ValueAddedServiceDetailCommodity] = Src.[ValueAddedServiceDetailCommodity]
					,Dest.[ValueAddedServiceDetailDescription] = Src.[ValueAddedServiceDetailDescription]
					,Dest.[ValueAddedServiceDetailQuantityInPieces] = Src.[ValueAddedServiceDetailQuantityInPieces]
					,Dest.[ValueAddedServiceDetailQuantityInPackages] = Src.[ValueAddedServiceDetailQuantityInPackages]
					,Dest.[ValueAddedServiceDetailQuantityInPallets] = Src.[ValueAddedServiceDetailQuantityInPallets]
					,Dest.[ValueAddedServiceDetailVASQuantityInPieces] = Src.[ValueAddedServiceDetailVASQuantityInPieces]
					,Dest.[ValueAddedServiceDetailVASQuantityInPackages] = Src.[ValueAddedServiceDetailVASQuantityInPackages]
					,Dest.[ValueAddedServiceDetailVASQuantityInPallets] = Src.[ValueAddedServiceDetailVASQuantityInPallets]
					,Dest.[ValueAddedServiceDetailNotes] = Src.[ValueAddedServiceDetailNotes]
					,Dest.[ValueAddedServiceDetailUserDefinedText01] = Src.[ValueAddedServiceDetailUserDefinedText01]
					,Dest.[ValueAddedServiceDetailUserDefinedText02] = Src.[ValueAddedServiceDetailUserDefinedText02]
					,Dest.[ValueAddedServiceDetailUserDefinedText03] = Src.[ValueAddedServiceDetailUserDefinedText03]
					,Dest.[ValueAddedServiceDetailUserDefinedText04] = Src.[ValueAddedServiceDetailUserDefinedText04]
					,Dest.[ValueAddedServiceDetailUserDefinedText05] = Src.[ValueAddedServiceDetailUserDefinedText05]
					,Dest.[ValueAddedServiceDetailUserDefinedText06] = Src.[ValueAddedServiceDetailUserDefinedText06]
					,Dest.[ValueAddedServiceDetailUserDefinedText07] = Src.[ValueAddedServiceDetailUserDefinedText07]
					,Dest.[ValueAddedServiceDetailUserDefinedText08] = Src.[ValueAddedServiceDetailUserDefinedText08]
					,Dest.[ValueAddedServiceDetailUserDefinedText09] = Src.[ValueAddedServiceDetailUserDefinedText09]
					,Dest.[ValueAddedServiceDetailUserDefinedText10] = Src.[ValueAddedServiceDetailUserDefinedText10]
					,Dest.[ValueAddedServiceDetailUserDefinedDateTime01] = Src.[ValueAddedServiceDetailUserDefinedDateTime01]
					,Dest.[ValueAddedServiceDetailUserDefinedDateTime02] = Src.[ValueAddedServiceDetailUserDefinedDateTime02]
					,Dest.[ValueAddedServiceDetailUserDefinedDateTime03] = Src.[ValueAddedServiceDetailUserDefinedDateTime03]
					,Dest.[ValueAddedServiceDetailUserDefinedDateTime04] = Src.[ValueAddedServiceDetailUserDefinedDateTime04]
					,Dest.[ValueAddedServiceDetailUserDefinedDateTime05] = Src.[ValueAddedServiceDetailUserDefinedDateTime05]
					,Dest.[ValueAddedServiceDetailUserDefinedNumber01] = Src.[ValueAddedServiceDetailUserDefinedNumber01]
					,Dest.[ValueAddedServiceDetailUserDefinedNumber02] = Src.[ValueAddedServiceDetailUserDefinedNumber02]
					,Dest.[ValueAddedServiceDetailUserDefinedNumber03] = Src.[ValueAddedServiceDetailUserDefinedNumber03]
					,Dest.[ValueAddedServiceDetailUserDefinedNumber04] = Src.[ValueAddedServiceDetailUserDefinedNumber04]
					,Dest.[ValueAddedServiceDetailUserDefinedNumber05] = Src.[ValueAddedServiceDetailUserDefinedNumber05]
					,Dest.[ValueAddedServiceDetailUserDefinedYesNo01] = Src.[ValueAddedServiceDetailUserDefinedYesNo01]
					,Dest.[ValueAddedServiceDetailUserDefinedYesNo02] = Src.[ValueAddedServiceDetailUserDefinedYesNo02]
					,Dest.[ValueAddedServiceDetailUserDefinedYesNo03] = Src.[ValueAddedServiceDetailUserDefinedYesNo03]
					,Dest.[ValueAddedServiceDetailUserDefinedYesNo04] = Src.[ValueAddedServiceDetailUserDefinedYesNo04]
					,Dest.[ValueAddedServiceDetailUserDefinedYesNo05] = Src.[ValueAddedServiceDetailUserDefinedYesNo05]
					,Dest.[ValueAddedServiceDetailUserDefinedLongText01] = Src.[ValueAddedServiceDetailUserDefinedLongText01]
					,Dest.[ValueAddedServiceDetailUserDefinedLongText02] = Src.[ValueAddedServiceDetailUserDefinedLongText02]
					,Dest.[ValueAddedServiceDetailUserDefinedLongText03] = Src.[ValueAddedServiceDetailUserDefinedLongText03]
					,Dest.[ValueAddedServiceDetailUserDefinedLongText04] = Src.[ValueAddedServiceDetailUserDefinedLongText04]
					,Dest.[ValueAddedServiceDetailUserDefinedLongText05] = Src.[ValueAddedServiceDetailUserDefinedLongText05]
					,Dest.[ValueAddedServiceDetailAddDateTime] = Src.[ValueAddedServiceDetailAddDateTime]
					,Dest.[ValueAddedServiceDetailEditDateTime] = Src.[ValueAddedServiceDetailEditDateTime]
					,Dest.[ValueAddedServiceDetailAddUserCode] = Src.[ValueAddedServiceDetailAddUserCode]
					,Dest.[ValueAddedServiceDetailEditUserCode] = Src.[ValueAddedServiceDetailEditUserCode]
					,Dest.[ValueAddedServiceDetailSourceID] = Src.[ValueAddedServiceDetailSourceID]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDValueAddedServiceDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDValueAddedServiceDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ValueAddedServiceDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceDetails Dest ON Src.IDValueAddedServiceDetail = Dest.IDValueAddedServiceDetail
				WHERE Dest.[ValueAddedServiceDetailEditDateTime] < Src.[ValueAddedServiceDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ValueAddedServiceDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceDetails Dest WITH (NOLOCK) ON Src.IDValueAddedServiceDetail = Dest.IDValueAddedServiceDetail
					WHERE Dest.IDValueAddedServiceDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceDetails (
					[IDValueAddedServiceDetail]
					,[ValueAddedServiceID]
					,[ValueAddedServiceDetailPONumber]
					,[ValueAddedServiceDetailArticle]
					,[ValueAddedServiceDetailCommodity]
					,[ValueAddedServiceDetailDescription]
					,[ValueAddedServiceDetailQuantityInPieces]
					,[ValueAddedServiceDetailQuantityInPackages]
					,[ValueAddedServiceDetailQuantityInPallets]
					,[ValueAddedServiceDetailVASQuantityInPieces]
					,[ValueAddedServiceDetailVASQuantityInPackages]
					,[ValueAddedServiceDetailVASQuantityInPallets]
					,[ValueAddedServiceDetailNotes]
					,[ValueAddedServiceDetailUserDefinedText01]
					,[ValueAddedServiceDetailUserDefinedText02]
					,[ValueAddedServiceDetailUserDefinedText03]
					,[ValueAddedServiceDetailUserDefinedText04]
					,[ValueAddedServiceDetailUserDefinedText05]
					,[ValueAddedServiceDetailUserDefinedText06]
					,[ValueAddedServiceDetailUserDefinedText07]
					,[ValueAddedServiceDetailUserDefinedText08]
					,[ValueAddedServiceDetailUserDefinedText09]
					,[ValueAddedServiceDetailUserDefinedText10]
					,[ValueAddedServiceDetailUserDefinedDateTime01]
					,[ValueAddedServiceDetailUserDefinedDateTime02]
					,[ValueAddedServiceDetailUserDefinedDateTime03]
					,[ValueAddedServiceDetailUserDefinedDateTime04]
					,[ValueAddedServiceDetailUserDefinedDateTime05]
					,[ValueAddedServiceDetailUserDefinedNumber01]
					,[ValueAddedServiceDetailUserDefinedNumber02]
					,[ValueAddedServiceDetailUserDefinedNumber03]
					,[ValueAddedServiceDetailUserDefinedNumber04]
					,[ValueAddedServiceDetailUserDefinedNumber05]
					,[ValueAddedServiceDetailUserDefinedYesNo01]
					,[ValueAddedServiceDetailUserDefinedYesNo02]
					,[ValueAddedServiceDetailUserDefinedYesNo03]
					,[ValueAddedServiceDetailUserDefinedYesNo04]
					,[ValueAddedServiceDetailUserDefinedYesNo05]
					,[ValueAddedServiceDetailUserDefinedLongText01]
					,[ValueAddedServiceDetailUserDefinedLongText02]
					,[ValueAddedServiceDetailUserDefinedLongText03]
					,[ValueAddedServiceDetailUserDefinedLongText04]
					,[ValueAddedServiceDetailUserDefinedLongText05]
					,[ValueAddedServiceDetailAddDateTime]
					,[ValueAddedServiceDetailEditDateTime]
					,[ValueAddedServiceDetailAddUserCode]
					,[ValueAddedServiceDetailEditUserCode]
					,[ValueAddedServiceDetailSourceID]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDValueAddedServiceDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDValueAddedServiceDetail]
					,Src.[ValueAddedServiceID]
					,Src.[ValueAddedServiceDetailPONumber]
					,Src.[ValueAddedServiceDetailArticle]
					,Src.[ValueAddedServiceDetailCommodity]
					,Src.[ValueAddedServiceDetailDescription]
					,Src.[ValueAddedServiceDetailQuantityInPieces]
					,Src.[ValueAddedServiceDetailQuantityInPackages]
					,Src.[ValueAddedServiceDetailQuantityInPallets]
					,Src.[ValueAddedServiceDetailVASQuantityInPieces]
					,Src.[ValueAddedServiceDetailVASQuantityInPackages]
					,Src.[ValueAddedServiceDetailVASQuantityInPallets]
					,Src.[ValueAddedServiceDetailNotes]
					,Src.[ValueAddedServiceDetailUserDefinedText01]
					,Src.[ValueAddedServiceDetailUserDefinedText02]
					,Src.[ValueAddedServiceDetailUserDefinedText03]
					,Src.[ValueAddedServiceDetailUserDefinedText04]
					,Src.[ValueAddedServiceDetailUserDefinedText05]
					,Src.[ValueAddedServiceDetailUserDefinedText06]
					,Src.[ValueAddedServiceDetailUserDefinedText07]
					,Src.[ValueAddedServiceDetailUserDefinedText08]
					,Src.[ValueAddedServiceDetailUserDefinedText09]
					,Src.[ValueAddedServiceDetailUserDefinedText10]
					,Src.[ValueAddedServiceDetailUserDefinedDateTime01]
					,Src.[ValueAddedServiceDetailUserDefinedDateTime02]
					,Src.[ValueAddedServiceDetailUserDefinedDateTime03]
					,Src.[ValueAddedServiceDetailUserDefinedDateTime04]
					,Src.[ValueAddedServiceDetailUserDefinedDateTime05]
					,Src.[ValueAddedServiceDetailUserDefinedNumber01]
					,Src.[ValueAddedServiceDetailUserDefinedNumber02]
					,Src.[ValueAddedServiceDetailUserDefinedNumber03]
					,Src.[ValueAddedServiceDetailUserDefinedNumber04]
					,Src.[ValueAddedServiceDetailUserDefinedNumber05]
					,Src.[ValueAddedServiceDetailUserDefinedYesNo01]
					,Src.[ValueAddedServiceDetailUserDefinedYesNo02]
					,Src.[ValueAddedServiceDetailUserDefinedYesNo03]
					,Src.[ValueAddedServiceDetailUserDefinedYesNo04]
					,Src.[ValueAddedServiceDetailUserDefinedYesNo05]
					,Src.[ValueAddedServiceDetailUserDefinedLongText01]
					,Src.[ValueAddedServiceDetailUserDefinedLongText02]
					,Src.[ValueAddedServiceDetailUserDefinedLongText03]
					,Src.[ValueAddedServiceDetailUserDefinedLongText04]
					,Src.[ValueAddedServiceDetailUserDefinedLongText05]
					,Src.[ValueAddedServiceDetailAddDateTime]
					,Src.[ValueAddedServiceDetailEditDateTime]
					,Src.[ValueAddedServiceDetailAddUserCode]
					,Src.[ValueAddedServiceDetailEditUserCode]
					,Src.[ValueAddedServiceDetailSourceID]
				FROM [dbo].ValueAddedServiceDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceDetails Dest WITH (NOLOCK) ON Src.IDValueAddedServiceDetail = Dest.IDValueAddedServiceDetail
				WHERE Dest.IDValueAddedServiceDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ValueAddedServiceDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ValueAddedServiceDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------ValueAddedServiceLogs
	SET @CurrentTableName = 'ValueAddedServiceLogs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceLogs AS Dest
			USING (
				SELECT [IDValueAddedServiceLog]
					,[ValueAddedServiceID]
					,[ValueAddedServiceLogDateTime]
					,[ValueAddedServiceLogUserLogin]
					,[StatusID]
					,[ValueAddedServiceLogEvent]
					,[ValueAddedServiceLogInfo]
					,[EmailDefinitionID]
					,[ValueAddedServiceLogEmailID]
					,[ValueAddedServiceLogTechnicalInfo]
				FROM dbo.ValueAddedServiceLogs T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDValueAddedServiceLog] = Src.[IDValueAddedServiceLog])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ValueAddedServiceID] = Src.[ValueAddedServiceID]
						,Dest.[ValueAddedServiceLogDateTime] = Src.[ValueAddedServiceLogDateTime]
						,Dest.[ValueAddedServiceLogUserLogin] = Src.[ValueAddedServiceLogUserLogin]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[ValueAddedServiceLogEvent] = Src.[ValueAddedServiceLogEvent]
						,Dest.[ValueAddedServiceLogInfo] = Src.[ValueAddedServiceLogInfo]
						,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
						,Dest.[ValueAddedServiceLogEmailID] = Src.[ValueAddedServiceLogEmailID]
						,Dest.[ValueAddedServiceLogTechnicalInfo] = Src.[ValueAddedServiceLogTechnicalInfo]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDValueAddedServiceLog]
						,[ValueAddedServiceID]
						,[ValueAddedServiceLogDateTime]
						,[ValueAddedServiceLogUserLogin]
						,[StatusID]
						,[ValueAddedServiceLogEvent]
						,[ValueAddedServiceLogInfo]
						,[EmailDefinitionID]
						,[ValueAddedServiceLogEmailID]
						,[ValueAddedServiceLogTechnicalInfo]
						)
					VALUES (
						Src.[IDValueAddedServiceLog]
						,Src.[ValueAddedServiceID]
						,Src.[ValueAddedServiceLogDateTime]
						,Src.[ValueAddedServiceLogUserLogin]
						,Src.[StatusID]
						,Src.[ValueAddedServiceLogEvent]
						,Src.[ValueAddedServiceLogInfo]
						,Src.[EmailDefinitionID]
						,Src.[ValueAddedServiceLogEmailID]
						,Src.[ValueAddedServiceLogTechnicalInfo]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDValueAddedServiceLog] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDValueAddedServiceLog] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			--WHILE EXISTS (
			--		SELECT 1
			--		FROM [dbo].ValueAddedServiceLogs Src WITH (NOLOCK)
			--		INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceLogs Dest WITH (NOLOCK) ON Src.IDValueAddedServiceLog = Dest.IDValueAddedServiceLog
			--		)
			--	--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime
			--BEGIN
			--	UPDATE TOP (@BatchSizeForArchival) Dest
			--	SET Dest.[ValueAddedServiceID] = Src.[ValueAddedServiceID]
			--		,Dest.[ValueAddedServiceLogDateTime] = Src.[ValueAddedServiceLogDateTime]
			--		,Dest.[ValueAddedServiceLogUserLogin] = Src.[ValueAddedServiceLogUserLogin]
			--		,Dest.[StatusID] = Src.[StatusID]
			--		,Dest.[ValueAddedServiceLogEvent] = Src.[ValueAddedServiceLogEvent]
			--		,Dest.[ValueAddedServiceLogInfo] = Src.[ValueAddedServiceLogInfo]
			--		,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
			--		,Dest.[ValueAddedServiceLogEmailID] = Src.[ValueAddedServiceLogEmailID]
			--		,Dest.[ValueAddedServiceLogTechnicalInfo] = Src.[ValueAddedServiceLogTechnicalInfo]
			--	OUTPUT 'UPDATE'
			--		,CAST(Inserted.IDValueAddedServiceLog AS VARCHAR(50)) AS 'Inserted'
			--		,CAST(Deleted.IDValueAddedServiceLog AS VARCHAR(50)) AS 'Deleted'
			--	INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
			--	FROM [dbo].ValueAddedServiceLogs Src WITH (NOLOCK)
			--	INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceLogs Dest ON Src.IDValueAddedServiceLog = Dest.IDValueAddedServiceLog
			--		--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime;
			--END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ValueAddedServiceLogs Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceLogs Dest WITH (NOLOCK) ON Src.IDValueAddedServiceLog = Dest.IDValueAddedServiceLog
					WHERE Dest.IDValueAddedServiceLog IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceLogs (
					[IDValueAddedServiceLog]
					,[ValueAddedServiceID]
					,[ValueAddedServiceLogDateTime]
					,[ValueAddedServiceLogUserLogin]
					,[StatusID]
					,[ValueAddedServiceLogEvent]
					,[ValueAddedServiceLogInfo]
					,[EmailDefinitionID]
					,[ValueAddedServiceLogEmailID]
					,[ValueAddedServiceLogTechnicalInfo]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDValueAddedServiceLog AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDValueAddedServiceLog]
					,Src.[ValueAddedServiceID]
					,Src.[ValueAddedServiceLogDateTime]
					,Src.[ValueAddedServiceLogUserLogin]
					,Src.[StatusID]
					,Src.[ValueAddedServiceLogEvent]
					,Src.[ValueAddedServiceLogInfo]
					,Src.[EmailDefinitionID]
					,Src.[ValueAddedServiceLogEmailID]
					,Src.[ValueAddedServiceLogTechnicalInfo]
				FROM [dbo].ValueAddedServiceLogs Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ValueAddedServiceLogs Dest WITH (NOLOCK) ON Src.IDValueAddedServiceLog = Dest.IDValueAddedServiceLog
				WHERE Dest.IDValueAddedServiceLog IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ValueAddedServiceLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ValueAddedServiceLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Quotation (No Logic Found for Archival)
	--CustomsClearanceOrder
	------CustomsClearanceOrder
	SET @CurrentTableName = 'CustomsClearanceOrders';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrders AS Dest
			USING (
				SELECT [IDCustomsClearanceOrder]
					,[CustomsClearanceOrderAddDateTime]
					,[CustomsClearanceOrderEditDateTime]
					,[CustomsClearanceOrderAddUserCode]
					,[CustomsClearanceOrderEditUserCode]
					,[SubContextCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[CustomsClearanceOrderStatusChangeDateTime]
					,[CustomsClearanceOrderNumber]
					,[CustomsTypeCode]
					,[CustomsClearanceOrderVesselCode]
					,[CustomsClearanceOrderVoyageCode]
					,[CustomsClearanceOrderVesselName]
					,[CustomsClearanceOrderOriginService]
					,[CustomsClearanceOrderDestinationService]
					,[CompanyIDCarrier]
					,[CompanyIDSupplier]
					,[CustomsClearanceOrderSupplierCompanyName]
					,[CustomsClearanceOrderSupplierStreet]
					,[CustomsClearanceOrderSupplierCity]
					,[CustomsClearanceOrderSupplierZipCode]
					,[CustomsClearanceOrderSupplierCountry]
					,[CustomsClearanceOrderSupplierPhone]
					,[CustomsClearanceOrderSupplierFax]
					,[CustomsClearanceOrderSupplierEmail]
					,[CustomsClearanceOrderSupplierContact]
					,[CustomsClearanceOrderSBBDocumentType]
					,[CustomsClearanceOrderNotes]
					,[CustomsClearanceOrderCustomsReleaseNumber]
					,[CustomsClearanceOrderNCTSCode]
					,[CustomsClearanceOrderIncoTerm]
					,[CustomsClearanceOrderInsurance]
					,[CustomsClearanceOrderOriginInlandHaulageCost]
					,[CustomsClearanceOrderVATNumber]
					,[CustomsClearanceOrderEntrepotType]
					,[CustomsClearanceOrderColliType]
					,[CustomsClearanceOrderFiscalRepresentation]
					,[CustomsClearanceOrderLloydsNumber]
					,[CustomsClearanceOrderPorticalNumber]
					,[CustomsClearanceOrderAgentCode]
					,[CustomsClearanceOrderArticleNumber]
					,[CustomsClearanceOrderItemNumber]
					,[CustomsClearanceOrderCreateListDateTime]
					,[CustomsClearanceOrderCustomDocumentNumber]
					,[CustomsClearanceOrderFinalClearanceDateTime]
					,[CustomsClearanceOrderCustomRequestDateTime]
					,[CustomsClearanceOrderCustomClearedDateTime]
					,[CustomsClearanceOrderUserDefinedText01]
					,[CustomsClearanceOrderUserDefinedText02]
					,[CustomsClearanceOrderUserDefinedText03]
					,[CustomsClearanceOrderUserDefinedText04]
					,[CustomsClearanceOrderUserDefinedText05]
					,[CompanyIDConsignee]
					,[CustomsClearanceOrderPlaceOfLoading]
					,[CustomsClearanceOrderPortOfLoading]
					,[CustomsClearanceOrderPlaceOfDischarge]
					,[CustomsClearanceOrderPortOfDischarge]
					,[CustomsClearanceOrderPlaceOfDelivery]
					,[CustomsClearanceOrderPortOfDelivery]
					,[CustomsClearanceOrderPlaceOfPickUp]
					,[CustomsClearanceOrderPortOfPickUp]
					,[CustomsClearanceOrderContactName]
					,[CustomsClearanceOrderContactPhone]
					,[CustomsClearanceOrderContactEmail]
					,[CustomsClearanceOrderActualDateTimeOfArrival]
					,[CustomsClearanceOrderEstimatedDateTimeOfArrival]
					,[CustomsClearanceOrderActualDateTimeOfDeparture]
					,[CustomsClearanceOrderEstimatedDateTimeOfDeparture]
					,[CompanyIDTerminal]
					,[CompanyIDWarehouse]
					,[CompanyIDFumigationSupplier]
					,[CustomsClearanceOrderFumigationSupplierCompanyName]
					,[CustomsClearanceOrderFumigationSupplierStreet]
					,[CustomsClearanceOrderFumigationSupplierCity]
					,[CustomsClearanceOrderFumigationSupplierZipCode]
					,[CustomsClearanceOrderFumigationSupplierCountry]
					,[CustomsClearanceOrderFumigationSupplierPhone]
					,[CustomsClearanceOrderFumigationSupplierFax]
					,[CustomsClearanceOrderFumigationSupplierEmail]
					,[CustomsClearanceOrderFumigationSupplierContact]
					,[CustomsClearanceOrderConsigneeCity]
					,[CustomsClearanceOrderConsigneeCompanyName]
					,[CustomsClearanceOrderConsigneeContact]
					,[CustomsClearanceOrderConsigneeCountry]
					,[CustomsClearanceOrderConsigneeEmail]
					,[CustomsClearanceOrderConsigneeFax]
					,[CustomsClearanceOrderConsigneePhone]
					,[CustomsClearanceOrderConsigneeStreet]
					,[CustomsClearanceOrderConsigneeZipCode]
					,[CustomsClearanceOrderUserDefinedYesNo01]
					,[CustomsClearanceOrderUserDefinedYesNo02]
					,[CustomsClearanceOrderUserDefinedYesNo03]
					,[CustomsClearanceOrderUserDefinedYesNo04]
					,[CustomsClearanceOrderUserDefinedYesNo05]
					,[CustomsClearanceOrderPortEntryDateTime]
					,[CustomsClearanceOrderUserDefinedDateTime01]
					,[CustomsClearanceOrderUserDefinedDateTime02]
					,[CustomsClearanceOrderUserDefinedDateTime03]
					,[CustomsClearanceOrderUserDefinedDateTime04]
					,[CustomsClearanceOrderUserDefinedDateTime05]
					,[CustomsClearanceOrderUserDefinedDateTime06]
					,[CustomsClearanceOrderUserDefinedDateTime07]
					,[CustomsClearanceOrderUserDefinedDateTime09]
					,[CustomsClearanceOrderUserDefinedDateTime10]
					,[CustomsClearanceOrderUserDefinedNumber01]
					,[CustomsClearanceOrderUserDefinedNumber02]
					,[CustomsClearanceOrderUserDefinedNumber03]
					,[CustomsClearanceOrderUserDefinedNumber04]
					,[CustomsClearanceOrderUserDefinedNumber05]
					,[CustomsClearanceOrderUserDefinedLongText01]
					,[CustomsClearanceOrderUserDefinedLongText02]
					,[CustomsClearanceOrderUserDefinedLongText03]
					,[CustomsClearanceOrderUserDefinedLongText04]
					,[CustomsClearanceOrderUserDefinedLongText05]
					,[CustomsClearanceOrderUserDefinedText06]
					,[CustomsClearanceOrderUserDefinedText07]
					,[CustomsClearanceOrderUserDefinedText08]
					,[CustomsClearanceOrderUserDefinedText09]
					,[CustomsClearanceOrderUserDefinedText10]
					,[CustomsClearanceOrderUserDefinedText11]
					,[CustomsClearanceOrderUserDefinedText12]
					,[CustomsClearanceOrderUserDefinedText13]
					,[CustomsClearanceOrderUserDefinedText14]
					,[CustomsClearanceOrderUserDefinedText15]
					,[CustomsClearanceOrderChangesAcceptedDateTime]
					,[CustomsClearanceOrderRuleType]
					,[CustomsClearanceOrderCreationDataSource]
					,[CustomsClearanceOrderChangedDataStorageString]
					,[CountryCode]
					,[CustomsClearanceOrderOwnerLogin]
					,[CustomsClearanceOrderImportBatch]
					,[CustomsClearanceOrderNewEDIPending]
				FROM dbo.CustomsClearanceOrders T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDCustomsClearanceOrder] = Src.[IDCustomsClearanceOrder])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CustomsClearanceOrderAddDateTime] = Src.[CustomsClearanceOrderAddDateTime]
						,Dest.[CustomsClearanceOrderEditDateTime] = Src.[CustomsClearanceOrderEditDateTime]
						,Dest.[CustomsClearanceOrderAddUserCode] = Src.[CustomsClearanceOrderAddUserCode]
						,Dest.[CustomsClearanceOrderEditUserCode] = Src.[CustomsClearanceOrderEditUserCode]
						,Dest.[SubContextCode] = Src.[SubContextCode]
						,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
						,Dest.[CustomsClearanceOrderStatusChangeDateTime] = Src.[CustomsClearanceOrderStatusChangeDateTime]
						,Dest.[CustomsClearanceOrderNumber] = Src.[CustomsClearanceOrderNumber]
						,Dest.[CustomsTypeCode] = Src.[CustomsTypeCode]
						,Dest.[CustomsClearanceOrderVesselCode] = Src.[CustomsClearanceOrderVesselCode]
						,Dest.[CustomsClearanceOrderVoyageCode] = Src.[CustomsClearanceOrderVoyageCode]
						,Dest.[CustomsClearanceOrderVesselName] = Src.[CustomsClearanceOrderVesselName]
						,Dest.[CustomsClearanceOrderOriginService] = Src.[CustomsClearanceOrderOriginService]
						,Dest.[CustomsClearanceOrderDestinationService] = Src.[CustomsClearanceOrderDestinationService]
						,Dest.[CompanyIDCarrier] = Src.[CompanyIDCarrier]
						,Dest.[CompanyIDSupplier] = Src.[CompanyIDSupplier]
						,Dest.[CustomsClearanceOrderSupplierCompanyName] = Src.[CustomsClearanceOrderSupplierCompanyName]
						,Dest.[CustomsClearanceOrderSupplierStreet] = Src.[CustomsClearanceOrderSupplierStreet]
						,Dest.[CustomsClearanceOrderSupplierCity] = Src.[CustomsClearanceOrderSupplierCity]
						,Dest.[CustomsClearanceOrderSupplierZipCode] = Src.[CustomsClearanceOrderSupplierZipCode]
						,Dest.[CustomsClearanceOrderSupplierCountry] = Src.[CustomsClearanceOrderSupplierCountry]
						,Dest.[CustomsClearanceOrderSupplierPhone] = Src.[CustomsClearanceOrderSupplierPhone]
						,Dest.[CustomsClearanceOrderSupplierFax] = Src.[CustomsClearanceOrderSupplierFax]
						,Dest.[CustomsClearanceOrderSupplierEmail] = Src.[CustomsClearanceOrderSupplierEmail]
						,Dest.[CustomsClearanceOrderSupplierContact] = Src.[CustomsClearanceOrderSupplierContact]
						,Dest.[CustomsClearanceOrderSBBDocumentType] = Src.[CustomsClearanceOrderSBBDocumentType]
						,Dest.[CustomsClearanceOrderNotes] = Src.[CustomsClearanceOrderNotes]
						,Dest.[CustomsClearanceOrderCustomsReleaseNumber] = Src.[CustomsClearanceOrderCustomsReleaseNumber]
						,Dest.[CustomsClearanceOrderNCTSCode] = Src.[CustomsClearanceOrderNCTSCode]
						,Dest.[CustomsClearanceOrderIncoTerm] = Src.[CustomsClearanceOrderIncoTerm]
						,Dest.[CustomsClearanceOrderInsurance] = Src.[CustomsClearanceOrderInsurance]
						,Dest.[CustomsClearanceOrderOriginInlandHaulageCost] = Src.[CustomsClearanceOrderOriginInlandHaulageCost]
						,Dest.[CustomsClearanceOrderVATNumber] = Src.[CustomsClearanceOrderVATNumber]
						,Dest.[CustomsClearanceOrderEntrepotType] = Src.[CustomsClearanceOrderEntrepotType]
						,Dest.[CustomsClearanceOrderColliType] = Src.[CustomsClearanceOrderColliType]
						,Dest.[CustomsClearanceOrderFiscalRepresentation] = Src.[CustomsClearanceOrderFiscalRepresentation]
						,Dest.[CustomsClearanceOrderLloydsNumber] = Src.[CustomsClearanceOrderLloydsNumber]
						,Dest.[CustomsClearanceOrderPorticalNumber] = Src.[CustomsClearanceOrderPorticalNumber]
						,Dest.[CustomsClearanceOrderAgentCode] = Src.[CustomsClearanceOrderAgentCode]
						,Dest.[CustomsClearanceOrderArticleNumber] = Src.[CustomsClearanceOrderArticleNumber]
						,Dest.[CustomsClearanceOrderItemNumber] = Src.[CustomsClearanceOrderItemNumber]
						,Dest.[CustomsClearanceOrderCreateListDateTime] = Src.[CustomsClearanceOrderCreateListDateTime]
						,Dest.[CustomsClearanceOrderCustomDocumentNumber] = Src.[CustomsClearanceOrderCustomDocumentNumber]
						,Dest.[CustomsClearanceOrderFinalClearanceDateTime] = Src.[CustomsClearanceOrderFinalClearanceDateTime]
						,Dest.[CustomsClearanceOrderCustomRequestDateTime] = Src.[CustomsClearanceOrderCustomRequestDateTime]
						,Dest.[CustomsClearanceOrderCustomClearedDateTime] = Src.[CustomsClearanceOrderCustomClearedDateTime]
						,Dest.[CustomsClearanceOrderUserDefinedText01] = Src.[CustomsClearanceOrderUserDefinedText01]
						,Dest.[CustomsClearanceOrderUserDefinedText02] = Src.[CustomsClearanceOrderUserDefinedText02]
						,Dest.[CustomsClearanceOrderUserDefinedText03] = Src.[CustomsClearanceOrderUserDefinedText03]
						,Dest.[CustomsClearanceOrderUserDefinedText04] = Src.[CustomsClearanceOrderUserDefinedText04]
						,Dest.[CustomsClearanceOrderUserDefinedText05] = Src.[CustomsClearanceOrderUserDefinedText05]
						,Dest.[CompanyIDConsignee] = Src.[CompanyIDConsignee]
						,Dest.[CustomsClearanceOrderPlaceOfLoading] = Src.[CustomsClearanceOrderPlaceOfLoading]
						,Dest.[CustomsClearanceOrderPortOfLoading] = Src.[CustomsClearanceOrderPortOfLoading]
						,Dest.[CustomsClearanceOrderPlaceOfDischarge] = Src.[CustomsClearanceOrderPlaceOfDischarge]
						,Dest.[CustomsClearanceOrderPortOfDischarge] = Src.[CustomsClearanceOrderPortOfDischarge]
						,Dest.[CustomsClearanceOrderPlaceOfDelivery] = Src.[CustomsClearanceOrderPlaceOfDelivery]
						,Dest.[CustomsClearanceOrderPortOfDelivery] = Src.[CustomsClearanceOrderPortOfDelivery]
						,Dest.[CustomsClearanceOrderPlaceOfPickUp] = Src.[CustomsClearanceOrderPlaceOfPickUp]
						,Dest.[CustomsClearanceOrderPortOfPickUp] = Src.[CustomsClearanceOrderPortOfPickUp]
						,Dest.[CustomsClearanceOrderContactName] = Src.[CustomsClearanceOrderContactName]
						,Dest.[CustomsClearanceOrderContactPhone] = Src.[CustomsClearanceOrderContactPhone]
						,Dest.[CustomsClearanceOrderContactEmail] = Src.[CustomsClearanceOrderContactEmail]
						,Dest.[CustomsClearanceOrderActualDateTimeOfArrival] = Src.[CustomsClearanceOrderActualDateTimeOfArrival]
						,Dest.[CustomsClearanceOrderEstimatedDateTimeOfArrival] = Src.[CustomsClearanceOrderEstimatedDateTimeOfArrival]
						,Dest.[CustomsClearanceOrderActualDateTimeOfDeparture] = Src.[CustomsClearanceOrderActualDateTimeOfDeparture]
						,Dest.[CustomsClearanceOrderEstimatedDateTimeOfDeparture] = Src.[CustomsClearanceOrderEstimatedDateTimeOfDeparture]
						,Dest.[CompanyIDTerminal] = Src.[CompanyIDTerminal]
						,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
						,Dest.[CompanyIDFumigationSupplier] = Src.[CompanyIDFumigationSupplier]
						,Dest.[CustomsClearanceOrderFumigationSupplierCompanyName] = Src.[CustomsClearanceOrderFumigationSupplierCompanyName]
						,Dest.[CustomsClearanceOrderFumigationSupplierStreet] = Src.[CustomsClearanceOrderFumigationSupplierStreet]
						,Dest.[CustomsClearanceOrderFumigationSupplierCity] = Src.[CustomsClearanceOrderFumigationSupplierCity]
						,Dest.[CustomsClearanceOrderFumigationSupplierZipCode] = Src.[CustomsClearanceOrderFumigationSupplierZipCode]
						,Dest.[CustomsClearanceOrderFumigationSupplierCountry] = Src.[CustomsClearanceOrderFumigationSupplierCountry]
						,Dest.[CustomsClearanceOrderFumigationSupplierPhone] = Src.[CustomsClearanceOrderFumigationSupplierPhone]
						,Dest.[CustomsClearanceOrderFumigationSupplierFax] = Src.[CustomsClearanceOrderFumigationSupplierFax]
						,Dest.[CustomsClearanceOrderFumigationSupplierEmail] = Src.[CustomsClearanceOrderFumigationSupplierEmail]
						,Dest.[CustomsClearanceOrderFumigationSupplierContact] = Src.[CustomsClearanceOrderFumigationSupplierContact]
						,Dest.[CustomsClearanceOrderConsigneeCity] = Src.[CustomsClearanceOrderConsigneeCity]
						,Dest.[CustomsClearanceOrderConsigneeCompanyName] = Src.[CustomsClearanceOrderConsigneeCompanyName]
						,Dest.[CustomsClearanceOrderConsigneeContact] = Src.[CustomsClearanceOrderConsigneeContact]
						,Dest.[CustomsClearanceOrderConsigneeCountry] = Src.[CustomsClearanceOrderConsigneeCountry]
						,Dest.[CustomsClearanceOrderConsigneeEmail] = Src.[CustomsClearanceOrderConsigneeEmail]
						,Dest.[CustomsClearanceOrderConsigneeFax] = Src.[CustomsClearanceOrderConsigneeFax]
						,Dest.[CustomsClearanceOrderConsigneePhone] = Src.[CustomsClearanceOrderConsigneePhone]
						,Dest.[CustomsClearanceOrderConsigneeStreet] = Src.[CustomsClearanceOrderConsigneeStreet]
						,Dest.[CustomsClearanceOrderConsigneeZipCode] = Src.[CustomsClearanceOrderConsigneeZipCode]
						,Dest.[CustomsClearanceOrderUserDefinedYesNo01] = Src.[CustomsClearanceOrderUserDefinedYesNo01]
						,Dest.[CustomsClearanceOrderUserDefinedYesNo02] = Src.[CustomsClearanceOrderUserDefinedYesNo02]
						,Dest.[CustomsClearanceOrderUserDefinedYesNo03] = Src.[CustomsClearanceOrderUserDefinedYesNo03]
						,Dest.[CustomsClearanceOrderUserDefinedYesNo04] = Src.[CustomsClearanceOrderUserDefinedYesNo04]
						,Dest.[CustomsClearanceOrderUserDefinedYesNo05] = Src.[CustomsClearanceOrderUserDefinedYesNo05]
						,Dest.[CustomsClearanceOrderPortEntryDateTime] = Src.[CustomsClearanceOrderPortEntryDateTime]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime01] = Src.[CustomsClearanceOrderUserDefinedDateTime01]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime02] = Src.[CustomsClearanceOrderUserDefinedDateTime02]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime03] = Src.[CustomsClearanceOrderUserDefinedDateTime03]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime04] = Src.[CustomsClearanceOrderUserDefinedDateTime04]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime05] = Src.[CustomsClearanceOrderUserDefinedDateTime05]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime06] = Src.[CustomsClearanceOrderUserDefinedDateTime06]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime07] = Src.[CustomsClearanceOrderUserDefinedDateTime07]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime09] = Src.[CustomsClearanceOrderUserDefinedDateTime09]
						,Dest.[CustomsClearanceOrderUserDefinedDateTime10] = Src.[CustomsClearanceOrderUserDefinedDateTime10]
						,Dest.[CustomsClearanceOrderUserDefinedNumber01] = Src.[CustomsClearanceOrderUserDefinedNumber01]
						,Dest.[CustomsClearanceOrderUserDefinedNumber02] = Src.[CustomsClearanceOrderUserDefinedNumber02]
						,Dest.[CustomsClearanceOrderUserDefinedNumber03] = Src.[CustomsClearanceOrderUserDefinedNumber03]
						,Dest.[CustomsClearanceOrderUserDefinedNumber04] = Src.[CustomsClearanceOrderUserDefinedNumber04]
						,Dest.[CustomsClearanceOrderUserDefinedNumber05] = Src.[CustomsClearanceOrderUserDefinedNumber05]
						,Dest.[CustomsClearanceOrderUserDefinedLongText01] = Src.[CustomsClearanceOrderUserDefinedLongText01]
						,Dest.[CustomsClearanceOrderUserDefinedLongText02] = Src.[CustomsClearanceOrderUserDefinedLongText02]
						,Dest.[CustomsClearanceOrderUserDefinedLongText03] = Src.[CustomsClearanceOrderUserDefinedLongText03]
						,Dest.[CustomsClearanceOrderUserDefinedLongText04] = Src.[CustomsClearanceOrderUserDefinedLongText04]
						,Dest.[CustomsClearanceOrderUserDefinedLongText05] = Src.[CustomsClearanceOrderUserDefinedLongText05]
						,Dest.[CustomsClearanceOrderUserDefinedText06] = Src.[CustomsClearanceOrderUserDefinedText06]
						,Dest.[CustomsClearanceOrderUserDefinedText07] = Src.[CustomsClearanceOrderUserDefinedText07]
						,Dest.[CustomsClearanceOrderUserDefinedText08] = Src.[CustomsClearanceOrderUserDefinedText08]
						,Dest.[CustomsClearanceOrderUserDefinedText09] = Src.[CustomsClearanceOrderUserDefinedText09]
						,Dest.[CustomsClearanceOrderUserDefinedText10] = Src.[CustomsClearanceOrderUserDefinedText10]
						,Dest.[CustomsClearanceOrderUserDefinedText11] = Src.[CustomsClearanceOrderUserDefinedText11]
						,Dest.[CustomsClearanceOrderUserDefinedText12] = Src.[CustomsClearanceOrderUserDefinedText12]
						,Dest.[CustomsClearanceOrderUserDefinedText13] = Src.[CustomsClearanceOrderUserDefinedText13]
						,Dest.[CustomsClearanceOrderUserDefinedText14] = Src.[CustomsClearanceOrderUserDefinedText14]
						,Dest.[CustomsClearanceOrderUserDefinedText15] = Src.[CustomsClearanceOrderUserDefinedText15]
						,Dest.[CustomsClearanceOrderChangesAcceptedDateTime] = Src.[CustomsClearanceOrderChangesAcceptedDateTime]
						,Dest.[CustomsClearanceOrderRuleType] = Src.[CustomsClearanceOrderRuleType]
						,Dest.[CustomsClearanceOrderCreationDataSource] = Src.[CustomsClearanceOrderCreationDataSource]
						,Dest.[CustomsClearanceOrderChangedDataStorageString] = Src.[CustomsClearanceOrderChangedDataStorageString]
						,Dest.[CountryCode] = Src.[CountryCode]
						,Dest.[CustomsClearanceOrderOwnerLogin] = Src.[CustomsClearanceOrderOwnerLogin]
						,Dest.[CustomsClearanceOrderImportBatch] = Src.[CustomsClearanceOrderImportBatch]
						,Dest.[CustomsClearanceOrderNewEDIPending] = Src.[CustomsClearanceOrderNewEDIPending]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCustomsClearanceOrder]
						,[CustomsClearanceOrderAddDateTime]
						,[CustomsClearanceOrderEditDateTime]
						,[CustomsClearanceOrderAddUserCode]
						,[CustomsClearanceOrderEditUserCode]
						,[SubContextCode]
						,[DataEntryDefinitionID]
						,[StatusID]
						,[StatusIDPrevious]
						,[CustomsClearanceOrderStatusChangeDateTime]
						,[CustomsClearanceOrderNumber]
						,[CustomsTypeCode]
						,[CustomsClearanceOrderVesselCode]
						,[CustomsClearanceOrderVoyageCode]
						,[CustomsClearanceOrderVesselName]
						,[CustomsClearanceOrderOriginService]
						,[CustomsClearanceOrderDestinationService]
						,[CompanyIDCarrier]
						,[CompanyIDSupplier]
						,[CustomsClearanceOrderSupplierCompanyName]
						,[CustomsClearanceOrderSupplierStreet]
						,[CustomsClearanceOrderSupplierCity]
						,[CustomsClearanceOrderSupplierZipCode]
						,[CustomsClearanceOrderSupplierCountry]
						,[CustomsClearanceOrderSupplierPhone]
						,[CustomsClearanceOrderSupplierFax]
						,[CustomsClearanceOrderSupplierEmail]
						,[CustomsClearanceOrderSupplierContact]
						,[CustomsClearanceOrderSBBDocumentType]
						,[CustomsClearanceOrderNotes]
						,[CustomsClearanceOrderCustomsReleaseNumber]
						,[CustomsClearanceOrderNCTSCode]
						,[CustomsClearanceOrderIncoTerm]
						,[CustomsClearanceOrderInsurance]
						,[CustomsClearanceOrderOriginInlandHaulageCost]
						,[CustomsClearanceOrderVATNumber]
						,[CustomsClearanceOrderEntrepotType]
						,[CustomsClearanceOrderColliType]
						,[CustomsClearanceOrderFiscalRepresentation]
						,[CustomsClearanceOrderLloydsNumber]
						,[CustomsClearanceOrderPorticalNumber]
						,[CustomsClearanceOrderAgentCode]
						,[CustomsClearanceOrderArticleNumber]
						,[CustomsClearanceOrderItemNumber]
						,[CustomsClearanceOrderCreateListDateTime]
						,[CustomsClearanceOrderCustomDocumentNumber]
						,[CustomsClearanceOrderFinalClearanceDateTime]
						,[CustomsClearanceOrderCustomRequestDateTime]
						,[CustomsClearanceOrderCustomClearedDateTime]
						,[CustomsClearanceOrderUserDefinedText01]
						,[CustomsClearanceOrderUserDefinedText02]
						,[CustomsClearanceOrderUserDefinedText03]
						,[CustomsClearanceOrderUserDefinedText04]
						,[CustomsClearanceOrderUserDefinedText05]
						,[CompanyIDConsignee]
						,[CustomsClearanceOrderPlaceOfLoading]
						,[CustomsClearanceOrderPortOfLoading]
						,[CustomsClearanceOrderPlaceOfDischarge]
						,[CustomsClearanceOrderPortOfDischarge]
						,[CustomsClearanceOrderPlaceOfDelivery]
						,[CustomsClearanceOrderPortOfDelivery]
						,[CustomsClearanceOrderPlaceOfPickUp]
						,[CustomsClearanceOrderPortOfPickUp]
						,[CustomsClearanceOrderContactName]
						,[CustomsClearanceOrderContactPhone]
						,[CustomsClearanceOrderContactEmail]
						,[CustomsClearanceOrderActualDateTimeOfArrival]
						,[CustomsClearanceOrderEstimatedDateTimeOfArrival]
						,[CustomsClearanceOrderActualDateTimeOfDeparture]
						,[CustomsClearanceOrderEstimatedDateTimeOfDeparture]
						,[CompanyIDTerminal]
						,[CompanyIDWarehouse]
						,[CompanyIDFumigationSupplier]
						,[CustomsClearanceOrderFumigationSupplierCompanyName]
						,[CustomsClearanceOrderFumigationSupplierStreet]
						,[CustomsClearanceOrderFumigationSupplierCity]
						,[CustomsClearanceOrderFumigationSupplierZipCode]
						,[CustomsClearanceOrderFumigationSupplierCountry]
						,[CustomsClearanceOrderFumigationSupplierPhone]
						,[CustomsClearanceOrderFumigationSupplierFax]
						,[CustomsClearanceOrderFumigationSupplierEmail]
						,[CustomsClearanceOrderFumigationSupplierContact]
						,[CustomsClearanceOrderConsigneeCity]
						,[CustomsClearanceOrderConsigneeCompanyName]
						,[CustomsClearanceOrderConsigneeContact]
						,[CustomsClearanceOrderConsigneeCountry]
						,[CustomsClearanceOrderConsigneeEmail]
						,[CustomsClearanceOrderConsigneeFax]
						,[CustomsClearanceOrderConsigneePhone]
						,[CustomsClearanceOrderConsigneeStreet]
						,[CustomsClearanceOrderConsigneeZipCode]
						,[CustomsClearanceOrderUserDefinedYesNo01]
						,[CustomsClearanceOrderUserDefinedYesNo02]
						,[CustomsClearanceOrderUserDefinedYesNo03]
						,[CustomsClearanceOrderUserDefinedYesNo04]
						,[CustomsClearanceOrderUserDefinedYesNo05]
						,[CustomsClearanceOrderPortEntryDateTime]
						,[CustomsClearanceOrderUserDefinedDateTime01]
						,[CustomsClearanceOrderUserDefinedDateTime02]
						,[CustomsClearanceOrderUserDefinedDateTime03]
						,[CustomsClearanceOrderUserDefinedDateTime04]
						,[CustomsClearanceOrderUserDefinedDateTime05]
						,[CustomsClearanceOrderUserDefinedDateTime06]
						,[CustomsClearanceOrderUserDefinedDateTime07]
						,[CustomsClearanceOrderUserDefinedDateTime09]
						,[CustomsClearanceOrderUserDefinedDateTime10]
						,[CustomsClearanceOrderUserDefinedNumber01]
						,[CustomsClearanceOrderUserDefinedNumber02]
						,[CustomsClearanceOrderUserDefinedNumber03]
						,[CustomsClearanceOrderUserDefinedNumber04]
						,[CustomsClearanceOrderUserDefinedNumber05]
						,[CustomsClearanceOrderUserDefinedLongText01]
						,[CustomsClearanceOrderUserDefinedLongText02]
						,[CustomsClearanceOrderUserDefinedLongText03]
						,[CustomsClearanceOrderUserDefinedLongText04]
						,[CustomsClearanceOrderUserDefinedLongText05]
						,[CustomsClearanceOrderUserDefinedText06]
						,[CustomsClearanceOrderUserDefinedText07]
						,[CustomsClearanceOrderUserDefinedText08]
						,[CustomsClearanceOrderUserDefinedText09]
						,[CustomsClearanceOrderUserDefinedText10]
						,[CustomsClearanceOrderUserDefinedText11]
						,[CustomsClearanceOrderUserDefinedText12]
						,[CustomsClearanceOrderUserDefinedText13]
						,[CustomsClearanceOrderUserDefinedText14]
						,[CustomsClearanceOrderUserDefinedText15]
						,[CustomsClearanceOrderChangesAcceptedDateTime]
						,[CustomsClearanceOrderRuleType]
						,[CustomsClearanceOrderCreationDataSource]
						,[CustomsClearanceOrderChangedDataStorageString]
						,[CountryCode]
						,[CustomsClearanceOrderOwnerLogin]
						,[CustomsClearanceOrderImportBatch]
						,[CustomsClearanceOrderNewEDIPending]
						)
					VALUES (
						Src.[IDCustomsClearanceOrder]
						,Src.[CustomsClearanceOrderAddDateTime]
						,Src.[CustomsClearanceOrderEditDateTime]
						,Src.[CustomsClearanceOrderAddUserCode]
						,Src.[CustomsClearanceOrderEditUserCode]
						,Src.[SubContextCode]
						,Src.[DataEntryDefinitionID]
						,Src.[StatusID]
						,Src.[StatusIDPrevious]
						,Src.[CustomsClearanceOrderStatusChangeDateTime]
						,Src.[CustomsClearanceOrderNumber]
						,Src.[CustomsTypeCode]
						,Src.[CustomsClearanceOrderVesselCode]
						,Src.[CustomsClearanceOrderVoyageCode]
						,Src.[CustomsClearanceOrderVesselName]
						,Src.[CustomsClearanceOrderOriginService]
						,Src.[CustomsClearanceOrderDestinationService]
						,Src.[CompanyIDCarrier]
						,Src.[CompanyIDSupplier]
						,Src.[CustomsClearanceOrderSupplierCompanyName]
						,Src.[CustomsClearanceOrderSupplierStreet]
						,Src.[CustomsClearanceOrderSupplierCity]
						,Src.[CustomsClearanceOrderSupplierZipCode]
						,Src.[CustomsClearanceOrderSupplierCountry]
						,Src.[CustomsClearanceOrderSupplierPhone]
						,Src.[CustomsClearanceOrderSupplierFax]
						,Src.[CustomsClearanceOrderSupplierEmail]
						,Src.[CustomsClearanceOrderSupplierContact]
						,Src.[CustomsClearanceOrderSBBDocumentType]
						,Src.[CustomsClearanceOrderNotes]
						,Src.[CustomsClearanceOrderCustomsReleaseNumber]
						,Src.[CustomsClearanceOrderNCTSCode]
						,Src.[CustomsClearanceOrderIncoTerm]
						,Src.[CustomsClearanceOrderInsurance]
						,Src.[CustomsClearanceOrderOriginInlandHaulageCost]
						,Src.[CustomsClearanceOrderVATNumber]
						,Src.[CustomsClearanceOrderEntrepotType]
						,Src.[CustomsClearanceOrderColliType]
						,Src.[CustomsClearanceOrderFiscalRepresentation]
						,Src.[CustomsClearanceOrderLloydsNumber]
						,Src.[CustomsClearanceOrderPorticalNumber]
						,Src.[CustomsClearanceOrderAgentCode]
						,Src.[CustomsClearanceOrderArticleNumber]
						,Src.[CustomsClearanceOrderItemNumber]
						,Src.[CustomsClearanceOrderCreateListDateTime]
						,Src.[CustomsClearanceOrderCustomDocumentNumber]
						,Src.[CustomsClearanceOrderFinalClearanceDateTime]
						,Src.[CustomsClearanceOrderCustomRequestDateTime]
						,Src.[CustomsClearanceOrderCustomClearedDateTime]
						,Src.[CustomsClearanceOrderUserDefinedText01]
						,Src.[CustomsClearanceOrderUserDefinedText02]
						,Src.[CustomsClearanceOrderUserDefinedText03]
						,Src.[CustomsClearanceOrderUserDefinedText04]
						,Src.[CustomsClearanceOrderUserDefinedText05]
						,Src.[CompanyIDConsignee]
						,Src.[CustomsClearanceOrderPlaceOfLoading]
						,Src.[CustomsClearanceOrderPortOfLoading]
						,Src.[CustomsClearanceOrderPlaceOfDischarge]
						,Src.[CustomsClearanceOrderPortOfDischarge]
						,Src.[CustomsClearanceOrderPlaceOfDelivery]
						,Src.[CustomsClearanceOrderPortOfDelivery]
						,Src.[CustomsClearanceOrderPlaceOfPickUp]
						,Src.[CustomsClearanceOrderPortOfPickUp]
						,Src.[CustomsClearanceOrderContactName]
						,Src.[CustomsClearanceOrderContactPhone]
						,Src.[CustomsClearanceOrderContactEmail]
						,Src.[CustomsClearanceOrderActualDateTimeOfArrival]
						,Src.[CustomsClearanceOrderEstimatedDateTimeOfArrival]
						,Src.[CustomsClearanceOrderActualDateTimeOfDeparture]
						,Src.[CustomsClearanceOrderEstimatedDateTimeOfDeparture]
						,Src.[CompanyIDTerminal]
						,Src.[CompanyIDWarehouse]
						,Src.[CompanyIDFumigationSupplier]
						,Src.[CustomsClearanceOrderFumigationSupplierCompanyName]
						,Src.[CustomsClearanceOrderFumigationSupplierStreet]
						,Src.[CustomsClearanceOrderFumigationSupplierCity]
						,Src.[CustomsClearanceOrderFumigationSupplierZipCode]
						,Src.[CustomsClearanceOrderFumigationSupplierCountry]
						,Src.[CustomsClearanceOrderFumigationSupplierPhone]
						,Src.[CustomsClearanceOrderFumigationSupplierFax]
						,Src.[CustomsClearanceOrderFumigationSupplierEmail]
						,Src.[CustomsClearanceOrderFumigationSupplierContact]
						,Src.[CustomsClearanceOrderConsigneeCity]
						,Src.[CustomsClearanceOrderConsigneeCompanyName]
						,Src.[CustomsClearanceOrderConsigneeContact]
						,Src.[CustomsClearanceOrderConsigneeCountry]
						,Src.[CustomsClearanceOrderConsigneeEmail]
						,Src.[CustomsClearanceOrderConsigneeFax]
						,Src.[CustomsClearanceOrderConsigneePhone]
						,Src.[CustomsClearanceOrderConsigneeStreet]
						,Src.[CustomsClearanceOrderConsigneeZipCode]
						,Src.[CustomsClearanceOrderUserDefinedYesNo01]
						,Src.[CustomsClearanceOrderUserDefinedYesNo02]
						,Src.[CustomsClearanceOrderUserDefinedYesNo03]
						,Src.[CustomsClearanceOrderUserDefinedYesNo04]
						,Src.[CustomsClearanceOrderUserDefinedYesNo05]
						,Src.[CustomsClearanceOrderPortEntryDateTime]
						,Src.[CustomsClearanceOrderUserDefinedDateTime01]
						,Src.[CustomsClearanceOrderUserDefinedDateTime02]
						,Src.[CustomsClearanceOrderUserDefinedDateTime03]
						,Src.[CustomsClearanceOrderUserDefinedDateTime04]
						,Src.[CustomsClearanceOrderUserDefinedDateTime05]
						,Src.[CustomsClearanceOrderUserDefinedDateTime06]
						,Src.[CustomsClearanceOrderUserDefinedDateTime07]
						,Src.[CustomsClearanceOrderUserDefinedDateTime09]
						,Src.[CustomsClearanceOrderUserDefinedDateTime10]
						,Src.[CustomsClearanceOrderUserDefinedNumber01]
						,Src.[CustomsClearanceOrderUserDefinedNumber02]
						,Src.[CustomsClearanceOrderUserDefinedNumber03]
						,Src.[CustomsClearanceOrderUserDefinedNumber04]
						,Src.[CustomsClearanceOrderUserDefinedNumber05]
						,Src.[CustomsClearanceOrderUserDefinedLongText01]
						,Src.[CustomsClearanceOrderUserDefinedLongText02]
						,Src.[CustomsClearanceOrderUserDefinedLongText03]
						,Src.[CustomsClearanceOrderUserDefinedLongText04]
						,Src.[CustomsClearanceOrderUserDefinedLongText05]
						,Src.[CustomsClearanceOrderUserDefinedText06]
						,Src.[CustomsClearanceOrderUserDefinedText07]
						,Src.[CustomsClearanceOrderUserDefinedText08]
						,Src.[CustomsClearanceOrderUserDefinedText09]
						,Src.[CustomsClearanceOrderUserDefinedText10]
						,Src.[CustomsClearanceOrderUserDefinedText11]
						,Src.[CustomsClearanceOrderUserDefinedText12]
						,Src.[CustomsClearanceOrderUserDefinedText13]
						,Src.[CustomsClearanceOrderUserDefinedText14]
						,Src.[CustomsClearanceOrderUserDefinedText15]
						,Src.[CustomsClearanceOrderChangesAcceptedDateTime]
						,Src.[CustomsClearanceOrderRuleType]
						,Src.[CustomsClearanceOrderCreationDataSource]
						,Src.[CustomsClearanceOrderChangedDataStorageString]
						,Src.[CountryCode]
						,Src.[CustomsClearanceOrderOwnerLogin]
						,Src.[CustomsClearanceOrderImportBatch]
						,Src.[CustomsClearanceOrderNewEDIPending]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCustomsClearanceOrder] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCustomsClearanceOrder] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceOrders Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrders Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrder = Dest.IDCustomsClearanceOrder
					WHERE Dest.[CustomsClearanceOrderEditDateTime] < Src.[CustomsClearanceOrderEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CustomsClearanceOrderAddDateTime] = Src.[CustomsClearanceOrderAddDateTime]
					,Dest.[CustomsClearanceOrderEditDateTime] = Src.[CustomsClearanceOrderEditDateTime]
					,Dest.[CustomsClearanceOrderAddUserCode] = Src.[CustomsClearanceOrderAddUserCode]
					,Dest.[CustomsClearanceOrderEditUserCode] = Src.[CustomsClearanceOrderEditUserCode]
					,Dest.[SubContextCode] = Src.[SubContextCode]
					,Dest.[DataEntryDefinitionID] = Src.[DataEntryDefinitionID]
					,Dest.[StatusID] = Src.[StatusID]
					,Dest.[StatusIDPrevious] = Src.[StatusIDPrevious]
					,Dest.[CustomsClearanceOrderStatusChangeDateTime] = Src.[CustomsClearanceOrderStatusChangeDateTime]
					,Dest.[CustomsClearanceOrderNumber] = Src.[CustomsClearanceOrderNumber]
					,Dest.[CustomsTypeCode] = Src.[CustomsTypeCode]
					,Dest.[CustomsClearanceOrderVesselCode] = Src.[CustomsClearanceOrderVesselCode]
					,Dest.[CustomsClearanceOrderVoyageCode] = Src.[CustomsClearanceOrderVoyageCode]
					,Dest.[CustomsClearanceOrderVesselName] = Src.[CustomsClearanceOrderVesselName]
					,Dest.[CustomsClearanceOrderOriginService] = Src.[CustomsClearanceOrderOriginService]
					,Dest.[CustomsClearanceOrderDestinationService] = Src.[CustomsClearanceOrderDestinationService]
					,Dest.[CompanyIDCarrier] = Src.[CompanyIDCarrier]
					,Dest.[CompanyIDSupplier] = Src.[CompanyIDSupplier]
					,Dest.[CustomsClearanceOrderSupplierCompanyName] = Src.[CustomsClearanceOrderSupplierCompanyName]
					,Dest.[CustomsClearanceOrderSupplierStreet] = Src.[CustomsClearanceOrderSupplierStreet]
					,Dest.[CustomsClearanceOrderSupplierCity] = Src.[CustomsClearanceOrderSupplierCity]
					,Dest.[CustomsClearanceOrderSupplierZipCode] = Src.[CustomsClearanceOrderSupplierZipCode]
					,Dest.[CustomsClearanceOrderSupplierCountry] = Src.[CustomsClearanceOrderSupplierCountry]
					,Dest.[CustomsClearanceOrderSupplierPhone] = Src.[CustomsClearanceOrderSupplierPhone]
					,Dest.[CustomsClearanceOrderSupplierFax] = Src.[CustomsClearanceOrderSupplierFax]
					,Dest.[CustomsClearanceOrderSupplierEmail] = Src.[CustomsClearanceOrderSupplierEmail]
					,Dest.[CustomsClearanceOrderSupplierContact] = Src.[CustomsClearanceOrderSupplierContact]
					,Dest.[CustomsClearanceOrderSBBDocumentType] = Src.[CustomsClearanceOrderSBBDocumentType]
					,Dest.[CustomsClearanceOrderNotes] = Src.[CustomsClearanceOrderNotes]
					,Dest.[CustomsClearanceOrderCustomsReleaseNumber] = Src.[CustomsClearanceOrderCustomsReleaseNumber]
					,Dest.[CustomsClearanceOrderNCTSCode] = Src.[CustomsClearanceOrderNCTSCode]
					,Dest.[CustomsClearanceOrderIncoTerm] = Src.[CustomsClearanceOrderIncoTerm]
					,Dest.[CustomsClearanceOrderInsurance] = Src.[CustomsClearanceOrderInsurance]
					,Dest.[CustomsClearanceOrderOriginInlandHaulageCost] = Src.[CustomsClearanceOrderOriginInlandHaulageCost]
					,Dest.[CustomsClearanceOrderVATNumber] = Src.[CustomsClearanceOrderVATNumber]
					,Dest.[CustomsClearanceOrderEntrepotType] = Src.[CustomsClearanceOrderEntrepotType]
					,Dest.[CustomsClearanceOrderColliType] = Src.[CustomsClearanceOrderColliType]
					,Dest.[CustomsClearanceOrderFiscalRepresentation] = Src.[CustomsClearanceOrderFiscalRepresentation]
					,Dest.[CustomsClearanceOrderLloydsNumber] = Src.[CustomsClearanceOrderLloydsNumber]
					,Dest.[CustomsClearanceOrderPorticalNumber] = Src.[CustomsClearanceOrderPorticalNumber]
					,Dest.[CustomsClearanceOrderAgentCode] = Src.[CustomsClearanceOrderAgentCode]
					,Dest.[CustomsClearanceOrderArticleNumber] = Src.[CustomsClearanceOrderArticleNumber]
					,Dest.[CustomsClearanceOrderItemNumber] = Src.[CustomsClearanceOrderItemNumber]
					,Dest.[CustomsClearanceOrderCreateListDateTime] = Src.[CustomsClearanceOrderCreateListDateTime]
					,Dest.[CustomsClearanceOrderCustomDocumentNumber] = Src.[CustomsClearanceOrderCustomDocumentNumber]
					,Dest.[CustomsClearanceOrderFinalClearanceDateTime] = Src.[CustomsClearanceOrderFinalClearanceDateTime]
					,Dest.[CustomsClearanceOrderCustomRequestDateTime] = Src.[CustomsClearanceOrderCustomRequestDateTime]
					,Dest.[CustomsClearanceOrderCustomClearedDateTime] = Src.[CustomsClearanceOrderCustomClearedDateTime]
					,Dest.[CustomsClearanceOrderUserDefinedText01] = Src.[CustomsClearanceOrderUserDefinedText01]
					,Dest.[CustomsClearanceOrderUserDefinedText02] = Src.[CustomsClearanceOrderUserDefinedText02]
					,Dest.[CustomsClearanceOrderUserDefinedText03] = Src.[CustomsClearanceOrderUserDefinedText03]
					,Dest.[CustomsClearanceOrderUserDefinedText04] = Src.[CustomsClearanceOrderUserDefinedText04]
					,Dest.[CustomsClearanceOrderUserDefinedText05] = Src.[CustomsClearanceOrderUserDefinedText05]
					,Dest.[CompanyIDConsignee] = Src.[CompanyIDConsignee]
					,Dest.[CustomsClearanceOrderPlaceOfLoading] = Src.[CustomsClearanceOrderPlaceOfLoading]
					,Dest.[CustomsClearanceOrderPortOfLoading] = Src.[CustomsClearanceOrderPortOfLoading]
					,Dest.[CustomsClearanceOrderPlaceOfDischarge] = Src.[CustomsClearanceOrderPlaceOfDischarge]
					,Dest.[CustomsClearanceOrderPortOfDischarge] = Src.[CustomsClearanceOrderPortOfDischarge]
					,Dest.[CustomsClearanceOrderPlaceOfDelivery] = Src.[CustomsClearanceOrderPlaceOfDelivery]
					,Dest.[CustomsClearanceOrderPortOfDelivery] = Src.[CustomsClearanceOrderPortOfDelivery]
					,Dest.[CustomsClearanceOrderPlaceOfPickUp] = Src.[CustomsClearanceOrderPlaceOfPickUp]
					,Dest.[CustomsClearanceOrderPortOfPickUp] = Src.[CustomsClearanceOrderPortOfPickUp]
					,Dest.[CustomsClearanceOrderContactName] = Src.[CustomsClearanceOrderContactName]
					,Dest.[CustomsClearanceOrderContactPhone] = Src.[CustomsClearanceOrderContactPhone]
					,Dest.[CustomsClearanceOrderContactEmail] = Src.[CustomsClearanceOrderContactEmail]
					,Dest.[CustomsClearanceOrderActualDateTimeOfArrival] = Src.[CustomsClearanceOrderActualDateTimeOfArrival]
					,Dest.[CustomsClearanceOrderEstimatedDateTimeOfArrival] = Src.[CustomsClearanceOrderEstimatedDateTimeOfArrival]
					,Dest.[CustomsClearanceOrderActualDateTimeOfDeparture] = Src.[CustomsClearanceOrderActualDateTimeOfDeparture]
					,Dest.[CustomsClearanceOrderEstimatedDateTimeOfDeparture] = Src.[CustomsClearanceOrderEstimatedDateTimeOfDeparture]
					,Dest.[CompanyIDTerminal] = Src.[CompanyIDTerminal]
					,Dest.[CompanyIDWarehouse] = Src.[CompanyIDWarehouse]
					,Dest.[CompanyIDFumigationSupplier] = Src.[CompanyIDFumigationSupplier]
					,Dest.[CustomsClearanceOrderFumigationSupplierCompanyName] = Src.[CustomsClearanceOrderFumigationSupplierCompanyName]
					,Dest.[CustomsClearanceOrderFumigationSupplierStreet] = Src.[CustomsClearanceOrderFumigationSupplierStreet]
					,Dest.[CustomsClearanceOrderFumigationSupplierCity] = Src.[CustomsClearanceOrderFumigationSupplierCity]
					,Dest.[CustomsClearanceOrderFumigationSupplierZipCode] = Src.[CustomsClearanceOrderFumigationSupplierZipCode]
					,Dest.[CustomsClearanceOrderFumigationSupplierCountry] = Src.[CustomsClearanceOrderFumigationSupplierCountry]
					,Dest.[CustomsClearanceOrderFumigationSupplierPhone] = Src.[CustomsClearanceOrderFumigationSupplierPhone]
					,Dest.[CustomsClearanceOrderFumigationSupplierFax] = Src.[CustomsClearanceOrderFumigationSupplierFax]
					,Dest.[CustomsClearanceOrderFumigationSupplierEmail] = Src.[CustomsClearanceOrderFumigationSupplierEmail]
					,Dest.[CustomsClearanceOrderFumigationSupplierContact] = Src.[CustomsClearanceOrderFumigationSupplierContact]
					,Dest.[CustomsClearanceOrderConsigneeCity] = Src.[CustomsClearanceOrderConsigneeCity]
					,Dest.[CustomsClearanceOrderConsigneeCompanyName] = Src.[CustomsClearanceOrderConsigneeCompanyName]
					,Dest.[CustomsClearanceOrderConsigneeContact] = Src.[CustomsClearanceOrderConsigneeContact]
					,Dest.[CustomsClearanceOrderConsigneeCountry] = Src.[CustomsClearanceOrderConsigneeCountry]
					,Dest.[CustomsClearanceOrderConsigneeEmail] = Src.[CustomsClearanceOrderConsigneeEmail]
					,Dest.[CustomsClearanceOrderConsigneeFax] = Src.[CustomsClearanceOrderConsigneeFax]
					,Dest.[CustomsClearanceOrderConsigneePhone] = Src.[CustomsClearanceOrderConsigneePhone]
					,Dest.[CustomsClearanceOrderConsigneeStreet] = Src.[CustomsClearanceOrderConsigneeStreet]
					,Dest.[CustomsClearanceOrderConsigneeZipCode] = Src.[CustomsClearanceOrderConsigneeZipCode]
					,Dest.[CustomsClearanceOrderUserDefinedYesNo01] = Src.[CustomsClearanceOrderUserDefinedYesNo01]
					,Dest.[CustomsClearanceOrderUserDefinedYesNo02] = Src.[CustomsClearanceOrderUserDefinedYesNo02]
					,Dest.[CustomsClearanceOrderUserDefinedYesNo03] = Src.[CustomsClearanceOrderUserDefinedYesNo03]
					,Dest.[CustomsClearanceOrderUserDefinedYesNo04] = Src.[CustomsClearanceOrderUserDefinedYesNo04]
					,Dest.[CustomsClearanceOrderUserDefinedYesNo05] = Src.[CustomsClearanceOrderUserDefinedYesNo05]
					,Dest.[CustomsClearanceOrderPortEntryDateTime] = Src.[CustomsClearanceOrderPortEntryDateTime]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime01] = Src.[CustomsClearanceOrderUserDefinedDateTime01]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime02] = Src.[CustomsClearanceOrderUserDefinedDateTime02]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime03] = Src.[CustomsClearanceOrderUserDefinedDateTime03]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime04] = Src.[CustomsClearanceOrderUserDefinedDateTime04]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime05] = Src.[CustomsClearanceOrderUserDefinedDateTime05]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime06] = Src.[CustomsClearanceOrderUserDefinedDateTime06]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime07] = Src.[CustomsClearanceOrderUserDefinedDateTime07]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime09] = Src.[CustomsClearanceOrderUserDefinedDateTime09]
					,Dest.[CustomsClearanceOrderUserDefinedDateTime10] = Src.[CustomsClearanceOrderUserDefinedDateTime10]
					,Dest.[CustomsClearanceOrderUserDefinedNumber01] = Src.[CustomsClearanceOrderUserDefinedNumber01]
					,Dest.[CustomsClearanceOrderUserDefinedNumber02] = Src.[CustomsClearanceOrderUserDefinedNumber02]
					,Dest.[CustomsClearanceOrderUserDefinedNumber03] = Src.[CustomsClearanceOrderUserDefinedNumber03]
					,Dest.[CustomsClearanceOrderUserDefinedNumber04] = Src.[CustomsClearanceOrderUserDefinedNumber04]
					,Dest.[CustomsClearanceOrderUserDefinedNumber05] = Src.[CustomsClearanceOrderUserDefinedNumber05]
					,Dest.[CustomsClearanceOrderUserDefinedLongText01] = Src.[CustomsClearanceOrderUserDefinedLongText01]
					,Dest.[CustomsClearanceOrderUserDefinedLongText02] = Src.[CustomsClearanceOrderUserDefinedLongText02]
					,Dest.[CustomsClearanceOrderUserDefinedLongText03] = Src.[CustomsClearanceOrderUserDefinedLongText03]
					,Dest.[CustomsClearanceOrderUserDefinedLongText04] = Src.[CustomsClearanceOrderUserDefinedLongText04]
					,Dest.[CustomsClearanceOrderUserDefinedLongText05] = Src.[CustomsClearanceOrderUserDefinedLongText05]
					,Dest.[CustomsClearanceOrderUserDefinedText06] = Src.[CustomsClearanceOrderUserDefinedText06]
					,Dest.[CustomsClearanceOrderUserDefinedText07] = Src.[CustomsClearanceOrderUserDefinedText07]
					,Dest.[CustomsClearanceOrderUserDefinedText08] = Src.[CustomsClearanceOrderUserDefinedText08]
					,Dest.[CustomsClearanceOrderUserDefinedText09] = Src.[CustomsClearanceOrderUserDefinedText09]
					,Dest.[CustomsClearanceOrderUserDefinedText10] = Src.[CustomsClearanceOrderUserDefinedText10]
					,Dest.[CustomsClearanceOrderUserDefinedText11] = Src.[CustomsClearanceOrderUserDefinedText11]
					,Dest.[CustomsClearanceOrderUserDefinedText12] = Src.[CustomsClearanceOrderUserDefinedText12]
					,Dest.[CustomsClearanceOrderUserDefinedText13] = Src.[CustomsClearanceOrderUserDefinedText13]
					,Dest.[CustomsClearanceOrderUserDefinedText14] = Src.[CustomsClearanceOrderUserDefinedText14]
					,Dest.[CustomsClearanceOrderUserDefinedText15] = Src.[CustomsClearanceOrderUserDefinedText15]
					,Dest.[CustomsClearanceOrderChangesAcceptedDateTime] = Src.[CustomsClearanceOrderChangesAcceptedDateTime]
					,Dest.[CustomsClearanceOrderRuleType] = Src.[CustomsClearanceOrderRuleType]
					,Dest.[CustomsClearanceOrderCreationDataSource] = Src.[CustomsClearanceOrderCreationDataSource]
					,Dest.[CustomsClearanceOrderChangedDataStorageString] = Src.[CustomsClearanceOrderChangedDataStorageString]
					,Dest.[CountryCode] = Src.[CountryCode]
					,Dest.[CustomsClearanceOrderOwnerLogin] = Src.[CustomsClearanceOrderOwnerLogin]
					,Dest.[CustomsClearanceOrderImportBatch] = Src.[CustomsClearanceOrderImportBatch]
					,Dest.[CustomsClearanceOrderNewEDIPending] = Src.[CustomsClearanceOrderNewEDIPending]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCustomsClearanceOrder AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCustomsClearanceOrder AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CustomsClearanceOrders Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrders Dest ON Src.IDCustomsClearanceOrder = Dest.IDCustomsClearanceOrder
				WHERE Dest.[CustomsClearanceOrderEditDateTime] < Src.[CustomsClearanceOrderEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceOrders Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrders Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrder = Dest.IDCustomsClearanceOrder
					WHERE Dest.IDCustomsClearanceOrder IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrders (
					[IDCustomsClearanceOrder]
					,[CustomsClearanceOrderAddDateTime]
					,[CustomsClearanceOrderEditDateTime]
					,[CustomsClearanceOrderAddUserCode]
					,[CustomsClearanceOrderEditUserCode]
					,[SubContextCode]
					,[DataEntryDefinitionID]
					,[StatusID]
					,[StatusIDPrevious]
					,[CustomsClearanceOrderStatusChangeDateTime]
					,[CustomsClearanceOrderNumber]
					,[CustomsTypeCode]
					,[CustomsClearanceOrderVesselCode]
					,[CustomsClearanceOrderVoyageCode]
					,[CustomsClearanceOrderVesselName]
					,[CustomsClearanceOrderOriginService]
					,[CustomsClearanceOrderDestinationService]
					,[CompanyIDCarrier]
					,[CompanyIDSupplier]
					,[CustomsClearanceOrderSupplierCompanyName]
					,[CustomsClearanceOrderSupplierStreet]
					,[CustomsClearanceOrderSupplierCity]
					,[CustomsClearanceOrderSupplierZipCode]
					,[CustomsClearanceOrderSupplierCountry]
					,[CustomsClearanceOrderSupplierPhone]
					,[CustomsClearanceOrderSupplierFax]
					,[CustomsClearanceOrderSupplierEmail]
					,[CustomsClearanceOrderSupplierContact]
					,[CustomsClearanceOrderSBBDocumentType]
					,[CustomsClearanceOrderNotes]
					,[CustomsClearanceOrderCustomsReleaseNumber]
					,[CustomsClearanceOrderNCTSCode]
					,[CustomsClearanceOrderIncoTerm]
					,[CustomsClearanceOrderInsurance]
					,[CustomsClearanceOrderOriginInlandHaulageCost]
					,[CustomsClearanceOrderVATNumber]
					,[CustomsClearanceOrderEntrepotType]
					,[CustomsClearanceOrderColliType]
					,[CustomsClearanceOrderFiscalRepresentation]
					,[CustomsClearanceOrderLloydsNumber]
					,[CustomsClearanceOrderPorticalNumber]
					,[CustomsClearanceOrderAgentCode]
					,[CustomsClearanceOrderArticleNumber]
					,[CustomsClearanceOrderItemNumber]
					,[CustomsClearanceOrderCreateListDateTime]
					,[CustomsClearanceOrderCustomDocumentNumber]
					,[CustomsClearanceOrderFinalClearanceDateTime]
					,[CustomsClearanceOrderCustomRequestDateTime]
					,[CustomsClearanceOrderCustomClearedDateTime]
					,[CustomsClearanceOrderUserDefinedText01]
					,[CustomsClearanceOrderUserDefinedText02]
					,[CustomsClearanceOrderUserDefinedText03]
					,[CustomsClearanceOrderUserDefinedText04]
					,[CustomsClearanceOrderUserDefinedText05]
					,[CompanyIDConsignee]
					,[CustomsClearanceOrderPlaceOfLoading]
					,[CustomsClearanceOrderPortOfLoading]
					,[CustomsClearanceOrderPlaceOfDischarge]
					,[CustomsClearanceOrderPortOfDischarge]
					,[CustomsClearanceOrderPlaceOfDelivery]
					,[CustomsClearanceOrderPortOfDelivery]
					,[CustomsClearanceOrderPlaceOfPickUp]
					,[CustomsClearanceOrderPortOfPickUp]
					,[CustomsClearanceOrderContactName]
					,[CustomsClearanceOrderContactPhone]
					,[CustomsClearanceOrderContactEmail]
					,[CustomsClearanceOrderActualDateTimeOfArrival]
					,[CustomsClearanceOrderEstimatedDateTimeOfArrival]
					,[CustomsClearanceOrderActualDateTimeOfDeparture]
					,[CustomsClearanceOrderEstimatedDateTimeOfDeparture]
					,[CompanyIDTerminal]
					,[CompanyIDWarehouse]
					,[CompanyIDFumigationSupplier]
					,[CustomsClearanceOrderFumigationSupplierCompanyName]
					,[CustomsClearanceOrderFumigationSupplierStreet]
					,[CustomsClearanceOrderFumigationSupplierCity]
					,[CustomsClearanceOrderFumigationSupplierZipCode]
					,[CustomsClearanceOrderFumigationSupplierCountry]
					,[CustomsClearanceOrderFumigationSupplierPhone]
					,[CustomsClearanceOrderFumigationSupplierFax]
					,[CustomsClearanceOrderFumigationSupplierEmail]
					,[CustomsClearanceOrderFumigationSupplierContact]
					,[CustomsClearanceOrderConsigneeCity]
					,[CustomsClearanceOrderConsigneeCompanyName]
					,[CustomsClearanceOrderConsigneeContact]
					,[CustomsClearanceOrderConsigneeCountry]
					,[CustomsClearanceOrderConsigneeEmail]
					,[CustomsClearanceOrderConsigneeFax]
					,[CustomsClearanceOrderConsigneePhone]
					,[CustomsClearanceOrderConsigneeStreet]
					,[CustomsClearanceOrderConsigneeZipCode]
					,[CustomsClearanceOrderUserDefinedYesNo01]
					,[CustomsClearanceOrderUserDefinedYesNo02]
					,[CustomsClearanceOrderUserDefinedYesNo03]
					,[CustomsClearanceOrderUserDefinedYesNo04]
					,[CustomsClearanceOrderUserDefinedYesNo05]
					,[CustomsClearanceOrderPortEntryDateTime]
					,[CustomsClearanceOrderUserDefinedDateTime01]
					,[CustomsClearanceOrderUserDefinedDateTime02]
					,[CustomsClearanceOrderUserDefinedDateTime03]
					,[CustomsClearanceOrderUserDefinedDateTime04]
					,[CustomsClearanceOrderUserDefinedDateTime05]
					,[CustomsClearanceOrderUserDefinedDateTime06]
					,[CustomsClearanceOrderUserDefinedDateTime07]
					,[CustomsClearanceOrderUserDefinedDateTime09]
					,[CustomsClearanceOrderUserDefinedDateTime10]
					,[CustomsClearanceOrderUserDefinedNumber01]
					,[CustomsClearanceOrderUserDefinedNumber02]
					,[CustomsClearanceOrderUserDefinedNumber03]
					,[CustomsClearanceOrderUserDefinedNumber04]
					,[CustomsClearanceOrderUserDefinedNumber05]
					,[CustomsClearanceOrderUserDefinedLongText01]
					,[CustomsClearanceOrderUserDefinedLongText02]
					,[CustomsClearanceOrderUserDefinedLongText03]
					,[CustomsClearanceOrderUserDefinedLongText04]
					,[CustomsClearanceOrderUserDefinedLongText05]
					,[CustomsClearanceOrderUserDefinedText06]
					,[CustomsClearanceOrderUserDefinedText07]
					,[CustomsClearanceOrderUserDefinedText08]
					,[CustomsClearanceOrderUserDefinedText09]
					,[CustomsClearanceOrderUserDefinedText10]
					,[CustomsClearanceOrderUserDefinedText11]
					,[CustomsClearanceOrderUserDefinedText12]
					,[CustomsClearanceOrderUserDefinedText13]
					,[CustomsClearanceOrderUserDefinedText14]
					,[CustomsClearanceOrderUserDefinedText15]
					,[CustomsClearanceOrderChangesAcceptedDateTime]
					,[CustomsClearanceOrderRuleType]
					,[CustomsClearanceOrderCreationDataSource]
					,[CustomsClearanceOrderChangedDataStorageString]
					,[CountryCode]
					,[CustomsClearanceOrderOwnerLogin]
					,[CustomsClearanceOrderImportBatch]
					,[CustomsClearanceOrderNewEDIPending]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCustomsClearanceOrder AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCustomsClearanceOrder]
					,Src.[CustomsClearanceOrderAddDateTime]
					,Src.[CustomsClearanceOrderEditDateTime]
					,Src.[CustomsClearanceOrderAddUserCode]
					,Src.[CustomsClearanceOrderEditUserCode]
					,Src.[SubContextCode]
					,Src.[DataEntryDefinitionID]
					,Src.[StatusID]
					,Src.[StatusIDPrevious]
					,Src.[CustomsClearanceOrderStatusChangeDateTime]
					,Src.[CustomsClearanceOrderNumber]
					,Src.[CustomsTypeCode]
					,Src.[CustomsClearanceOrderVesselCode]
					,Src.[CustomsClearanceOrderVoyageCode]
					,Src.[CustomsClearanceOrderVesselName]
					,Src.[CustomsClearanceOrderOriginService]
					,Src.[CustomsClearanceOrderDestinationService]
					,Src.[CompanyIDCarrier]
					,Src.[CompanyIDSupplier]
					,Src.[CustomsClearanceOrderSupplierCompanyName]
					,Src.[CustomsClearanceOrderSupplierStreet]
					,Src.[CustomsClearanceOrderSupplierCity]
					,Src.[CustomsClearanceOrderSupplierZipCode]
					,Src.[CustomsClearanceOrderSupplierCountry]
					,Src.[CustomsClearanceOrderSupplierPhone]
					,Src.[CustomsClearanceOrderSupplierFax]
					,Src.[CustomsClearanceOrderSupplierEmail]
					,Src.[CustomsClearanceOrderSupplierContact]
					,Src.[CustomsClearanceOrderSBBDocumentType]
					,Src.[CustomsClearanceOrderNotes]
					,Src.[CustomsClearanceOrderCustomsReleaseNumber]
					,Src.[CustomsClearanceOrderNCTSCode]
					,Src.[CustomsClearanceOrderIncoTerm]
					,Src.[CustomsClearanceOrderInsurance]
					,Src.[CustomsClearanceOrderOriginInlandHaulageCost]
					,Src.[CustomsClearanceOrderVATNumber]
					,Src.[CustomsClearanceOrderEntrepotType]
					,Src.[CustomsClearanceOrderColliType]
					,Src.[CustomsClearanceOrderFiscalRepresentation]
					,Src.[CustomsClearanceOrderLloydsNumber]
					,Src.[CustomsClearanceOrderPorticalNumber]
					,Src.[CustomsClearanceOrderAgentCode]
					,Src.[CustomsClearanceOrderArticleNumber]
					,Src.[CustomsClearanceOrderItemNumber]
					,Src.[CustomsClearanceOrderCreateListDateTime]
					,Src.[CustomsClearanceOrderCustomDocumentNumber]
					,Src.[CustomsClearanceOrderFinalClearanceDateTime]
					,Src.[CustomsClearanceOrderCustomRequestDateTime]
					,Src.[CustomsClearanceOrderCustomClearedDateTime]
					,Src.[CustomsClearanceOrderUserDefinedText01]
					,Src.[CustomsClearanceOrderUserDefinedText02]
					,Src.[CustomsClearanceOrderUserDefinedText03]
					,Src.[CustomsClearanceOrderUserDefinedText04]
					,Src.[CustomsClearanceOrderUserDefinedText05]
					,Src.[CompanyIDConsignee]
					,Src.[CustomsClearanceOrderPlaceOfLoading]
					,Src.[CustomsClearanceOrderPortOfLoading]
					,Src.[CustomsClearanceOrderPlaceOfDischarge]
					,Src.[CustomsClearanceOrderPortOfDischarge]
					,Src.[CustomsClearanceOrderPlaceOfDelivery]
					,Src.[CustomsClearanceOrderPortOfDelivery]
					,Src.[CustomsClearanceOrderPlaceOfPickUp]
					,Src.[CustomsClearanceOrderPortOfPickUp]
					,Src.[CustomsClearanceOrderContactName]
					,Src.[CustomsClearanceOrderContactPhone]
					,Src.[CustomsClearanceOrderContactEmail]
					,Src.[CustomsClearanceOrderActualDateTimeOfArrival]
					,Src.[CustomsClearanceOrderEstimatedDateTimeOfArrival]
					,Src.[CustomsClearanceOrderActualDateTimeOfDeparture]
					,Src.[CustomsClearanceOrderEstimatedDateTimeOfDeparture]
					,Src.[CompanyIDTerminal]
					,Src.[CompanyIDWarehouse]
					,Src.[CompanyIDFumigationSupplier]
					,Src.[CustomsClearanceOrderFumigationSupplierCompanyName]
					,Src.[CustomsClearanceOrderFumigationSupplierStreet]
					,Src.[CustomsClearanceOrderFumigationSupplierCity]
					,Src.[CustomsClearanceOrderFumigationSupplierZipCode]
					,Src.[CustomsClearanceOrderFumigationSupplierCountry]
					,Src.[CustomsClearanceOrderFumigationSupplierPhone]
					,Src.[CustomsClearanceOrderFumigationSupplierFax]
					,Src.[CustomsClearanceOrderFumigationSupplierEmail]
					,Src.[CustomsClearanceOrderFumigationSupplierContact]
					,Src.[CustomsClearanceOrderConsigneeCity]
					,Src.[CustomsClearanceOrderConsigneeCompanyName]
					,Src.[CustomsClearanceOrderConsigneeContact]
					,Src.[CustomsClearanceOrderConsigneeCountry]
					,Src.[CustomsClearanceOrderConsigneeEmail]
					,Src.[CustomsClearanceOrderConsigneeFax]
					,Src.[CustomsClearanceOrderConsigneePhone]
					,Src.[CustomsClearanceOrderConsigneeStreet]
					,Src.[CustomsClearanceOrderConsigneeZipCode]
					,Src.[CustomsClearanceOrderUserDefinedYesNo01]
					,Src.[CustomsClearanceOrderUserDefinedYesNo02]
					,Src.[CustomsClearanceOrderUserDefinedYesNo03]
					,Src.[CustomsClearanceOrderUserDefinedYesNo04]
					,Src.[CustomsClearanceOrderUserDefinedYesNo05]
					,Src.[CustomsClearanceOrderPortEntryDateTime]
					,Src.[CustomsClearanceOrderUserDefinedDateTime01]
					,Src.[CustomsClearanceOrderUserDefinedDateTime02]
					,Src.[CustomsClearanceOrderUserDefinedDateTime03]
					,Src.[CustomsClearanceOrderUserDefinedDateTime04]
					,Src.[CustomsClearanceOrderUserDefinedDateTime05]
					,Src.[CustomsClearanceOrderUserDefinedDateTime06]
					,Src.[CustomsClearanceOrderUserDefinedDateTime07]
					,Src.[CustomsClearanceOrderUserDefinedDateTime09]
					,Src.[CustomsClearanceOrderUserDefinedDateTime10]
					,Src.[CustomsClearanceOrderUserDefinedNumber01]
					,Src.[CustomsClearanceOrderUserDefinedNumber02]
					,Src.[CustomsClearanceOrderUserDefinedNumber03]
					,Src.[CustomsClearanceOrderUserDefinedNumber04]
					,Src.[CustomsClearanceOrderUserDefinedNumber05]
					,Src.[CustomsClearanceOrderUserDefinedLongText01]
					,Src.[CustomsClearanceOrderUserDefinedLongText02]
					,Src.[CustomsClearanceOrderUserDefinedLongText03]
					,Src.[CustomsClearanceOrderUserDefinedLongText04]
					,Src.[CustomsClearanceOrderUserDefinedLongText05]
					,Src.[CustomsClearanceOrderUserDefinedText06]
					,Src.[CustomsClearanceOrderUserDefinedText07]
					,Src.[CustomsClearanceOrderUserDefinedText08]
					,Src.[CustomsClearanceOrderUserDefinedText09]
					,Src.[CustomsClearanceOrderUserDefinedText10]
					,Src.[CustomsClearanceOrderUserDefinedText11]
					,Src.[CustomsClearanceOrderUserDefinedText12]
					,Src.[CustomsClearanceOrderUserDefinedText13]
					,Src.[CustomsClearanceOrderUserDefinedText14]
					,Src.[CustomsClearanceOrderUserDefinedText15]
					,Src.[CustomsClearanceOrderChangesAcceptedDateTime]
					,Src.[CustomsClearanceOrderRuleType]
					,Src.[CustomsClearanceOrderCreationDataSource]
					,Src.[CustomsClearanceOrderChangedDataStorageString]
					,Src.[CountryCode]
					,Src.[CustomsClearanceOrderOwnerLogin]
					,Src.[CustomsClearanceOrderImportBatch]
					,Src.[CustomsClearanceOrderNewEDIPending]
				FROM [dbo].CustomsClearanceOrders Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrders Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrder = Dest.IDCustomsClearanceOrder
				WHERE Dest.IDCustomsClearanceOrder IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CustomsClearanceOrder: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CustomsClearanceOrder` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------CustomsClearanceOrderDetails
	SET @CurrentTableName = 'CustomsClearanceOrderDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderDetails AS Dest
			USING (
				SELECT [IDCustomsClearanceOrderDetail]
					,[CustomsClearanceOrderID]
					,[CustomsClearanceOrderDetailAddDateTime]
					,[CustomsClearanceOrderDetailEditDateTime]
					,[CustomsClearanceOrderDetailAddUserCode]
					,[CustomsClearanceOrderDetailEditUserCode]
					,[CustomsClearanceOrderDetailCBLNumber]
					,[CustomsClearanceOrderDetailHBLNumber]
					,[CustomsClearanceOrderDetailEquipmentNumber]
					,[CustomsClearanceOrderDetailEquipmentType]
					,[CustomsClearanceOrderDetailEquipmentSize]
					,[CustomsClearanceOrderDetailSeal]
					,[CustomsClearanceOrderDetailReleaseNumber]
					,[CustomsClearanceOrderDetailTransportModality]
					,[CustomsClearanceOrderDetailDeliveryDateTime]
					,[CustomsClearanceOrderDetailIsScanned]
					,[CustomsClearanceOrderDetailScanDateTime]
					,[CustomsClearanceOrderDetailIsInspected]
					,[CustomsClearanceOrderDetailInspectionDateTime]
					,[CustomsClearanceOrderDetailFileCompleted]
					,[CustomsClearanceOrderDetailFileCompletionDateTime]
					,[CustomsClearanceOrderDetailCustomsInformationComplete]
					,[CustomsClearanceOrderDetailCustomsInformationCompletionDateTime]
					,[CustomsClearanceOrderDetailIsFumigated]
					,[CustomsClearanceOrderDetailFumigationDateTime]
					,[CustomsClearanceOrderDetailPlaceOfDelivery]
					,[CustomsClearanceOrderDetailCustomsReleaseNumber]
					,[CustomsClearanceOrderDetailInsurance]
					,[CustomsClearanceOrderDetailBAS]
					,[CustomsClearanceOrderDetailBAF]
					,[CustomsClearanceOrderDetailCAF]
					,[CustomsClearanceOrderDetailValue]
					,[DocumentOrderID]
					,[CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture]
					,[CustomsClearanceOrderDetailEstimatedDateTimeOfArrival]
					,[CustomsClearanceOrderDetailActualDateTimeOfDeparture]
					,[CustomsClearanceOrderDetailActualDateTimeOfArrival]
					,[CustomsClearanceOrderDetailDocumentStatusDisplayName]
					,[CustomsClearanceOrderDetailDocumentStatusDone]
					,[CustomsClearanceOrderDetailUserDefinedYesNo01]
					,[CustomsClearanceOrderDetailUserDefinedYesNo02]
					,[CustomsClearanceOrderDetailUserDefinedYesNo03]
					,[CustomsClearanceOrderDetailUserDefinedYesNo04]
					,[CustomsClearanceOrderDetailUserDefinedYesNo05]
					,[CustomsClearanceOrderDetailUserDefinedDateTime01]
					,[CustomsClearanceOrderDetailUserDefinedDateTime02]
					,[CustomsClearanceOrderDetailUserDefinedDateTime03]
					,[CustomsClearanceOrderDetailUserDefinedDateTime04]
					,[CustomsClearanceOrderDetailUserDefinedDateTime05]
					,[CustomsClearanceOrderDetailUserDefinedDateTime06]
					,[CustomsClearanceOrderDetailUserDefinedDateTime07]
					,[CustomsClearanceOrderDetailUserDefinedDateTime09]
					,[CustomsClearanceOrderDetailUserDefinedDateTime10]
					,[CustomsClearanceOrderDetailUserDefinedNumber01]
					,[CustomsClearanceOrderDetailUserDefinedNumber02]
					,[CustomsClearanceOrderDetailUserDefinedNumber03]
					,[CustomsClearanceOrderDetailUserDefinedNumber04]
					,[CustomsClearanceOrderDetailUserDefinedNumber05]
					,[CustomsClearanceOrderDetailUserDefinedLongText01]
					,[CustomsClearanceOrderDetailUserDefinedLongText02]
					,[CustomsClearanceOrderDetailUserDefinedLongText03]
					,[CustomsClearanceOrderDetailUserDefinedLongText04]
					,[CustomsClearanceOrderDetailUserDefinedLongText05]
					,[CustomsClearanceOrderDetailBAFText]
					,[CustomsClearanceOrderDetailBASText]
					,[CustomsClearanceOrderDetailCAFText]
					,[CustomsClearanceOrderDetailInsuranceText]
					,[CustomsClearanceOrderDetailUserDefinedText01]
					,[CustomsClearanceOrderDetailUserDefinedText02]
					,[CustomsClearanceOrderDetailUserDefinedText03]
					,[CustomsClearanceOrderDetailUserDefinedText04]
					,[CustomsClearanceOrderDetailUserDefinedText05]
					,[CustomsClearanceOrderDetailUserDefinedText06]
					,[CustomsClearanceOrderDetailUserDefinedText07]
					,[CustomsClearanceOrderDetailUserDefinedText08]
					,[CustomsClearanceOrderDetailUserDefinedText09]
					,[CustomsClearanceOrderDetailUserDefinedText10]
					,[CustomsClearanceOrderDetailUserDefinedText11]
					,[CustomsClearanceOrderDetailUserDefinedText12]
					,[CustomsClearanceOrderDetailUserDefinedText13]
					,[CustomsClearanceOrderDetailUserDefinedText14]
					,[CustomsClearanceOrderDetailUserDefinedText15]
					,[CustomsClearanceOrderDetailValueText]
					,[CustomsClearanceOrderDetailHSCode]
					,[CustomsClearanceOrderDetailSourceID]
				FROM dbo.CustomsClearanceOrderDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDCustomsClearanceOrderDetail = Src.[IDCustomsClearanceOrderDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.CustomsClearanceOrderID = Src.CustomsClearanceOrderID
						,Dest.CustomsClearanceOrderDetailAddDateTime = Src.CustomsClearanceOrderDetailAddDateTime
						,Dest.CustomsClearanceOrderDetailEditDateTime = Src.CustomsClearanceOrderDetailEditDateTime
						,Dest.CustomsClearanceOrderDetailAddUserCode = Src.CustomsClearanceOrderDetailAddUserCode
						,Dest.CustomsClearanceOrderDetailEditUserCode = Src.CustomsClearanceOrderDetailEditUserCode
						,Dest.CustomsClearanceOrderDetailCBLNumber = Src.CustomsClearanceOrderDetailCBLNumber
						,Dest.CustomsClearanceOrderDetailHBLNumber = Src.CustomsClearanceOrderDetailHBLNumber
						,Dest.CustomsClearanceOrderDetailEquipmentNumber = Src.CustomsClearanceOrderDetailEquipmentNumber
						,Dest.CustomsClearanceOrderDetailEquipmentType = Src.CustomsClearanceOrderDetailEquipmentType
						,Dest.CustomsClearanceOrderDetailEquipmentSize = Src.CustomsClearanceOrderDetailEquipmentSize
						,Dest.CustomsClearanceOrderDetailSeal = Src.CustomsClearanceOrderDetailSeal
						,Dest.CustomsClearanceOrderDetailReleaseNumber = Src.CustomsClearanceOrderDetailReleaseNumber
						,Dest.CustomsClearanceOrderDetailTransportModality = Src.CustomsClearanceOrderDetailTransportModality
						,Dest.CustomsClearanceOrderDetailDeliveryDateTime = Src.CustomsClearanceOrderDetailDeliveryDateTime
						,Dest.CustomsClearanceOrderDetailIsScanned = Src.CustomsClearanceOrderDetailIsScanned
						,Dest.CustomsClearanceOrderDetailScanDateTime = Src.CustomsClearanceOrderDetailScanDateTime
						,Dest.CustomsClearanceOrderDetailIsInspected = Src.CustomsClearanceOrderDetailIsInspected
						,Dest.CustomsClearanceOrderDetailInspectionDateTime = Src.CustomsClearanceOrderDetailInspectionDateTime
						,Dest.CustomsClearanceOrderDetailFileCompleted = Src.CustomsClearanceOrderDetailFileCompleted
						,Dest.CustomsClearanceOrderDetailFileCompletionDateTime = Src.CustomsClearanceOrderDetailFileCompletionDateTime
						,Dest.CustomsClearanceOrderDetailCustomsInformationComplete = Src.CustomsClearanceOrderDetailCustomsInformationComplete
						,Dest.CustomsClearanceOrderDetailCustomsInformationCompletionDateTime = Src.CustomsClearanceOrderDetailCustomsInformationCompletionDateTime
						,Dest.CustomsClearanceOrderDetailIsFumigated = Src.CustomsClearanceOrderDetailIsFumigated
						,Dest.CustomsClearanceOrderDetailFumigationDateTime = Src.CustomsClearanceOrderDetailFumigationDateTime
						,Dest.CustomsClearanceOrderDetailPlaceOfDelivery = Src.CustomsClearanceOrderDetailPlaceOfDelivery
						,Dest.CustomsClearanceOrderDetailCustomsReleaseNumber = Src.CustomsClearanceOrderDetailCustomsReleaseNumber
						,Dest.CustomsClearanceOrderDetailInsurance = Src.CustomsClearanceOrderDetailInsurance
						,Dest.CustomsClearanceOrderDetailBAS = Src.CustomsClearanceOrderDetailBAS
						,Dest.CustomsClearanceOrderDetailBAF = Src.CustomsClearanceOrderDetailBAF
						,Dest.CustomsClearanceOrderDetailCAF = Src.CustomsClearanceOrderDetailCAF
						,Dest.CustomsClearanceOrderDetailValue = Src.CustomsClearanceOrderDetailValue
						,Dest.DocumentOrderID = Src.DocumentOrderID
						,Dest.CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture = Src.CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture
						,Dest.CustomsClearanceOrderDetailEstimatedDateTimeOfArrival = Src.CustomsClearanceOrderDetailEstimatedDateTimeOfArrival
						,Dest.CustomsClearanceOrderDetailActualDateTimeOfDeparture = Src.CustomsClearanceOrderDetailActualDateTimeOfDeparture
						,Dest.CustomsClearanceOrderDetailActualDateTimeOfArrival = Src.CustomsClearanceOrderDetailActualDateTimeOfArrival
						,Dest.CustomsClearanceOrderDetailDocumentStatusDisplayName = Src.CustomsClearanceOrderDetailDocumentStatusDisplayName
						,Dest.CustomsClearanceOrderDetailDocumentStatusDone = Src.CustomsClearanceOrderDetailDocumentStatusDone
						,Dest.CustomsClearanceOrderDetailUserDefinedYesNo01 = Src.CustomsClearanceOrderDetailUserDefinedYesNo01
						,Dest.CustomsClearanceOrderDetailUserDefinedYesNo02 = Src.CustomsClearanceOrderDetailUserDefinedYesNo02
						,Dest.CustomsClearanceOrderDetailUserDefinedYesNo03 = Src.CustomsClearanceOrderDetailUserDefinedYesNo03
						,Dest.CustomsClearanceOrderDetailUserDefinedYesNo04 = Src.CustomsClearanceOrderDetailUserDefinedYesNo04
						,Dest.CustomsClearanceOrderDetailUserDefinedYesNo05 = Src.CustomsClearanceOrderDetailUserDefinedYesNo05
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime01 = Src.CustomsClearanceOrderDetailUserDefinedDateTime01
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime02 = Src.CustomsClearanceOrderDetailUserDefinedDateTime02
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime03 = Src.CustomsClearanceOrderDetailUserDefinedDateTime03
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime04 = Src.CustomsClearanceOrderDetailUserDefinedDateTime04
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime05 = Src.CustomsClearanceOrderDetailUserDefinedDateTime05
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime06 = Src.CustomsClearanceOrderDetailUserDefinedDateTime06
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime07 = Src.CustomsClearanceOrderDetailUserDefinedDateTime07
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime09 = Src.CustomsClearanceOrderDetailUserDefinedDateTime09
						,Dest.CustomsClearanceOrderDetailUserDefinedDateTime10 = Src.CustomsClearanceOrderDetailUserDefinedDateTime10
						,Dest.CustomsClearanceOrderDetailUserDefinedNumber01 = Src.CustomsClearanceOrderDetailUserDefinedNumber01
						,Dest.CustomsClearanceOrderDetailUserDefinedNumber02 = Src.CustomsClearanceOrderDetailUserDefinedNumber02
						,Dest.CustomsClearanceOrderDetailUserDefinedNumber03 = Src.CustomsClearanceOrderDetailUserDefinedNumber03
						,Dest.CustomsClearanceOrderDetailUserDefinedNumber04 = Src.CustomsClearanceOrderDetailUserDefinedNumber04
						,Dest.CustomsClearanceOrderDetailUserDefinedNumber05 = Src.CustomsClearanceOrderDetailUserDefinedNumber05
						,Dest.CustomsClearanceOrderDetailUserDefinedLongText01 = Src.CustomsClearanceOrderDetailUserDefinedLongText01
						,Dest.CustomsClearanceOrderDetailUserDefinedLongText02 = Src.CustomsClearanceOrderDetailUserDefinedLongText02
						,Dest.CustomsClearanceOrderDetailUserDefinedLongText03 = Src.CustomsClearanceOrderDetailUserDefinedLongText03
						,Dest.CustomsClearanceOrderDetailUserDefinedLongText04 = Src.CustomsClearanceOrderDetailUserDefinedLongText04
						,Dest.CustomsClearanceOrderDetailUserDefinedLongText05 = Src.CustomsClearanceOrderDetailUserDefinedLongText05
						,Dest.CustomsClearanceOrderDetailBAFText = Src.CustomsClearanceOrderDetailBAFText
						,Dest.CustomsClearanceOrderDetailBASText = Src.CustomsClearanceOrderDetailBASText
						,Dest.CustomsClearanceOrderDetailCAFText = Src.CustomsClearanceOrderDetailCAFText
						,Dest.CustomsClearanceOrderDetailInsuranceText = Src.CustomsClearanceOrderDetailInsuranceText
						,Dest.CustomsClearanceOrderDetailUserDefinedText01 = Src.CustomsClearanceOrderDetailUserDefinedText01
						,Dest.CustomsClearanceOrderDetailUserDefinedText02 = Src.CustomsClearanceOrderDetailUserDefinedText02
						,Dest.CustomsClearanceOrderDetailUserDefinedText03 = Src.CustomsClearanceOrderDetailUserDefinedText03
						,Dest.CustomsClearanceOrderDetailUserDefinedText04 = Src.CustomsClearanceOrderDetailUserDefinedText04
						,Dest.CustomsClearanceOrderDetailUserDefinedText05 = Src.CustomsClearanceOrderDetailUserDefinedText05
						,Dest.CustomsClearanceOrderDetailUserDefinedText06 = Src.CustomsClearanceOrderDetailUserDefinedText06
						,Dest.CustomsClearanceOrderDetailUserDefinedText07 = Src.CustomsClearanceOrderDetailUserDefinedText07
						,Dest.CustomsClearanceOrderDetailUserDefinedText08 = Src.CustomsClearanceOrderDetailUserDefinedText08
						,Dest.CustomsClearanceOrderDetailUserDefinedText09 = Src.CustomsClearanceOrderDetailUserDefinedText09
						,Dest.CustomsClearanceOrderDetailUserDefinedText10 = Src.CustomsClearanceOrderDetailUserDefinedText10
						,Dest.CustomsClearanceOrderDetailUserDefinedText11 = Src.CustomsClearanceOrderDetailUserDefinedText11
						,Dest.CustomsClearanceOrderDetailUserDefinedText12 = Src.CustomsClearanceOrderDetailUserDefinedText12
						,Dest.CustomsClearanceOrderDetailUserDefinedText13 = Src.CustomsClearanceOrderDetailUserDefinedText13
						,Dest.CustomsClearanceOrderDetailUserDefinedText14 = Src.CustomsClearanceOrderDetailUserDefinedText14
						,Dest.CustomsClearanceOrderDetailUserDefinedText15 = Src.CustomsClearanceOrderDetailUserDefinedText15
						,Dest.CustomsClearanceOrderDetailValueText = Src.CustomsClearanceOrderDetailValueText
						,Dest.CustomsClearanceOrderDetailHSCode = Src.CustomsClearanceOrderDetailHSCode
						,Dest.CustomsClearanceOrderDetailSourceID = Src.CustomsClearanceOrderDetailSourceID
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCustomsClearanceOrderDetail]
						,[CustomsClearanceOrderID]
						,[CustomsClearanceOrderDetailAddDateTime]
						,[CustomsClearanceOrderDetailEditDateTime]
						,[CustomsClearanceOrderDetailAddUserCode]
						,[CustomsClearanceOrderDetailEditUserCode]
						,[CustomsClearanceOrderDetailCBLNumber]
						,[CustomsClearanceOrderDetailHBLNumber]
						,[CustomsClearanceOrderDetailEquipmentNumber]
						,[CustomsClearanceOrderDetailEquipmentType]
						,[CustomsClearanceOrderDetailEquipmentSize]
						,[CustomsClearanceOrderDetailSeal]
						,[CustomsClearanceOrderDetailReleaseNumber]
						,[CustomsClearanceOrderDetailTransportModality]
						,[CustomsClearanceOrderDetailDeliveryDateTime]
						,[CustomsClearanceOrderDetailIsScanned]
						,[CustomsClearanceOrderDetailScanDateTime]
						,[CustomsClearanceOrderDetailIsInspected]
						,[CustomsClearanceOrderDetailInspectionDateTime]
						,[CustomsClearanceOrderDetailFileCompleted]
						,[CustomsClearanceOrderDetailFileCompletionDateTime]
						,[CustomsClearanceOrderDetailCustomsInformationComplete]
						,[CustomsClearanceOrderDetailCustomsInformationCompletionDateTime]
						,[CustomsClearanceOrderDetailIsFumigated]
						,[CustomsClearanceOrderDetailFumigationDateTime]
						,[CustomsClearanceOrderDetailPlaceOfDelivery]
						,[CustomsClearanceOrderDetailCustomsReleaseNumber]
						,[CustomsClearanceOrderDetailInsurance]
						,[CustomsClearanceOrderDetailBAS]
						,[CustomsClearanceOrderDetailBAF]
						,[CustomsClearanceOrderDetailCAF]
						,[CustomsClearanceOrderDetailValue]
						,[DocumentOrderID]
						,[CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture]
						,[CustomsClearanceOrderDetailEstimatedDateTimeOfArrival]
						,[CustomsClearanceOrderDetailActualDateTimeOfDeparture]
						,[CustomsClearanceOrderDetailActualDateTimeOfArrival]
						,[CustomsClearanceOrderDetailDocumentStatusDisplayName]
						,[CustomsClearanceOrderDetailDocumentStatusDone]
						,[CustomsClearanceOrderDetailUserDefinedYesNo01]
						,[CustomsClearanceOrderDetailUserDefinedYesNo02]
						,[CustomsClearanceOrderDetailUserDefinedYesNo03]
						,[CustomsClearanceOrderDetailUserDefinedYesNo04]
						,[CustomsClearanceOrderDetailUserDefinedYesNo05]
						,[CustomsClearanceOrderDetailUserDefinedDateTime01]
						,[CustomsClearanceOrderDetailUserDefinedDateTime02]
						,[CustomsClearanceOrderDetailUserDefinedDateTime03]
						,[CustomsClearanceOrderDetailUserDefinedDateTime04]
						,[CustomsClearanceOrderDetailUserDefinedDateTime05]
						,[CustomsClearanceOrderDetailUserDefinedDateTime06]
						,[CustomsClearanceOrderDetailUserDefinedDateTime07]
						,[CustomsClearanceOrderDetailUserDefinedDateTime09]
						,[CustomsClearanceOrderDetailUserDefinedDateTime10]
						,[CustomsClearanceOrderDetailUserDefinedNumber01]
						,[CustomsClearanceOrderDetailUserDefinedNumber02]
						,[CustomsClearanceOrderDetailUserDefinedNumber03]
						,[CustomsClearanceOrderDetailUserDefinedNumber04]
						,[CustomsClearanceOrderDetailUserDefinedNumber05]
						,[CustomsClearanceOrderDetailUserDefinedLongText01]
						,[CustomsClearanceOrderDetailUserDefinedLongText02]
						,[CustomsClearanceOrderDetailUserDefinedLongText03]
						,[CustomsClearanceOrderDetailUserDefinedLongText04]
						,[CustomsClearanceOrderDetailUserDefinedLongText05]
						,[CustomsClearanceOrderDetailBAFText]
						,[CustomsClearanceOrderDetailBASText]
						,[CustomsClearanceOrderDetailCAFText]
						,[CustomsClearanceOrderDetailInsuranceText]
						,[CustomsClearanceOrderDetailUserDefinedText01]
						,[CustomsClearanceOrderDetailUserDefinedText02]
						,[CustomsClearanceOrderDetailUserDefinedText03]
						,[CustomsClearanceOrderDetailUserDefinedText04]
						,[CustomsClearanceOrderDetailUserDefinedText05]
						,[CustomsClearanceOrderDetailUserDefinedText06]
						,[CustomsClearanceOrderDetailUserDefinedText07]
						,[CustomsClearanceOrderDetailUserDefinedText08]
						,[CustomsClearanceOrderDetailUserDefinedText09]
						,[CustomsClearanceOrderDetailUserDefinedText10]
						,[CustomsClearanceOrderDetailUserDefinedText11]
						,[CustomsClearanceOrderDetailUserDefinedText12]
						,[CustomsClearanceOrderDetailUserDefinedText13]
						,[CustomsClearanceOrderDetailUserDefinedText14]
						,[CustomsClearanceOrderDetailUserDefinedText15]
						,[CustomsClearanceOrderDetailValueText]
						,[CustomsClearanceOrderDetailHSCode]
						,[CustomsClearanceOrderDetailSourceID]
						)
					VALUES (
						Src.[IDCustomsClearanceOrderDetail]
						,Src.[CustomsClearanceOrderID]
						,Src.[CustomsClearanceOrderDetailAddDateTime]
						,Src.[CustomsClearanceOrderDetailEditDateTime]
						,Src.[CustomsClearanceOrderDetailAddUserCode]
						,Src.[CustomsClearanceOrderDetailEditUserCode]
						,Src.[CustomsClearanceOrderDetailCBLNumber]
						,Src.[CustomsClearanceOrderDetailHBLNumber]
						,Src.[CustomsClearanceOrderDetailEquipmentNumber]
						,Src.[CustomsClearanceOrderDetailEquipmentType]
						,Src.[CustomsClearanceOrderDetailEquipmentSize]
						,Src.[CustomsClearanceOrderDetailSeal]
						,Src.[CustomsClearanceOrderDetailReleaseNumber]
						,Src.[CustomsClearanceOrderDetailTransportModality]
						,Src.[CustomsClearanceOrderDetailDeliveryDateTime]
						,Src.[CustomsClearanceOrderDetailIsScanned]
						,Src.[CustomsClearanceOrderDetailScanDateTime]
						,Src.[CustomsClearanceOrderDetailIsInspected]
						,Src.[CustomsClearanceOrderDetailInspectionDateTime]
						,Src.[CustomsClearanceOrderDetailFileCompleted]
						,Src.[CustomsClearanceOrderDetailFileCompletionDateTime]
						,Src.[CustomsClearanceOrderDetailCustomsInformationComplete]
						,Src.[CustomsClearanceOrderDetailCustomsInformationCompletionDateTime]
						,Src.[CustomsClearanceOrderDetailIsFumigated]
						,Src.[CustomsClearanceOrderDetailFumigationDateTime]
						,Src.[CustomsClearanceOrderDetailPlaceOfDelivery]
						,Src.[CustomsClearanceOrderDetailCustomsReleaseNumber]
						,Src.[CustomsClearanceOrderDetailInsurance]
						,Src.[CustomsClearanceOrderDetailBAS]
						,Src.[CustomsClearanceOrderDetailBAF]
						,Src.[CustomsClearanceOrderDetailCAF]
						,Src.[CustomsClearanceOrderDetailValue]
						,Src.[DocumentOrderID]
						,Src.[CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture]
						,Src.[CustomsClearanceOrderDetailEstimatedDateTimeOfArrival]
						,Src.[CustomsClearanceOrderDetailActualDateTimeOfDeparture]
						,Src.[CustomsClearanceOrderDetailActualDateTimeOfArrival]
						,Src.[CustomsClearanceOrderDetailDocumentStatusDisplayName]
						,Src.[CustomsClearanceOrderDetailDocumentStatusDone]
						,Src.[CustomsClearanceOrderDetailUserDefinedYesNo01]
						,Src.[CustomsClearanceOrderDetailUserDefinedYesNo02]
						,Src.[CustomsClearanceOrderDetailUserDefinedYesNo03]
						,Src.[CustomsClearanceOrderDetailUserDefinedYesNo04]
						,Src.[CustomsClearanceOrderDetailUserDefinedYesNo05]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime01]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime02]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime03]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime04]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime05]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime06]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime07]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime09]
						,Src.[CustomsClearanceOrderDetailUserDefinedDateTime10]
						,Src.[CustomsClearanceOrderDetailUserDefinedNumber01]
						,Src.[CustomsClearanceOrderDetailUserDefinedNumber02]
						,Src.[CustomsClearanceOrderDetailUserDefinedNumber03]
						,Src.[CustomsClearanceOrderDetailUserDefinedNumber04]
						,Src.[CustomsClearanceOrderDetailUserDefinedNumber05]
						,Src.[CustomsClearanceOrderDetailUserDefinedLongText01]
						,Src.[CustomsClearanceOrderDetailUserDefinedLongText02]
						,Src.[CustomsClearanceOrderDetailUserDefinedLongText03]
						,Src.[CustomsClearanceOrderDetailUserDefinedLongText04]
						,Src.[CustomsClearanceOrderDetailUserDefinedLongText05]
						,Src.[CustomsClearanceOrderDetailBAFText]
						,Src.[CustomsClearanceOrderDetailBASText]
						,Src.[CustomsClearanceOrderDetailCAFText]
						,Src.[CustomsClearanceOrderDetailInsuranceText]
						,Src.[CustomsClearanceOrderDetailUserDefinedText01]
						,Src.[CustomsClearanceOrderDetailUserDefinedText02]
						,Src.[CustomsClearanceOrderDetailUserDefinedText03]
						,Src.[CustomsClearanceOrderDetailUserDefinedText04]
						,Src.[CustomsClearanceOrderDetailUserDefinedText05]
						,Src.[CustomsClearanceOrderDetailUserDefinedText06]
						,Src.[CustomsClearanceOrderDetailUserDefinedText07]
						,Src.[CustomsClearanceOrderDetailUserDefinedText08]
						,Src.[CustomsClearanceOrderDetailUserDefinedText09]
						,Src.[CustomsClearanceOrderDetailUserDefinedText10]
						,Src.[CustomsClearanceOrderDetailUserDefinedText11]
						,Src.[CustomsClearanceOrderDetailUserDefinedText12]
						,Src.[CustomsClearanceOrderDetailUserDefinedText13]
						,Src.[CustomsClearanceOrderDetailUserDefinedText14]
						,Src.[CustomsClearanceOrderDetailUserDefinedText15]
						,Src.[CustomsClearanceOrderDetailValueText]
						,Src.[CustomsClearanceOrderDetailHSCode]
						,Src.[CustomsClearanceOrderDetailSourceID]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCustomsClearanceOrderDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCustomsClearanceOrderDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceOrderDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderDetails Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderDetail = Dest.IDCustomsClearanceOrderDetail
					WHERE Dest.[CustomsClearanceOrderDetailEditDateTime] < Src.[CustomsClearanceOrderDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.CustomsClearanceOrderID = Src.CustomsClearanceOrderID
					,Dest.CustomsClearanceOrderDetailAddDateTime = Src.CustomsClearanceOrderDetailAddDateTime
					,Dest.CustomsClearanceOrderDetailEditDateTime = Src.CustomsClearanceOrderDetailEditDateTime
					,Dest.CustomsClearanceOrderDetailAddUserCode = Src.CustomsClearanceOrderDetailAddUserCode
					,Dest.CustomsClearanceOrderDetailEditUserCode = Src.CustomsClearanceOrderDetailEditUserCode
					,Dest.CustomsClearanceOrderDetailCBLNumber = Src.CustomsClearanceOrderDetailCBLNumber
					,Dest.CustomsClearanceOrderDetailHBLNumber = Src.CustomsClearanceOrderDetailHBLNumber
					,Dest.CustomsClearanceOrderDetailEquipmentNumber = Src.CustomsClearanceOrderDetailEquipmentNumber
					,Dest.CustomsClearanceOrderDetailEquipmentType = Src.CustomsClearanceOrderDetailEquipmentType
					,Dest.CustomsClearanceOrderDetailEquipmentSize = Src.CustomsClearanceOrderDetailEquipmentSize
					,Dest.CustomsClearanceOrderDetailSeal = Src.CustomsClearanceOrderDetailSeal
					,Dest.CustomsClearanceOrderDetailReleaseNumber = Src.CustomsClearanceOrderDetailReleaseNumber
					,Dest.CustomsClearanceOrderDetailTransportModality = Src.CustomsClearanceOrderDetailTransportModality
					,Dest.CustomsClearanceOrderDetailDeliveryDateTime = Src.CustomsClearanceOrderDetailDeliveryDateTime
					,Dest.CustomsClearanceOrderDetailIsScanned = Src.CustomsClearanceOrderDetailIsScanned
					,Dest.CustomsClearanceOrderDetailScanDateTime = Src.CustomsClearanceOrderDetailScanDateTime
					,Dest.CustomsClearanceOrderDetailIsInspected = Src.CustomsClearanceOrderDetailIsInspected
					,Dest.CustomsClearanceOrderDetailInspectionDateTime = Src.CustomsClearanceOrderDetailInspectionDateTime
					,Dest.CustomsClearanceOrderDetailFileCompleted = Src.CustomsClearanceOrderDetailFileCompleted
					,Dest.CustomsClearanceOrderDetailFileCompletionDateTime = Src.CustomsClearanceOrderDetailFileCompletionDateTime
					,Dest.CustomsClearanceOrderDetailCustomsInformationComplete = Src.CustomsClearanceOrderDetailCustomsInformationComplete
					,Dest.CustomsClearanceOrderDetailCustomsInformationCompletionDateTime = Src.CustomsClearanceOrderDetailCustomsInformationCompletionDateTime
					,Dest.CustomsClearanceOrderDetailIsFumigated = Src.CustomsClearanceOrderDetailIsFumigated
					,Dest.CustomsClearanceOrderDetailFumigationDateTime = Src.CustomsClearanceOrderDetailFumigationDateTime
					,Dest.CustomsClearanceOrderDetailPlaceOfDelivery = Src.CustomsClearanceOrderDetailPlaceOfDelivery
					,Dest.CustomsClearanceOrderDetailCustomsReleaseNumber = Src.CustomsClearanceOrderDetailCustomsReleaseNumber
					,Dest.CustomsClearanceOrderDetailInsurance = Src.CustomsClearanceOrderDetailInsurance
					,Dest.CustomsClearanceOrderDetailBAS = Src.CustomsClearanceOrderDetailBAS
					,Dest.CustomsClearanceOrderDetailBAF = Src.CustomsClearanceOrderDetailBAF
					,Dest.CustomsClearanceOrderDetailCAF = Src.CustomsClearanceOrderDetailCAF
					,Dest.CustomsClearanceOrderDetailValue = Src.CustomsClearanceOrderDetailValue
					,Dest.DocumentOrderID = Src.DocumentOrderID
					,Dest.CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture = Src.CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture
					,Dest.CustomsClearanceOrderDetailEstimatedDateTimeOfArrival = Src.CustomsClearanceOrderDetailEstimatedDateTimeOfArrival
					,Dest.CustomsClearanceOrderDetailActualDateTimeOfDeparture = Src.CustomsClearanceOrderDetailActualDateTimeOfDeparture
					,Dest.CustomsClearanceOrderDetailActualDateTimeOfArrival = Src.CustomsClearanceOrderDetailActualDateTimeOfArrival
					,Dest.CustomsClearanceOrderDetailDocumentStatusDisplayName = Src.CustomsClearanceOrderDetailDocumentStatusDisplayName
					,Dest.CustomsClearanceOrderDetailDocumentStatusDone = Src.CustomsClearanceOrderDetailDocumentStatusDone
					,Dest.CustomsClearanceOrderDetailUserDefinedYesNo01 = Src.CustomsClearanceOrderDetailUserDefinedYesNo01
					,Dest.CustomsClearanceOrderDetailUserDefinedYesNo02 = Src.CustomsClearanceOrderDetailUserDefinedYesNo02
					,Dest.CustomsClearanceOrderDetailUserDefinedYesNo03 = Src.CustomsClearanceOrderDetailUserDefinedYesNo03
					,Dest.CustomsClearanceOrderDetailUserDefinedYesNo04 = Src.CustomsClearanceOrderDetailUserDefinedYesNo04
					,Dest.CustomsClearanceOrderDetailUserDefinedYesNo05 = Src.CustomsClearanceOrderDetailUserDefinedYesNo05
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime01 = Src.CustomsClearanceOrderDetailUserDefinedDateTime01
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime02 = Src.CustomsClearanceOrderDetailUserDefinedDateTime02
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime03 = Src.CustomsClearanceOrderDetailUserDefinedDateTime03
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime04 = Src.CustomsClearanceOrderDetailUserDefinedDateTime04
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime05 = Src.CustomsClearanceOrderDetailUserDefinedDateTime05
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime06 = Src.CustomsClearanceOrderDetailUserDefinedDateTime06
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime07 = Src.CustomsClearanceOrderDetailUserDefinedDateTime07
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime09 = Src.CustomsClearanceOrderDetailUserDefinedDateTime09
					,Dest.CustomsClearanceOrderDetailUserDefinedDateTime10 = Src.CustomsClearanceOrderDetailUserDefinedDateTime10
					,Dest.CustomsClearanceOrderDetailUserDefinedNumber01 = Src.CustomsClearanceOrderDetailUserDefinedNumber01
					,Dest.CustomsClearanceOrderDetailUserDefinedNumber02 = Src.CustomsClearanceOrderDetailUserDefinedNumber02
					,Dest.CustomsClearanceOrderDetailUserDefinedNumber03 = Src.CustomsClearanceOrderDetailUserDefinedNumber03
					,Dest.CustomsClearanceOrderDetailUserDefinedNumber04 = Src.CustomsClearanceOrderDetailUserDefinedNumber04
					,Dest.CustomsClearanceOrderDetailUserDefinedNumber05 = Src.CustomsClearanceOrderDetailUserDefinedNumber05
					,Dest.CustomsClearanceOrderDetailUserDefinedLongText01 = Src.CustomsClearanceOrderDetailUserDefinedLongText01
					,Dest.CustomsClearanceOrderDetailUserDefinedLongText02 = Src.CustomsClearanceOrderDetailUserDefinedLongText02
					,Dest.CustomsClearanceOrderDetailUserDefinedLongText03 = Src.CustomsClearanceOrderDetailUserDefinedLongText03
					,Dest.CustomsClearanceOrderDetailUserDefinedLongText04 = Src.CustomsClearanceOrderDetailUserDefinedLongText04
					,Dest.CustomsClearanceOrderDetailUserDefinedLongText05 = Src.CustomsClearanceOrderDetailUserDefinedLongText05
					,Dest.CustomsClearanceOrderDetailBAFText = Src.CustomsClearanceOrderDetailBAFText
					,Dest.CustomsClearanceOrderDetailBASText = Src.CustomsClearanceOrderDetailBASText
					,Dest.CustomsClearanceOrderDetailCAFText = Src.CustomsClearanceOrderDetailCAFText
					,Dest.CustomsClearanceOrderDetailInsuranceText = Src.CustomsClearanceOrderDetailInsuranceText
					,Dest.CustomsClearanceOrderDetailUserDefinedText01 = Src.CustomsClearanceOrderDetailUserDefinedText01
					,Dest.CustomsClearanceOrderDetailUserDefinedText02 = Src.CustomsClearanceOrderDetailUserDefinedText02
					,Dest.CustomsClearanceOrderDetailUserDefinedText03 = Src.CustomsClearanceOrderDetailUserDefinedText03
					,Dest.CustomsClearanceOrderDetailUserDefinedText04 = Src.CustomsClearanceOrderDetailUserDefinedText04
					,Dest.CustomsClearanceOrderDetailUserDefinedText05 = Src.CustomsClearanceOrderDetailUserDefinedText05
					,Dest.CustomsClearanceOrderDetailUserDefinedText06 = Src.CustomsClearanceOrderDetailUserDefinedText06
					,Dest.CustomsClearanceOrderDetailUserDefinedText07 = Src.CustomsClearanceOrderDetailUserDefinedText07
					,Dest.CustomsClearanceOrderDetailUserDefinedText08 = Src.CustomsClearanceOrderDetailUserDefinedText08
					,Dest.CustomsClearanceOrderDetailUserDefinedText09 = Src.CustomsClearanceOrderDetailUserDefinedText09
					,Dest.CustomsClearanceOrderDetailUserDefinedText10 = Src.CustomsClearanceOrderDetailUserDefinedText10
					,Dest.CustomsClearanceOrderDetailUserDefinedText11 = Src.CustomsClearanceOrderDetailUserDefinedText11
					,Dest.CustomsClearanceOrderDetailUserDefinedText12 = Src.CustomsClearanceOrderDetailUserDefinedText12
					,Dest.CustomsClearanceOrderDetailUserDefinedText13 = Src.CustomsClearanceOrderDetailUserDefinedText13
					,Dest.CustomsClearanceOrderDetailUserDefinedText14 = Src.CustomsClearanceOrderDetailUserDefinedText14
					,Dest.CustomsClearanceOrderDetailUserDefinedText15 = Src.CustomsClearanceOrderDetailUserDefinedText15
					,Dest.CustomsClearanceOrderDetailValueText = Src.CustomsClearanceOrderDetailValueText
					,Dest.CustomsClearanceOrderDetailHSCode = Src.CustomsClearanceOrderDetailHSCode
					,Dest.CustomsClearanceOrderDetailSourceID = Src.CustomsClearanceOrderDetailSourceID
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCustomsClearanceOrderDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCustomsClearanceOrderDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CustomsClearanceOrderDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderDetails Dest ON Src.IDCustomsClearanceOrderDetail = Dest.IDCustomsClearanceOrderDetail
				WHERE Dest.[CustomsClearanceOrderDetailEditDateTime] < Src.[CustomsClearanceOrderDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceOrderDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderDetails Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderDetail = Dest.IDCustomsClearanceOrderDetail
					WHERE Dest.IDCustomsClearanceOrderDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderDetails (
					[IDCustomsClearanceOrderDetail]
					,[CustomsClearanceOrderID]
					,[CustomsClearanceOrderDetailAddDateTime]
					,[CustomsClearanceOrderDetailEditDateTime]
					,[CustomsClearanceOrderDetailAddUserCode]
					,[CustomsClearanceOrderDetailEditUserCode]
					,[CustomsClearanceOrderDetailCBLNumber]
					,[CustomsClearanceOrderDetailHBLNumber]
					,[CustomsClearanceOrderDetailEquipmentNumber]
					,[CustomsClearanceOrderDetailEquipmentType]
					,[CustomsClearanceOrderDetailEquipmentSize]
					,[CustomsClearanceOrderDetailSeal]
					,[CustomsClearanceOrderDetailReleaseNumber]
					,[CustomsClearanceOrderDetailTransportModality]
					,[CustomsClearanceOrderDetailDeliveryDateTime]
					,[CustomsClearanceOrderDetailIsScanned]
					,[CustomsClearanceOrderDetailScanDateTime]
					,[CustomsClearanceOrderDetailIsInspected]
					,[CustomsClearanceOrderDetailInspectionDateTime]
					,[CustomsClearanceOrderDetailFileCompleted]
					,[CustomsClearanceOrderDetailFileCompletionDateTime]
					,[CustomsClearanceOrderDetailCustomsInformationComplete]
					,[CustomsClearanceOrderDetailCustomsInformationCompletionDateTime]
					,[CustomsClearanceOrderDetailIsFumigated]
					,[CustomsClearanceOrderDetailFumigationDateTime]
					,[CustomsClearanceOrderDetailPlaceOfDelivery]
					,[CustomsClearanceOrderDetailCustomsReleaseNumber]
					,[CustomsClearanceOrderDetailInsurance]
					,[CustomsClearanceOrderDetailBAS]
					,[CustomsClearanceOrderDetailBAF]
					,[CustomsClearanceOrderDetailCAF]
					,[CustomsClearanceOrderDetailValue]
					,[DocumentOrderID]
					,[CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture]
					,[CustomsClearanceOrderDetailEstimatedDateTimeOfArrival]
					,[CustomsClearanceOrderDetailActualDateTimeOfDeparture]
					,[CustomsClearanceOrderDetailActualDateTimeOfArrival]
					,[CustomsClearanceOrderDetailDocumentStatusDisplayName]
					,[CustomsClearanceOrderDetailDocumentStatusDone]
					,[CustomsClearanceOrderDetailUserDefinedYesNo01]
					,[CustomsClearanceOrderDetailUserDefinedYesNo02]
					,[CustomsClearanceOrderDetailUserDefinedYesNo03]
					,[CustomsClearanceOrderDetailUserDefinedYesNo04]
					,[CustomsClearanceOrderDetailUserDefinedYesNo05]
					,[CustomsClearanceOrderDetailUserDefinedDateTime01]
					,[CustomsClearanceOrderDetailUserDefinedDateTime02]
					,[CustomsClearanceOrderDetailUserDefinedDateTime03]
					,[CustomsClearanceOrderDetailUserDefinedDateTime04]
					,[CustomsClearanceOrderDetailUserDefinedDateTime05]
					,[CustomsClearanceOrderDetailUserDefinedDateTime06]
					,[CustomsClearanceOrderDetailUserDefinedDateTime07]
					,[CustomsClearanceOrderDetailUserDefinedDateTime09]
					,[CustomsClearanceOrderDetailUserDefinedDateTime10]
					,[CustomsClearanceOrderDetailUserDefinedNumber01]
					,[CustomsClearanceOrderDetailUserDefinedNumber02]
					,[CustomsClearanceOrderDetailUserDefinedNumber03]
					,[CustomsClearanceOrderDetailUserDefinedNumber04]
					,[CustomsClearanceOrderDetailUserDefinedNumber05]
					,[CustomsClearanceOrderDetailUserDefinedLongText01]
					,[CustomsClearanceOrderDetailUserDefinedLongText02]
					,[CustomsClearanceOrderDetailUserDefinedLongText03]
					,[CustomsClearanceOrderDetailUserDefinedLongText04]
					,[CustomsClearanceOrderDetailUserDefinedLongText05]
					,[CustomsClearanceOrderDetailBAFText]
					,[CustomsClearanceOrderDetailBASText]
					,[CustomsClearanceOrderDetailCAFText]
					,[CustomsClearanceOrderDetailInsuranceText]
					,[CustomsClearanceOrderDetailUserDefinedText01]
					,[CustomsClearanceOrderDetailUserDefinedText02]
					,[CustomsClearanceOrderDetailUserDefinedText03]
					,[CustomsClearanceOrderDetailUserDefinedText04]
					,[CustomsClearanceOrderDetailUserDefinedText05]
					,[CustomsClearanceOrderDetailUserDefinedText06]
					,[CustomsClearanceOrderDetailUserDefinedText07]
					,[CustomsClearanceOrderDetailUserDefinedText08]
					,[CustomsClearanceOrderDetailUserDefinedText09]
					,[CustomsClearanceOrderDetailUserDefinedText10]
					,[CustomsClearanceOrderDetailUserDefinedText11]
					,[CustomsClearanceOrderDetailUserDefinedText12]
					,[CustomsClearanceOrderDetailUserDefinedText13]
					,[CustomsClearanceOrderDetailUserDefinedText14]
					,[CustomsClearanceOrderDetailUserDefinedText15]
					,[CustomsClearanceOrderDetailValueText]
					,[CustomsClearanceOrderDetailHSCode]
					,[CustomsClearanceOrderDetailSourceID]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCustomsClearanceOrderDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCustomsClearanceOrderDetail]
					,Src.[CustomsClearanceOrderID]
					,Src.[CustomsClearanceOrderDetailAddDateTime]
					,Src.[CustomsClearanceOrderDetailEditDateTime]
					,Src.[CustomsClearanceOrderDetailAddUserCode]
					,Src.[CustomsClearanceOrderDetailEditUserCode]
					,Src.[CustomsClearanceOrderDetailCBLNumber]
					,Src.[CustomsClearanceOrderDetailHBLNumber]
					,Src.[CustomsClearanceOrderDetailEquipmentNumber]
					,Src.[CustomsClearanceOrderDetailEquipmentType]
					,Src.[CustomsClearanceOrderDetailEquipmentSize]
					,Src.[CustomsClearanceOrderDetailSeal]
					,Src.[CustomsClearanceOrderDetailReleaseNumber]
					,Src.[CustomsClearanceOrderDetailTransportModality]
					,Src.[CustomsClearanceOrderDetailDeliveryDateTime]
					,Src.[CustomsClearanceOrderDetailIsScanned]
					,Src.[CustomsClearanceOrderDetailScanDateTime]
					,Src.[CustomsClearanceOrderDetailIsInspected]
					,Src.[CustomsClearanceOrderDetailInspectionDateTime]
					,Src.[CustomsClearanceOrderDetailFileCompleted]
					,Src.[CustomsClearanceOrderDetailFileCompletionDateTime]
					,Src.[CustomsClearanceOrderDetailCustomsInformationComplete]
					,Src.[CustomsClearanceOrderDetailCustomsInformationCompletionDateTime]
					,Src.[CustomsClearanceOrderDetailIsFumigated]
					,Src.[CustomsClearanceOrderDetailFumigationDateTime]
					,Src.[CustomsClearanceOrderDetailPlaceOfDelivery]
					,Src.[CustomsClearanceOrderDetailCustomsReleaseNumber]
					,Src.[CustomsClearanceOrderDetailInsurance]
					,Src.[CustomsClearanceOrderDetailBAS]
					,Src.[CustomsClearanceOrderDetailBAF]
					,Src.[CustomsClearanceOrderDetailCAF]
					,Src.[CustomsClearanceOrderDetailValue]
					,Src.[DocumentOrderID]
					,Src.[CustomsClearanceOrderDetailEstimatedDateTimeOfDeparture]
					,Src.[CustomsClearanceOrderDetailEstimatedDateTimeOfArrival]
					,Src.[CustomsClearanceOrderDetailActualDateTimeOfDeparture]
					,Src.[CustomsClearanceOrderDetailActualDateTimeOfArrival]
					,Src.[CustomsClearanceOrderDetailDocumentStatusDisplayName]
					,Src.[CustomsClearanceOrderDetailDocumentStatusDone]
					,Src.[CustomsClearanceOrderDetailUserDefinedYesNo01]
					,Src.[CustomsClearanceOrderDetailUserDefinedYesNo02]
					,Src.[CustomsClearanceOrderDetailUserDefinedYesNo03]
					,Src.[CustomsClearanceOrderDetailUserDefinedYesNo04]
					,Src.[CustomsClearanceOrderDetailUserDefinedYesNo05]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime01]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime02]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime03]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime04]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime05]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime06]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime07]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime09]
					,Src.[CustomsClearanceOrderDetailUserDefinedDateTime10]
					,Src.[CustomsClearanceOrderDetailUserDefinedNumber01]
					,Src.[CustomsClearanceOrderDetailUserDefinedNumber02]
					,Src.[CustomsClearanceOrderDetailUserDefinedNumber03]
					,Src.[CustomsClearanceOrderDetailUserDefinedNumber04]
					,Src.[CustomsClearanceOrderDetailUserDefinedNumber05]
					,Src.[CustomsClearanceOrderDetailUserDefinedLongText01]
					,Src.[CustomsClearanceOrderDetailUserDefinedLongText02]
					,Src.[CustomsClearanceOrderDetailUserDefinedLongText03]
					,Src.[CustomsClearanceOrderDetailUserDefinedLongText04]
					,Src.[CustomsClearanceOrderDetailUserDefinedLongText05]
					,Src.[CustomsClearanceOrderDetailBAFText]
					,Src.[CustomsClearanceOrderDetailBASText]
					,Src.[CustomsClearanceOrderDetailCAFText]
					,Src.[CustomsClearanceOrderDetailInsuranceText]
					,Src.[CustomsClearanceOrderDetailUserDefinedText01]
					,Src.[CustomsClearanceOrderDetailUserDefinedText02]
					,Src.[CustomsClearanceOrderDetailUserDefinedText03]
					,Src.[CustomsClearanceOrderDetailUserDefinedText04]
					,Src.[CustomsClearanceOrderDetailUserDefinedText05]
					,Src.[CustomsClearanceOrderDetailUserDefinedText06]
					,Src.[CustomsClearanceOrderDetailUserDefinedText07]
					,Src.[CustomsClearanceOrderDetailUserDefinedText08]
					,Src.[CustomsClearanceOrderDetailUserDefinedText09]
					,Src.[CustomsClearanceOrderDetailUserDefinedText10]
					,Src.[CustomsClearanceOrderDetailUserDefinedText11]
					,Src.[CustomsClearanceOrderDetailUserDefinedText12]
					,Src.[CustomsClearanceOrderDetailUserDefinedText13]
					,Src.[CustomsClearanceOrderDetailUserDefinedText14]
					,Src.[CustomsClearanceOrderDetailUserDefinedText15]
					,Src.[CustomsClearanceOrderDetailValueText]
					,Src.[CustomsClearanceOrderDetailHSCode]
					,Src.[CustomsClearanceOrderDetailSourceID]
				FROM [dbo].CustomsClearanceOrderDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderDetails Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderDetail = Dest.IDCustomsClearanceOrderDetail
				WHERE Dest.IDCustomsClearanceOrderDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CustomsClearanceOrderDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CustomsClearanceOrderDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------CustomsClearanceOrderSubDetails
	SET @CurrentTableName = 'CustomsClearanceOrderSubDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderSubDetails AS Dest
			USING (
				SELECT [IDCustomsClearanceOrderSubDetail]
					,[CustomsClearanceOrderDetailID]
					,[CustomsClearanceOrderSubDetailAddDateTime]
					,[CustomsClearanceOrderSubDetailAddUserCode]
					,[CustomsClearanceOrderSubDetailEditDateTime]
					,[CustomsClearanceOrderSubDetailEditUserCode]
					,[CustomsClearanceOrderSubDetailCSNumber]
					,[CustomsClearanceOrderSubDetailFCRNumber]
					,[CustomsClearanceOrderSubDetailPONumber]
					,[CustomsClearanceOrderSubDetailSKUNumber]
					,[CustomsClearanceOrderSubDetailClientReference]
					,[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture]
					,[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival]
					,[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture]
					,[CustomsClearanceOrderSubDetailActualDateTimeOfArrival]
					,[CustomsClearanceOrderSubDetailInvoiceReferenceNumber]
					,[CustomsClearanceOrderSubDetailCommodity]
					,[CustomsClearanceOrderSubDetailDangerousGoods]
					,[CustomsClearanceOrderSubDetailDangerousGoodsDetails]
					,[CustomsClearanceOrderSubDetailQuantity]
					,[CustomsClearanceOrderSubDetailWeight]
					,[CustomsClearanceOrderSubDetailVolume]
					,[CustomsClearanceOrderSubDetailPackages]
					,[CustomsClearanceOrderSubDetailLeg]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo01]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo02]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo03]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo04]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo05]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime01]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime02]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime03]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime04]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime05]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime06]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime07]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime09]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime10]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber01]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber02]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber03]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber04]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber05]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText01]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText02]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText03]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText04]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText05]
					,[CustomsClearanceOrderSubDetailUserDefinedText01]
					,[CustomsClearanceOrderSubDetailUserDefinedText02]
					,[CustomsClearanceOrderSubDetailUserDefinedText03]
					,[CustomsClearanceOrderSubDetailUserDefinedText04]
					,[CustomsClearanceOrderSubDetailUserDefinedText05]
					,[CustomsClearanceOrderSubDetailUserDefinedText06]
					,[CustomsClearanceOrderSubDetailUserDefinedText07]
					,[CustomsClearanceOrderSubDetailUserDefinedText08]
					,[CustomsClearanceOrderSubDetailUserDefinedText09]
					,[CustomsClearanceOrderSubDetailUserDefinedText10]
					,[CustomsClearanceOrderSubDetailUserDefinedText11]
					,[CustomsClearanceOrderSubDetailUserDefinedText12]
					,[CustomsClearanceOrderSubDetailUserDefinedText13]
					,[CustomsClearanceOrderSubDetailUserDefinedText14]
					,[CustomsClearanceOrderSubDetailUserDefinedText15]
				FROM dbo.CustomsClearanceOrderSubDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDCustomsClearanceOrderSubDetail] = Src.[IDCustomsClearanceOrderSubDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CustomsClearanceOrderDetailID] = Src.[CustomsClearanceOrderDetailID]
						,Dest.[CustomsClearanceOrderSubDetailAddDateTime] = Src.[CustomsClearanceOrderSubDetailAddDateTime]
						,Dest.[CustomsClearanceOrderSubDetailAddUserCode] = Src.[CustomsClearanceOrderSubDetailAddUserCode]
						,Dest.[CustomsClearanceOrderSubDetailEditDateTime] = Src.[CustomsClearanceOrderSubDetailEditDateTime]
						,Dest.[CustomsClearanceOrderSubDetailEditUserCode] = Src.[CustomsClearanceOrderSubDetailEditUserCode]
						,Dest.[CustomsClearanceOrderSubDetailCSNumber] = Src.[CustomsClearanceOrderSubDetailCSNumber]
						,Dest.[CustomsClearanceOrderSubDetailFCRNumber] = Src.[CustomsClearanceOrderSubDetailFCRNumber]
						,Dest.[CustomsClearanceOrderSubDetailPONumber] = Src.[CustomsClearanceOrderSubDetailPONumber]
						,Dest.[CustomsClearanceOrderSubDetailSKUNumber] = Src.[CustomsClearanceOrderSubDetailSKUNumber]
						,Dest.[CustomsClearanceOrderSubDetailClientReference] = Src.[CustomsClearanceOrderSubDetailClientReference]
						,Dest.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture] = Src.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture]
						,Dest.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival] = Src.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival]
						,Dest.[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture] = Src.[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture]
						,Dest.[CustomsClearanceOrderSubDetailActualDateTimeOfArrival] = Src.[CustomsClearanceOrderSubDetailActualDateTimeOfArrival]
						,Dest.[CustomsClearanceOrderSubDetailInvoiceReferenceNumber] = Src.[CustomsClearanceOrderSubDetailInvoiceReferenceNumber]
						,Dest.[CustomsClearanceOrderSubDetailCommodity] = Src.[CustomsClearanceOrderSubDetailCommodity]
						,Dest.[CustomsClearanceOrderSubDetailDangerousGoods] = Src.[CustomsClearanceOrderSubDetailDangerousGoods]
						,Dest.[CustomsClearanceOrderSubDetailDangerousGoodsDetails] = Src.[CustomsClearanceOrderSubDetailDangerousGoodsDetails]
						,Dest.[CustomsClearanceOrderSubDetailQuantity] = Src.[CustomsClearanceOrderSubDetailQuantity]
						,Dest.[CustomsClearanceOrderSubDetailWeight] = Src.[CustomsClearanceOrderSubDetailWeight]
						,Dest.[CustomsClearanceOrderSubDetailVolume] = Src.[CustomsClearanceOrderSubDetailVolume]
						,Dest.[CustomsClearanceOrderSubDetailPackages] = Src.[CustomsClearanceOrderSubDetailPackages]
						,Dest.[CustomsClearanceOrderSubDetailLeg] = Src.[CustomsClearanceOrderSubDetailLeg]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo01] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo01]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo02] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo02]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo03] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo03]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo04] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo04]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo05] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo05]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime01] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime01]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime02] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime02]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime03] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime03]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime04] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime04]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime05] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime05]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime06] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime06]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime07] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime07]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime09] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime09]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime10] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime10]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber01] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber01]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber02] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber02]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber03] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber03]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber04] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber04]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber05] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber05]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText01] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText01]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText02] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText02]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText03] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText03]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText04] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText04]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText05] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText05]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText01] = Src.[CustomsClearanceOrderSubDetailUserDefinedText01]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText02] = Src.[CustomsClearanceOrderSubDetailUserDefinedText02]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText03] = Src.[CustomsClearanceOrderSubDetailUserDefinedText03]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText04] = Src.[CustomsClearanceOrderSubDetailUserDefinedText04]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText05] = Src.[CustomsClearanceOrderSubDetailUserDefinedText05]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText06] = Src.[CustomsClearanceOrderSubDetailUserDefinedText06]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText07] = Src.[CustomsClearanceOrderSubDetailUserDefinedText07]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText08] = Src.[CustomsClearanceOrderSubDetailUserDefinedText08]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText09] = Src.[CustomsClearanceOrderSubDetailUserDefinedText09]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText10] = Src.[CustomsClearanceOrderSubDetailUserDefinedText10]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText11] = Src.[CustomsClearanceOrderSubDetailUserDefinedText11]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText12] = Src.[CustomsClearanceOrderSubDetailUserDefinedText12]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText13] = Src.[CustomsClearanceOrderSubDetailUserDefinedText13]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText14] = Src.[CustomsClearanceOrderSubDetailUserDefinedText14]
						,Dest.[CustomsClearanceOrderSubDetailUserDefinedText15] = Src.[CustomsClearanceOrderSubDetailUserDefinedText15]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCustomsClearanceOrderSubDetail]
						,[CustomsClearanceOrderDetailID]
						,[CustomsClearanceOrderSubDetailAddDateTime]
						,[CustomsClearanceOrderSubDetailAddUserCode]
						,[CustomsClearanceOrderSubDetailEditDateTime]
						,[CustomsClearanceOrderSubDetailEditUserCode]
						,[CustomsClearanceOrderSubDetailCSNumber]
						,[CustomsClearanceOrderSubDetailFCRNumber]
						,[CustomsClearanceOrderSubDetailPONumber]
						,[CustomsClearanceOrderSubDetailSKUNumber]
						,[CustomsClearanceOrderSubDetailClientReference]
						,[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture]
						,[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival]
						,[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture]
						,[CustomsClearanceOrderSubDetailActualDateTimeOfArrival]
						,[CustomsClearanceOrderSubDetailInvoiceReferenceNumber]
						,[CustomsClearanceOrderSubDetailCommodity]
						,[CustomsClearanceOrderSubDetailDangerousGoods]
						,[CustomsClearanceOrderSubDetailDangerousGoodsDetails]
						,[CustomsClearanceOrderSubDetailQuantity]
						,[CustomsClearanceOrderSubDetailWeight]
						,[CustomsClearanceOrderSubDetailVolume]
						,[CustomsClearanceOrderSubDetailPackages]
						,[CustomsClearanceOrderSubDetailLeg]
						,[CustomsClearanceOrderSubDetailUserDefinedYesNo01]
						,[CustomsClearanceOrderSubDetailUserDefinedYesNo02]
						,[CustomsClearanceOrderSubDetailUserDefinedYesNo03]
						,[CustomsClearanceOrderSubDetailUserDefinedYesNo04]
						,[CustomsClearanceOrderSubDetailUserDefinedYesNo05]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime01]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime02]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime03]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime04]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime05]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime06]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime07]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime09]
						,[CustomsClearanceOrderSubDetailUserDefinedDateTime10]
						,[CustomsClearanceOrderSubDetailUserDefinedNumber01]
						,[CustomsClearanceOrderSubDetailUserDefinedNumber02]
						,[CustomsClearanceOrderSubDetailUserDefinedNumber03]
						,[CustomsClearanceOrderSubDetailUserDefinedNumber04]
						,[CustomsClearanceOrderSubDetailUserDefinedNumber05]
						,[CustomsClearanceOrderSubDetailUserDefinedLongText01]
						,[CustomsClearanceOrderSubDetailUserDefinedLongText02]
						,[CustomsClearanceOrderSubDetailUserDefinedLongText03]
						,[CustomsClearanceOrderSubDetailUserDefinedLongText04]
						,[CustomsClearanceOrderSubDetailUserDefinedLongText05]
						,[CustomsClearanceOrderSubDetailUserDefinedText01]
						,[CustomsClearanceOrderSubDetailUserDefinedText02]
						,[CustomsClearanceOrderSubDetailUserDefinedText03]
						,[CustomsClearanceOrderSubDetailUserDefinedText04]
						,[CustomsClearanceOrderSubDetailUserDefinedText05]
						,[CustomsClearanceOrderSubDetailUserDefinedText06]
						,[CustomsClearanceOrderSubDetailUserDefinedText07]
						,[CustomsClearanceOrderSubDetailUserDefinedText08]
						,[CustomsClearanceOrderSubDetailUserDefinedText09]
						,[CustomsClearanceOrderSubDetailUserDefinedText10]
						,[CustomsClearanceOrderSubDetailUserDefinedText11]
						,[CustomsClearanceOrderSubDetailUserDefinedText12]
						,[CustomsClearanceOrderSubDetailUserDefinedText13]
						,[CustomsClearanceOrderSubDetailUserDefinedText14]
						,[CustomsClearanceOrderSubDetailUserDefinedText15]
						)
					VALUES (
						Src.[IDCustomsClearanceOrderSubDetail]
						,Src.[CustomsClearanceOrderDetailID]
						,Src.[CustomsClearanceOrderSubDetailAddDateTime]
						,Src.[CustomsClearanceOrderSubDetailAddUserCode]
						,Src.[CustomsClearanceOrderSubDetailEditDateTime]
						,Src.[CustomsClearanceOrderSubDetailEditUserCode]
						,Src.[CustomsClearanceOrderSubDetailCSNumber]
						,Src.[CustomsClearanceOrderSubDetailFCRNumber]
						,Src.[CustomsClearanceOrderSubDetailPONumber]
						,Src.[CustomsClearanceOrderSubDetailSKUNumber]
						,Src.[CustomsClearanceOrderSubDetailClientReference]
						,Src.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture]
						,Src.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival]
						,Src.[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture]
						,Src.[CustomsClearanceOrderSubDetailActualDateTimeOfArrival]
						,Src.[CustomsClearanceOrderSubDetailInvoiceReferenceNumber]
						,Src.[CustomsClearanceOrderSubDetailCommodity]
						,Src.[CustomsClearanceOrderSubDetailDangerousGoods]
						,Src.[CustomsClearanceOrderSubDetailDangerousGoodsDetails]
						,Src.[CustomsClearanceOrderSubDetailQuantity]
						,Src.[CustomsClearanceOrderSubDetailWeight]
						,Src.[CustomsClearanceOrderSubDetailVolume]
						,Src.[CustomsClearanceOrderSubDetailPackages]
						,Src.[CustomsClearanceOrderSubDetailLeg]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo01]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo02]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo03]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo04]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo05]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime01]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime02]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime03]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime04]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime05]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime06]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime07]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime09]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime10]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber01]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber02]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber03]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber04]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber05]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText01]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText02]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText03]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText04]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText05]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText01]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText02]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText03]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText04]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText05]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText06]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText07]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText08]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText09]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText10]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText11]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText12]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText13]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText14]
						,Src.[CustomsClearanceOrderSubDetailUserDefinedText15]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCustomsClearanceOrderSubDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCustomsClearanceOrderSubDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceOrderSubDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderSubDetails Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderSubDetail = Dest.IDCustomsClearanceOrderSubDetail
					WHERE Dest.[CustomsClearanceOrderSubDetailEditDateTime] < Src.[CustomsClearanceOrderSubDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CustomsClearanceOrderDetailID] = Src.[CustomsClearanceOrderDetailID]
					,Dest.[CustomsClearanceOrderSubDetailAddDateTime] = Src.[CustomsClearanceOrderSubDetailAddDateTime]
					,Dest.[CustomsClearanceOrderSubDetailAddUserCode] = Src.[CustomsClearanceOrderSubDetailAddUserCode]
					,Dest.[CustomsClearanceOrderSubDetailEditDateTime] = Src.[CustomsClearanceOrderSubDetailEditDateTime]
					,Dest.[CustomsClearanceOrderSubDetailEditUserCode] = Src.[CustomsClearanceOrderSubDetailEditUserCode]
					,Dest.[CustomsClearanceOrderSubDetailCSNumber] = Src.[CustomsClearanceOrderSubDetailCSNumber]
					,Dest.[CustomsClearanceOrderSubDetailFCRNumber] = Src.[CustomsClearanceOrderSubDetailFCRNumber]
					,Dest.[CustomsClearanceOrderSubDetailPONumber] = Src.[CustomsClearanceOrderSubDetailPONumber]
					,Dest.[CustomsClearanceOrderSubDetailSKUNumber] = Src.[CustomsClearanceOrderSubDetailSKUNumber]
					,Dest.[CustomsClearanceOrderSubDetailClientReference] = Src.[CustomsClearanceOrderSubDetailClientReference]
					,Dest.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture] = Src.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture]
					,Dest.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival] = Src.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival]
					,Dest.[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture] = Src.[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture]
					,Dest.[CustomsClearanceOrderSubDetailActualDateTimeOfArrival] = Src.[CustomsClearanceOrderSubDetailActualDateTimeOfArrival]
					,Dest.[CustomsClearanceOrderSubDetailInvoiceReferenceNumber] = Src.[CustomsClearanceOrderSubDetailInvoiceReferenceNumber]
					,Dest.[CustomsClearanceOrderSubDetailCommodity] = Src.[CustomsClearanceOrderSubDetailCommodity]
					,Dest.[CustomsClearanceOrderSubDetailDangerousGoods] = Src.[CustomsClearanceOrderSubDetailDangerousGoods]
					,Dest.[CustomsClearanceOrderSubDetailDangerousGoodsDetails] = Src.[CustomsClearanceOrderSubDetailDangerousGoodsDetails]
					,Dest.[CustomsClearanceOrderSubDetailQuantity] = Src.[CustomsClearanceOrderSubDetailQuantity]
					,Dest.[CustomsClearanceOrderSubDetailWeight] = Src.[CustomsClearanceOrderSubDetailWeight]
					,Dest.[CustomsClearanceOrderSubDetailVolume] = Src.[CustomsClearanceOrderSubDetailVolume]
					,Dest.[CustomsClearanceOrderSubDetailPackages] = Src.[CustomsClearanceOrderSubDetailPackages]
					,Dest.[CustomsClearanceOrderSubDetailLeg] = Src.[CustomsClearanceOrderSubDetailLeg]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo01] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo01]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo02] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo02]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo03] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo03]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo04] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo04]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedYesNo05] = Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo05]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime01] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime01]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime02] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime02]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime03] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime03]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime04] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime04]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime05] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime05]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime06] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime06]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime07] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime07]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime09] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime09]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedDateTime10] = Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime10]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber01] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber01]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber02] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber02]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber03] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber03]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber04] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber04]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedNumber05] = Src.[CustomsClearanceOrderSubDetailUserDefinedNumber05]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText01] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText01]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText02] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText02]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText03] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText03]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText04] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText04]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedLongText05] = Src.[CustomsClearanceOrderSubDetailUserDefinedLongText05]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText01] = Src.[CustomsClearanceOrderSubDetailUserDefinedText01]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText02] = Src.[CustomsClearanceOrderSubDetailUserDefinedText02]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText03] = Src.[CustomsClearanceOrderSubDetailUserDefinedText03]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText04] = Src.[CustomsClearanceOrderSubDetailUserDefinedText04]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText05] = Src.[CustomsClearanceOrderSubDetailUserDefinedText05]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText06] = Src.[CustomsClearanceOrderSubDetailUserDefinedText06]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText07] = Src.[CustomsClearanceOrderSubDetailUserDefinedText07]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText08] = Src.[CustomsClearanceOrderSubDetailUserDefinedText08]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText09] = Src.[CustomsClearanceOrderSubDetailUserDefinedText09]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText10] = Src.[CustomsClearanceOrderSubDetailUserDefinedText10]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText11] = Src.[CustomsClearanceOrderSubDetailUserDefinedText11]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText12] = Src.[CustomsClearanceOrderSubDetailUserDefinedText12]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText13] = Src.[CustomsClearanceOrderSubDetailUserDefinedText13]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText14] = Src.[CustomsClearanceOrderSubDetailUserDefinedText14]
					,Dest.[CustomsClearanceOrderSubDetailUserDefinedText15] = Src.[CustomsClearanceOrderSubDetailUserDefinedText15]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCustomsClearanceOrderSubDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCustomsClearanceOrderSubDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CustomsClearanceOrderSubDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderSubDetails Dest ON Src.IDCustomsClearanceOrderSubDetail = Dest.IDCustomsClearanceOrderSubDetail
				WHERE Dest.[CustomsClearanceOrderSubDetailEditDateTime] < Src.[CustomsClearanceOrderSubDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceOrderSubDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderSubDetails Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderSubDetail = Dest.IDCustomsClearanceOrderSubDetail
					WHERE Dest.IDCustomsClearanceOrderSubDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderSubDetails (
					[IDCustomsClearanceOrderSubDetail]
					,[CustomsClearanceOrderDetailID]
					,[CustomsClearanceOrderSubDetailAddDateTime]
					,[CustomsClearanceOrderSubDetailAddUserCode]
					,[CustomsClearanceOrderSubDetailEditDateTime]
					,[CustomsClearanceOrderSubDetailEditUserCode]
					,[CustomsClearanceOrderSubDetailCSNumber]
					,[CustomsClearanceOrderSubDetailFCRNumber]
					,[CustomsClearanceOrderSubDetailPONumber]
					,[CustomsClearanceOrderSubDetailSKUNumber]
					,[CustomsClearanceOrderSubDetailClientReference]
					,[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture]
					,[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival]
					,[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture]
					,[CustomsClearanceOrderSubDetailActualDateTimeOfArrival]
					,[CustomsClearanceOrderSubDetailInvoiceReferenceNumber]
					,[CustomsClearanceOrderSubDetailCommodity]
					,[CustomsClearanceOrderSubDetailDangerousGoods]
					,[CustomsClearanceOrderSubDetailDangerousGoodsDetails]
					,[CustomsClearanceOrderSubDetailQuantity]
					,[CustomsClearanceOrderSubDetailWeight]
					,[CustomsClearanceOrderSubDetailVolume]
					,[CustomsClearanceOrderSubDetailPackages]
					,[CustomsClearanceOrderSubDetailLeg]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo01]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo02]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo03]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo04]
					,[CustomsClearanceOrderSubDetailUserDefinedYesNo05]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime01]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime02]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime03]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime04]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime05]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime06]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime07]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime09]
					,[CustomsClearanceOrderSubDetailUserDefinedDateTime10]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber01]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber02]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber03]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber04]
					,[CustomsClearanceOrderSubDetailUserDefinedNumber05]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText01]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText02]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText03]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText04]
					,[CustomsClearanceOrderSubDetailUserDefinedLongText05]
					,[CustomsClearanceOrderSubDetailUserDefinedText01]
					,[CustomsClearanceOrderSubDetailUserDefinedText02]
					,[CustomsClearanceOrderSubDetailUserDefinedText03]
					,[CustomsClearanceOrderSubDetailUserDefinedText04]
					,[CustomsClearanceOrderSubDetailUserDefinedText05]
					,[CustomsClearanceOrderSubDetailUserDefinedText06]
					,[CustomsClearanceOrderSubDetailUserDefinedText07]
					,[CustomsClearanceOrderSubDetailUserDefinedText08]
					,[CustomsClearanceOrderSubDetailUserDefinedText09]
					,[CustomsClearanceOrderSubDetailUserDefinedText10]
					,[CustomsClearanceOrderSubDetailUserDefinedText11]
					,[CustomsClearanceOrderSubDetailUserDefinedText12]
					,[CustomsClearanceOrderSubDetailUserDefinedText13]
					,[CustomsClearanceOrderSubDetailUserDefinedText14]
					,[CustomsClearanceOrderSubDetailUserDefinedText15]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCustomsClearanceOrderSubDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCustomsClearanceOrderSubDetail]
					,Src.[CustomsClearanceOrderDetailID]
					,Src.[CustomsClearanceOrderSubDetailAddDateTime]
					,Src.[CustomsClearanceOrderSubDetailAddUserCode]
					,Src.[CustomsClearanceOrderSubDetailEditDateTime]
					,Src.[CustomsClearanceOrderSubDetailEditUserCode]
					,Src.[CustomsClearanceOrderSubDetailCSNumber]
					,Src.[CustomsClearanceOrderSubDetailFCRNumber]
					,Src.[CustomsClearanceOrderSubDetailPONumber]
					,Src.[CustomsClearanceOrderSubDetailSKUNumber]
					,Src.[CustomsClearanceOrderSubDetailClientReference]
					,Src.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfDeparture]
					,Src.[CustomsClearanceOrderSubDetailEstimatedDateTimeOfArrival]
					,Src.[CustomsClearanceOrderSubDetailActualDateTimeOfDeparture]
					,Src.[CustomsClearanceOrderSubDetailActualDateTimeOfArrival]
					,Src.[CustomsClearanceOrderSubDetailInvoiceReferenceNumber]
					,Src.[CustomsClearanceOrderSubDetailCommodity]
					,Src.[CustomsClearanceOrderSubDetailDangerousGoods]
					,Src.[CustomsClearanceOrderSubDetailDangerousGoodsDetails]
					,Src.[CustomsClearanceOrderSubDetailQuantity]
					,Src.[CustomsClearanceOrderSubDetailWeight]
					,Src.[CustomsClearanceOrderSubDetailVolume]
					,Src.[CustomsClearanceOrderSubDetailPackages]
					,Src.[CustomsClearanceOrderSubDetailLeg]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo01]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo02]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo03]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo04]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedYesNo05]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime01]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime02]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime03]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime04]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime05]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime06]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime07]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime09]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedDateTime10]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber01]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber02]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber03]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber04]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedNumber05]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText01]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText02]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText03]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText04]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedLongText05]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText01]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText02]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText03]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText04]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText05]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText06]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText07]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText08]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText09]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText10]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText11]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText12]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText13]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText14]
					,Src.[CustomsClearanceOrderSubDetailUserDefinedText15]
				FROM [dbo].CustomsClearanceOrderSubDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderSubDetails Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderSubDetail = Dest.IDCustomsClearanceOrderSubDetail
				WHERE Dest.IDCustomsClearanceOrderSubDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CustomsClearanceOrderSubDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CustomsClearanceOrderSubDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------CustomsClearanceOrderFiles
	SET @CurrentTableName = 'CustomsClearanceOrderFiles';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderFiles AS Dest
			USING (
				SELECT [IDCustomsClearanceOrderFile]
					,[CustomsClearanceOrderID]
					,[CustomsClearanceOrderFileAddDateTime]
					,[CustomsClearanceOrderFileEditDateTime]
					,[CustomsClearanceOrderFileAddUserCode]
					,[CustomsClearanceOrderFileEditUserCode]
					,[CustomsClearanceOrderFileName]
					,[CustomsClearanceOrderFileSaveFileName]
					,[CustomsClearanceOrderFileNotes]
					,[CustomsClearanceOrderFileType]
					,[CustomsClearanceOrderFileCompressedData]
				FROM dbo.CustomsClearanceOrderFiles T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDCustomsClearanceOrderFile] = Src.[IDCustomsClearanceOrderFile])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CustomsClearanceOrderID] = Src.[CustomsClearanceOrderID]
						,Dest.[CustomsClearanceOrderFileAddDateTime] = Src.[CustomsClearanceOrderFileAddDateTime]
						,Dest.[CustomsClearanceOrderFileEditDateTime] = Src.[CustomsClearanceOrderFileEditDateTime]
						,Dest.[CustomsClearanceOrderFileAddUserCode] = Src.[CustomsClearanceOrderFileAddUserCode]
						,Dest.[CustomsClearanceOrderFileEditUserCode] = Src.[CustomsClearanceOrderFileEditUserCode]
						,Dest.[CustomsClearanceOrderFileName] = Src.[CustomsClearanceOrderFileName]
						,Dest.[CustomsClearanceOrderFileSaveFileName] = Src.[CustomsClearanceOrderFileSaveFileName]
						,Dest.[CustomsClearanceOrderFileNotes] = Src.[CustomsClearanceOrderFileNotes]
						,Dest.[CustomsClearanceOrderFileType] = Src.[CustomsClearanceOrderFileType]
						,Dest.[CustomsClearanceOrderFileCompressedData] = Src.[CustomsClearanceOrderFileCompressedData]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCustomsClearanceOrderFile]
						,[CustomsClearanceOrderID]
						,[CustomsClearanceOrderFileAddDateTime]
						,[CustomsClearanceOrderFileEditDateTime]
						,[CustomsClearanceOrderFileAddUserCode]
						,[CustomsClearanceOrderFileEditUserCode]
						,[CustomsClearanceOrderFileName]
						,[CustomsClearanceOrderFileSaveFileName]
						,[CustomsClearanceOrderFileNotes]
						,[CustomsClearanceOrderFileType]
						,[CustomsClearanceOrderFileCompressedData]
						)
					VALUES (
						Src.[IDCustomsClearanceOrderFile]
						,Src.[CustomsClearanceOrderID]
						,Src.[CustomsClearanceOrderFileAddDateTime]
						,Src.[CustomsClearanceOrderFileEditDateTime]
						,Src.[CustomsClearanceOrderFileAddUserCode]
						,Src.[CustomsClearanceOrderFileEditUserCode]
						,Src.[CustomsClearanceOrderFileName]
						,Src.[CustomsClearanceOrderFileSaveFileName]
						,Src.[CustomsClearanceOrderFileNotes]
						,Src.[CustomsClearanceOrderFileType]
						,Src.[CustomsClearanceOrderFileCompressedData]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCustomsClearanceOrderFile] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCustomsClearanceOrderFile] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceOrderFiles Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderFiles Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderFile = Dest.IDCustomsClearanceOrderFile
					WHERE Dest.[CustomsClearanceOrderFileEditDateTime] < Src.[CustomsClearanceOrderFileEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CustomsClearanceOrderID] = Src.[CustomsClearanceOrderID]
					,Dest.[CustomsClearanceOrderFileAddDateTime] = Src.[CustomsClearanceOrderFileAddDateTime]
					,Dest.[CustomsClearanceOrderFileEditDateTime] = Src.[CustomsClearanceOrderFileEditDateTime]
					,Dest.[CustomsClearanceOrderFileAddUserCode] = Src.[CustomsClearanceOrderFileAddUserCode]
					,Dest.[CustomsClearanceOrderFileEditUserCode] = Src.[CustomsClearanceOrderFileEditUserCode]
					,Dest.[CustomsClearanceOrderFileName] = Src.[CustomsClearanceOrderFileName]
					,Dest.[CustomsClearanceOrderFileSaveFileName] = Src.[CustomsClearanceOrderFileSaveFileName]
					,Dest.[CustomsClearanceOrderFileNotes] = Src.[CustomsClearanceOrderFileNotes]
					,Dest.[CustomsClearanceOrderFileType] = Src.[CustomsClearanceOrderFileType]
					,Dest.[CustomsClearanceOrderFileCompressedData] = Src.[CustomsClearanceOrderFileCompressedData]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCustomsClearanceOrderFile AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCustomsClearanceOrderFile AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CustomsClearanceOrderFiles Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderFiles Dest ON Src.IDCustomsClearanceOrderFile = Dest.IDCustomsClearanceOrderFile
				WHERE Dest.[CustomsClearanceOrderFileEditDateTime] < Src.[CustomsClearanceOrderFileEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceOrderFiles Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderFiles Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderFile = Dest.IDCustomsClearanceOrderFile
					WHERE Dest.IDCustomsClearanceOrderFile IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderFiles (
					[IDCustomsClearanceOrderFile]
					,[CustomsClearanceOrderID]
					,[CustomsClearanceOrderFileAddDateTime]
					,[CustomsClearanceOrderFileEditDateTime]
					,[CustomsClearanceOrderFileAddUserCode]
					,[CustomsClearanceOrderFileEditUserCode]
					,[CustomsClearanceOrderFileName]
					,[CustomsClearanceOrderFileSaveFileName]
					,[CustomsClearanceOrderFileNotes]
					,[CustomsClearanceOrderFileType]
					,[CustomsClearanceOrderFileCompressedData]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCustomsClearanceOrderFile AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCustomsClearanceOrderFile]
					,Src.[CustomsClearanceOrderID]
					,Src.[CustomsClearanceOrderFileAddDateTime]
					,Src.[CustomsClearanceOrderFileEditDateTime]
					,Src.[CustomsClearanceOrderFileAddUserCode]
					,Src.[CustomsClearanceOrderFileEditUserCode]
					,Src.[CustomsClearanceOrderFileName]
					,Src.[CustomsClearanceOrderFileSaveFileName]
					,Src.[CustomsClearanceOrderFileNotes]
					,Src.[CustomsClearanceOrderFileType]
					,Src.[CustomsClearanceOrderFileCompressedData]
				FROM [dbo].CustomsClearanceOrderFiles Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceOrderFiles Dest WITH (NOLOCK) ON Src.IDCustomsClearanceOrderFile = Dest.IDCustomsClearanceOrderFile
				WHERE Dest.IDCustomsClearanceOrderFile IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CustomsClearanceOrderFiles: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CustomsClearanceOrderFiles` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	------CustomsClearanceLogs
	SET @CurrentTableName = 'CustomsClearanceLogs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceLogs AS Dest
			USING (
				SELECT [IDCustomsClearanceLog]
					,[CustomsClearanceOrderID]
					,[CustomsClearanceLogDateTime]
					,[CustomsClearanceLogUserLogin]
					,[StatusID]
					,[CustomsClearanceLogEvent]
					,[CustomsClearanceLogInfo]
					,[EmailDefinitionID]
					,[CustomsClearanceLogEmailID]
					,[CustomsClearanceOrderDetailID]
					,[CustomsClearanceOrderSubDetailID]
					,[CustomsClearanceOrderFileID]
					,[CustomsClearanceLogTechnicalInfo]
				FROM dbo.CustomsClearanceLogs T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDCustomsClearanceLog] = Src.[IDCustomsClearanceLog])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CustomsClearanceOrderID] = Src.[CustomsClearanceOrderID]
						,Dest.[CustomsClearanceLogDateTime] = Src.[CustomsClearanceLogDateTime]
						,Dest.[CustomsClearanceLogUserLogin] = Src.[CustomsClearanceLogUserLogin]
						,Dest.[StatusID] = Src.[StatusID]
						,Dest.[CustomsClearanceLogEvent] = Src.[CustomsClearanceLogEvent]
						,Dest.[CustomsClearanceLogInfo] = Src.[CustomsClearanceLogInfo]
						,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
						,Dest.[CustomsClearanceLogEmailID] = Src.[CustomsClearanceLogEmailID]
						,Dest.[CustomsClearanceOrderDetailID] = Src.[CustomsClearanceOrderDetailID]
						,Dest.[CustomsClearanceOrderSubDetailID] = Src.[CustomsClearanceOrderSubDetailID]
						,Dest.[CustomsClearanceOrderFileID] = Src.[CustomsClearanceOrderFileID]
						,Dest.[CustomsClearanceLogTechnicalInfo] = Src.[CustomsClearanceLogTechnicalInfo]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCustomsClearanceLog]
						,[CustomsClearanceOrderID]
						,[CustomsClearanceLogDateTime]
						,[CustomsClearanceLogUserLogin]
						,[StatusID]
						,[CustomsClearanceLogEvent]
						,[CustomsClearanceLogInfo]
						,[EmailDefinitionID]
						,[CustomsClearanceLogEmailID]
						,[CustomsClearanceOrderDetailID]
						,[CustomsClearanceOrderSubDetailID]
						,[CustomsClearanceOrderFileID]
						,[CustomsClearanceLogTechnicalInfo]
						)
					VALUES (
						Src.[IDCustomsClearanceLog]
						,Src.[CustomsClearanceOrderID]
						,Src.[CustomsClearanceLogDateTime]
						,Src.[CustomsClearanceLogUserLogin]
						,Src.[StatusID]
						,Src.[CustomsClearanceLogEvent]
						,Src.[CustomsClearanceLogInfo]
						,Src.[EmailDefinitionID]
						,Src.[CustomsClearanceLogEmailID]
						,Src.[CustomsClearanceOrderDetailID]
						,Src.[CustomsClearanceOrderSubDetailID]
						,Src.[CustomsClearanceOrderFileID]
						,Src.[CustomsClearanceLogTechnicalInfo]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCustomsClearanceLog] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCustomsClearanceLog] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			--WHILE EXISTS (
			--		SELECT 1
			--		FROM [dbo].CustomsClearanceLogs Src WITH (NOLOCK)
			--		INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceLogs Dest WITH (NOLOCK) ON Src.IDCustomsClearanceLog = Dest.IDCustomsClearanceLog
			--		)
			--	--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime
			--BEGIN
			--	UPDATE TOP (@BatchSizeForArchival) Dest
			--	SET Dest.[CustomsClearanceOrderID] = Src.[CustomsClearanceOrderID]
			--		,Dest.[CustomsClearanceLogDateTime] = Src.[CustomsClearanceLogDateTime]
			--		,Dest.[CustomsClearanceLogUserLogin] = Src.[CustomsClearanceLogUserLogin]
			--		,Dest.[StatusID] = Src.[StatusID]
			--		,Dest.[CustomsClearanceLogEvent] = Src.[CustomsClearanceLogEvent]
			--		,Dest.[CustomsClearanceLogInfo] = Src.[CustomsClearanceLogInfo]
			--		,Dest.[EmailDefinitionID] = Src.[EmailDefinitionID]
			--		,Dest.[CustomsClearanceLogEmailID] = Src.[CustomsClearanceLogEmailID]
			--		,Dest.[CustomsClearanceOrderDetailID] = Src.[CustomsClearanceOrderDetailID]
			--		,Dest.[CustomsClearanceOrderSubDetailID] = Src.[CustomsClearanceOrderSubDetailID]
			--		,Dest.[CustomsClearanceOrderFileID] = Src.[CustomsClearanceOrderFileID]
			--		,Dest.[CustomsClearanceLogTechnicalInfo] = Src.[CustomsClearanceLogTechnicalInfo]
			--	--WHEN NOT MATCHED
			--	OUTPUT 'UPDATE'
			--		,CAST(Inserted.IDCustomsClearanceLog AS VARCHAR(50)) AS 'Inserted'
			--		,CAST(Deleted.IDCustomsClearanceLog AS VARCHAR(50)) AS 'Deleted'
			--	INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
			--	FROM [dbo].CustomsClearanceLogs Src WITH (NOLOCK)
			--	INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceLogs Dest ON Src.IDCustomsClearanceLog = Dest.IDCustomsClearanceLog
			--		--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime;
			--END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomsClearanceLogs Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceLogs Dest WITH (NOLOCK) ON Src.IDCustomsClearanceLog = Dest.IDCustomsClearanceLog
					WHERE Dest.IDCustomsClearanceLog IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceLogs (
					[IDCustomsClearanceLog]
					,[CustomsClearanceOrderID]
					,[CustomsClearanceLogDateTime]
					,[CustomsClearanceLogUserLogin]
					,[StatusID]
					,[CustomsClearanceLogEvent]
					,[CustomsClearanceLogInfo]
					,[EmailDefinitionID]
					,[CustomsClearanceLogEmailID]
					,[CustomsClearanceOrderDetailID]
					,[CustomsClearanceOrderSubDetailID]
					,[CustomsClearanceOrderFileID]
					,[CustomsClearanceLogTechnicalInfo]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCustomsClearanceLog AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCustomsClearanceLog]
					,Src.[CustomsClearanceOrderID]
					,Src.[CustomsClearanceLogDateTime]
					,Src.[CustomsClearanceLogUserLogin]
					,Src.[StatusID]
					,Src.[CustomsClearanceLogEvent]
					,Src.[CustomsClearanceLogInfo]
					,Src.[EmailDefinitionID]
					,Src.[CustomsClearanceLogEmailID]
					,Src.[CustomsClearanceOrderDetailID]
					,Src.[CustomsClearanceOrderSubDetailID]
					,Src.[CustomsClearanceOrderFileID]
					,Src.[CustomsClearanceLogTechnicalInfo]
				FROM [dbo].CustomsClearanceLogs Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomsClearanceLogs Dest WITH (NOLOCK) ON Src.IDCustomsClearanceLog = Dest.IDCustomsClearanceLog
				WHERE Dest.IDCustomsClearanceLog IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CustomsClearanceLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CustomsClearanceLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Shipments
	SET @CurrentTableName = 'Shipments';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Shipments AS Dest
			USING (
				SELECT [IDShipment]
					,[ShipmentAddDateTime]
					,[ShipmentEditDateTime]
					,[ShipmentAddUserCode]
					,[ShipmentEditUserCode]
					,[DataEntryDefinitionID]
					,[TransportStatusID]
					,[TransportStatusIDPrevious]
					,[ShipmentStatusChangeDateTime]
					,[ShipmentNumber]
					,[QuotationID]
					,[ShipmentQuotationNumber]
					,[ShipmentType]
					,[ShipmentPickUpCompanyID]
					,[ShipmentPickupCompanyName]
					,[ShipmentPickUpStreet]
					,[ShipmentPickUpCity]
					,[ShipmentPickUpZipCode]
					,[ShipmentPickUpCountry]
					,[ShipmentPickUpPhone]
					,[ShipmentPickUpFax]
					,[ShipmentPickUpEmail]
					,[ShipmentPickUpContact]
					,[ShipmentPickUpDateTime]
					,[ShipmentDeliveryCompanyID]
					,[ShipmentDeliveryCompanyName]
					,[ShipmentDeliveryStreet]
					,[ShipmentDeliveryCity]
					,[ShipmentDeliveryZipCode]
					,[ShipmentDeliveryCountry]
					,[ShipmentDeliveryPhone]
					,[ShipmentDeliveryFax]
					,[ShipmentDeliveryEmail]
					,[ShipmentDeliveryContact]
					,[ShipmentDeliveryDateTime]
					,[ShipmentDeliveredDateTime]
					,[ShipmentConsigneeCompanyID]
					,[ShipmentConsigneeCompanyName]
					,[ShipmentConsigneeStreet]
					,[ShipmentConsigneeCity]
					,[ShipmentConsigneeZipCode]
					,[ShipmentConsigneeCountry]
					,[ShipmentConsigneePhone]
					,[ShipmentConsigneeFax]
					,[ShipmentConsigneeEmail]
					,[ShipmentConsigneeContact]
					,[ShipmentConsigneeDateTime]
					,[ShipmentSCVCode]
					,[ShipmentConsigneeSCVCode]
					,[ShipmentTransportUnitType]
					,[ShipmentTransportUnits]
					,[ShipmentInternalNotes]
					,[ShipmentOriginID]
					,[ShipmentOriginName]
					,[ShipmentOriginEmail]
					,[ShipmentOriginNotes]
					,[ShipmentInsurance]
					,[ShipmentCustomsClearance]
					,[ShipmentCustomsOffice]
					,[ShipmentIncoTerm]
					,[CompanyID]
					,[ShipmentDeliveryReference]
					,[ShipmentDeliveryReference2]
					,[ShipmentContextCode]
					,[ShipmentEstimatedDateTimeOfDeparture]
					,[ShipmentEstimatedDateTimeOfArrival]
					,[ShipmentNotes]
					,[ShipmentContainerType]
					,[ShipmentContainerSize]
					,[ShipmentContainerNumber]
					,[ShipmentHBLNumber]
					,[ShipmentCBLNumber]
					,[ShipmentVesselName]
					,[ShipmentShippingOrderNumber]
					,[ShipmentPackages]
					,[ShipmentWeight]
					,[ShipmentVolume]
					,[ShipmentUserDefinedText01]
					,[ShipmentUserDefinedText02]
					,[ShipmentUserDefinedText03]
					,[ShipmentUserDefinedText04]
					,[ShipmentUserDefinedText05]
					,[ShipmentUserDefinedText06]
					,[ShipmentUserDefinedDateTime01]
					,[ShipmentUserDefinedDateTime02]
					,[ShipmentUserDefinedDateTime03]
					,[ShipmentUserDefinedNumber01]
					,[ShipmentUserDefinedNumber02]
					,[ShipmentUserDefinedNumber03]
					,[ShipmentUserDefinedLongText01]
					,[ShipmentUserDefinedLongText02]
					,[ShipmentUserDefinedLongText03]
					,[OrderID]
					,[ReceiptID]
					,[ShipmentUserDefinedYesNo01]
					,[ShipmentUserDefinedYesNo02]
					,[ShipmentUserDefinedYesNo03]
					,[ShipmentUserDefinedYesNo04]
					,[ShipmentUserDefinedYesNo05]
					,[ShipmentUserDefinedText07]
					,[ShipmentUserDefinedText08]
					,[ShipmentUserDefinedText09]
					,[ShipmentUserDefinedText10]
					,[ShipmentUserDefinedText11]
					,[DataEntryDefinitionIDAutoCreateTransport]
					,[ShipmentActualDateTimeOfArrival]
					,[ShipmentActualDateTimeOfDeparture]
					,[ShipmentAutoCreateTransportValues]
					,[ShipmentBundleID]
					,[ShipmentClientReference]
					,[ShipmentDeliveryRemarks]
					,[ShipmentLeg]
					,[ShipmentPalletTypeCode]
					,[ShipmentPickUpRemarks]
					,[ShipmentRegionCodeDestination]
					,[ShipmentRegionCodeOrigin]
					,[ShipmentReturnCity]
					,[ShipmentReturnCompanyID]
					,[ShipmentReturnCompanyName]
					,[ShipmentReturnContact]
					,[ShipmentReturnCountry]
					,[ShipmentReturnEmail]
					,[ShipmentReturnFax]
					,[ShipmentReturnPhone]
					,[ShipmentReturnRemarks]
					,[ShipmentReturnStreet]
					,[ShipmentReturnZipCode]
					,[ShipmentThresholdField]
					,[ShipmentVesselCode]
					,[ShipmentVoyageCode]
					,[SubContextCode]
					,[ShipmentUserDefinedDateTime04]
					,[ShipmentUserDefinedDateTime05]
					,[ShipmentUserDefinedDateTime06]
					,[ShipmentUserDefinedDateTime07]
					,[ShipmentUserDefinedDateTime09]
					,[ShipmentUserDefinedDateTime10]
					,[ShipmentUserDefinedNumber04]
					,[ShipmentUserDefinedNumber05]
					,[ShipmentUserDefinedLongText04]
					,[ShipmentUserDefinedLongText05]
					,[ShipmentUserDefinedText12]
					,[ShipmentUserDefinedText13]
					,[ShipmentUserDefinedText14]
					,[ShipmentUserDefinedText15]
					,[ShipmentPickUpReference]
					,[ShipmentReturnReference]
					,[ShipmentDelivery2CompanyID]
					,[ShipmentDelivery2CompanyName]
					,[ShipmentDelivery2Street]
					,[ShipmentDelivery2City]
					,[ShipmentDelivery2ZipCode]
					,[ShipmentDelivery2Country]
					,[ShipmentDelivery2Phone]
					,[ShipmentDelivery2Fax]
					,[ShipmentDelivery2Email]
					,[ShipmentDelivery2Contact]
					,[ShipmentDelivery2Remarks]
					,[ShipmentDelivery3CompanyID]
					,[ShipmentDelivery3CompanyName]
					,[ShipmentDelivery3Street]
					,[ShipmentDelivery3City]
					,[ShipmentDelivery3ZipCode]
					,[ShipmentDelivery3Country]
					,[ShipmentDelivery3Phone]
					,[ShipmentDelivery3Fax]
					,[ShipmentDelivery3Email]
					,[ShipmentDelivery3Contact]
					,[ShipmentDelivery3Remarks]
					,[ShipmentDelivery4CompanyID]
					,[ShipmentDelivery4CompanyName]
					,[ShipmentDelivery4Street]
					,[ShipmentDelivery4City]
					,[ShipmentDelivery4ZipCode]
					,[ShipmentDelivery4Country]
					,[ShipmentDelivery4Phone]
					,[ShipmentDelivery4Fax]
					,[ShipmentDelivery4Email]
					,[ShipmentDelivery4Contact]
					,[ShipmentDelivery4Remarks]
					,[ShipmentChangesAcceptedDateTime]
					,[ShipmentRuleType]
					,[ShipmentCreationDataSource]
					,[ShipmentChangedDataStorageString]
					,[CountryCode]
					,[ShipmentMandatoryCarrier]
					,[ShipmentOwnerLogin]
					,[ShipmentAllowConsolidation]
					,[ShipmentAllowDirectFTL]
					,[ShipmentBookingWindowEndTime]
					,[ShipmentBookingWindowStartTime]
					,[ShipmentCustomerAllowsDirectFTL]
					,[ShipmentDeliveryGroup]
					,[ShipmentDeliveryWindowDaysBottom]
					,[ShipmentDeliveryWindowDaysTop]
					,[ShipmentDepartment]
					,[ShipmentExternalID]
					,[ShipmentGoodsAvailableDateTime]
					,[ShipmentPickUpGroup]
					,[ShipmentSpeedOrder]
					,[ShipmentIDPreviousLeg]
					,[ShipmentIDOriginalLeg]
					,[ShipmentCombinationID]
					,[ShipmentPriorityOrder]
					,[ShipmentPickUpUserDefinedText01]
					,[ShipmentDeliveryUserDefinedText01]
					,[ShipmentDelivery2UserDefinedText01]
					,[ShipmentDelivery3UserDefinedText01]
					,[ShipmentDelivery4UserDefinedText01]
					,[ShipmentPickUpUserDefinedText02]
					,[ShipmentDeliveryUserDefinedText02]
					,[ShipmentDelivery2UserDefinedText02]
					,[ShipmentDelivery3UserDefinedText02]
					,[ShipmentDelivery4UserDefinedText02]
					,[ShipmentPickUpUserDefinedText03]
					,[ShipmentDeliveryUserDefinedText03]
					,[ShipmentDelivery2UserDefinedText03]
					,[ShipmentDelivery3UserDefinedText03]
					,[ShipmentDelivery4UserDefinedText03]
					,[ShipmentPickUpRegionCode]
					,[ShipmentDeliveryRegionCode]
					,[ShipmentDelivery2RegionCode]
					,[ShipmentDelivery3RegionCode]
					,[ShipmentDelivery4RegionCode]
					,[ShipmentPreferredContainerType]
					,[ShipmentDelivery2CompanyName2]
					,[ShipmentDelivery2CustomsLocation]
					,[ShipmentDelivery2Group]
					,[ShipmentDelivery2ShortName]
					,[ShipmentDelivery2Street2]
					,[ShipmentDelivery3CompanyName2]
					,[ShipmentDelivery3CustomsLocation]
					,[ShipmentDelivery3Group]
					,[ShipmentDelivery3ShortName]
					,[ShipmentDelivery3Street2]
					,[ShipmentDelivery4CompanyName2]
					,[ShipmentDelivery4CustomsLocation]
					,[ShipmentDelivery4Group]
					,[ShipmentDelivery4ShortName]
					,[ShipmentDelivery4Street2]
					,[ShipmentDeliveryCompanyName2]
					,[ShipmentDeliveryCustomsLocation]
					,[ShipmentDeliveryShortName]
					,[ShipmentDeliveryStreet2]
					,[ShipmentPickUpCompanyName2]
					,[ShipmentPickUpCustomsLocation]
					,[ShipmentPickUpShortName]
					,[ShipmentPickUpStreet2]
					,[ShipmentReturnCompanyName2]
					,[ShipmentReturnCustomsLocation]
					,[ShipmentReturnGroup]
					,[ShipmentReturnShortName]
					,[ShipmentReturnStreet2]
					,[ShipmentUserDefinedDateTime08]
					,[ShipmentLastExternalChangeDateTime]
					,[ShipmentLastFlagExternalChangeHandledDateTime]
					,[ShipmentImportBatch]
					,[ShipmentReturnDateTime]
					,[ShipmentNewEDIPending]
					,[ContainerTypeCategoryCode]
					,[ShipmentUserDefinedNumber06]
					,[ShipmentUserDefinedNumber07]
					,[ShipmentUserDefinedNumber08]
					,[ShipmentUserDefinedNumber09]
					,[ShipmentUserDefinedNumber10]
					,[ShipmentUserDefinedNumber11]
					,[ShipmentUserDefinedNumber12]
					,[ShipmentUserDefinedNumber13]
					,[ShipmentUserDefinedNumber14]
					,[ShipmentUserDefinedNumber15]
				FROM dbo.Shipments T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDShipment = Src.IDShipment)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.ShipmentAddDateTime = Src.ShipmentAddDateTime
						,Dest.ShipmentEditDateTime = Src.ShipmentEditDateTime
						,Dest.ShipmentAddUserCode = Src.ShipmentAddUserCode
						,Dest.ShipmentEditUserCode = Src.ShipmentEditUserCode
						,Dest.DataEntryDefinitionID = Src.DataEntryDefinitionID
						,Dest.TransportStatusID = Src.TransportStatusID
						,Dest.TransportStatusIDPrevious = Src.TransportStatusIDPrevious
						,Dest.ShipmentStatusChangeDateTime = Src.ShipmentStatusChangeDateTime
						,Dest.ShipmentNumber = Src.ShipmentNumber
						,Dest.QuotationID = Src.QuotationID
						,Dest.ShipmentQuotationNumber = Src.ShipmentQuotationNumber
						,Dest.ShipmentType = Src.ShipmentType
						,Dest.ShipmentPickUpCompanyID = Src.ShipmentPickUpCompanyID
						,Dest.ShipmentPickupCompanyName = Src.ShipmentPickupCompanyName
						,Dest.ShipmentPickUpStreet = Src.ShipmentPickUpStreet
						,Dest.ShipmentPickUpCity = Src.ShipmentPickUpCity
						,Dest.ShipmentPickUpZipCode = Src.ShipmentPickUpZipCode
						,Dest.ShipmentPickUpCountry = Src.ShipmentPickUpCountry
						,Dest.ShipmentPickUpPhone = Src.ShipmentPickUpPhone
						,Dest.ShipmentPickUpFax = Src.ShipmentPickUpFax
						,Dest.ShipmentPickUpEmail = Src.ShipmentPickUpEmail
						,Dest.ShipmentPickUpContact = Src.ShipmentPickUpContact
						,Dest.ShipmentPickUpDateTime = Src.ShipmentPickUpDateTime
						,Dest.ShipmentDeliveryCompanyID = Src.ShipmentDeliveryCompanyID
						,Dest.ShipmentDeliveryCompanyName = Src.ShipmentDeliveryCompanyName
						,Dest.ShipmentDeliveryStreet = Src.ShipmentDeliveryStreet
						,Dest.ShipmentDeliveryCity = Src.ShipmentDeliveryCity
						,Dest.ShipmentDeliveryZipCode = Src.ShipmentDeliveryZipCode
						,Dest.ShipmentDeliveryCountry = Src.ShipmentDeliveryCountry
						,Dest.ShipmentDeliveryPhone = Src.ShipmentDeliveryPhone
						,Dest.ShipmentDeliveryFax = Src.ShipmentDeliveryFax
						,Dest.ShipmentDeliveryEmail = Src.ShipmentDeliveryEmail
						,Dest.ShipmentDeliveryContact = Src.ShipmentDeliveryContact
						,Dest.ShipmentDeliveryDateTime = Src.ShipmentDeliveryDateTime
						,Dest.ShipmentDeliveredDateTime = Src.ShipmentDeliveredDateTime
						,Dest.ShipmentConsigneeCompanyID = Src.ShipmentConsigneeCompanyID
						,Dest.ShipmentConsigneeCompanyName = Src.ShipmentConsigneeCompanyName
						,Dest.ShipmentConsigneeStreet = Src.ShipmentConsigneeStreet
						,Dest.ShipmentConsigneeCity = Src.ShipmentConsigneeCity
						,Dest.ShipmentConsigneeZipCode = Src.ShipmentConsigneeZipCode
						,Dest.ShipmentConsigneeCountry = Src.ShipmentConsigneeCountry
						,Dest.ShipmentConsigneePhone = Src.ShipmentConsigneePhone
						,Dest.ShipmentConsigneeFax = Src.ShipmentConsigneeFax
						,Dest.ShipmentConsigneeEmail = Src.ShipmentConsigneeEmail
						,Dest.ShipmentConsigneeContact = Src.ShipmentConsigneeContact
						,Dest.ShipmentConsigneeDateTime = Src.ShipmentConsigneeDateTime
						,Dest.ShipmentSCVCode = Src.ShipmentSCVCode
						,Dest.ShipmentConsigneeSCVCode = Src.ShipmentConsigneeSCVCode
						,Dest.ShipmentTransportUnitType = Src.ShipmentTransportUnitType
						,Dest.ShipmentTransportUnits = Src.ShipmentTransportUnits
						,Dest.ShipmentInternalNotes = Src.ShipmentInternalNotes
						,Dest.ShipmentOriginID = Src.ShipmentOriginID
						,Dest.ShipmentOriginName = Src.ShipmentOriginName
						,Dest.ShipmentOriginEmail = Src.ShipmentOriginEmail
						,Dest.ShipmentOriginNotes = Src.ShipmentOriginNotes
						,Dest.ShipmentInsurance = Src.ShipmentInsurance
						,Dest.ShipmentCustomsClearance = Src.ShipmentCustomsClearance
						,Dest.ShipmentCustomsOffice = Src.ShipmentCustomsOffice
						,Dest.ShipmentIncoTerm = Src.ShipmentIncoTerm
						,Dest.CompanyID = Src.CompanyID
						,Dest.ShipmentDeliveryReference = Src.ShipmentDeliveryReference
						,Dest.ShipmentDeliveryReference2 = Src.ShipmentDeliveryReference2
						,Dest.ShipmentContextCode = Src.ShipmentContextCode
						,Dest.ShipmentEstimatedDateTimeOfDeparture = Src.ShipmentEstimatedDateTimeOfDeparture
						,Dest.ShipmentEstimatedDateTimeOfArrival = Src.ShipmentEstimatedDateTimeOfArrival
						,Dest.ShipmentNotes = Src.ShipmentNotes
						,Dest.ShipmentContainerType = Src.ShipmentContainerType
						,Dest.ShipmentContainerSize = Src.ShipmentContainerSize
						,Dest.ShipmentContainerNumber = Src.ShipmentContainerNumber
						,Dest.ShipmentHBLNumber = Src.ShipmentHBLNumber
						,Dest.ShipmentCBLNumber = Src.ShipmentCBLNumber
						,Dest.ShipmentVesselName = Src.ShipmentVesselName
						,Dest.ShipmentShippingOrderNumber = Src.ShipmentShippingOrderNumber
						,Dest.ShipmentPackages = Src.ShipmentPackages
						,Dest.ShipmentWeight = Src.ShipmentWeight
						,Dest.ShipmentVolume = Src.ShipmentVolume
						,Dest.ShipmentUserDefinedText01 = Src.ShipmentUserDefinedText01
						,Dest.ShipmentUserDefinedText02 = Src.ShipmentUserDefinedText02
						,Dest.ShipmentUserDefinedText03 = Src.ShipmentUserDefinedText03
						,Dest.ShipmentUserDefinedText04 = Src.ShipmentUserDefinedText04
						,Dest.ShipmentUserDefinedText05 = Src.ShipmentUserDefinedText05
						,Dest.ShipmentUserDefinedText06 = Src.ShipmentUserDefinedText06
						,Dest.ShipmentUserDefinedDateTime01 = Src.ShipmentUserDefinedDateTime01
						,Dest.ShipmentUserDefinedDateTime02 = Src.ShipmentUserDefinedDateTime02
						,Dest.ShipmentUserDefinedDateTime03 = Src.ShipmentUserDefinedDateTime03
						,Dest.ShipmentUserDefinedNumber01 = Src.ShipmentUserDefinedNumber01
						,Dest.ShipmentUserDefinedNumber02 = Src.ShipmentUserDefinedNumber02
						,Dest.ShipmentUserDefinedNumber03 = Src.ShipmentUserDefinedNumber03
						,Dest.ShipmentUserDefinedLongText01 = Src.ShipmentUserDefinedLongText01
						,Dest.ShipmentUserDefinedLongText02 = Src.ShipmentUserDefinedLongText02
						,Dest.ShipmentUserDefinedLongText03 = Src.ShipmentUserDefinedLongText03
						,Dest.OrderID = Src.OrderID
						,Dest.ReceiptID = Src.ReceiptID
						,Dest.ShipmentUserDefinedYesNo01 = Src.ShipmentUserDefinedYesNo01
						,Dest.ShipmentUserDefinedYesNo02 = Src.ShipmentUserDefinedYesNo02
						,Dest.ShipmentUserDefinedYesNo03 = Src.ShipmentUserDefinedYesNo03
						,Dest.ShipmentUserDefinedYesNo04 = Src.ShipmentUserDefinedYesNo04
						,Dest.ShipmentUserDefinedYesNo05 = Src.ShipmentUserDefinedYesNo05
						,Dest.ShipmentUserDefinedText07 = Src.ShipmentUserDefinedText07
						,Dest.ShipmentUserDefinedText08 = Src.ShipmentUserDefinedText08
						,Dest.ShipmentUserDefinedText09 = Src.ShipmentUserDefinedText09
						,Dest.ShipmentUserDefinedText10 = Src.ShipmentUserDefinedText10
						,Dest.ShipmentUserDefinedText11 = Src.ShipmentUserDefinedText11
						,Dest.DataEntryDefinitionIDAutoCreateTransport = Src.DataEntryDefinitionIDAutoCreateTransport
						,Dest.ShipmentActualDateTimeOfArrival = Src.ShipmentActualDateTimeOfArrival
						,Dest.ShipmentActualDateTimeOfDeparture = Src.ShipmentActualDateTimeOfDeparture
						,Dest.ShipmentAutoCreateTransportValues = Src.ShipmentAutoCreateTransportValues
						,Dest.ShipmentBundleID = Src.ShipmentBundleID
						,Dest.ShipmentClientReference = Src.ShipmentClientReference
						,Dest.ShipmentDeliveryRemarks = Src.ShipmentDeliveryRemarks
						,Dest.ShipmentLeg = Src.ShipmentLeg
						,Dest.ShipmentPalletTypeCode = Src.ShipmentPalletTypeCode
						,Dest.ShipmentPickUpRemarks = Src.ShipmentPickUpRemarks
						,Dest.ShipmentRegionCodeDestination = Src.ShipmentRegionCodeDestination
						,Dest.ShipmentRegionCodeOrigin = Src.ShipmentRegionCodeOrigin
						,Dest.ShipmentReturnCity = Src.ShipmentReturnCity
						,Dest.ShipmentReturnCompanyID = Src.ShipmentReturnCompanyID
						,Dest.ShipmentReturnCompanyName = Src.ShipmentReturnCompanyName
						,Dest.ShipmentReturnContact = Src.ShipmentReturnContact
						,Dest.ShipmentReturnCountry = Src.ShipmentReturnCountry
						,Dest.ShipmentReturnEmail = Src.ShipmentReturnEmail
						,Dest.ShipmentReturnFax = Src.ShipmentReturnFax
						,Dest.ShipmentReturnPhone = Src.ShipmentReturnPhone
						,Dest.ShipmentReturnRemarks = Src.ShipmentReturnRemarks
						,Dest.ShipmentReturnStreet = Src.ShipmentReturnStreet
						,Dest.ShipmentReturnZipCode = Src.ShipmentReturnZipCode
						,Dest.ShipmentThresholdField = Src.ShipmentThresholdField
						,Dest.ShipmentVesselCode = Src.ShipmentVesselCode
						,Dest.ShipmentVoyageCode = Src.ShipmentVoyageCode
						,Dest.SubContextCode = Src.SubContextCode
						,Dest.ShipmentUserDefinedDateTime04 = Src.ShipmentUserDefinedDateTime04
						,Dest.ShipmentUserDefinedDateTime05 = Src.ShipmentUserDefinedDateTime05
						,Dest.ShipmentUserDefinedDateTime06 = Src.ShipmentUserDefinedDateTime06
						,Dest.ShipmentUserDefinedDateTime07 = Src.ShipmentUserDefinedDateTime07
						,Dest.ShipmentUserDefinedDateTime09 = Src.ShipmentUserDefinedDateTime09
						,Dest.ShipmentUserDefinedDateTime10 = Src.ShipmentUserDefinedDateTime10
						,Dest.ShipmentUserDefinedNumber04 = Src.ShipmentUserDefinedNumber04
						,Dest.ShipmentUserDefinedNumber05 = Src.ShipmentUserDefinedNumber05
						,Dest.ShipmentUserDefinedLongText04 = Src.ShipmentUserDefinedLongText04
						,Dest.ShipmentUserDefinedLongText05 = Src.ShipmentUserDefinedLongText05
						,Dest.ShipmentUserDefinedText12 = Src.ShipmentUserDefinedText12
						,Dest.ShipmentUserDefinedText13 = Src.ShipmentUserDefinedText13
						,Dest.ShipmentUserDefinedText14 = Src.ShipmentUserDefinedText14
						,Dest.ShipmentUserDefinedText15 = Src.ShipmentUserDefinedText15
						,Dest.ShipmentPickUpReference = Src.ShipmentPickUpReference
						,Dest.ShipmentReturnReference = Src.ShipmentReturnReference
						,Dest.ShipmentDelivery2CompanyID = Src.ShipmentDelivery2CompanyID
						,Dest.ShipmentDelivery2CompanyName = Src.ShipmentDelivery2CompanyName
						,Dest.ShipmentDelivery2Street = Src.ShipmentDelivery2Street
						,Dest.ShipmentDelivery2City = Src.ShipmentDelivery2City
						,Dest.ShipmentDelivery2ZipCode = Src.ShipmentDelivery2ZipCode
						,Dest.ShipmentDelivery2Country = Src.ShipmentDelivery2Country
						,Dest.ShipmentDelivery2Phone = Src.ShipmentDelivery2Phone
						,Dest.ShipmentDelivery2Fax = Src.ShipmentDelivery2Fax
						,Dest.ShipmentDelivery2Email = Src.ShipmentDelivery2Email
						,Dest.ShipmentDelivery2Contact = Src.ShipmentDelivery2Contact
						,Dest.ShipmentDelivery2Remarks = Src.ShipmentDelivery2Remarks
						,Dest.ShipmentDelivery3CompanyID = Src.ShipmentDelivery3CompanyID
						,Dest.ShipmentDelivery3CompanyName = Src.ShipmentDelivery3CompanyName
						,Dest.ShipmentDelivery3Street = Src.ShipmentDelivery3Street
						,Dest.ShipmentDelivery3City = Src.ShipmentDelivery3City
						,Dest.ShipmentDelivery3ZipCode = Src.ShipmentDelivery3ZipCode
						,Dest.ShipmentDelivery3Country = Src.ShipmentDelivery3Country
						,Dest.ShipmentDelivery3Phone = Src.ShipmentDelivery3Phone
						,Dest.ShipmentDelivery3Fax = Src.ShipmentDelivery3Fax
						,Dest.ShipmentDelivery3Email = Src.ShipmentDelivery3Email
						,Dest.ShipmentDelivery3Contact = Src.ShipmentDelivery3Contact
						,Dest.ShipmentDelivery3Remarks = Src.ShipmentDelivery3Remarks
						,Dest.ShipmentDelivery4CompanyID = Src.ShipmentDelivery4CompanyID
						,Dest.ShipmentDelivery4CompanyName = Src.ShipmentDelivery4CompanyName
						,Dest.ShipmentDelivery4Street = Src.ShipmentDelivery4Street
						,Dest.ShipmentDelivery4City = Src.ShipmentDelivery4City
						,Dest.ShipmentDelivery4ZipCode = Src.ShipmentDelivery4ZipCode
						,Dest.ShipmentDelivery4Country = Src.ShipmentDelivery4Country
						,Dest.ShipmentDelivery4Phone = Src.ShipmentDelivery4Phone
						,Dest.ShipmentDelivery4Fax = Src.ShipmentDelivery4Fax
						,Dest.ShipmentDelivery4Email = Src.ShipmentDelivery4Email
						,Dest.ShipmentDelivery4Contact = Src.ShipmentDelivery4Contact
						,Dest.ShipmentDelivery4Remarks = Src.ShipmentDelivery4Remarks
						,Dest.ShipmentChangesAcceptedDateTime = Src.ShipmentChangesAcceptedDateTime
						,Dest.ShipmentRuleType = Src.ShipmentRuleType
						,Dest.ShipmentCreationDataSource = Src.ShipmentCreationDataSource
						,Dest.ShipmentChangedDataStorageString = Src.ShipmentChangedDataStorageString
						,Dest.CountryCode = Src.CountryCode
						,Dest.ShipmentMandatoryCarrier = Src.ShipmentMandatoryCarrier
						,Dest.ShipmentOwnerLogin = Src.ShipmentOwnerLogin
						,Dest.ShipmentAllowConsolidation = Src.ShipmentAllowConsolidation
						,Dest.ShipmentAllowDirectFTL = Src.ShipmentAllowDirectFTL
						,Dest.ShipmentBookingWindowEndTime = Src.ShipmentBookingWindowEndTime
						,Dest.ShipmentBookingWindowStartTime = Src.ShipmentBookingWindowStartTime
						,Dest.ShipmentCustomerAllowsDirectFTL = Src.ShipmentCustomerAllowsDirectFTL
						,Dest.ShipmentDeliveryGroup = Src.ShipmentDeliveryGroup
						,Dest.ShipmentDeliveryWindowDaysBottom = Src.ShipmentDeliveryWindowDaysBottom
						,Dest.ShipmentDeliveryWindowDaysTop = Src.ShipmentDeliveryWindowDaysTop
						,Dest.ShipmentDepartment = Src.ShipmentDepartment
						,Dest.ShipmentExternalID = Src.ShipmentExternalID
						,Dest.ShipmentGoodsAvailableDateTime = Src.ShipmentGoodsAvailableDateTime
						,Dest.ShipmentPickUpGroup = Src.ShipmentPickUpGroup
						,Dest.ShipmentSpeedOrder = Src.ShipmentSpeedOrder
						,Dest.ShipmentIDPreviousLeg = Src.ShipmentIDPreviousLeg
						,Dest.ShipmentIDOriginalLeg = Src.ShipmentIDOriginalLeg
						,Dest.ShipmentCombinationID = Src.ShipmentCombinationID
						,Dest.ShipmentPriorityOrder = Src.ShipmentPriorityOrder
						,Dest.ShipmentPickUpUserDefinedText01 = Src.ShipmentPickUpUserDefinedText01
						,Dest.ShipmentDeliveryUserDefinedText01 = Src.ShipmentDeliveryUserDefinedText01
						,Dest.ShipmentDelivery2UserDefinedText01 = Src.ShipmentDelivery2UserDefinedText01
						,Dest.ShipmentDelivery3UserDefinedText01 = Src.ShipmentDelivery3UserDefinedText01
						,Dest.ShipmentDelivery4UserDefinedText01 = Src.ShipmentDelivery4UserDefinedText01
						,Dest.ShipmentPickUpUserDefinedText02 = Src.ShipmentPickUpUserDefinedText02
						,Dest.ShipmentDeliveryUserDefinedText02 = Src.ShipmentDeliveryUserDefinedText02
						,Dest.ShipmentDelivery2UserDefinedText02 = Src.ShipmentDelivery2UserDefinedText02
						,Dest.ShipmentDelivery3UserDefinedText02 = Src.ShipmentDelivery3UserDefinedText02
						,Dest.ShipmentDelivery4UserDefinedText02 = Src.ShipmentDelivery4UserDefinedText02
						,Dest.ShipmentPickUpUserDefinedText03 = Src.ShipmentPickUpUserDefinedText03
						,Dest.ShipmentDeliveryUserDefinedText03 = Src.ShipmentDeliveryUserDefinedText03
						,Dest.ShipmentDelivery2UserDefinedText03 = Src.ShipmentDelivery2UserDefinedText03
						,Dest.ShipmentDelivery3UserDefinedText03 = Src.ShipmentDelivery3UserDefinedText03
						,Dest.ShipmentDelivery4UserDefinedText03 = Src.ShipmentDelivery4UserDefinedText03
						,Dest.ShipmentPickUpRegionCode = Src.ShipmentPickUpRegionCode
						,Dest.ShipmentDeliveryRegionCode = Src.ShipmentDeliveryRegionCode
						,Dest.ShipmentDelivery2RegionCode = Src.ShipmentDelivery2RegionCode
						,Dest.ShipmentDelivery3RegionCode = Src.ShipmentDelivery3RegionCode
						,Dest.ShipmentDelivery4RegionCode = Src.ShipmentDelivery4RegionCode
						,Dest.ShipmentPreferredContainerType = Src.ShipmentPreferredContainerType
						,Dest.ShipmentDelivery2CompanyName2 = Src.ShipmentDelivery2CompanyName2
						,Dest.ShipmentDelivery2CustomsLocation = Src.ShipmentDelivery2CustomsLocation
						,Dest.ShipmentDelivery2Group = Src.ShipmentDelivery2Group
						,Dest.ShipmentDelivery2ShortName = Src.ShipmentDelivery2ShortName
						,Dest.ShipmentDelivery2Street2 = Src.ShipmentDelivery2Street2
						,Dest.ShipmentDelivery3CompanyName2 = Src.ShipmentDelivery3CompanyName2
						,Dest.ShipmentDelivery3CustomsLocation = Src.ShipmentDelivery3CustomsLocation
						,Dest.ShipmentDelivery3Group = Src.ShipmentDelivery3Group
						,Dest.ShipmentDelivery3ShortName = Src.ShipmentDelivery3ShortName
						,Dest.ShipmentDelivery3Street2 = Src.ShipmentDelivery3Street2
						,Dest.ShipmentDelivery4CompanyName2 = Src.ShipmentDelivery4CompanyName2
						,Dest.ShipmentDelivery4CustomsLocation = Src.ShipmentDelivery4CustomsLocation
						,Dest.ShipmentDelivery4Group = Src.ShipmentDelivery4Group
						,Dest.ShipmentDelivery4ShortName = Src.ShipmentDelivery4ShortName
						,Dest.ShipmentDelivery4Street2 = Src.ShipmentDelivery4Street2
						,Dest.ShipmentDeliveryCompanyName2 = Src.ShipmentDeliveryCompanyName2
						,Dest.ShipmentDeliveryCustomsLocation = Src.ShipmentDeliveryCustomsLocation
						,Dest.ShipmentDeliveryShortName = Src.ShipmentDeliveryShortName
						,Dest.ShipmentDeliveryStreet2 = Src.ShipmentDeliveryStreet2
						,Dest.ShipmentPickUpCompanyName2 = Src.ShipmentPickUpCompanyName2
						,Dest.ShipmentPickUpCustomsLocation = Src.ShipmentPickUpCustomsLocation
						,Dest.ShipmentPickUpShortName = Src.ShipmentPickUpShortName
						,Dest.ShipmentPickUpStreet2 = Src.ShipmentPickUpStreet2
						,Dest.ShipmentReturnCompanyName2 = Src.ShipmentReturnCompanyName2
						,Dest.ShipmentReturnCustomsLocation = Src.ShipmentReturnCustomsLocation
						,Dest.ShipmentReturnGroup = Src.ShipmentReturnGroup
						,Dest.ShipmentReturnShortName = Src.ShipmentReturnShortName
						,Dest.ShipmentReturnStreet2 = Src.ShipmentReturnStreet2
						,Dest.ShipmentUserDefinedDateTime08 = Src.ShipmentUserDefinedDateTime08
						,Dest.ShipmentLastExternalChangeDateTime = Src.ShipmentLastExternalChangeDateTime
						,Dest.ShipmentLastFlagExternalChangeHandledDateTime = Src.ShipmentLastFlagExternalChangeHandledDateTime
						,Dest.ShipmentImportBatch = Src.ShipmentImportBatch
						,Dest.ShipmentReturnDateTime = Src.ShipmentReturnDateTime
						,Dest.ShipmentNewEDIPending = Src.ShipmentNewEDIPending
						,Dest.ContainerTypeCategoryCode = Src.ContainerTypeCategoryCode
						,Dest.ShipmentUserDefinedNumber06 = Src.ShipmentUserDefinedNumber06
						,Dest.ShipmentUserDefinedNumber07 = Src.ShipmentUserDefinedNumber07
						,Dest.ShipmentUserDefinedNumber08 = Src.ShipmentUserDefinedNumber08
						,Dest.ShipmentUserDefinedNumber09 = Src.ShipmentUserDefinedNumber09
						,Dest.ShipmentUserDefinedNumber10 = Src.ShipmentUserDefinedNumber10
						,Dest.ShipmentUserDefinedNumber11 = Src.ShipmentUserDefinedNumber11
						,Dest.ShipmentUserDefinedNumber12 = Src.ShipmentUserDefinedNumber12
						,Dest.ShipmentUserDefinedNumber13 = Src.ShipmentUserDefinedNumber13
						,Dest.ShipmentUserDefinedNumber14 = Src.ShipmentUserDefinedNumber14
						,Dest.ShipmentUserDefinedNumber15 = Src.ShipmentUserDefinedNumber15
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDShipment]
						,[ShipmentAddDateTime]
						,[ShipmentEditDateTime]
						,[ShipmentAddUserCode]
						,[ShipmentEditUserCode]
						,[DataEntryDefinitionID]
						,[TransportStatusID]
						,[TransportStatusIDPrevious]
						,[ShipmentStatusChangeDateTime]
						,[ShipmentNumber]
						,[QuotationID]
						,[ShipmentQuotationNumber]
						,[ShipmentType]
						,[ShipmentPickUpCompanyID]
						,[ShipmentPickupCompanyName]
						,[ShipmentPickUpStreet]
						,[ShipmentPickUpCity]
						,[ShipmentPickUpZipCode]
						,[ShipmentPickUpCountry]
						,[ShipmentPickUpPhone]
						,[ShipmentPickUpFax]
						,[ShipmentPickUpEmail]
						,[ShipmentPickUpContact]
						,[ShipmentPickUpDateTime]
						,[ShipmentDeliveryCompanyID]
						,[ShipmentDeliveryCompanyName]
						,[ShipmentDeliveryStreet]
						,[ShipmentDeliveryCity]
						,[ShipmentDeliveryZipCode]
						,[ShipmentDeliveryCountry]
						,[ShipmentDeliveryPhone]
						,[ShipmentDeliveryFax]
						,[ShipmentDeliveryEmail]
						,[ShipmentDeliveryContact]
						,[ShipmentDeliveryDateTime]
						,[ShipmentDeliveredDateTime]
						,[ShipmentConsigneeCompanyID]
						,[ShipmentConsigneeCompanyName]
						,[ShipmentConsigneeStreet]
						,[ShipmentConsigneeCity]
						,[ShipmentConsigneeZipCode]
						,[ShipmentConsigneeCountry]
						,[ShipmentConsigneePhone]
						,[ShipmentConsigneeFax]
						,[ShipmentConsigneeEmail]
						,[ShipmentConsigneeContact]
						,[ShipmentConsigneeDateTime]
						,[ShipmentSCVCode]
						,[ShipmentConsigneeSCVCode]
						,[ShipmentTransportUnitType]
						,[ShipmentTransportUnits]
						,[ShipmentInternalNotes]
						,[ShipmentOriginID]
						,[ShipmentOriginName]
						,[ShipmentOriginEmail]
						,[ShipmentOriginNotes]
						,[ShipmentInsurance]
						,[ShipmentCustomsClearance]
						,[ShipmentCustomsOffice]
						,[ShipmentIncoTerm]
						,[CompanyID]
						,[ShipmentDeliveryReference]
						,[ShipmentDeliveryReference2]
						,[ShipmentContextCode]
						,[ShipmentEstimatedDateTimeOfDeparture]
						,[ShipmentEstimatedDateTimeOfArrival]
						,[ShipmentNotes]
						,[ShipmentContainerType]
						,[ShipmentContainerSize]
						,[ShipmentContainerNumber]
						,[ShipmentHBLNumber]
						,[ShipmentCBLNumber]
						,[ShipmentVesselName]
						,[ShipmentShippingOrderNumber]
						,[ShipmentPackages]
						,[ShipmentWeight]
						,[ShipmentVolume]
						,[ShipmentUserDefinedText01]
						,[ShipmentUserDefinedText02]
						,[ShipmentUserDefinedText03]
						,[ShipmentUserDefinedText04]
						,[ShipmentUserDefinedText05]
						,[ShipmentUserDefinedText06]
						,[ShipmentUserDefinedDateTime01]
						,[ShipmentUserDefinedDateTime02]
						,[ShipmentUserDefinedDateTime03]
						,[ShipmentUserDefinedNumber01]
						,[ShipmentUserDefinedNumber02]
						,[ShipmentUserDefinedNumber03]
						,[ShipmentUserDefinedLongText01]
						,[ShipmentUserDefinedLongText02]
						,[ShipmentUserDefinedLongText03]
						,[OrderID]
						,[ReceiptID]
						,[ShipmentUserDefinedYesNo01]
						,[ShipmentUserDefinedYesNo02]
						,[ShipmentUserDefinedYesNo03]
						,[ShipmentUserDefinedYesNo04]
						,[ShipmentUserDefinedYesNo05]
						,[ShipmentUserDefinedText07]
						,[ShipmentUserDefinedText08]
						,[ShipmentUserDefinedText09]
						,[ShipmentUserDefinedText10]
						,[ShipmentUserDefinedText11]
						,[DataEntryDefinitionIDAutoCreateTransport]
						,[ShipmentActualDateTimeOfArrival]
						,[ShipmentActualDateTimeOfDeparture]
						,[ShipmentAutoCreateTransportValues]
						,[ShipmentBundleID]
						,[ShipmentClientReference]
						,[ShipmentDeliveryRemarks]
						,[ShipmentLeg]
						,[ShipmentPalletTypeCode]
						,[ShipmentPickUpRemarks]
						,[ShipmentRegionCodeDestination]
						,[ShipmentRegionCodeOrigin]
						,[ShipmentReturnCity]
						,[ShipmentReturnCompanyID]
						,[ShipmentReturnCompanyName]
						,[ShipmentReturnContact]
						,[ShipmentReturnCountry]
						,[ShipmentReturnEmail]
						,[ShipmentReturnFax]
						,[ShipmentReturnPhone]
						,[ShipmentReturnRemarks]
						,[ShipmentReturnStreet]
						,[ShipmentReturnZipCode]
						,[ShipmentThresholdField]
						,[ShipmentVesselCode]
						,[ShipmentVoyageCode]
						,[SubContextCode]
						,[ShipmentUserDefinedDateTime04]
						,[ShipmentUserDefinedDateTime05]
						,[ShipmentUserDefinedDateTime06]
						,[ShipmentUserDefinedDateTime07]
						,[ShipmentUserDefinedDateTime09]
						,[ShipmentUserDefinedDateTime10]
						,[ShipmentUserDefinedNumber04]
						,[ShipmentUserDefinedNumber05]
						,[ShipmentUserDefinedLongText04]
						,[ShipmentUserDefinedLongText05]
						,[ShipmentUserDefinedText12]
						,[ShipmentUserDefinedText13]
						,[ShipmentUserDefinedText14]
						,[ShipmentUserDefinedText15]
						,[ShipmentPickUpReference]
						,[ShipmentReturnReference]
						,[ShipmentDelivery2CompanyID]
						,[ShipmentDelivery2CompanyName]
						,[ShipmentDelivery2Street]
						,[ShipmentDelivery2City]
						,[ShipmentDelivery2ZipCode]
						,[ShipmentDelivery2Country]
						,[ShipmentDelivery2Phone]
						,[ShipmentDelivery2Fax]
						,[ShipmentDelivery2Email]
						,[ShipmentDelivery2Contact]
						,[ShipmentDelivery2Remarks]
						,[ShipmentDelivery3CompanyID]
						,[ShipmentDelivery3CompanyName]
						,[ShipmentDelivery3Street]
						,[ShipmentDelivery3City]
						,[ShipmentDelivery3ZipCode]
						,[ShipmentDelivery3Country]
						,[ShipmentDelivery3Phone]
						,[ShipmentDelivery3Fax]
						,[ShipmentDelivery3Email]
						,[ShipmentDelivery3Contact]
						,[ShipmentDelivery3Remarks]
						,[ShipmentDelivery4CompanyID]
						,[ShipmentDelivery4CompanyName]
						,[ShipmentDelivery4Street]
						,[ShipmentDelivery4City]
						,[ShipmentDelivery4ZipCode]
						,[ShipmentDelivery4Country]
						,[ShipmentDelivery4Phone]
						,[ShipmentDelivery4Fax]
						,[ShipmentDelivery4Email]
						,[ShipmentDelivery4Contact]
						,[ShipmentDelivery4Remarks]
						,[ShipmentChangesAcceptedDateTime]
						,[ShipmentRuleType]
						,[ShipmentCreationDataSource]
						,[ShipmentChangedDataStorageString]
						,[CountryCode]
						,[ShipmentMandatoryCarrier]
						,[ShipmentOwnerLogin]
						,[ShipmentAllowConsolidation]
						,[ShipmentAllowDirectFTL]
						,[ShipmentBookingWindowEndTime]
						,[ShipmentBookingWindowStartTime]
						,[ShipmentCustomerAllowsDirectFTL]
						,[ShipmentDeliveryGroup]
						,[ShipmentDeliveryWindowDaysBottom]
						,[ShipmentDeliveryWindowDaysTop]
						,[ShipmentDepartment]
						,[ShipmentExternalID]
						,[ShipmentGoodsAvailableDateTime]
						,[ShipmentPickUpGroup]
						,[ShipmentSpeedOrder]
						,[ShipmentIDPreviousLeg]
						,[ShipmentIDOriginalLeg]
						,[ShipmentCombinationID]
						,[ShipmentPriorityOrder]
						,[ShipmentPickUpUserDefinedText01]
						,[ShipmentDeliveryUserDefinedText01]
						,[ShipmentDelivery2UserDefinedText01]
						,[ShipmentDelivery3UserDefinedText01]
						,[ShipmentDelivery4UserDefinedText01]
						,[ShipmentPickUpUserDefinedText02]
						,[ShipmentDeliveryUserDefinedText02]
						,[ShipmentDelivery2UserDefinedText02]
						,[ShipmentDelivery3UserDefinedText02]
						,[ShipmentDelivery4UserDefinedText02]
						,[ShipmentPickUpUserDefinedText03]
						,[ShipmentDeliveryUserDefinedText03]
						,[ShipmentDelivery2UserDefinedText03]
						,[ShipmentDelivery3UserDefinedText03]
						,[ShipmentDelivery4UserDefinedText03]
						,[ShipmentPickUpRegionCode]
						,[ShipmentDeliveryRegionCode]
						,[ShipmentDelivery2RegionCode]
						,[ShipmentDelivery3RegionCode]
						,[ShipmentDelivery4RegionCode]
						,[ShipmentPreferredContainerType]
						,[ShipmentDelivery2CompanyName2]
						,[ShipmentDelivery2CustomsLocation]
						,[ShipmentDelivery2Group]
						,[ShipmentDelivery2ShortName]
						,[ShipmentDelivery2Street2]
						,[ShipmentDelivery3CompanyName2]
						,[ShipmentDelivery3CustomsLocation]
						,[ShipmentDelivery3Group]
						,[ShipmentDelivery3ShortName]
						,[ShipmentDelivery3Street2]
						,[ShipmentDelivery4CompanyName2]
						,[ShipmentDelivery4CustomsLocation]
						,[ShipmentDelivery4Group]
						,[ShipmentDelivery4ShortName]
						,[ShipmentDelivery4Street2]
						,[ShipmentDeliveryCompanyName2]
						,[ShipmentDeliveryCustomsLocation]
						,[ShipmentDeliveryShortName]
						,[ShipmentDeliveryStreet2]
						,[ShipmentPickUpCompanyName2]
						,[ShipmentPickUpCustomsLocation]
						,[ShipmentPickUpShortName]
						,[ShipmentPickUpStreet2]
						,[ShipmentReturnCompanyName2]
						,[ShipmentReturnCustomsLocation]
						,[ShipmentReturnGroup]
						,[ShipmentReturnShortName]
						,[ShipmentReturnStreet2]
						,[ShipmentUserDefinedDateTime08]
						,[ShipmentLastExternalChangeDateTime]
						,[ShipmentLastFlagExternalChangeHandledDateTime]
						,[ShipmentImportBatch]
						,[ShipmentReturnDateTime]
						,[ShipmentNewEDIPending]
						,[ContainerTypeCategoryCode]
						,[ShipmentUserDefinedNumber06]
						,[ShipmentUserDefinedNumber07]
						,[ShipmentUserDefinedNumber08]
						,[ShipmentUserDefinedNumber09]
						,[ShipmentUserDefinedNumber10]
						,[ShipmentUserDefinedNumber11]
						,[ShipmentUserDefinedNumber12]
						,[ShipmentUserDefinedNumber13]
						,[ShipmentUserDefinedNumber14]
						,[ShipmentUserDefinedNumber15]
						)
					VALUES (
						Src.IDShipment
						,Src.ShipmentAddDateTime
						,Src.ShipmentEditDateTime
						,Src.ShipmentAddUserCode
						,Src.ShipmentEditUserCode
						,Src.DataEntryDefinitionID
						,Src.TransportStatusID
						,Src.TransportStatusIDPrevious
						,Src.ShipmentStatusChangeDateTime
						,Src.ShipmentNumber
						,Src.QuotationID
						,Src.ShipmentQuotationNumber
						,Src.ShipmentType
						,Src.ShipmentPickUpCompanyID
						,Src.ShipmentPickupCompanyName
						,Src.ShipmentPickUpStreet
						,Src.ShipmentPickUpCity
						,Src.ShipmentPickUpZipCode
						,Src.ShipmentPickUpCountry
						,Src.ShipmentPickUpPhone
						,Src.ShipmentPickUpFax
						,Src.ShipmentPickUpEmail
						,Src.ShipmentPickUpContact
						,Src.ShipmentPickUpDateTime
						,Src.ShipmentDeliveryCompanyID
						,Src.ShipmentDeliveryCompanyName
						,Src.ShipmentDeliveryStreet
						,Src.ShipmentDeliveryCity
						,Src.ShipmentDeliveryZipCode
						,Src.ShipmentDeliveryCountry
						,Src.ShipmentDeliveryPhone
						,Src.ShipmentDeliveryFax
						,Src.ShipmentDeliveryEmail
						,Src.ShipmentDeliveryContact
						,Src.ShipmentDeliveryDateTime
						,Src.ShipmentDeliveredDateTime
						,Src.ShipmentConsigneeCompanyID
						,Src.ShipmentConsigneeCompanyName
						,Src.ShipmentConsigneeStreet
						,Src.ShipmentConsigneeCity
						,Src.ShipmentConsigneeZipCode
						,Src.ShipmentConsigneeCountry
						,Src.ShipmentConsigneePhone
						,Src.ShipmentConsigneeFax
						,Src.ShipmentConsigneeEmail
						,Src.ShipmentConsigneeContact
						,Src.ShipmentConsigneeDateTime
						,Src.ShipmentSCVCode
						,Src.ShipmentConsigneeSCVCode
						,Src.ShipmentTransportUnitType
						,Src.ShipmentTransportUnits
						,Src.ShipmentInternalNotes
						,Src.ShipmentOriginID
						,Src.ShipmentOriginName
						,Src.ShipmentOriginEmail
						,Src.ShipmentOriginNotes
						,Src.ShipmentInsurance
						,Src.ShipmentCustomsClearance
						,Src.ShipmentCustomsOffice
						,Src.ShipmentIncoTerm
						,Src.CompanyID
						,Src.ShipmentDeliveryReference
						,Src.ShipmentDeliveryReference2
						,Src.ShipmentContextCode
						,Src.ShipmentEstimatedDateTimeOfDeparture
						,Src.ShipmentEstimatedDateTimeOfArrival
						,Src.ShipmentNotes
						,Src.ShipmentContainerType
						,Src.ShipmentContainerSize
						,Src.ShipmentContainerNumber
						,Src.ShipmentHBLNumber
						,Src.ShipmentCBLNumber
						,Src.ShipmentVesselName
						,Src.ShipmentShippingOrderNumber
						,Src.ShipmentPackages
						,Src.ShipmentWeight
						,Src.ShipmentVolume
						,Src.ShipmentUserDefinedText01
						,Src.ShipmentUserDefinedText02
						,Src.ShipmentUserDefinedText03
						,Src.ShipmentUserDefinedText04
						,Src.ShipmentUserDefinedText05
						,Src.ShipmentUserDefinedText06
						,Src.ShipmentUserDefinedDateTime01
						,Src.ShipmentUserDefinedDateTime02
						,Src.ShipmentUserDefinedDateTime03
						,Src.ShipmentUserDefinedNumber01
						,Src.ShipmentUserDefinedNumber02
						,Src.ShipmentUserDefinedNumber03
						,Src.ShipmentUserDefinedLongText01
						,Src.ShipmentUserDefinedLongText02
						,Src.ShipmentUserDefinedLongText03
						,Src.OrderID
						,Src.ReceiptID
						,Src.ShipmentUserDefinedYesNo01
						,Src.ShipmentUserDefinedYesNo02
						,Src.ShipmentUserDefinedYesNo03
						,Src.ShipmentUserDefinedYesNo04
						,Src.ShipmentUserDefinedYesNo05
						,Src.ShipmentUserDefinedText07
						,Src.ShipmentUserDefinedText08
						,Src.ShipmentUserDefinedText09
						,Src.ShipmentUserDefinedText10
						,Src.ShipmentUserDefinedText11
						,Src.DataEntryDefinitionIDAutoCreateTransport
						,Src.ShipmentActualDateTimeOfArrival
						,Src.ShipmentActualDateTimeOfDeparture
						,Src.ShipmentAutoCreateTransportValues
						,Src.ShipmentBundleID
						,Src.ShipmentClientReference
						,Src.ShipmentDeliveryRemarks
						,Src.ShipmentLeg
						,Src.ShipmentPalletTypeCode
						,Src.ShipmentPickUpRemarks
						,Src.ShipmentRegionCodeDestination
						,Src.ShipmentRegionCodeOrigin
						,Src.ShipmentReturnCity
						,Src.ShipmentReturnCompanyID
						,Src.ShipmentReturnCompanyName
						,Src.ShipmentReturnContact
						,Src.ShipmentReturnCountry
						,Src.ShipmentReturnEmail
						,Src.ShipmentReturnFax
						,Src.ShipmentReturnPhone
						,Src.ShipmentReturnRemarks
						,Src.ShipmentReturnStreet
						,Src.ShipmentReturnZipCode
						,Src.ShipmentThresholdField
						,Src.ShipmentVesselCode
						,Src.ShipmentVoyageCode
						,Src.SubContextCode
						,Src.ShipmentUserDefinedDateTime04
						,Src.ShipmentUserDefinedDateTime05
						,Src.ShipmentUserDefinedDateTime06
						,Src.ShipmentUserDefinedDateTime07
						,Src.ShipmentUserDefinedDateTime09
						,Src.ShipmentUserDefinedDateTime10
						,Src.ShipmentUserDefinedNumber04
						,Src.ShipmentUserDefinedNumber05
						,Src.ShipmentUserDefinedLongText04
						,Src.ShipmentUserDefinedLongText05
						,Src.ShipmentUserDefinedText12
						,Src.ShipmentUserDefinedText13
						,Src.ShipmentUserDefinedText14
						,Src.ShipmentUserDefinedText15
						,Src.ShipmentPickUpReference
						,Src.ShipmentReturnReference
						,Src.ShipmentDelivery2CompanyID
						,Src.ShipmentDelivery2CompanyName
						,Src.ShipmentDelivery2Street
						,Src.ShipmentDelivery2City
						,Src.ShipmentDelivery2ZipCode
						,Src.ShipmentDelivery2Country
						,Src.ShipmentDelivery2Phone
						,Src.ShipmentDelivery2Fax
						,Src.ShipmentDelivery2Email
						,Src.ShipmentDelivery2Contact
						,Src.ShipmentDelivery2Remarks
						,Src.ShipmentDelivery3CompanyID
						,Src.ShipmentDelivery3CompanyName
						,Src.ShipmentDelivery3Street
						,Src.ShipmentDelivery3City
						,Src.ShipmentDelivery3ZipCode
						,Src.ShipmentDelivery3Country
						,Src.ShipmentDelivery3Phone
						,Src.ShipmentDelivery3Fax
						,Src.ShipmentDelivery3Email
						,Src.ShipmentDelivery3Contact
						,Src.ShipmentDelivery3Remarks
						,Src.ShipmentDelivery4CompanyID
						,Src.ShipmentDelivery4CompanyName
						,Src.ShipmentDelivery4Street
						,Src.ShipmentDelivery4City
						,Src.ShipmentDelivery4ZipCode
						,Src.ShipmentDelivery4Country
						,Src.ShipmentDelivery4Phone
						,Src.ShipmentDelivery4Fax
						,Src.ShipmentDelivery4Email
						,Src.ShipmentDelivery4Contact
						,Src.ShipmentDelivery4Remarks
						,Src.ShipmentChangesAcceptedDateTime
						,Src.ShipmentRuleType
						,Src.ShipmentCreationDataSource
						,Src.ShipmentChangedDataStorageString
						,Src.CountryCode
						,Src.ShipmentMandatoryCarrier
						,Src.ShipmentOwnerLogin
						,Src.ShipmentAllowConsolidation
						,Src.ShipmentAllowDirectFTL
						,Src.ShipmentBookingWindowEndTime
						,Src.ShipmentBookingWindowStartTime
						,Src.ShipmentCustomerAllowsDirectFTL
						,Src.ShipmentDeliveryGroup
						,Src.ShipmentDeliveryWindowDaysBottom
						,Src.ShipmentDeliveryWindowDaysTop
						,Src.ShipmentDepartment
						,Src.ShipmentExternalID
						,Src.ShipmentGoodsAvailableDateTime
						,Src.ShipmentPickUpGroup
						,Src.ShipmentSpeedOrder
						,Src.ShipmentIDPreviousLeg
						,Src.ShipmentIDOriginalLeg
						,Src.ShipmentCombinationID
						,Src.ShipmentPriorityOrder
						,Src.ShipmentPickUpUserDefinedText01
						,Src.ShipmentDeliveryUserDefinedText01
						,Src.ShipmentDelivery2UserDefinedText01
						,Src.ShipmentDelivery3UserDefinedText01
						,Src.ShipmentDelivery4UserDefinedText01
						,Src.ShipmentPickUpUserDefinedText02
						,Src.ShipmentDeliveryUserDefinedText02
						,Src.ShipmentDelivery2UserDefinedText02
						,Src.ShipmentDelivery3UserDefinedText02
						,Src.ShipmentDelivery4UserDefinedText02
						,Src.ShipmentPickUpUserDefinedText03
						,Src.ShipmentDeliveryUserDefinedText03
						,Src.ShipmentDelivery2UserDefinedText03
						,Src.ShipmentDelivery3UserDefinedText03
						,Src.ShipmentDelivery4UserDefinedText03
						,Src.ShipmentPickUpRegionCode
						,Src.ShipmentDeliveryRegionCode
						,Src.ShipmentDelivery2RegionCode
						,Src.ShipmentDelivery3RegionCode
						,Src.ShipmentDelivery4RegionCode
						,Src.ShipmentPreferredContainerType
						,Src.ShipmentDelivery2CompanyName2
						,Src.ShipmentDelivery2CustomsLocation
						,Src.ShipmentDelivery2Group
						,Src.ShipmentDelivery2ShortName
						,Src.ShipmentDelivery2Street2
						,Src.ShipmentDelivery3CompanyName2
						,Src.ShipmentDelivery3CustomsLocation
						,Src.ShipmentDelivery3Group
						,Src.ShipmentDelivery3ShortName
						,Src.ShipmentDelivery3Street2
						,Src.ShipmentDelivery4CompanyName2
						,Src.ShipmentDelivery4CustomsLocation
						,Src.ShipmentDelivery4Group
						,Src.ShipmentDelivery4ShortName
						,Src.ShipmentDelivery4Street2
						,Src.ShipmentDeliveryCompanyName2
						,Src.ShipmentDeliveryCustomsLocation
						,Src.ShipmentDeliveryShortName
						,Src.ShipmentDeliveryStreet2
						,Src.ShipmentPickUpCompanyName2
						,Src.ShipmentPickUpCustomsLocation
						,Src.ShipmentPickUpShortName
						,Src.ShipmentPickUpStreet2
						,Src.ShipmentReturnCompanyName2
						,Src.ShipmentReturnCustomsLocation
						,Src.ShipmentReturnGroup
						,Src.ShipmentReturnShortName
						,Src.ShipmentReturnStreet2
						,Src.ShipmentUserDefinedDateTime08
						,Src.ShipmentLastExternalChangeDateTime
						,Src.ShipmentLastFlagExternalChangeHandledDateTime
						,Src.ShipmentImportBatch
						,Src.ShipmentReturnDateTime
						,Src.ShipmentNewEDIPending
						,Src.ContainerTypeCategoryCode
						,Src.ShipmentUserDefinedNumber06
						,Src.ShipmentUserDefinedNumber07
						,Src.ShipmentUserDefinedNumber08
						,Src.ShipmentUserDefinedNumber09
						,Src.ShipmentUserDefinedNumber10
						,Src.ShipmentUserDefinedNumber11
						,Src.ShipmentUserDefinedNumber12
						,Src.ShipmentUserDefinedNumber13
						,Src.ShipmentUserDefinedNumber14
						,Src.ShipmentUserDefinedNumber15
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDShipment] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDShipment] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Shipments Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Shipments Dest WITH (NOLOCK) ON Src.IDShipment = Dest.IDShipment
					WHERE Dest.[ShipmentEditDateTime] < Src.[ShipmentEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.ShipmentAddDateTime = Src.ShipmentAddDateTime
					,Dest.ShipmentEditDateTime = Src.ShipmentEditDateTime
					,Dest.ShipmentAddUserCode = Src.ShipmentAddUserCode
					,Dest.ShipmentEditUserCode = Src.ShipmentEditUserCode
					,Dest.DataEntryDefinitionID = Src.DataEntryDefinitionID
					,Dest.TransportStatusID = Src.TransportStatusID
					,Dest.TransportStatusIDPrevious = Src.TransportStatusIDPrevious
					,Dest.ShipmentStatusChangeDateTime = Src.ShipmentStatusChangeDateTime
					,Dest.ShipmentNumber = Src.ShipmentNumber
					,Dest.QuotationID = Src.QuotationID
					,Dest.ShipmentQuotationNumber = Src.ShipmentQuotationNumber
					,Dest.ShipmentType = Src.ShipmentType
					,Dest.ShipmentPickUpCompanyID = Src.ShipmentPickUpCompanyID
					,Dest.ShipmentPickupCompanyName = Src.ShipmentPickupCompanyName
					,Dest.ShipmentPickUpStreet = Src.ShipmentPickUpStreet
					,Dest.ShipmentPickUpCity = Src.ShipmentPickUpCity
					,Dest.ShipmentPickUpZipCode = Src.ShipmentPickUpZipCode
					,Dest.ShipmentPickUpCountry = Src.ShipmentPickUpCountry
					,Dest.ShipmentPickUpPhone = Src.ShipmentPickUpPhone
					,Dest.ShipmentPickUpFax = Src.ShipmentPickUpFax
					,Dest.ShipmentPickUpEmail = Src.ShipmentPickUpEmail
					,Dest.ShipmentPickUpContact = Src.ShipmentPickUpContact
					,Dest.ShipmentPickUpDateTime = Src.ShipmentPickUpDateTime
					,Dest.ShipmentDeliveryCompanyID = Src.ShipmentDeliveryCompanyID
					,Dest.ShipmentDeliveryCompanyName = Src.ShipmentDeliveryCompanyName
					,Dest.ShipmentDeliveryStreet = Src.ShipmentDeliveryStreet
					,Dest.ShipmentDeliveryCity = Src.ShipmentDeliveryCity
					,Dest.ShipmentDeliveryZipCode = Src.ShipmentDeliveryZipCode
					,Dest.ShipmentDeliveryCountry = Src.ShipmentDeliveryCountry
					,Dest.ShipmentDeliveryPhone = Src.ShipmentDeliveryPhone
					,Dest.ShipmentDeliveryFax = Src.ShipmentDeliveryFax
					,Dest.ShipmentDeliveryEmail = Src.ShipmentDeliveryEmail
					,Dest.ShipmentDeliveryContact = Src.ShipmentDeliveryContact
					,Dest.ShipmentDeliveryDateTime = Src.ShipmentDeliveryDateTime
					,Dest.ShipmentDeliveredDateTime = Src.ShipmentDeliveredDateTime
					,Dest.ShipmentConsigneeCompanyID = Src.ShipmentConsigneeCompanyID
					,Dest.ShipmentConsigneeCompanyName = Src.ShipmentConsigneeCompanyName
					,Dest.ShipmentConsigneeStreet = Src.ShipmentConsigneeStreet
					,Dest.ShipmentConsigneeCity = Src.ShipmentConsigneeCity
					,Dest.ShipmentConsigneeZipCode = Src.ShipmentConsigneeZipCode
					,Dest.ShipmentConsigneeCountry = Src.ShipmentConsigneeCountry
					,Dest.ShipmentConsigneePhone = Src.ShipmentConsigneePhone
					,Dest.ShipmentConsigneeFax = Src.ShipmentConsigneeFax
					,Dest.ShipmentConsigneeEmail = Src.ShipmentConsigneeEmail
					,Dest.ShipmentConsigneeContact = Src.ShipmentConsigneeContact
					,Dest.ShipmentConsigneeDateTime = Src.ShipmentConsigneeDateTime
					,Dest.ShipmentSCVCode = Src.ShipmentSCVCode
					,Dest.ShipmentConsigneeSCVCode = Src.ShipmentConsigneeSCVCode
					,Dest.ShipmentTransportUnitType = Src.ShipmentTransportUnitType
					,Dest.ShipmentTransportUnits = Src.ShipmentTransportUnits
					,Dest.ShipmentInternalNotes = Src.ShipmentInternalNotes
					,Dest.ShipmentOriginID = Src.ShipmentOriginID
					,Dest.ShipmentOriginName = Src.ShipmentOriginName
					,Dest.ShipmentOriginEmail = Src.ShipmentOriginEmail
					,Dest.ShipmentOriginNotes = Src.ShipmentOriginNotes
					,Dest.ShipmentInsurance = Src.ShipmentInsurance
					,Dest.ShipmentCustomsClearance = Src.ShipmentCustomsClearance
					,Dest.ShipmentCustomsOffice = Src.ShipmentCustomsOffice
					,Dest.ShipmentIncoTerm = Src.ShipmentIncoTerm
					,Dest.CompanyID = Src.CompanyID
					,Dest.ShipmentDeliveryReference = Src.ShipmentDeliveryReference
					,Dest.ShipmentDeliveryReference2 = Src.ShipmentDeliveryReference2
					,Dest.ShipmentContextCode = Src.ShipmentContextCode
					,Dest.ShipmentEstimatedDateTimeOfDeparture = Src.ShipmentEstimatedDateTimeOfDeparture
					,Dest.ShipmentEstimatedDateTimeOfArrival = Src.ShipmentEstimatedDateTimeOfArrival
					,Dest.ShipmentNotes = Src.ShipmentNotes
					,Dest.ShipmentContainerType = Src.ShipmentContainerType
					,Dest.ShipmentContainerSize = Src.ShipmentContainerSize
					,Dest.ShipmentContainerNumber = Src.ShipmentContainerNumber
					,Dest.ShipmentHBLNumber = Src.ShipmentHBLNumber
					,Dest.ShipmentCBLNumber = Src.ShipmentCBLNumber
					,Dest.ShipmentVesselName = Src.ShipmentVesselName
					,Dest.ShipmentShippingOrderNumber = Src.ShipmentShippingOrderNumber
					,Dest.ShipmentPackages = Src.ShipmentPackages
					,Dest.ShipmentWeight = Src.ShipmentWeight
					,Dest.ShipmentVolume = Src.ShipmentVolume
					,Dest.ShipmentUserDefinedText01 = Src.ShipmentUserDefinedText01
					,Dest.ShipmentUserDefinedText02 = Src.ShipmentUserDefinedText02
					,Dest.ShipmentUserDefinedText03 = Src.ShipmentUserDefinedText03
					,Dest.ShipmentUserDefinedText04 = Src.ShipmentUserDefinedText04
					,Dest.ShipmentUserDefinedText05 = Src.ShipmentUserDefinedText05
					,Dest.ShipmentUserDefinedText06 = Src.ShipmentUserDefinedText06
					,Dest.ShipmentUserDefinedDateTime01 = Src.ShipmentUserDefinedDateTime01
					,Dest.ShipmentUserDefinedDateTime02 = Src.ShipmentUserDefinedDateTime02
					,Dest.ShipmentUserDefinedDateTime03 = Src.ShipmentUserDefinedDateTime03
					,Dest.ShipmentUserDefinedNumber01 = Src.ShipmentUserDefinedNumber01
					,Dest.ShipmentUserDefinedNumber02 = Src.ShipmentUserDefinedNumber02
					,Dest.ShipmentUserDefinedNumber03 = Src.ShipmentUserDefinedNumber03
					,Dest.ShipmentUserDefinedLongText01 = Src.ShipmentUserDefinedLongText01
					,Dest.ShipmentUserDefinedLongText02 = Src.ShipmentUserDefinedLongText02
					,Dest.ShipmentUserDefinedLongText03 = Src.ShipmentUserDefinedLongText03
					,Dest.OrderID = Src.OrderID
					,Dest.ReceiptID = Src.ReceiptID
					,Dest.ShipmentUserDefinedYesNo01 = Src.ShipmentUserDefinedYesNo01
					,Dest.ShipmentUserDefinedYesNo02 = Src.ShipmentUserDefinedYesNo02
					,Dest.ShipmentUserDefinedYesNo03 = Src.ShipmentUserDefinedYesNo03
					,Dest.ShipmentUserDefinedYesNo04 = Src.ShipmentUserDefinedYesNo04
					,Dest.ShipmentUserDefinedYesNo05 = Src.ShipmentUserDefinedYesNo05
					,Dest.ShipmentUserDefinedText07 = Src.ShipmentUserDefinedText07
					,Dest.ShipmentUserDefinedText08 = Src.ShipmentUserDefinedText08
					,Dest.ShipmentUserDefinedText09 = Src.ShipmentUserDefinedText09
					,Dest.ShipmentUserDefinedText10 = Src.ShipmentUserDefinedText10
					,Dest.ShipmentUserDefinedText11 = Src.ShipmentUserDefinedText11
					,Dest.DataEntryDefinitionIDAutoCreateTransport = Src.DataEntryDefinitionIDAutoCreateTransport
					,Dest.ShipmentActualDateTimeOfArrival = Src.ShipmentActualDateTimeOfArrival
					,Dest.ShipmentActualDateTimeOfDeparture = Src.ShipmentActualDateTimeOfDeparture
					,Dest.ShipmentAutoCreateTransportValues = Src.ShipmentAutoCreateTransportValues
					,Dest.ShipmentBundleID = Src.ShipmentBundleID
					,Dest.ShipmentClientReference = Src.ShipmentClientReference
					,Dest.ShipmentDeliveryRemarks = Src.ShipmentDeliveryRemarks
					,Dest.ShipmentLeg = Src.ShipmentLeg
					,Dest.ShipmentPalletTypeCode = Src.ShipmentPalletTypeCode
					,Dest.ShipmentPickUpRemarks = Src.ShipmentPickUpRemarks
					,Dest.ShipmentRegionCodeDestination = Src.ShipmentRegionCodeDestination
					,Dest.ShipmentRegionCodeOrigin = Src.ShipmentRegionCodeOrigin
					,Dest.ShipmentReturnCity = Src.ShipmentReturnCity
					,Dest.ShipmentReturnCompanyID = Src.ShipmentReturnCompanyID
					,Dest.ShipmentReturnCompanyName = Src.ShipmentReturnCompanyName
					,Dest.ShipmentReturnContact = Src.ShipmentReturnContact
					,Dest.ShipmentReturnCountry = Src.ShipmentReturnCountry
					,Dest.ShipmentReturnEmail = Src.ShipmentReturnEmail
					,Dest.ShipmentReturnFax = Src.ShipmentReturnFax
					,Dest.ShipmentReturnPhone = Src.ShipmentReturnPhone
					,Dest.ShipmentReturnRemarks = Src.ShipmentReturnRemarks
					,Dest.ShipmentReturnStreet = Src.ShipmentReturnStreet
					,Dest.ShipmentReturnZipCode = Src.ShipmentReturnZipCode
					,Dest.ShipmentThresholdField = Src.ShipmentThresholdField
					,Dest.ShipmentVesselCode = Src.ShipmentVesselCode
					,Dest.ShipmentVoyageCode = Src.ShipmentVoyageCode
					,Dest.SubContextCode = Src.SubContextCode
					,Dest.ShipmentUserDefinedDateTime04 = Src.ShipmentUserDefinedDateTime04
					,Dest.ShipmentUserDefinedDateTime05 = Src.ShipmentUserDefinedDateTime05
					,Dest.ShipmentUserDefinedDateTime06 = Src.ShipmentUserDefinedDateTime06
					,Dest.ShipmentUserDefinedDateTime07 = Src.ShipmentUserDefinedDateTime07
					,Dest.ShipmentUserDefinedDateTime09 = Src.ShipmentUserDefinedDateTime09
					,Dest.ShipmentUserDefinedDateTime10 = Src.ShipmentUserDefinedDateTime10
					,Dest.ShipmentUserDefinedNumber04 = Src.ShipmentUserDefinedNumber04
					,Dest.ShipmentUserDefinedNumber05 = Src.ShipmentUserDefinedNumber05
					,Dest.ShipmentUserDefinedLongText04 = Src.ShipmentUserDefinedLongText04
					,Dest.ShipmentUserDefinedLongText05 = Src.ShipmentUserDefinedLongText05
					,Dest.ShipmentUserDefinedText12 = Src.ShipmentUserDefinedText12
					,Dest.ShipmentUserDefinedText13 = Src.ShipmentUserDefinedText13
					,Dest.ShipmentUserDefinedText14 = Src.ShipmentUserDefinedText14
					,Dest.ShipmentUserDefinedText15 = Src.ShipmentUserDefinedText15
					,Dest.ShipmentPickUpReference = Src.ShipmentPickUpReference
					,Dest.ShipmentReturnReference = Src.ShipmentReturnReference
					,Dest.ShipmentDelivery2CompanyID = Src.ShipmentDelivery2CompanyID
					,Dest.ShipmentDelivery2CompanyName = Src.ShipmentDelivery2CompanyName
					,Dest.ShipmentDelivery2Street = Src.ShipmentDelivery2Street
					,Dest.ShipmentDelivery2City = Src.ShipmentDelivery2City
					,Dest.ShipmentDelivery2ZipCode = Src.ShipmentDelivery2ZipCode
					,Dest.ShipmentDelivery2Country = Src.ShipmentDelivery2Country
					,Dest.ShipmentDelivery2Phone = Src.ShipmentDelivery2Phone
					,Dest.ShipmentDelivery2Fax = Src.ShipmentDelivery2Fax
					,Dest.ShipmentDelivery2Email = Src.ShipmentDelivery2Email
					,Dest.ShipmentDelivery2Contact = Src.ShipmentDelivery2Contact
					,Dest.ShipmentDelivery2Remarks = Src.ShipmentDelivery2Remarks
					,Dest.ShipmentDelivery3CompanyID = Src.ShipmentDelivery3CompanyID
					,Dest.ShipmentDelivery3CompanyName = Src.ShipmentDelivery3CompanyName
					,Dest.ShipmentDelivery3Street = Src.ShipmentDelivery3Street
					,Dest.ShipmentDelivery3City = Src.ShipmentDelivery3City
					,Dest.ShipmentDelivery3ZipCode = Src.ShipmentDelivery3ZipCode
					,Dest.ShipmentDelivery3Country = Src.ShipmentDelivery3Country
					,Dest.ShipmentDelivery3Phone = Src.ShipmentDelivery3Phone
					,Dest.ShipmentDelivery3Fax = Src.ShipmentDelivery3Fax
					,Dest.ShipmentDelivery3Email = Src.ShipmentDelivery3Email
					,Dest.ShipmentDelivery3Contact = Src.ShipmentDelivery3Contact
					,Dest.ShipmentDelivery3Remarks = Src.ShipmentDelivery3Remarks
					,Dest.ShipmentDelivery4CompanyID = Src.ShipmentDelivery4CompanyID
					,Dest.ShipmentDelivery4CompanyName = Src.ShipmentDelivery4CompanyName
					,Dest.ShipmentDelivery4Street = Src.ShipmentDelivery4Street
					,Dest.ShipmentDelivery4City = Src.ShipmentDelivery4City
					,Dest.ShipmentDelivery4ZipCode = Src.ShipmentDelivery4ZipCode
					,Dest.ShipmentDelivery4Country = Src.ShipmentDelivery4Country
					,Dest.ShipmentDelivery4Phone = Src.ShipmentDelivery4Phone
					,Dest.ShipmentDelivery4Fax = Src.ShipmentDelivery4Fax
					,Dest.ShipmentDelivery4Email = Src.ShipmentDelivery4Email
					,Dest.ShipmentDelivery4Contact = Src.ShipmentDelivery4Contact
					,Dest.ShipmentDelivery4Remarks = Src.ShipmentDelivery4Remarks
					,Dest.ShipmentChangesAcceptedDateTime = Src.ShipmentChangesAcceptedDateTime
					,Dest.ShipmentRuleType = Src.ShipmentRuleType
					,Dest.ShipmentCreationDataSource = Src.ShipmentCreationDataSource
					,Dest.ShipmentChangedDataStorageString = Src.ShipmentChangedDataStorageString
					,Dest.CountryCode = Src.CountryCode
					,Dest.ShipmentMandatoryCarrier = Src.ShipmentMandatoryCarrier
					,Dest.ShipmentOwnerLogin = Src.ShipmentOwnerLogin
					,Dest.ShipmentAllowConsolidation = Src.ShipmentAllowConsolidation
					,Dest.ShipmentAllowDirectFTL = Src.ShipmentAllowDirectFTL
					,Dest.ShipmentBookingWindowEndTime = Src.ShipmentBookingWindowEndTime
					,Dest.ShipmentBookingWindowStartTime = Src.ShipmentBookingWindowStartTime
					,Dest.ShipmentCustomerAllowsDirectFTL = Src.ShipmentCustomerAllowsDirectFTL
					,Dest.ShipmentDeliveryGroup = Src.ShipmentDeliveryGroup
					,Dest.ShipmentDeliveryWindowDaysBottom = Src.ShipmentDeliveryWindowDaysBottom
					,Dest.ShipmentDeliveryWindowDaysTop = Src.ShipmentDeliveryWindowDaysTop
					,Dest.ShipmentDepartment = Src.ShipmentDepartment
					,Dest.ShipmentExternalID = Src.ShipmentExternalID
					,Dest.ShipmentGoodsAvailableDateTime = Src.ShipmentGoodsAvailableDateTime
					,Dest.ShipmentPickUpGroup = Src.ShipmentPickUpGroup
					,Dest.ShipmentSpeedOrder = Src.ShipmentSpeedOrder
					,Dest.ShipmentIDPreviousLeg = Src.ShipmentIDPreviousLeg
					,Dest.ShipmentIDOriginalLeg = Src.ShipmentIDOriginalLeg
					,Dest.ShipmentCombinationID = Src.ShipmentCombinationID
					,Dest.ShipmentPriorityOrder = Src.ShipmentPriorityOrder
					,Dest.ShipmentPickUpUserDefinedText01 = Src.ShipmentPickUpUserDefinedText01
					,Dest.ShipmentDeliveryUserDefinedText01 = Src.ShipmentDeliveryUserDefinedText01
					,Dest.ShipmentDelivery2UserDefinedText01 = Src.ShipmentDelivery2UserDefinedText01
					,Dest.ShipmentDelivery3UserDefinedText01 = Src.ShipmentDelivery3UserDefinedText01
					,Dest.ShipmentDelivery4UserDefinedText01 = Src.ShipmentDelivery4UserDefinedText01
					,Dest.ShipmentPickUpUserDefinedText02 = Src.ShipmentPickUpUserDefinedText02
					,Dest.ShipmentDeliveryUserDefinedText02 = Src.ShipmentDeliveryUserDefinedText02
					,Dest.ShipmentDelivery2UserDefinedText02 = Src.ShipmentDelivery2UserDefinedText02
					,Dest.ShipmentDelivery3UserDefinedText02 = Src.ShipmentDelivery3UserDefinedText02
					,Dest.ShipmentDelivery4UserDefinedText02 = Src.ShipmentDelivery4UserDefinedText02
					,Dest.ShipmentPickUpUserDefinedText03 = Src.ShipmentPickUpUserDefinedText03
					,Dest.ShipmentDeliveryUserDefinedText03 = Src.ShipmentDeliveryUserDefinedText03
					,Dest.ShipmentDelivery2UserDefinedText03 = Src.ShipmentDelivery2UserDefinedText03
					,Dest.ShipmentDelivery3UserDefinedText03 = Src.ShipmentDelivery3UserDefinedText03
					,Dest.ShipmentDelivery4UserDefinedText03 = Src.ShipmentDelivery4UserDefinedText03
					,Dest.ShipmentPickUpRegionCode = Src.ShipmentPickUpRegionCode
					,Dest.ShipmentDeliveryRegionCode = Src.ShipmentDeliveryRegionCode
					,Dest.ShipmentDelivery2RegionCode = Src.ShipmentDelivery2RegionCode
					,Dest.ShipmentDelivery3RegionCode = Src.ShipmentDelivery3RegionCode
					,Dest.ShipmentDelivery4RegionCode = Src.ShipmentDelivery4RegionCode
					,Dest.ShipmentPreferredContainerType = Src.ShipmentPreferredContainerType
					,Dest.ShipmentDelivery2CompanyName2 = Src.ShipmentDelivery2CompanyName2
					,Dest.ShipmentDelivery2CustomsLocation = Src.ShipmentDelivery2CustomsLocation
					,Dest.ShipmentDelivery2Group = Src.ShipmentDelivery2Group
					,Dest.ShipmentDelivery2ShortName = Src.ShipmentDelivery2ShortName
					,Dest.ShipmentDelivery2Street2 = Src.ShipmentDelivery2Street2
					,Dest.ShipmentDelivery3CompanyName2 = Src.ShipmentDelivery3CompanyName2
					,Dest.ShipmentDelivery3CustomsLocation = Src.ShipmentDelivery3CustomsLocation
					,Dest.ShipmentDelivery3Group = Src.ShipmentDelivery3Group
					,Dest.ShipmentDelivery3ShortName = Src.ShipmentDelivery3ShortName
					,Dest.ShipmentDelivery3Street2 = Src.ShipmentDelivery3Street2
					,Dest.ShipmentDelivery4CompanyName2 = Src.ShipmentDelivery4CompanyName2
					,Dest.ShipmentDelivery4CustomsLocation = Src.ShipmentDelivery4CustomsLocation
					,Dest.ShipmentDelivery4Group = Src.ShipmentDelivery4Group
					,Dest.ShipmentDelivery4ShortName = Src.ShipmentDelivery4ShortName
					,Dest.ShipmentDelivery4Street2 = Src.ShipmentDelivery4Street2
					,Dest.ShipmentDeliveryCompanyName2 = Src.ShipmentDeliveryCompanyName2
					,Dest.ShipmentDeliveryCustomsLocation = Src.ShipmentDeliveryCustomsLocation
					,Dest.ShipmentDeliveryShortName = Src.ShipmentDeliveryShortName
					,Dest.ShipmentDeliveryStreet2 = Src.ShipmentDeliveryStreet2
					,Dest.ShipmentPickUpCompanyName2 = Src.ShipmentPickUpCompanyName2
					,Dest.ShipmentPickUpCustomsLocation = Src.ShipmentPickUpCustomsLocation
					,Dest.ShipmentPickUpShortName = Src.ShipmentPickUpShortName
					,Dest.ShipmentPickUpStreet2 = Src.ShipmentPickUpStreet2
					,Dest.ShipmentReturnCompanyName2 = Src.ShipmentReturnCompanyName2
					,Dest.ShipmentReturnCustomsLocation = Src.ShipmentReturnCustomsLocation
					,Dest.ShipmentReturnGroup = Src.ShipmentReturnGroup
					,Dest.ShipmentReturnShortName = Src.ShipmentReturnShortName
					,Dest.ShipmentReturnStreet2 = Src.ShipmentReturnStreet2
					,Dest.ShipmentUserDefinedDateTime08 = Src.ShipmentUserDefinedDateTime08
					,Dest.ShipmentLastExternalChangeDateTime = Src.ShipmentLastExternalChangeDateTime
					,Dest.ShipmentLastFlagExternalChangeHandledDateTime = Src.ShipmentLastFlagExternalChangeHandledDateTime
					,Dest.ShipmentImportBatch = Src.ShipmentImportBatch
					,Dest.ShipmentReturnDateTime = Src.ShipmentReturnDateTime
					,Dest.ShipmentNewEDIPending = Src.ShipmentNewEDIPending
					,Dest.ContainerTypeCategoryCode = Src.ContainerTypeCategoryCode
					,Dest.ShipmentUserDefinedNumber06 = Src.ShipmentUserDefinedNumber06
					,Dest.ShipmentUserDefinedNumber07 = Src.ShipmentUserDefinedNumber07
					,Dest.ShipmentUserDefinedNumber08 = Src.ShipmentUserDefinedNumber08
					,Dest.ShipmentUserDefinedNumber09 = Src.ShipmentUserDefinedNumber09
					,Dest.ShipmentUserDefinedNumber10 = Src.ShipmentUserDefinedNumber10
					,Dest.ShipmentUserDefinedNumber11 = Src.ShipmentUserDefinedNumber11
					,Dest.ShipmentUserDefinedNumber12 = Src.ShipmentUserDefinedNumber12
					,Dest.ShipmentUserDefinedNumber13 = Src.ShipmentUserDefinedNumber13
					,Dest.ShipmentUserDefinedNumber14 = Src.ShipmentUserDefinedNumber14
					,Dest.ShipmentUserDefinedNumber15 = Src.ShipmentUserDefinedNumber15
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDShipment] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDShipment] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Shipments Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Shipments Dest ON Src.[IDShipment] = Dest.[IDShipment]
				WHERE Dest.[ShipmentEditDateTime] < Src.[ShipmentEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Shipments Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Shipments Dest WITH (NOLOCK) ON Src.[IDShipment] = Dest.[IDShipment]
					WHERE Dest.[IDShipment] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Shipments (
					[IDShipment]
					,[ShipmentAddDateTime]
					,[ShipmentEditDateTime]
					,[ShipmentAddUserCode]
					,[ShipmentEditUserCode]
					,[DataEntryDefinitionID]
					,[TransportStatusID]
					,[TransportStatusIDPrevious]
					,[ShipmentStatusChangeDateTime]
					,[ShipmentNumber]
					,[QuotationID]
					,[ShipmentQuotationNumber]
					,[ShipmentType]
					,[ShipmentPickUpCompanyID]
					,[ShipmentPickupCompanyName]
					,[ShipmentPickUpStreet]
					,[ShipmentPickUpCity]
					,[ShipmentPickUpZipCode]
					,[ShipmentPickUpCountry]
					,[ShipmentPickUpPhone]
					,[ShipmentPickUpFax]
					,[ShipmentPickUpEmail]
					,[ShipmentPickUpContact]
					,[ShipmentPickUpDateTime]
					,[ShipmentDeliveryCompanyID]
					,[ShipmentDeliveryCompanyName]
					,[ShipmentDeliveryStreet]
					,[ShipmentDeliveryCity]
					,[ShipmentDeliveryZipCode]
					,[ShipmentDeliveryCountry]
					,[ShipmentDeliveryPhone]
					,[ShipmentDeliveryFax]
					,[ShipmentDeliveryEmail]
					,[ShipmentDeliveryContact]
					,[ShipmentDeliveryDateTime]
					,[ShipmentDeliveredDateTime]
					,[ShipmentConsigneeCompanyID]
					,[ShipmentConsigneeCompanyName]
					,[ShipmentConsigneeStreet]
					,[ShipmentConsigneeCity]
					,[ShipmentConsigneeZipCode]
					,[ShipmentConsigneeCountry]
					,[ShipmentConsigneePhone]
					,[ShipmentConsigneeFax]
					,[ShipmentConsigneeEmail]
					,[ShipmentConsigneeContact]
					,[ShipmentConsigneeDateTime]
					,[ShipmentSCVCode]
					,[ShipmentConsigneeSCVCode]
					,[ShipmentTransportUnitType]
					,[ShipmentTransportUnits]
					,[ShipmentInternalNotes]
					,[ShipmentOriginID]
					,[ShipmentOriginName]
					,[ShipmentOriginEmail]
					,[ShipmentOriginNotes]
					,[ShipmentInsurance]
					,[ShipmentCustomsClearance]
					,[ShipmentCustomsOffice]
					,[ShipmentIncoTerm]
					,[CompanyID]
					,[ShipmentDeliveryReference]
					,[ShipmentDeliveryReference2]
					,[ShipmentContextCode]
					,[ShipmentEstimatedDateTimeOfDeparture]
					,[ShipmentEstimatedDateTimeOfArrival]
					,[ShipmentNotes]
					,[ShipmentContainerType]
					,[ShipmentContainerSize]
					,[ShipmentContainerNumber]
					,[ShipmentHBLNumber]
					,[ShipmentCBLNumber]
					,[ShipmentVesselName]
					,[ShipmentShippingOrderNumber]
					,[ShipmentPackages]
					,[ShipmentWeight]
					,[ShipmentVolume]
					,[ShipmentUserDefinedText01]
					,[ShipmentUserDefinedText02]
					,[ShipmentUserDefinedText03]
					,[ShipmentUserDefinedText04]
					,[ShipmentUserDefinedText05]
					,[ShipmentUserDefinedText06]
					,[ShipmentUserDefinedDateTime01]
					,[ShipmentUserDefinedDateTime02]
					,[ShipmentUserDefinedDateTime03]
					,[ShipmentUserDefinedNumber01]
					,[ShipmentUserDefinedNumber02]
					,[ShipmentUserDefinedNumber03]
					,[ShipmentUserDefinedLongText01]
					,[ShipmentUserDefinedLongText02]
					,[ShipmentUserDefinedLongText03]
					,[OrderID]
					,[ReceiptID]
					,[ShipmentUserDefinedYesNo01]
					,[ShipmentUserDefinedYesNo02]
					,[ShipmentUserDefinedYesNo03]
					,[ShipmentUserDefinedYesNo04]
					,[ShipmentUserDefinedYesNo05]
					,[ShipmentUserDefinedText07]
					,[ShipmentUserDefinedText08]
					,[ShipmentUserDefinedText09]
					,[ShipmentUserDefinedText10]
					,[ShipmentUserDefinedText11]
					,[DataEntryDefinitionIDAutoCreateTransport]
					,[ShipmentActualDateTimeOfArrival]
					,[ShipmentActualDateTimeOfDeparture]
					,[ShipmentAutoCreateTransportValues]
					,[ShipmentBundleID]
					,[ShipmentClientReference]
					,[ShipmentDeliveryRemarks]
					,[ShipmentLeg]
					,[ShipmentPalletTypeCode]
					,[ShipmentPickUpRemarks]
					,[ShipmentRegionCodeDestination]
					,[ShipmentRegionCodeOrigin]
					,[ShipmentReturnCity]
					,[ShipmentReturnCompanyID]
					,[ShipmentReturnCompanyName]
					,[ShipmentReturnContact]
					,[ShipmentReturnCountry]
					,[ShipmentReturnEmail]
					,[ShipmentReturnFax]
					,[ShipmentReturnPhone]
					,[ShipmentReturnRemarks]
					,[ShipmentReturnStreet]
					,[ShipmentReturnZipCode]
					,[ShipmentThresholdField]
					,[ShipmentVesselCode]
					,[ShipmentVoyageCode]
					,[SubContextCode]
					,[ShipmentUserDefinedDateTime04]
					,[ShipmentUserDefinedDateTime05]
					,[ShipmentUserDefinedDateTime06]
					,[ShipmentUserDefinedDateTime07]
					,[ShipmentUserDefinedDateTime09]
					,[ShipmentUserDefinedDateTime10]
					,[ShipmentUserDefinedNumber04]
					,[ShipmentUserDefinedNumber05]
					,[ShipmentUserDefinedLongText04]
					,[ShipmentUserDefinedLongText05]
					,[ShipmentUserDefinedText12]
					,[ShipmentUserDefinedText13]
					,[ShipmentUserDefinedText14]
					,[ShipmentUserDefinedText15]
					,[ShipmentPickUpReference]
					,[ShipmentReturnReference]
					,[ShipmentDelivery2CompanyID]
					,[ShipmentDelivery2CompanyName]
					,[ShipmentDelivery2Street]
					,[ShipmentDelivery2City]
					,[ShipmentDelivery2ZipCode]
					,[ShipmentDelivery2Country]
					,[ShipmentDelivery2Phone]
					,[ShipmentDelivery2Fax]
					,[ShipmentDelivery2Email]
					,[ShipmentDelivery2Contact]
					,[ShipmentDelivery2Remarks]
					,[ShipmentDelivery3CompanyID]
					,[ShipmentDelivery3CompanyName]
					,[ShipmentDelivery3Street]
					,[ShipmentDelivery3City]
					,[ShipmentDelivery3ZipCode]
					,[ShipmentDelivery3Country]
					,[ShipmentDelivery3Phone]
					,[ShipmentDelivery3Fax]
					,[ShipmentDelivery3Email]
					,[ShipmentDelivery3Contact]
					,[ShipmentDelivery3Remarks]
					,[ShipmentDelivery4CompanyID]
					,[ShipmentDelivery4CompanyName]
					,[ShipmentDelivery4Street]
					,[ShipmentDelivery4City]
					,[ShipmentDelivery4ZipCode]
					,[ShipmentDelivery4Country]
					,[ShipmentDelivery4Phone]
					,[ShipmentDelivery4Fax]
					,[ShipmentDelivery4Email]
					,[ShipmentDelivery4Contact]
					,[ShipmentDelivery4Remarks]
					,[ShipmentChangesAcceptedDateTime]
					,[ShipmentRuleType]
					,[ShipmentCreationDataSource]
					,[ShipmentChangedDataStorageString]
					,[CountryCode]
					,[ShipmentMandatoryCarrier]
					,[ShipmentOwnerLogin]
					,[ShipmentAllowConsolidation]
					,[ShipmentAllowDirectFTL]
					,[ShipmentBookingWindowEndTime]
					,[ShipmentBookingWindowStartTime]
					,[ShipmentCustomerAllowsDirectFTL]
					,[ShipmentDeliveryGroup]
					,[ShipmentDeliveryWindowDaysBottom]
					,[ShipmentDeliveryWindowDaysTop]
					,[ShipmentDepartment]
					,[ShipmentExternalID]
					,[ShipmentGoodsAvailableDateTime]
					,[ShipmentPickUpGroup]
					,[ShipmentSpeedOrder]
					,[ShipmentIDPreviousLeg]
					,[ShipmentIDOriginalLeg]
					,[ShipmentCombinationID]
					,[ShipmentPriorityOrder]
					,[ShipmentPickUpUserDefinedText01]
					,[ShipmentDeliveryUserDefinedText01]
					,[ShipmentDelivery2UserDefinedText01]
					,[ShipmentDelivery3UserDefinedText01]
					,[ShipmentDelivery4UserDefinedText01]
					,[ShipmentPickUpUserDefinedText02]
					,[ShipmentDeliveryUserDefinedText02]
					,[ShipmentDelivery2UserDefinedText02]
					,[ShipmentDelivery3UserDefinedText02]
					,[ShipmentDelivery4UserDefinedText02]
					,[ShipmentPickUpUserDefinedText03]
					,[ShipmentDeliveryUserDefinedText03]
					,[ShipmentDelivery2UserDefinedText03]
					,[ShipmentDelivery3UserDefinedText03]
					,[ShipmentDelivery4UserDefinedText03]
					,[ShipmentPickUpRegionCode]
					,[ShipmentDeliveryRegionCode]
					,[ShipmentDelivery2RegionCode]
					,[ShipmentDelivery3RegionCode]
					,[ShipmentDelivery4RegionCode]
					,[ShipmentPreferredContainerType]
					,[ShipmentDelivery2CompanyName2]
					,[ShipmentDelivery2CustomsLocation]
					,[ShipmentDelivery2Group]
					,[ShipmentDelivery2ShortName]
					,[ShipmentDelivery2Street2]
					,[ShipmentDelivery3CompanyName2]
					,[ShipmentDelivery3CustomsLocation]
					,[ShipmentDelivery3Group]
					,[ShipmentDelivery3ShortName]
					,[ShipmentDelivery3Street2]
					,[ShipmentDelivery4CompanyName2]
					,[ShipmentDelivery4CustomsLocation]
					,[ShipmentDelivery4Group]
					,[ShipmentDelivery4ShortName]
					,[ShipmentDelivery4Street2]
					,[ShipmentDeliveryCompanyName2]
					,[ShipmentDeliveryCustomsLocation]
					,[ShipmentDeliveryShortName]
					,[ShipmentDeliveryStreet2]
					,[ShipmentPickUpCompanyName2]
					,[ShipmentPickUpCustomsLocation]
					,[ShipmentPickUpShortName]
					,[ShipmentPickUpStreet2]
					,[ShipmentReturnCompanyName2]
					,[ShipmentReturnCustomsLocation]
					,[ShipmentReturnGroup]
					,[ShipmentReturnShortName]
					,[ShipmentReturnStreet2]
					,[ShipmentUserDefinedDateTime08]
					,[ShipmentLastExternalChangeDateTime]
					,[ShipmentLastFlagExternalChangeHandledDateTime]
					,[ShipmentImportBatch]
					,[ShipmentReturnDateTime]
					,[ShipmentNewEDIPending]
					,[ContainerTypeCategoryCode]
					,[ShipmentUserDefinedNumber06]
					,[ShipmentUserDefinedNumber07]
					,[ShipmentUserDefinedNumber08]
					,[ShipmentUserDefinedNumber09]
					,[ShipmentUserDefinedNumber10]
					,[ShipmentUserDefinedNumber11]
					,[ShipmentUserDefinedNumber12]
					,[ShipmentUserDefinedNumber13]
					,[ShipmentUserDefinedNumber14]
					,[ShipmentUserDefinedNumber15]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDShipment] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDShipment
					,Src.ShipmentAddDateTime
					,Src.ShipmentEditDateTime
					,Src.ShipmentAddUserCode
					,Src.ShipmentEditUserCode
					,Src.DataEntryDefinitionID
					,Src.TransportStatusID
					,Src.TransportStatusIDPrevious
					,Src.ShipmentStatusChangeDateTime
					,Src.ShipmentNumber
					,Src.QuotationID
					,Src.ShipmentQuotationNumber
					,Src.ShipmentType
					,Src.ShipmentPickUpCompanyID
					,Src.ShipmentPickupCompanyName
					,Src.ShipmentPickUpStreet
					,Src.ShipmentPickUpCity
					,Src.ShipmentPickUpZipCode
					,Src.ShipmentPickUpCountry
					,Src.ShipmentPickUpPhone
					,Src.ShipmentPickUpFax
					,Src.ShipmentPickUpEmail
					,Src.ShipmentPickUpContact
					,Src.ShipmentPickUpDateTime
					,Src.ShipmentDeliveryCompanyID
					,Src.ShipmentDeliveryCompanyName
					,Src.ShipmentDeliveryStreet
					,Src.ShipmentDeliveryCity
					,Src.ShipmentDeliveryZipCode
					,Src.ShipmentDeliveryCountry
					,Src.ShipmentDeliveryPhone
					,Src.ShipmentDeliveryFax
					,Src.ShipmentDeliveryEmail
					,Src.ShipmentDeliveryContact
					,Src.ShipmentDeliveryDateTime
					,Src.ShipmentDeliveredDateTime
					,Src.ShipmentConsigneeCompanyID
					,Src.ShipmentConsigneeCompanyName
					,Src.ShipmentConsigneeStreet
					,Src.ShipmentConsigneeCity
					,Src.ShipmentConsigneeZipCode
					,Src.ShipmentConsigneeCountry
					,Src.ShipmentConsigneePhone
					,Src.ShipmentConsigneeFax
					,Src.ShipmentConsigneeEmail
					,Src.ShipmentConsigneeContact
					,Src.ShipmentConsigneeDateTime
					,Src.ShipmentSCVCode
					,Src.ShipmentConsigneeSCVCode
					,Src.ShipmentTransportUnitType
					,Src.ShipmentTransportUnits
					,Src.ShipmentInternalNotes
					,Src.ShipmentOriginID
					,Src.ShipmentOriginName
					,Src.ShipmentOriginEmail
					,Src.ShipmentOriginNotes
					,Src.ShipmentInsurance
					,Src.ShipmentCustomsClearance
					,Src.ShipmentCustomsOffice
					,Src.ShipmentIncoTerm
					,Src.CompanyID
					,Src.ShipmentDeliveryReference
					,Src.ShipmentDeliveryReference2
					,Src.ShipmentContextCode
					,Src.ShipmentEstimatedDateTimeOfDeparture
					,Src.ShipmentEstimatedDateTimeOfArrival
					,Src.ShipmentNotes
					,Src.ShipmentContainerType
					,Src.ShipmentContainerSize
					,Src.ShipmentContainerNumber
					,Src.ShipmentHBLNumber
					,Src.ShipmentCBLNumber
					,Src.ShipmentVesselName
					,Src.ShipmentShippingOrderNumber
					,Src.ShipmentPackages
					,Src.ShipmentWeight
					,Src.ShipmentVolume
					,Src.ShipmentUserDefinedText01
					,Src.ShipmentUserDefinedText02
					,Src.ShipmentUserDefinedText03
					,Src.ShipmentUserDefinedText04
					,Src.ShipmentUserDefinedText05
					,Src.ShipmentUserDefinedText06
					,Src.ShipmentUserDefinedDateTime01
					,Src.ShipmentUserDefinedDateTime02
					,Src.ShipmentUserDefinedDateTime03
					,Src.ShipmentUserDefinedNumber01
					,Src.ShipmentUserDefinedNumber02
					,Src.ShipmentUserDefinedNumber03
					,Src.ShipmentUserDefinedLongText01
					,Src.ShipmentUserDefinedLongText02
					,Src.ShipmentUserDefinedLongText03
					,Src.OrderID
					,Src.ReceiptID
					,Src.ShipmentUserDefinedYesNo01
					,Src.ShipmentUserDefinedYesNo02
					,Src.ShipmentUserDefinedYesNo03
					,Src.ShipmentUserDefinedYesNo04
					,Src.ShipmentUserDefinedYesNo05
					,Src.ShipmentUserDefinedText07
					,Src.ShipmentUserDefinedText08
					,Src.ShipmentUserDefinedText09
					,Src.ShipmentUserDefinedText10
					,Src.ShipmentUserDefinedText11
					,Src.DataEntryDefinitionIDAutoCreateTransport
					,Src.ShipmentActualDateTimeOfArrival
					,Src.ShipmentActualDateTimeOfDeparture
					,Src.ShipmentAutoCreateTransportValues
					,Src.ShipmentBundleID
					,Src.ShipmentClientReference
					,Src.ShipmentDeliveryRemarks
					,Src.ShipmentLeg
					,Src.ShipmentPalletTypeCode
					,Src.ShipmentPickUpRemarks
					,Src.ShipmentRegionCodeDestination
					,Src.ShipmentRegionCodeOrigin
					,Src.ShipmentReturnCity
					,Src.ShipmentReturnCompanyID
					,Src.ShipmentReturnCompanyName
					,Src.ShipmentReturnContact
					,Src.ShipmentReturnCountry
					,Src.ShipmentReturnEmail
					,Src.ShipmentReturnFax
					,Src.ShipmentReturnPhone
					,Src.ShipmentReturnRemarks
					,Src.ShipmentReturnStreet
					,Src.ShipmentReturnZipCode
					,Src.ShipmentThresholdField
					,Src.ShipmentVesselCode
					,Src.ShipmentVoyageCode
					,Src.SubContextCode
					,Src.ShipmentUserDefinedDateTime04
					,Src.ShipmentUserDefinedDateTime05
					,Src.ShipmentUserDefinedDateTime06
					,Src.ShipmentUserDefinedDateTime07
					,Src.ShipmentUserDefinedDateTime09
					,Src.ShipmentUserDefinedDateTime10
					,Src.ShipmentUserDefinedNumber04
					,Src.ShipmentUserDefinedNumber05
					,Src.ShipmentUserDefinedLongText04
					,Src.ShipmentUserDefinedLongText05
					,Src.ShipmentUserDefinedText12
					,Src.ShipmentUserDefinedText13
					,Src.ShipmentUserDefinedText14
					,Src.ShipmentUserDefinedText15
					,Src.ShipmentPickUpReference
					,Src.ShipmentReturnReference
					,Src.ShipmentDelivery2CompanyID
					,Src.ShipmentDelivery2CompanyName
					,Src.ShipmentDelivery2Street
					,Src.ShipmentDelivery2City
					,Src.ShipmentDelivery2ZipCode
					,Src.ShipmentDelivery2Country
					,Src.ShipmentDelivery2Phone
					,Src.ShipmentDelivery2Fax
					,Src.ShipmentDelivery2Email
					,Src.ShipmentDelivery2Contact
					,Src.ShipmentDelivery2Remarks
					,Src.ShipmentDelivery3CompanyID
					,Src.ShipmentDelivery3CompanyName
					,Src.ShipmentDelivery3Street
					,Src.ShipmentDelivery3City
					,Src.ShipmentDelivery3ZipCode
					,Src.ShipmentDelivery3Country
					,Src.ShipmentDelivery3Phone
					,Src.ShipmentDelivery3Fax
					,Src.ShipmentDelivery3Email
					,Src.ShipmentDelivery3Contact
					,Src.ShipmentDelivery3Remarks
					,Src.ShipmentDelivery4CompanyID
					,Src.ShipmentDelivery4CompanyName
					,Src.ShipmentDelivery4Street
					,Src.ShipmentDelivery4City
					,Src.ShipmentDelivery4ZipCode
					,Src.ShipmentDelivery4Country
					,Src.ShipmentDelivery4Phone
					,Src.ShipmentDelivery4Fax
					,Src.ShipmentDelivery4Email
					,Src.ShipmentDelivery4Contact
					,Src.ShipmentDelivery4Remarks
					,Src.ShipmentChangesAcceptedDateTime
					,Src.ShipmentRuleType
					,Src.ShipmentCreationDataSource
					,Src.ShipmentChangedDataStorageString
					,Src.CountryCode
					,Src.ShipmentMandatoryCarrier
					,Src.ShipmentOwnerLogin
					,Src.ShipmentAllowConsolidation
					,Src.ShipmentAllowDirectFTL
					,Src.ShipmentBookingWindowEndTime
					,Src.ShipmentBookingWindowStartTime
					,Src.ShipmentCustomerAllowsDirectFTL
					,Src.ShipmentDeliveryGroup
					,Src.ShipmentDeliveryWindowDaysBottom
					,Src.ShipmentDeliveryWindowDaysTop
					,Src.ShipmentDepartment
					,Src.ShipmentExternalID
					,Src.ShipmentGoodsAvailableDateTime
					,Src.ShipmentPickUpGroup
					,Src.ShipmentSpeedOrder
					,Src.ShipmentIDPreviousLeg
					,Src.ShipmentIDOriginalLeg
					,Src.ShipmentCombinationID
					,Src.ShipmentPriorityOrder
					,Src.ShipmentPickUpUserDefinedText01
					,Src.ShipmentDeliveryUserDefinedText01
					,Src.ShipmentDelivery2UserDefinedText01
					,Src.ShipmentDelivery3UserDefinedText01
					,Src.ShipmentDelivery4UserDefinedText01
					,Src.ShipmentPickUpUserDefinedText02
					,Src.ShipmentDeliveryUserDefinedText02
					,Src.ShipmentDelivery2UserDefinedText02
					,Src.ShipmentDelivery3UserDefinedText02
					,Src.ShipmentDelivery4UserDefinedText02
					,Src.ShipmentPickUpUserDefinedText03
					,Src.ShipmentDeliveryUserDefinedText03
					,Src.ShipmentDelivery2UserDefinedText03
					,Src.ShipmentDelivery3UserDefinedText03
					,Src.ShipmentDelivery4UserDefinedText03
					,Src.ShipmentPickUpRegionCode
					,Src.ShipmentDeliveryRegionCode
					,Src.ShipmentDelivery2RegionCode
					,Src.ShipmentDelivery3RegionCode
					,Src.ShipmentDelivery4RegionCode
					,Src.ShipmentPreferredContainerType
					,Src.ShipmentDelivery2CompanyName2
					,Src.ShipmentDelivery2CustomsLocation
					,Src.ShipmentDelivery2Group
					,Src.ShipmentDelivery2ShortName
					,Src.ShipmentDelivery2Street2
					,Src.ShipmentDelivery3CompanyName2
					,Src.ShipmentDelivery3CustomsLocation
					,Src.ShipmentDelivery3Group
					,Src.ShipmentDelivery3ShortName
					,Src.ShipmentDelivery3Street2
					,Src.ShipmentDelivery4CompanyName2
					,Src.ShipmentDelivery4CustomsLocation
					,Src.ShipmentDelivery4Group
					,Src.ShipmentDelivery4ShortName
					,Src.ShipmentDelivery4Street2
					,Src.ShipmentDeliveryCompanyName2
					,Src.ShipmentDeliveryCustomsLocation
					,Src.ShipmentDeliveryShortName
					,Src.ShipmentDeliveryStreet2
					,Src.ShipmentPickUpCompanyName2
					,Src.ShipmentPickUpCustomsLocation
					,Src.ShipmentPickUpShortName
					,Src.ShipmentPickUpStreet2
					,Src.ShipmentReturnCompanyName2
					,Src.ShipmentReturnCustomsLocation
					,Src.ShipmentReturnGroup
					,Src.ShipmentReturnShortName
					,Src.ShipmentReturnStreet2
					,Src.ShipmentUserDefinedDateTime08
					,Src.ShipmentLastExternalChangeDateTime
					,Src.ShipmentLastFlagExternalChangeHandledDateTime
					,Src.ShipmentImportBatch
					,Src.ShipmentReturnDateTime
					,Src.ShipmentNewEDIPending
					,Src.ContainerTypeCategoryCode
					,Src.ShipmentUserDefinedNumber06
					,Src.ShipmentUserDefinedNumber07
					,Src.ShipmentUserDefinedNumber08
					,Src.ShipmentUserDefinedNumber09
					,Src.ShipmentUserDefinedNumber10
					,Src.ShipmentUserDefinedNumber11
					,Src.ShipmentUserDefinedNumber12
					,Src.ShipmentUserDefinedNumber13
					,Src.ShipmentUserDefinedNumber14
					,Src.ShipmentUserDefinedNumber15
				FROM [dbo].Shipments Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Shipments Dest WITH (NOLOCK) ON Src.[IDShipment] = Dest.[IDShipment]
				WHERE Dest.[IDShipment] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Shipments: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Shipments` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ShipmentDetails
	SET @CurrentTableName = 'ShipmentDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentDetails AS Dest
			USING (
				SELECT IDShipmentDetail
					,ShipmentID
					,ShipmentDetailAddDateTime
					,ShipmentDetailEditDateTime
					,ShipmentDetailAddUserCode
					,ShipmentDetailEditUserCode
					,ShipmentDetailUnitType
					,ShipmentDetailUnitsReceived
					,ShipmentDetailUnitsShipped
					,ExternalShipmentID
					,ShipmentDetailCBLNumber
					,ShipmentDetailCommodity
					,ShipmentDetailContainerNumber
					,ShipmentDetailContainerSize
					,ShipmentDetailContainerType
					,ShipmentDetailCSNumber
					,ShipmentDetailCSSequence
					,ShipmentDetailCustomsTypeCode
					,ShipmentDetailDeliveryDateTime
					,ShipmentDetailHBLNumber
					,ShipmentDetailInvoiceReference
					,ShipmentDetailPackages
					,ShipmentDetailQuantity
					,ShipmentDetailSeal
					,ShipmentDetailUserDefinedText01
					,ShipmentDetailUserDefinedText02
					,ShipmentDetailUserDefinedText03
					,ShipmentDetailUserDefinedText04
					,ShipmentDetailUserDefinedText05
					,ShipmentDetailUserDefinedText06
					,ShipmentDetailUserDefinedText07
					,ShipmentDetailUserDefinedText08
					,ShipmentDetailUserDefinedText09
					,ShipmentDetailUserDefinedText10
					,ShipmentDetailUserDefinedYesNo01
					,ShipmentDetailVesselCode
					,ShipmentDetailVesselName
					,ShipmentDetailVolume
					,ShipmentDetailVoyageCode
					,ShipmentDetailWeight
					,ShipmentDetailDocumentStatusDisplayName
					,ShipmentDetailDocumentStatusDone
					,ShipmentDetailUserDefinedYesNo02
					,ShipmentDetailUserDefinedYesNo03
					,ShipmentDetailUserDefinedYesNo04
					,ShipmentDetailUserDefinedYesNo05
					,ShipmentDetailUserDefinedDateTime01
					,ShipmentDetailUserDefinedDateTime02
					,ShipmentDetailUserDefinedDateTime03
					,ShipmentDetailUserDefinedDateTime04
					,ShipmentDetailUserDefinedDateTime05
					,ShipmentDetailUserDefinedDateTime06
					,ShipmentDetailUserDefinedDateTime07
					,ShipmentDetailUserDefinedDateTime09
					,ShipmentDetailUserDefinedDateTime10
					,ShipmentDetailUserDefinedNumber01
					,ShipmentDetailUserDefinedNumber02
					,ShipmentDetailUserDefinedNumber03
					,ShipmentDetailUserDefinedNumber04
					,ShipmentDetailUserDefinedNumber05
					,ShipmentDetailUserDefinedLongText01
					,ShipmentDetailUserDefinedLongText02
					,ShipmentDetailUserDefinedLongText03
					,ShipmentDetailUserDefinedLongText04
					,ShipmentDetailUserDefinedLongText05
					,ShipmentDetailUserDefinedText11
					,ShipmentDetailUserDefinedText12
					,ShipmentDetailUserDefinedText13
					,ShipmentDetailUserDefinedText14
					,ShipmentDetailUserDefinedText15
					,ShipmentDetailEachesPerPallet
					,ShipmentDetailMaximumPalletHeight
					,ShipmentDetailMaximumTransportPallets
					,ShipmentDetailMaximumTransportWeight
					,ShipmentDetailPalletType
					,ShipmentDetailProductCode
					,ShipmentDetailSingleProductCodePerPallet
					,ShipmentDetailWeightPerEach
					,ShipmentDetailWeight2
					,ShipmentDetailAdditionalVolume
					,ShipmentDetailPONumber
					,ShipmentDetailSourceID
				FROM dbo.ShipmentDetails T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDShipmentDetail = Src.IDShipmentDetail)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.ShipmentID = Src.ShipmentID
						,Dest.ShipmentDetailAddDateTime = Src.ShipmentDetailAddDateTime
						,Dest.ShipmentDetailEditDateTime = Src.ShipmentDetailEditDateTime
						,Dest.ShipmentDetailAddUserCode = Src.ShipmentDetailAddUserCode
						,Dest.ShipmentDetailEditUserCode = Src.ShipmentDetailEditUserCode
						,Dest.ShipmentDetailUnitType = Src.ShipmentDetailUnitType
						,Dest.ShipmentDetailUnitsReceived = Src.ShipmentDetailUnitsReceived
						,Dest.ShipmentDetailUnitsShipped = Src.ShipmentDetailUnitsShipped
						,Dest.ExternalShipmentID = Src.ExternalShipmentID
						,Dest.ShipmentDetailCBLNumber = Src.ShipmentDetailCBLNumber
						,Dest.ShipmentDetailCommodity = Src.ShipmentDetailCommodity
						,Dest.ShipmentDetailContainerNumber = Src.ShipmentDetailContainerNumber
						,Dest.ShipmentDetailContainerSize = Src.ShipmentDetailContainerSize
						,Dest.ShipmentDetailContainerType = Src.ShipmentDetailContainerType
						,Dest.ShipmentDetailCSNumber = Src.ShipmentDetailCSNumber
						,Dest.ShipmentDetailCSSequence = Src.ShipmentDetailCSSequence
						,Dest.ShipmentDetailCustomsTypeCode = Src.ShipmentDetailCustomsTypeCode
						,Dest.ShipmentDetailDeliveryDateTime = Src.ShipmentDetailDeliveryDateTime
						,Dest.ShipmentDetailHBLNumber = Src.ShipmentDetailHBLNumber
						,Dest.ShipmentDetailInvoiceReference = Src.ShipmentDetailInvoiceReference
						,Dest.ShipmentDetailPackages = Src.ShipmentDetailPackages
						,Dest.ShipmentDetailQuantity = Src.ShipmentDetailQuantity
						,Dest.ShipmentDetailSeal = Src.ShipmentDetailSeal
						,Dest.ShipmentDetailUserDefinedText01 = Src.ShipmentDetailUserDefinedText01
						,Dest.ShipmentDetailUserDefinedText02 = Src.ShipmentDetailUserDefinedText02
						,Dest.ShipmentDetailUserDefinedText03 = Src.ShipmentDetailUserDefinedText03
						,Dest.ShipmentDetailUserDefinedText04 = Src.ShipmentDetailUserDefinedText04
						,Dest.ShipmentDetailUserDefinedText05 = Src.ShipmentDetailUserDefinedText05
						,Dest.ShipmentDetailUserDefinedText06 = Src.ShipmentDetailUserDefinedText06
						,Dest.ShipmentDetailUserDefinedText07 = Src.ShipmentDetailUserDefinedText07
						,Dest.ShipmentDetailUserDefinedText08 = Src.ShipmentDetailUserDefinedText08
						,Dest.ShipmentDetailUserDefinedText09 = Src.ShipmentDetailUserDefinedText09
						,Dest.ShipmentDetailUserDefinedText10 = Src.ShipmentDetailUserDefinedText10
						,Dest.ShipmentDetailUserDefinedYesNo01 = Src.ShipmentDetailUserDefinedYesNo01
						,Dest.ShipmentDetailVesselCode = Src.ShipmentDetailVesselCode
						,Dest.ShipmentDetailVesselName = Src.ShipmentDetailVesselName
						,Dest.ShipmentDetailVolume = Src.ShipmentDetailVolume
						,Dest.ShipmentDetailVoyageCode = Src.ShipmentDetailVoyageCode
						,Dest.ShipmentDetailWeight = Src.ShipmentDetailWeight
						,Dest.ShipmentDetailDocumentStatusDisplayName = Src.ShipmentDetailDocumentStatusDisplayName
						,Dest.ShipmentDetailDocumentStatusDone = Src.ShipmentDetailDocumentStatusDone
						,Dest.ShipmentDetailUserDefinedYesNo02 = Src.ShipmentDetailUserDefinedYesNo02
						,Dest.ShipmentDetailUserDefinedYesNo03 = Src.ShipmentDetailUserDefinedYesNo03
						,Dest.ShipmentDetailUserDefinedYesNo04 = Src.ShipmentDetailUserDefinedYesNo04
						,Dest.ShipmentDetailUserDefinedYesNo05 = Src.ShipmentDetailUserDefinedYesNo05
						,Dest.ShipmentDetailUserDefinedDateTime01 = Src.ShipmentDetailUserDefinedDateTime01
						,Dest.ShipmentDetailUserDefinedDateTime02 = Src.ShipmentDetailUserDefinedDateTime02
						,Dest.ShipmentDetailUserDefinedDateTime03 = Src.ShipmentDetailUserDefinedDateTime03
						,Dest.ShipmentDetailUserDefinedDateTime04 = Src.ShipmentDetailUserDefinedDateTime04
						,Dest.ShipmentDetailUserDefinedDateTime05 = Src.ShipmentDetailUserDefinedDateTime05
						,Dest.ShipmentDetailUserDefinedDateTime06 = Src.ShipmentDetailUserDefinedDateTime06
						,Dest.ShipmentDetailUserDefinedDateTime07 = Src.ShipmentDetailUserDefinedDateTime07
						,Dest.ShipmentDetailUserDefinedDateTime09 = Src.ShipmentDetailUserDefinedDateTime09
						,Dest.ShipmentDetailUserDefinedDateTime10 = Src.ShipmentDetailUserDefinedDateTime10
						,Dest.ShipmentDetailUserDefinedNumber01 = Src.ShipmentDetailUserDefinedNumber01
						,Dest.ShipmentDetailUserDefinedNumber02 = Src.ShipmentDetailUserDefinedNumber02
						,Dest.ShipmentDetailUserDefinedNumber03 = Src.ShipmentDetailUserDefinedNumber03
						,Dest.ShipmentDetailUserDefinedNumber04 = Src.ShipmentDetailUserDefinedNumber04
						,Dest.ShipmentDetailUserDefinedNumber05 = Src.ShipmentDetailUserDefinedNumber05
						,Dest.ShipmentDetailUserDefinedLongText01 = Src.ShipmentDetailUserDefinedLongText01
						,Dest.ShipmentDetailUserDefinedLongText02 = Src.ShipmentDetailUserDefinedLongText02
						,Dest.ShipmentDetailUserDefinedLongText03 = Src.ShipmentDetailUserDefinedLongText03
						,Dest.ShipmentDetailUserDefinedLongText04 = Src.ShipmentDetailUserDefinedLongText04
						,Dest.ShipmentDetailUserDefinedLongText05 = Src.ShipmentDetailUserDefinedLongText05
						,Dest.ShipmentDetailUserDefinedText11 = Src.ShipmentDetailUserDefinedText11
						,Dest.ShipmentDetailUserDefinedText12 = Src.ShipmentDetailUserDefinedText12
						,Dest.ShipmentDetailUserDefinedText13 = Src.ShipmentDetailUserDefinedText13
						,Dest.ShipmentDetailUserDefinedText14 = Src.ShipmentDetailUserDefinedText14
						,Dest.ShipmentDetailUserDefinedText15 = Src.ShipmentDetailUserDefinedText15
						,Dest.ShipmentDetailEachesPerPallet = Src.ShipmentDetailEachesPerPallet
						,Dest.ShipmentDetailMaximumPalletHeight = Src.ShipmentDetailMaximumPalletHeight
						,Dest.ShipmentDetailMaximumTransportPallets = Src.ShipmentDetailMaximumTransportPallets
						,Dest.ShipmentDetailMaximumTransportWeight = Src.ShipmentDetailMaximumTransportWeight
						,Dest.ShipmentDetailPalletType = Src.ShipmentDetailPalletType
						,Dest.ShipmentDetailProductCode = Src.ShipmentDetailProductCode
						,Dest.ShipmentDetailSingleProductCodePerPallet = Src.ShipmentDetailSingleProductCodePerPallet
						,Dest.ShipmentDetailWeightPerEach = Src.ShipmentDetailWeightPerEach
						,Dest.ShipmentDetailWeight2 = Src.ShipmentDetailWeight2
						,Dest.ShipmentDetailAdditionalVolume = Src.ShipmentDetailAdditionalVolume
						,Dest.ShipmentDetailPONumber = Src.ShipmentDetailPONumber
						,Dest.ShipmentDetailSourceID = Src.ShipmentDetailSourceID
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDShipmentDetail
						,ShipmentID
						,ShipmentDetailAddDateTime
						,ShipmentDetailEditDateTime
						,ShipmentDetailAddUserCode
						,ShipmentDetailEditUserCode
						,ShipmentDetailUnitType
						,ShipmentDetailUnitsReceived
						,ShipmentDetailUnitsShipped
						,ExternalShipmentID
						,ShipmentDetailCBLNumber
						,ShipmentDetailCommodity
						,ShipmentDetailContainerNumber
						,ShipmentDetailContainerSize
						,ShipmentDetailContainerType
						,ShipmentDetailCSNumber
						,ShipmentDetailCSSequence
						,ShipmentDetailCustomsTypeCode
						,ShipmentDetailDeliveryDateTime
						,ShipmentDetailHBLNumber
						,ShipmentDetailInvoiceReference
						,ShipmentDetailPackages
						,ShipmentDetailQuantity
						,ShipmentDetailSeal
						,ShipmentDetailUserDefinedText01
						,ShipmentDetailUserDefinedText02
						,ShipmentDetailUserDefinedText03
						,ShipmentDetailUserDefinedText04
						,ShipmentDetailUserDefinedText05
						,ShipmentDetailUserDefinedText06
						,ShipmentDetailUserDefinedText07
						,ShipmentDetailUserDefinedText08
						,ShipmentDetailUserDefinedText09
						,ShipmentDetailUserDefinedText10
						,ShipmentDetailUserDefinedYesNo01
						,ShipmentDetailVesselCode
						,ShipmentDetailVesselName
						,ShipmentDetailVolume
						,ShipmentDetailVoyageCode
						,ShipmentDetailWeight
						,ShipmentDetailDocumentStatusDisplayName
						,ShipmentDetailDocumentStatusDone
						,ShipmentDetailUserDefinedYesNo02
						,ShipmentDetailUserDefinedYesNo03
						,ShipmentDetailUserDefinedYesNo04
						,ShipmentDetailUserDefinedYesNo05
						,ShipmentDetailUserDefinedDateTime01
						,ShipmentDetailUserDefinedDateTime02
						,ShipmentDetailUserDefinedDateTime03
						,ShipmentDetailUserDefinedDateTime04
						,ShipmentDetailUserDefinedDateTime05
						,ShipmentDetailUserDefinedDateTime06
						,ShipmentDetailUserDefinedDateTime07
						,ShipmentDetailUserDefinedDateTime09
						,ShipmentDetailUserDefinedDateTime10
						,ShipmentDetailUserDefinedNumber01
						,ShipmentDetailUserDefinedNumber02
						,ShipmentDetailUserDefinedNumber03
						,ShipmentDetailUserDefinedNumber04
						,ShipmentDetailUserDefinedNumber05
						,ShipmentDetailUserDefinedLongText01
						,ShipmentDetailUserDefinedLongText02
						,ShipmentDetailUserDefinedLongText03
						,ShipmentDetailUserDefinedLongText04
						,ShipmentDetailUserDefinedLongText05
						,ShipmentDetailUserDefinedText11
						,ShipmentDetailUserDefinedText12
						,ShipmentDetailUserDefinedText13
						,ShipmentDetailUserDefinedText14
						,ShipmentDetailUserDefinedText15
						,ShipmentDetailEachesPerPallet
						,ShipmentDetailMaximumPalletHeight
						,ShipmentDetailMaximumTransportPallets
						,ShipmentDetailMaximumTransportWeight
						,ShipmentDetailPalletType
						,ShipmentDetailProductCode
						,ShipmentDetailSingleProductCodePerPallet
						,ShipmentDetailWeightPerEach
						,ShipmentDetailWeight2
						,ShipmentDetailAdditionalVolume
						,ShipmentDetailPONumber
						,ShipmentDetailSourceID
						)
					VALUES (
						Src.IDShipmentDetail
						,Src.ShipmentID
						,Src.ShipmentDetailAddDateTime
						,Src.ShipmentDetailEditDateTime
						,Src.ShipmentDetailAddUserCode
						,Src.ShipmentDetailEditUserCode
						,Src.ShipmentDetailUnitType
						,Src.ShipmentDetailUnitsReceived
						,Src.ShipmentDetailUnitsShipped
						,Src.ExternalShipmentID
						,Src.ShipmentDetailCBLNumber
						,Src.ShipmentDetailCommodity
						,Src.ShipmentDetailContainerNumber
						,Src.ShipmentDetailContainerSize
						,Src.ShipmentDetailContainerType
						,Src.ShipmentDetailCSNumber
						,Src.ShipmentDetailCSSequence
						,Src.ShipmentDetailCustomsTypeCode
						,Src.ShipmentDetailDeliveryDateTime
						,Src.ShipmentDetailHBLNumber
						,Src.ShipmentDetailInvoiceReference
						,Src.ShipmentDetailPackages
						,Src.ShipmentDetailQuantity
						,Src.ShipmentDetailSeal
						,Src.ShipmentDetailUserDefinedText01
						,Src.ShipmentDetailUserDefinedText02
						,Src.ShipmentDetailUserDefinedText03
						,Src.ShipmentDetailUserDefinedText04
						,Src.ShipmentDetailUserDefinedText05
						,Src.ShipmentDetailUserDefinedText06
						,Src.ShipmentDetailUserDefinedText07
						,Src.ShipmentDetailUserDefinedText08
						,Src.ShipmentDetailUserDefinedText09
						,Src.ShipmentDetailUserDefinedText10
						,Src.ShipmentDetailUserDefinedYesNo01
						,Src.ShipmentDetailVesselCode
						,Src.ShipmentDetailVesselName
						,Src.ShipmentDetailVolume
						,Src.ShipmentDetailVoyageCode
						,Src.ShipmentDetailWeight
						,Src.ShipmentDetailDocumentStatusDisplayName
						,Src.ShipmentDetailDocumentStatusDone
						,Src.ShipmentDetailUserDefinedYesNo02
						,Src.ShipmentDetailUserDefinedYesNo03
						,Src.ShipmentDetailUserDefinedYesNo04
						,Src.ShipmentDetailUserDefinedYesNo05
						,Src.ShipmentDetailUserDefinedDateTime01
						,Src.ShipmentDetailUserDefinedDateTime02
						,Src.ShipmentDetailUserDefinedDateTime03
						,Src.ShipmentDetailUserDefinedDateTime04
						,Src.ShipmentDetailUserDefinedDateTime05
						,Src.ShipmentDetailUserDefinedDateTime06
						,Src.ShipmentDetailUserDefinedDateTime07
						,Src.ShipmentDetailUserDefinedDateTime09
						,Src.ShipmentDetailUserDefinedDateTime10
						,Src.ShipmentDetailUserDefinedNumber01
						,Src.ShipmentDetailUserDefinedNumber02
						,Src.ShipmentDetailUserDefinedNumber03
						,Src.ShipmentDetailUserDefinedNumber04
						,Src.ShipmentDetailUserDefinedNumber05
						,Src.ShipmentDetailUserDefinedLongText01
						,Src.ShipmentDetailUserDefinedLongText02
						,Src.ShipmentDetailUserDefinedLongText03
						,Src.ShipmentDetailUserDefinedLongText04
						,Src.ShipmentDetailUserDefinedLongText05
						,Src.ShipmentDetailUserDefinedText11
						,Src.ShipmentDetailUserDefinedText12
						,Src.ShipmentDetailUserDefinedText13
						,Src.ShipmentDetailUserDefinedText14
						,Src.ShipmentDetailUserDefinedText15
						,Src.ShipmentDetailEachesPerPallet
						,Src.ShipmentDetailMaximumPalletHeight
						,Src.ShipmentDetailMaximumTransportPallets
						,Src.ShipmentDetailMaximumTransportWeight
						,Src.ShipmentDetailPalletType
						,Src.ShipmentDetailProductCode
						,Src.ShipmentDetailSingleProductCodePerPallet
						,Src.ShipmentDetailWeightPerEach
						,Src.ShipmentDetailWeight2
						,Src.ShipmentDetailAdditionalVolume
						,Src.ShipmentDetailPONumber
						,Src.ShipmentDetailSourceID
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDShipmentDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDShipmentDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ShipmentDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentDetails Dest WITH (NOLOCK) ON Src.IDShipmentDetail = Dest.IDShipmentDetail
					WHERE Dest.ShipmentDetailEditDateTime < Src.ShipmentDetailEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.ShipmentID = Src.ShipmentID
					,Dest.ShipmentDetailAddDateTime = Src.ShipmentDetailAddDateTime
					,Dest.ShipmentDetailEditDateTime = Src.ShipmentDetailEditDateTime
					,Dest.ShipmentDetailAddUserCode = Src.ShipmentDetailAddUserCode
					,Dest.ShipmentDetailEditUserCode = Src.ShipmentDetailEditUserCode
					,Dest.ShipmentDetailUnitType = Src.ShipmentDetailUnitType
					,Dest.ShipmentDetailUnitsReceived = Src.ShipmentDetailUnitsReceived
					,Dest.ShipmentDetailUnitsShipped = Src.ShipmentDetailUnitsShipped
					,Dest.ExternalShipmentID = Src.ExternalShipmentID
					,Dest.ShipmentDetailCBLNumber = Src.ShipmentDetailCBLNumber
					,Dest.ShipmentDetailCommodity = Src.ShipmentDetailCommodity
					,Dest.ShipmentDetailContainerNumber = Src.ShipmentDetailContainerNumber
					,Dest.ShipmentDetailContainerSize = Src.ShipmentDetailContainerSize
					,Dest.ShipmentDetailContainerType = Src.ShipmentDetailContainerType
					,Dest.ShipmentDetailCSNumber = Src.ShipmentDetailCSNumber
					,Dest.ShipmentDetailCSSequence = Src.ShipmentDetailCSSequence
					,Dest.ShipmentDetailCustomsTypeCode = Src.ShipmentDetailCustomsTypeCode
					,Dest.ShipmentDetailDeliveryDateTime = Src.ShipmentDetailDeliveryDateTime
					,Dest.ShipmentDetailHBLNumber = Src.ShipmentDetailHBLNumber
					,Dest.ShipmentDetailInvoiceReference = Src.ShipmentDetailInvoiceReference
					,Dest.ShipmentDetailPackages = Src.ShipmentDetailPackages
					,Dest.ShipmentDetailQuantity = Src.ShipmentDetailQuantity
					,Dest.ShipmentDetailSeal = Src.ShipmentDetailSeal
					,Dest.ShipmentDetailUserDefinedText01 = Src.ShipmentDetailUserDefinedText01
					,Dest.ShipmentDetailUserDefinedText02 = Src.ShipmentDetailUserDefinedText02
					,Dest.ShipmentDetailUserDefinedText03 = Src.ShipmentDetailUserDefinedText03
					,Dest.ShipmentDetailUserDefinedText04 = Src.ShipmentDetailUserDefinedText04
					,Dest.ShipmentDetailUserDefinedText05 = Src.ShipmentDetailUserDefinedText05
					,Dest.ShipmentDetailUserDefinedText06 = Src.ShipmentDetailUserDefinedText06
					,Dest.ShipmentDetailUserDefinedText07 = Src.ShipmentDetailUserDefinedText07
					,Dest.ShipmentDetailUserDefinedText08 = Src.ShipmentDetailUserDefinedText08
					,Dest.ShipmentDetailUserDefinedText09 = Src.ShipmentDetailUserDefinedText09
					,Dest.ShipmentDetailUserDefinedText10 = Src.ShipmentDetailUserDefinedText10
					,Dest.ShipmentDetailUserDefinedYesNo01 = Src.ShipmentDetailUserDefinedYesNo01
					,Dest.ShipmentDetailVesselCode = Src.ShipmentDetailVesselCode
					,Dest.ShipmentDetailVesselName = Src.ShipmentDetailVesselName
					,Dest.ShipmentDetailVolume = Src.ShipmentDetailVolume
					,Dest.ShipmentDetailVoyageCode = Src.ShipmentDetailVoyageCode
					,Dest.ShipmentDetailWeight = Src.ShipmentDetailWeight
					,Dest.ShipmentDetailDocumentStatusDisplayName = Src.ShipmentDetailDocumentStatusDisplayName
					,Dest.ShipmentDetailDocumentStatusDone = Src.ShipmentDetailDocumentStatusDone
					,Dest.ShipmentDetailUserDefinedYesNo02 = Src.ShipmentDetailUserDefinedYesNo02
					,Dest.ShipmentDetailUserDefinedYesNo03 = Src.ShipmentDetailUserDefinedYesNo03
					,Dest.ShipmentDetailUserDefinedYesNo04 = Src.ShipmentDetailUserDefinedYesNo04
					,Dest.ShipmentDetailUserDefinedYesNo05 = Src.ShipmentDetailUserDefinedYesNo05
					,Dest.ShipmentDetailUserDefinedDateTime01 = Src.ShipmentDetailUserDefinedDateTime01
					,Dest.ShipmentDetailUserDefinedDateTime02 = Src.ShipmentDetailUserDefinedDateTime02
					,Dest.ShipmentDetailUserDefinedDateTime03 = Src.ShipmentDetailUserDefinedDateTime03
					,Dest.ShipmentDetailUserDefinedDateTime04 = Src.ShipmentDetailUserDefinedDateTime04
					,Dest.ShipmentDetailUserDefinedDateTime05 = Src.ShipmentDetailUserDefinedDateTime05
					,Dest.ShipmentDetailUserDefinedDateTime06 = Src.ShipmentDetailUserDefinedDateTime06
					,Dest.ShipmentDetailUserDefinedDateTime07 = Src.ShipmentDetailUserDefinedDateTime07
					,Dest.ShipmentDetailUserDefinedDateTime09 = Src.ShipmentDetailUserDefinedDateTime09
					,Dest.ShipmentDetailUserDefinedDateTime10 = Src.ShipmentDetailUserDefinedDateTime10
					,Dest.ShipmentDetailUserDefinedNumber01 = Src.ShipmentDetailUserDefinedNumber01
					,Dest.ShipmentDetailUserDefinedNumber02 = Src.ShipmentDetailUserDefinedNumber02
					,Dest.ShipmentDetailUserDefinedNumber03 = Src.ShipmentDetailUserDefinedNumber03
					,Dest.ShipmentDetailUserDefinedNumber04 = Src.ShipmentDetailUserDefinedNumber04
					,Dest.ShipmentDetailUserDefinedNumber05 = Src.ShipmentDetailUserDefinedNumber05
					,Dest.ShipmentDetailUserDefinedLongText01 = Src.ShipmentDetailUserDefinedLongText01
					,Dest.ShipmentDetailUserDefinedLongText02 = Src.ShipmentDetailUserDefinedLongText02
					,Dest.ShipmentDetailUserDefinedLongText03 = Src.ShipmentDetailUserDefinedLongText03
					,Dest.ShipmentDetailUserDefinedLongText04 = Src.ShipmentDetailUserDefinedLongText04
					,Dest.ShipmentDetailUserDefinedLongText05 = Src.ShipmentDetailUserDefinedLongText05
					,Dest.ShipmentDetailUserDefinedText11 = Src.ShipmentDetailUserDefinedText11
					,Dest.ShipmentDetailUserDefinedText12 = Src.ShipmentDetailUserDefinedText12
					,Dest.ShipmentDetailUserDefinedText13 = Src.ShipmentDetailUserDefinedText13
					,Dest.ShipmentDetailUserDefinedText14 = Src.ShipmentDetailUserDefinedText14
					,Dest.ShipmentDetailUserDefinedText15 = Src.ShipmentDetailUserDefinedText15
					,Dest.ShipmentDetailEachesPerPallet = Src.ShipmentDetailEachesPerPallet
					,Dest.ShipmentDetailMaximumPalletHeight = Src.ShipmentDetailMaximumPalletHeight
					,Dest.ShipmentDetailMaximumTransportPallets = Src.ShipmentDetailMaximumTransportPallets
					,Dest.ShipmentDetailMaximumTransportWeight = Src.ShipmentDetailMaximumTransportWeight
					,Dest.ShipmentDetailPalletType = Src.ShipmentDetailPalletType
					,Dest.ShipmentDetailProductCode = Src.ShipmentDetailProductCode
					,Dest.ShipmentDetailSingleProductCodePerPallet = Src.ShipmentDetailSingleProductCodePerPallet
					,Dest.ShipmentDetailWeightPerEach = Src.ShipmentDetailWeightPerEach
					,Dest.ShipmentDetailWeight2 = Src.ShipmentDetailWeight2
					,Dest.ShipmentDetailAdditionalVolume = Src.ShipmentDetailAdditionalVolume
					,Dest.ShipmentDetailPONumber = Src.ShipmentDetailPONumber
					,Dest.ShipmentDetailSourceID = Src.ShipmentDetailSourceID
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDShipmentDetail AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDShipmentDetail AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ShipmentDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentDetails Dest ON Src.IDShipmentDetail = Dest.IDShipmentDetail
				WHERE Dest.ShipmentDetailEditDateTime < Src.ShipmentDetailEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ShipmentDetails Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentDetails Dest WITH (NOLOCK) ON Src.IDShipmentDetail = Dest.IDShipmentDetail
					WHERE Dest.IDShipmentDetail IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentDetails (
					IDShipmentDetail
					,ShipmentID
					,ShipmentDetailAddDateTime
					,ShipmentDetailEditDateTime
					,ShipmentDetailAddUserCode
					,ShipmentDetailEditUserCode
					,ShipmentDetailUnitType
					,ShipmentDetailUnitsReceived
					,ShipmentDetailUnitsShipped
					,ExternalShipmentID
					,ShipmentDetailCBLNumber
					,ShipmentDetailCommodity
					,ShipmentDetailContainerNumber
					,ShipmentDetailContainerSize
					,ShipmentDetailContainerType
					,ShipmentDetailCSNumber
					,ShipmentDetailCSSequence
					,ShipmentDetailCustomsTypeCode
					,ShipmentDetailDeliveryDateTime
					,ShipmentDetailHBLNumber
					,ShipmentDetailInvoiceReference
					,ShipmentDetailPackages
					,ShipmentDetailQuantity
					,ShipmentDetailSeal
					,ShipmentDetailUserDefinedText01
					,ShipmentDetailUserDefinedText02
					,ShipmentDetailUserDefinedText03
					,ShipmentDetailUserDefinedText04
					,ShipmentDetailUserDefinedText05
					,ShipmentDetailUserDefinedText06
					,ShipmentDetailUserDefinedText07
					,ShipmentDetailUserDefinedText08
					,ShipmentDetailUserDefinedText09
					,ShipmentDetailUserDefinedText10
					,ShipmentDetailUserDefinedYesNo01
					,ShipmentDetailVesselCode
					,ShipmentDetailVesselName
					,ShipmentDetailVolume
					,ShipmentDetailVoyageCode
					,ShipmentDetailWeight
					,ShipmentDetailDocumentStatusDisplayName
					,ShipmentDetailDocumentStatusDone
					,ShipmentDetailUserDefinedYesNo02
					,ShipmentDetailUserDefinedYesNo03
					,ShipmentDetailUserDefinedYesNo04
					,ShipmentDetailUserDefinedYesNo05
					,ShipmentDetailUserDefinedDateTime01
					,ShipmentDetailUserDefinedDateTime02
					,ShipmentDetailUserDefinedDateTime03
					,ShipmentDetailUserDefinedDateTime04
					,ShipmentDetailUserDefinedDateTime05
					,ShipmentDetailUserDefinedDateTime06
					,ShipmentDetailUserDefinedDateTime07
					,ShipmentDetailUserDefinedDateTime09
					,ShipmentDetailUserDefinedDateTime10
					,ShipmentDetailUserDefinedNumber01
					,ShipmentDetailUserDefinedNumber02
					,ShipmentDetailUserDefinedNumber03
					,ShipmentDetailUserDefinedNumber04
					,ShipmentDetailUserDefinedNumber05
					,ShipmentDetailUserDefinedLongText01
					,ShipmentDetailUserDefinedLongText02
					,ShipmentDetailUserDefinedLongText03
					,ShipmentDetailUserDefinedLongText04
					,ShipmentDetailUserDefinedLongText05
					,ShipmentDetailUserDefinedText11
					,ShipmentDetailUserDefinedText12
					,ShipmentDetailUserDefinedText13
					,ShipmentDetailUserDefinedText14
					,ShipmentDetailUserDefinedText15
					,ShipmentDetailEachesPerPallet
					,ShipmentDetailMaximumPalletHeight
					,ShipmentDetailMaximumTransportPallets
					,ShipmentDetailMaximumTransportWeight
					,ShipmentDetailPalletType
					,ShipmentDetailProductCode
					,ShipmentDetailSingleProductCodePerPallet
					,ShipmentDetailWeightPerEach
					,ShipmentDetailWeight2
					,ShipmentDetailAdditionalVolume
					,ShipmentDetailPONumber
					,ShipmentDetailSourceID
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDShipmentDetail AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDShipmentDetail
					,Src.ShipmentID
					,Src.ShipmentDetailAddDateTime
					,Src.ShipmentDetailEditDateTime
					,Src.ShipmentDetailAddUserCode
					,Src.ShipmentDetailEditUserCode
					,Src.ShipmentDetailUnitType
					,Src.ShipmentDetailUnitsReceived
					,Src.ShipmentDetailUnitsShipped
					,Src.ExternalShipmentID
					,Src.ShipmentDetailCBLNumber
					,Src.ShipmentDetailCommodity
					,Src.ShipmentDetailContainerNumber
					,Src.ShipmentDetailContainerSize
					,Src.ShipmentDetailContainerType
					,Src.ShipmentDetailCSNumber
					,Src.ShipmentDetailCSSequence
					,Src.ShipmentDetailCustomsTypeCode
					,Src.ShipmentDetailDeliveryDateTime
					,Src.ShipmentDetailHBLNumber
					,Src.ShipmentDetailInvoiceReference
					,Src.ShipmentDetailPackages
					,Src.ShipmentDetailQuantity
					,Src.ShipmentDetailSeal
					,Src.ShipmentDetailUserDefinedText01
					,Src.ShipmentDetailUserDefinedText02
					,Src.ShipmentDetailUserDefinedText03
					,Src.ShipmentDetailUserDefinedText04
					,Src.ShipmentDetailUserDefinedText05
					,Src.ShipmentDetailUserDefinedText06
					,Src.ShipmentDetailUserDefinedText07
					,Src.ShipmentDetailUserDefinedText08
					,Src.ShipmentDetailUserDefinedText09
					,Src.ShipmentDetailUserDefinedText10
					,Src.ShipmentDetailUserDefinedYesNo01
					,Src.ShipmentDetailVesselCode
					,Src.ShipmentDetailVesselName
					,Src.ShipmentDetailVolume
					,Src.ShipmentDetailVoyageCode
					,Src.ShipmentDetailWeight
					,Src.ShipmentDetailDocumentStatusDisplayName
					,Src.ShipmentDetailDocumentStatusDone
					,Src.ShipmentDetailUserDefinedYesNo02
					,Src.ShipmentDetailUserDefinedYesNo03
					,Src.ShipmentDetailUserDefinedYesNo04
					,Src.ShipmentDetailUserDefinedYesNo05
					,Src.ShipmentDetailUserDefinedDateTime01
					,Src.ShipmentDetailUserDefinedDateTime02
					,Src.ShipmentDetailUserDefinedDateTime03
					,Src.ShipmentDetailUserDefinedDateTime04
					,Src.ShipmentDetailUserDefinedDateTime05
					,Src.ShipmentDetailUserDefinedDateTime06
					,Src.ShipmentDetailUserDefinedDateTime07
					,Src.ShipmentDetailUserDefinedDateTime09
					,Src.ShipmentDetailUserDefinedDateTime10
					,Src.ShipmentDetailUserDefinedNumber01
					,Src.ShipmentDetailUserDefinedNumber02
					,Src.ShipmentDetailUserDefinedNumber03
					,Src.ShipmentDetailUserDefinedNumber04
					,Src.ShipmentDetailUserDefinedNumber05
					,Src.ShipmentDetailUserDefinedLongText01
					,Src.ShipmentDetailUserDefinedLongText02
					,Src.ShipmentDetailUserDefinedLongText03
					,Src.ShipmentDetailUserDefinedLongText04
					,Src.ShipmentDetailUserDefinedLongText05
					,Src.ShipmentDetailUserDefinedText11
					,Src.ShipmentDetailUserDefinedText12
					,Src.ShipmentDetailUserDefinedText13
					,Src.ShipmentDetailUserDefinedText14
					,Src.ShipmentDetailUserDefinedText15
					,Src.ShipmentDetailEachesPerPallet
					,Src.ShipmentDetailMaximumPalletHeight
					,Src.ShipmentDetailMaximumTransportPallets
					,Src.ShipmentDetailMaximumTransportWeight
					,Src.ShipmentDetailPalletType
					,Src.ShipmentDetailProductCode
					,Src.ShipmentDetailSingleProductCodePerPallet
					,Src.ShipmentDetailWeightPerEach
					,Src.ShipmentDetailWeight2
					,Src.ShipmentDetailAdditionalVolume
					,Src.ShipmentDetailPONumber
					,Src.ShipmentDetailSourceID
				FROM [dbo].ShipmentDetails Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentDetails Dest WITH (NOLOCK) ON Src.IDShipmentDetail = Dest.IDShipmentDetail
				WHERE Dest.IDShipmentDetail IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ShipmentDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ShipmentDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ShipmentOptions
	SET @CurrentTableName = 'ShipmentOptions';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentOptions AS Dest
			USING (
				SELECT IDShipmentOption
					,ShipmentID
					,ShipmentOptionAddDateTime
					,ShipmentOptionEditDateTime
					,ShipmentOptionAddUserCode
					,ShipmentOptionEditUserCode
					,ShipmentOptionNumber
					,QuotationOptionID
					,ShipmentOptionCarrierID
					,ShipmentOptionCarrierName
					,ShipmentOptionPortOfOrigin
					,ShipmentOptionPortOfDestination
					,ShipmentOptionCarrierServiceContract
					,ShipmentOptionNotifyPartyID
				FROM dbo.ShipmentOptions T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDShipmentOption = Src.IDShipmentOption)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.ShipmentID = Src.ShipmentID
						,Dest.ShipmentOptionAddDateTime = Src.ShipmentOptionAddDateTime
						,Dest.ShipmentOptionEditDateTime = Src.ShipmentOptionEditDateTime
						,Dest.ShipmentOptionAddUserCode = Src.ShipmentOptionAddUserCode
						,Dest.ShipmentOptionEditUserCode = Src.ShipmentOptionEditUserCode
						,Dest.ShipmentOptionNumber = Src.ShipmentOptionNumber
						,Dest.QuotationOptionID = Src.QuotationOptionID
						,Dest.ShipmentOptionCarrierID = Src.ShipmentOptionCarrierID
						,Dest.ShipmentOptionCarrierName = Src.ShipmentOptionCarrierName
						,Dest.ShipmentOptionPortOfOrigin = Src.ShipmentOptionPortOfOrigin
						,Dest.ShipmentOptionPortOfDestination = Src.ShipmentOptionPortOfDestination
						,Dest.ShipmentOptionCarrierServiceContract = Src.ShipmentOptionCarrierServiceContract
						,Dest.ShipmentOptionNotifyPartyID = Src.ShipmentOptionNotifyPartyID
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDShipmentOption
						,ShipmentID
						,ShipmentOptionAddDateTime
						,ShipmentOptionEditDateTime
						,ShipmentOptionAddUserCode
						,ShipmentOptionEditUserCode
						,ShipmentOptionNumber
						,QuotationOptionID
						,ShipmentOptionCarrierID
						,ShipmentOptionCarrierName
						,ShipmentOptionPortOfOrigin
						,ShipmentOptionPortOfDestination
						,ShipmentOptionCarrierServiceContract
						,ShipmentOptionNotifyPartyID
						)
					VALUES (
						Src.IDShipmentOption
						,Src.ShipmentID
						,Src.ShipmentOptionAddDateTime
						,Src.ShipmentOptionEditDateTime
						,Src.ShipmentOptionAddUserCode
						,Src.ShipmentOptionEditUserCode
						,Src.ShipmentOptionNumber
						,Src.QuotationOptionID
						,Src.ShipmentOptionCarrierID
						,Src.ShipmentOptionCarrierName
						,Src.ShipmentOptionPortOfOrigin
						,Src.ShipmentOptionPortOfDestination
						,Src.ShipmentOptionCarrierServiceContract
						,Src.ShipmentOptionNotifyPartyID
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDShipmentOption] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDShipmentOption] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ShipmentOptions Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentOptions Dest WITH (NOLOCK) ON Src.IDShipmentOption = Dest.IDShipmentOption
					WHERE Dest.ShipmentOptionEditDateTime < Src.ShipmentOptionEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.ShipmentID = Src.ShipmentID
					,Dest.ShipmentOptionAddDateTime = Src.ShipmentOptionAddDateTime
					,Dest.ShipmentOptionEditDateTime = Src.ShipmentOptionEditDateTime
					,Dest.ShipmentOptionAddUserCode = Src.ShipmentOptionAddUserCode
					,Dest.ShipmentOptionEditUserCode = Src.ShipmentOptionEditUserCode
					,Dest.ShipmentOptionNumber = Src.ShipmentOptionNumber
					,Dest.QuotationOptionID = Src.QuotationOptionID
					,Dest.ShipmentOptionCarrierID = Src.ShipmentOptionCarrierID
					,Dest.ShipmentOptionCarrierName = Src.ShipmentOptionCarrierName
					,Dest.ShipmentOptionPortOfOrigin = Src.ShipmentOptionPortOfOrigin
					,Dest.ShipmentOptionPortOfDestination = Src.ShipmentOptionPortOfDestination
					,Dest.ShipmentOptionCarrierServiceContract = Src.ShipmentOptionCarrierServiceContract
					,Dest.ShipmentOptionNotifyPartyID = Src.ShipmentOptionNotifyPartyID
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDShipmentOption AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDShipmentOption AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ShipmentOptions Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentOptions Dest ON Src.IDShipmentOption = Dest.IDShipmentOption
				WHERE Dest.ShipmentOptionEditDateTime < Src.ShipmentOptionEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ShipmentOptions Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentOptions Dest WITH (NOLOCK) ON Src.IDShipmentOption = Dest.IDShipmentOption
					WHERE Dest.IDShipmentOption IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentOptions (
					IDShipmentOption
					,ShipmentID
					,ShipmentOptionAddDateTime
					,ShipmentOptionEditDateTime
					,ShipmentOptionAddUserCode
					,ShipmentOptionEditUserCode
					,ShipmentOptionNumber
					,QuotationOptionID
					,ShipmentOptionCarrierID
					,ShipmentOptionCarrierName
					,ShipmentOptionPortOfOrigin
					,ShipmentOptionPortOfDestination
					,ShipmentOptionCarrierServiceContract
					,ShipmentOptionNotifyPartyID
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDShipmentOption AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDShipmentOption
					,Src.ShipmentID
					,Src.ShipmentOptionAddDateTime
					,Src.ShipmentOptionEditDateTime
					,Src.ShipmentOptionAddUserCode
					,Src.ShipmentOptionEditUserCode
					,Src.ShipmentOptionNumber
					,Src.QuotationOptionID
					,Src.ShipmentOptionCarrierID
					,Src.ShipmentOptionCarrierName
					,Src.ShipmentOptionPortOfOrigin
					,Src.ShipmentOptionPortOfDestination
					,Src.ShipmentOptionCarrierServiceContract
					,Src.ShipmentOptionNotifyPartyID
				FROM [dbo].ShipmentOptions Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentOptions Dest WITH (NOLOCK) ON Src.IDShipmentOption = Dest.IDShipmentOption
				WHERE Dest.IDShipmentOption IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ShipmentOptions: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ShipmentOptions` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ShipmentFiles
	SET @CurrentTableName = 'ShipmentFiles';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentFiles AS Dest
			USING (
				SELECT IDShipmentFile
					,ShipmentID
					,ShipmentFileAddDateTime
					,ShipmentFileEditDateTime
					,ShipmentFileAddUserCode
					,ShipmentFileEditUserCode
					,ShipmentFileName
					,ShipmentFileSaveFileName
					,ShipmentFileNotes
					,ShipmentFileType
					,ShipmentFileCompressedData
				FROM dbo.ShipmentFiles T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDShipmentFile = Src.IDShipmentFile)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.ShipmentID = Src.ShipmentID
						,Dest.ShipmentFileAddDateTime = Src.ShipmentFileAddDateTime
						,Dest.ShipmentFileEditDateTime = Src.ShipmentFileEditDateTime
						,Dest.ShipmentFileAddUserCode = Src.ShipmentFileAddUserCode
						,Dest.ShipmentFileEditUserCode = Src.ShipmentFileEditUserCode
						,Dest.ShipmentFileName = Src.ShipmentFileName
						,Dest.ShipmentFileSaveFileName = Src.ShipmentFileSaveFileName
						,Dest.ShipmentFileNotes = Src.ShipmentFileNotes
						,Dest.ShipmentFileType = Src.ShipmentFileType
						,Dest.ShipmentFileCompressedData = Src.ShipmentFileCompressedData
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDShipmentFile
						,ShipmentID
						,ShipmentFileAddDateTime
						,ShipmentFileEditDateTime
						,ShipmentFileAddUserCode
						,ShipmentFileEditUserCode
						,ShipmentFileName
						,ShipmentFileSaveFileName
						,ShipmentFileNotes
						,ShipmentFileType
						,ShipmentFileCompressedData
						)
					VALUES (
						Src.IDShipmentFile
						,Src.ShipmentID
						,Src.ShipmentFileAddDateTime
						,Src.ShipmentFileEditDateTime
						,Src.ShipmentFileAddUserCode
						,Src.ShipmentFileEditUserCode
						,Src.ShipmentFileName
						,Src.ShipmentFileSaveFileName
						,Src.ShipmentFileNotes
						,Src.ShipmentFileType
						,Src.ShipmentFileCompressedData
						)
			OUTPUT $ACTION
				,CAST(Inserted.IDShipmentFile AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDShipmentFile AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ShipmentFiles Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentFiles Dest WITH (NOLOCK) ON Src.IDShipmentFile = Dest.IDShipmentFile
					WHERE Dest.ShipmentFileEditDateTime < Src.ShipmentFileEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.ShipmentID = Src.ShipmentID
					,Dest.ShipmentFileAddDateTime = Src.ShipmentFileAddDateTime
					,Dest.ShipmentFileEditDateTime = Src.ShipmentFileEditDateTime
					,Dest.ShipmentFileAddUserCode = Src.ShipmentFileAddUserCode
					,Dest.ShipmentFileEditUserCode = Src.ShipmentFileEditUserCode
					,Dest.ShipmentFileName = Src.ShipmentFileName
					,Dest.ShipmentFileSaveFileName = Src.ShipmentFileSaveFileName
					,Dest.ShipmentFileNotes = Src.ShipmentFileNotes
					,Dest.ShipmentFileType = Src.ShipmentFileType
					,Dest.ShipmentFileCompressedData = Src.ShipmentFileCompressedData
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDShipmentFile AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDShipmentFile AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ShipmentFiles Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentFiles Dest ON Src.IDShipmentFile = Dest.IDShipmentFile
				WHERE Dest.ShipmentFileEditDateTime < Src.ShipmentFileEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ShipmentFiles Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentFiles Dest WITH (NOLOCK) ON Src.IDShipmentFile = Dest.IDShipmentFile
					WHERE Dest.IDShipmentFile IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentFiles (
					IDShipmentFile
					,ShipmentID
					,ShipmentFileAddDateTime
					,ShipmentFileEditDateTime
					,ShipmentFileAddUserCode
					,ShipmentFileEditUserCode
					,ShipmentFileName
					,ShipmentFileSaveFileName
					,ShipmentFileNotes
					,ShipmentFileType
					,ShipmentFileCompressedData
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDShipmentFile AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDShipmentFile
					,Src.ShipmentID
					,Src.ShipmentFileAddDateTime
					,Src.ShipmentFileEditDateTime
					,Src.ShipmentFileAddUserCode
					,Src.ShipmentFileEditUserCode
					,Src.ShipmentFileName
					,Src.ShipmentFileSaveFileName
					,Src.ShipmentFileNotes
					,Src.ShipmentFileType
					,Src.ShipmentFileCompressedData
				FROM [dbo].ShipmentFiles Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentFiles Dest WITH (NOLOCK) ON Src.IDShipmentFile = Dest.IDShipmentFile
				WHERE Dest.IDShipmentFile IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ShipmentFiles: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ShipmentFiles` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ShipmentLogs
	SET @CurrentTableName = 'ShipmentLogs';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentLogs AS Dest
			USING (
				SELECT IDShipmentLog
					,ShipmentID
					,ShipmentLogDateTime
					,ShipmentLogUserLogin
					,TransportStatusID
					,ShipmentLogEvent
					,ShipmentLogInfo
					,TransportEmailDefinitionID
					,ShipmentDetailID
					,ShipmentOptionID
					,ShipmentFileID
					,ShipmentLogEmailID
					,ShipmentLogTechnicalInfo
				FROM dbo.ShipmentLogs T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDShipmentLog = Src.IDShipmentLog)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.ShipmentID = Src.ShipmentID
						,Dest.ShipmentLogDateTime = Src.ShipmentLogDateTime
						,Dest.ShipmentLogUserLogin = Src.ShipmentLogUserLogin
						,Dest.TransportStatusID = Src.TransportStatusID
						,Dest.ShipmentLogEvent = Src.ShipmentLogEvent
						,Dest.ShipmentLogInfo = Src.ShipmentLogInfo
						,Dest.TransportEmailDefinitionID = Src.TransportEmailDefinitionID
						,Dest.ShipmentDetailID = Src.ShipmentDetailID
						,Dest.ShipmentOptionID = Src.ShipmentOptionID
						,Dest.ShipmentFileID = Src.ShipmentFileID
						,Dest.ShipmentLogEmailID = Src.ShipmentLogEmailID
						,Dest.ShipmentLogTechnicalInfo = Src.ShipmentLogTechnicalInfo
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDShipmentLog
						,ShipmentID
						,ShipmentLogDateTime
						,ShipmentLogUserLogin
						,TransportStatusID
						,ShipmentLogEvent
						,ShipmentLogInfo
						,TransportEmailDefinitionID
						,ShipmentDetailID
						,ShipmentOptionID
						,ShipmentFileID
						,ShipmentLogEmailID
						,ShipmentLogTechnicalInfo
						)
					VALUES (
						Src.IDShipmentLog
						,Src.ShipmentID
						,Src.ShipmentLogDateTime
						,Src.ShipmentLogUserLogin
						,Src.TransportStatusID
						,Src.ShipmentLogEvent
						,Src.ShipmentLogInfo
						,Src.TransportEmailDefinitionID
						,Src.ShipmentDetailID
						,Src.ShipmentOptionID
						,Src.ShipmentFileID
						,Src.ShipmentLogEmailID
						,Src.ShipmentLogTechnicalInfo
						)
			OUTPUT $ACTION
				,CAST(Inserted.IDShipmentLog AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDShipmentLog AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			--WHILE EXISTS (
			--		SELECT 1
			--		FROM [dbo].ShipmentLogs Src WITH (NOLOCK)
			--		INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentLogs Dest WITH (NOLOCK) ON Src.IDShipmentLog = Dest.IDShipmentLog
			--		)
			--	--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime
			--BEGIN
			--	UPDATE TOP (@BatchSizeForArchival) Dest
			--	SET Dest.ShipmentID = Src.ShipmentID
			--		,Dest.ShipmentLogDateTime = Src.ShipmentLogDateTime
			--		,Dest.ShipmentLogUserLogin = Src.ShipmentLogUserLogin
			--		,Dest.TransportStatusID = Src.TransportStatusID
			--		,Dest.ShipmentLogEvent = Src.ShipmentLogEvent
			--		,Dest.ShipmentLogInfo = Src.ShipmentLogInfo
			--		,Dest.TransportEmailDefinitionID = Src.TransportEmailDefinitionID
			--		,Dest.ShipmentDetailID = Src.ShipmentDetailID
			--		,Dest.ShipmentOptionID = Src.ShipmentOptionID
			--		,Dest.ShipmentFileID = Src.ShipmentFileID
			--		,Dest.ShipmentLogEmailID = Src.ShipmentLogEmailID
			--		,Dest.ShipmentLogTechnicalInfo = Src.ShipmentLogTechnicalInfo
			--	OUTPUT 'UPDATE'
			--		,CAST(Inserted.IDShipmentLog AS VARCHAR(50)) AS 'Inserted'
			--		,CAST(Deleted.IDShipmentLog AS VARCHAR(50)) AS 'Deleted'
			--	INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
			--	FROM [dbo].ShipmentLogs Src WITH (NOLOCK)
			--	INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentLogs Dest ON Src.IDShipmentLog = Dest.IDShipmentLog
			--		--WHERE Dest.ReceiptStatusEditDateTime < Src.ReceiptStatusEditDateTime;
			--END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ShipmentLogs Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentLogs Dest WITH (NOLOCK) ON Src.IDShipmentLog = Dest.IDShipmentLog
					WHERE Dest.IDShipmentLog IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentLogs (
					IDShipmentLog
					,ShipmentID
					,ShipmentLogDateTime
					,ShipmentLogUserLogin
					,TransportStatusID
					,ShipmentLogEvent
					,ShipmentLogInfo
					,TransportEmailDefinitionID
					,ShipmentDetailID
					,ShipmentOptionID
					,ShipmentFileID
					,ShipmentLogEmailID
					,ShipmentLogTechnicalInfo
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDShipmentLog AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDShipmentLog
					,Src.ShipmentID
					,Src.ShipmentLogDateTime
					,Src.ShipmentLogUserLogin
					,Src.TransportStatusID
					,Src.ShipmentLogEvent
					,Src.ShipmentLogInfo
					,Src.TransportEmailDefinitionID
					,Src.ShipmentDetailID
					,Src.ShipmentOptionID
					,Src.ShipmentFileID
					,Src.ShipmentLogEmailID
					,Src.ShipmentLogTechnicalInfo
				FROM [dbo].ShipmentLogs Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ShipmentLogs Dest WITH (NOLOCK) ON Src.IDShipmentLog = Dest.IDShipmentLog
				WHERE Dest.IDShipmentLog IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ShipmentLogs: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ShipmentLogs` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--EDIFiles
	-- 10 billing quantities
	--CompanyRateChargeTransportMatrixReferences
	SET @CurrentTableName = 'CompanyRateChargeTransportMatrixReferences';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateChargeTransportMatrixReferences AS Dest
			USING (
				SELECT CompanyRateChargeTransportMatrixReference
					,CompanyRateChargeTransportMatrixReferenceNotes
					,CompanyRateChargeTransportMatrixReferenceAddUserCode
					,CompanyRateChargeTransportMatrixReferenceEditUserCode
					,CompanyRateChargeTransportMatrixReferenceEditDateTime
					,CompanyRateChargeTransportMatrixReferenceAddDateTime
					,CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType
					,CountryCode
				FROM dbo.CompanyRateChargeTransportMatrixReferences T WITH (NOLOCK)
				) AS Src
				ON (Dest.CompanyRateChargeTransportMatrixReference = Src.CompanyRateChargeTransportMatrixReference)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.CompanyRateChargeTransportMatrixReferenceNotes = Src.CompanyRateChargeTransportMatrixReferenceNotes
						,Dest.CompanyRateChargeTransportMatrixReferenceAddUserCode = Src.CompanyRateChargeTransportMatrixReferenceAddUserCode
						,Dest.CompanyRateChargeTransportMatrixReferenceEditUserCode = Src.CompanyRateChargeTransportMatrixReferenceEditUserCode
						,Dest.CompanyRateChargeTransportMatrixReferenceEditDateTime = Src.CompanyRateChargeTransportMatrixReferenceEditDateTime
						,Dest.CompanyRateChargeTransportMatrixReferenceAddDateTime = Src.CompanyRateChargeTransportMatrixReferenceAddDateTime
						,Dest.CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType = Src.CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType
						,Dest.CountryCode = Src.CountryCode
			WHEN NOT MATCHED
				THEN
					INSERT (
						CompanyRateChargeTransportMatrixReference
						,CompanyRateChargeTransportMatrixReferenceNotes
						,CompanyRateChargeTransportMatrixReferenceAddUserCode
						,CompanyRateChargeTransportMatrixReferenceEditUserCode
						,CompanyRateChargeTransportMatrixReferenceEditDateTime
						,CompanyRateChargeTransportMatrixReferenceAddDateTime
						,CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType
						,CountryCode
						)
					VALUES (
						Src.CompanyRateChargeTransportMatrixReference
						,Src.CompanyRateChargeTransportMatrixReferenceNotes
						,Src.CompanyRateChargeTransportMatrixReferenceAddUserCode
						,Src.CompanyRateChargeTransportMatrixReferenceEditUserCode
						,Src.CompanyRateChargeTransportMatrixReferenceEditDateTime
						,Src.CompanyRateChargeTransportMatrixReferenceAddDateTime
						,Src.CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType
						,Src.CountryCode
						)
			OUTPUT $ACTION
				,CAST(Inserted.CompanyRateChargeTransportMatrixReference AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.CompanyRateChargeTransportMatrixReference AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CompanyRateChargeTransportMatrixReferences Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateChargeTransportMatrixReferences Dest WITH (NOLOCK) ON Src.CompanyRateChargeTransportMatrixReference = Dest.CompanyRateChargeTransportMatrixReference
					WHERE Dest.CompanyRateChargeTransportMatrixReferenceEditDateTime < Src.CompanyRateChargeTransportMatrixReferenceEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.CompanyRateChargeTransportMatrixReferenceNotes = Src.CompanyRateChargeTransportMatrixReferenceNotes
					,Dest.CompanyRateChargeTransportMatrixReferenceAddUserCode = Src.CompanyRateChargeTransportMatrixReferenceAddUserCode
					,Dest.CompanyRateChargeTransportMatrixReferenceEditUserCode = Src.CompanyRateChargeTransportMatrixReferenceEditUserCode
					,Dest.CompanyRateChargeTransportMatrixReferenceEditDateTime = Src.CompanyRateChargeTransportMatrixReferenceEditDateTime
					,Dest.CompanyRateChargeTransportMatrixReferenceAddDateTime = Src.CompanyRateChargeTransportMatrixReferenceAddDateTime
					,Dest.CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType = Src.CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType
					,Dest.CountryCode = Src.CountryCode
				OUTPUT 'UPDATE'
					,CAST(Inserted.CompanyRateChargeTransportMatrixReference AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.CompanyRateChargeTransportMatrixReference AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CompanyRateChargeTransportMatrixReferences Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateChargeTransportMatrixReferences Dest ON Src.CompanyRateChargeTransportMatrixReference = Dest.CompanyRateChargeTransportMatrixReference
				WHERE Dest.CompanyRateChargeTransportMatrixReferenceEditDateTime < Src.CompanyRateChargeTransportMatrixReferenceEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CompanyRateChargeTransportMatrixReferences Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateChargeTransportMatrixReferences Dest WITH (NOLOCK) ON Src.CompanyRateChargeTransportMatrixReference = Dest.CompanyRateChargeTransportMatrixReference
					WHERE Dest.CompanyRateChargeTransportMatrixReference IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateChargeTransportMatrixReferences (
					CompanyRateChargeTransportMatrixReference
					,CompanyRateChargeTransportMatrixReferenceNotes
					,CompanyRateChargeTransportMatrixReferenceAddUserCode
					,CompanyRateChargeTransportMatrixReferenceEditUserCode
					,CompanyRateChargeTransportMatrixReferenceEditDateTime
					,CompanyRateChargeTransportMatrixReferenceAddDateTime
					,CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType
					,CountryCode
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.CompanyRateChargeTransportMatrixReference AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.CompanyRateChargeTransportMatrixReference
					,Src.CompanyRateChargeTransportMatrixReferenceNotes
					,Src.CompanyRateChargeTransportMatrixReferenceAddUserCode
					,Src.CompanyRateChargeTransportMatrixReferenceEditUserCode
					,Src.CompanyRateChargeTransportMatrixReferenceEditDateTime
					,Src.CompanyRateChargeTransportMatrixReferenceAddDateTime
					,Src.CompanyRateChargeTransportMatrixReferenceFigureTextIsThresholdType
					,Src.CountryCode
				FROM [dbo].CompanyRateChargeTransportMatrixReferences Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateChargeTransportMatrixReferences Dest WITH (NOLOCK) ON Src.CompanyRateChargeTransportMatrixReference = Dest.CompanyRateChargeTransportMatrixReference
				WHERE Dest.CompanyRateChargeTransportMatrixReference IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CompanyRateChargeTransportMatrixReferences: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CompanyRateChargeTransportMatrixReferences` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--CompanyRates
	SET @CurrentTableName = 'CompanyRates';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRates AS Dest
			USING (
				SELECT CompanyID
					,CompanyRateValidFromDate
					,CompanyRateActive
					,CompanyRateDefaultCurrencyCode
					,CompanyRateRemarks
					,CompanyRateAddUserCode
					,CompanyRateEditUserCode
					,CompanyRateEditDateTime
					,CompanyRateAddDateTime
					,CompanyRateExternalCustomerID
					,CompanyRateInvoiceNumberPrefix
					,CompanyRateUsesOrderScreen
					,CompanyRateUsesReceiptScreen
					,CompanyRateDivision
					,CompanyRateUsesTransportScreen
					,CompanyRatePaymentTermCode
				FROM dbo.CompanyRates T WITH (NOLOCK)
				) AS Src
				ON (
						Dest.CompanyID = Src.CompanyID
						AND Dest.CompanyRateValidFromDate = Src.CompanyRateValidFromDate
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.CompanyRateActive = Src.CompanyRateActive
						,Dest.CompanyRateDefaultCurrencyCode = Src.CompanyRateDefaultCurrencyCode
						,Dest.CompanyRateRemarks = Src.CompanyRateRemarks
						,Dest.CompanyRateAddUserCode = Src.CompanyRateAddUserCode
						,Dest.CompanyRateEditUserCode = Src.CompanyRateEditUserCode
						,Dest.CompanyRateEditDateTime = Src.CompanyRateEditDateTime
						,Dest.CompanyRateAddDateTime = Src.CompanyRateAddDateTime
						,Dest.CompanyRateExternalCustomerID = Src.CompanyRateExternalCustomerID
						,Dest.CompanyRateInvoiceNumberPrefix = Src.CompanyRateInvoiceNumberPrefix
						,Dest.CompanyRateUsesOrderScreen = Src.CompanyRateUsesOrderScreen
						,Dest.CompanyRateUsesReceiptScreen = Src.CompanyRateUsesReceiptScreen
						,Dest.CompanyRateDivision = Src.CompanyRateDivision
						,Dest.CompanyRateUsesTransportScreen = Src.CompanyRateUsesTransportScreen
						,Dest.CompanyRatePaymentTermCode = Src.CompanyRatePaymentTermCode
			WHEN NOT MATCHED
				THEN
					INSERT (
						CompanyID
						,CompanyRateValidFromDate
						,CompanyRateActive
						,CompanyRateDefaultCurrencyCode
						,CompanyRateRemarks
						,CompanyRateAddUserCode
						,CompanyRateEditUserCode
						,CompanyRateEditDateTime
						,CompanyRateAddDateTime
						,CompanyRateExternalCustomerID
						,CompanyRateInvoiceNumberPrefix
						,CompanyRateUsesOrderScreen
						,CompanyRateUsesReceiptScreen
						,CompanyRateDivision
						,CompanyRateUsesTransportScreen
						,CompanyRatePaymentTermCode
						)
					VALUES (
						Src.CompanyID
						,Src.CompanyRateValidFromDate
						,Src.CompanyRateActive
						,Src.CompanyRateDefaultCurrencyCode
						,Src.CompanyRateRemarks
						,Src.CompanyRateAddUserCode
						,Src.CompanyRateEditUserCode
						,Src.CompanyRateEditDateTime
						,Src.CompanyRateAddDateTime
						,Src.CompanyRateExternalCustomerID
						,Src.CompanyRateInvoiceNumberPrefix
						,Src.CompanyRateUsesOrderScreen
						,Src.CompanyRateUsesReceiptScreen
						,Src.CompanyRateDivision
						,Src.CompanyRateUsesTransportScreen
						,Src.CompanyRatePaymentTermCode
						)
			OUTPUT $ACTION
				,CAST(Inserted.CompanyID AS VARCHAR(50)) + CAST(Inserted.CompanyRateValidFromDate AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.CompanyID AS VARCHAR(50)) + CAST(Deleted.CompanyRateValidFromDate AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CompanyRates Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRates Dest WITH (NOLOCK) ON Dest.CompanyID = Src.CompanyID
						AND Dest.CompanyRateValidFromDate = Src.CompanyRateValidFromDate
					WHERE Dest.CompanyRateEditDateTime < Src.CompanyRateEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.CompanyRateActive = Src.CompanyRateActive
					,Dest.CompanyRateDefaultCurrencyCode = Src.CompanyRateDefaultCurrencyCode
					,Dest.CompanyRateRemarks = Src.CompanyRateRemarks
					,Dest.CompanyRateAddUserCode = Src.CompanyRateAddUserCode
					,Dest.CompanyRateEditUserCode = Src.CompanyRateEditUserCode
					,Dest.CompanyRateEditDateTime = Src.CompanyRateEditDateTime
					,Dest.CompanyRateAddDateTime = Src.CompanyRateAddDateTime
					,Dest.CompanyRateExternalCustomerID = Src.CompanyRateExternalCustomerID
					,Dest.CompanyRateInvoiceNumberPrefix = Src.CompanyRateInvoiceNumberPrefix
					,Dest.CompanyRateUsesOrderScreen = Src.CompanyRateUsesOrderScreen
					,Dest.CompanyRateUsesReceiptScreen = Src.CompanyRateUsesReceiptScreen
					,Dest.CompanyRateDivision = Src.CompanyRateDivision
					,Dest.CompanyRateUsesTransportScreen = Src.CompanyRateUsesTransportScreen
					,Dest.CompanyRatePaymentTermCode = Src.CompanyRatePaymentTermCode
				OUTPUT 'UPDATE'
					,CAST(Inserted.CompanyID AS VARCHAR(50)) + CAST(Inserted.CompanyRateValidFromDate AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.CompanyID AS VARCHAR(50)) + CAST(Deleted.CompanyRateValidFromDate AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CompanyRates Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRates Dest ON Dest.CompanyID = Src.CompanyID
					AND Dest.CompanyRateValidFromDate = Src.CompanyRateValidFromDate
				WHERE Dest.CompanyRateEditDateTime < Src.CompanyRateEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CompanyRates Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRates Dest WITH (NOLOCK) ON Dest.CompanyID = Src.CompanyID
						AND Src.CompanyRateValidFromDate = Dest.CompanyRateValidFromDate
					WHERE Dest.CompanyID IS NULL
						AND Dest.CompanyRateValidFromDate IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRates (
					CompanyID
					,CompanyRateValidFromDate
					,CompanyRateActive
					,CompanyRateDefaultCurrencyCode
					,CompanyRateRemarks
					,CompanyRateAddUserCode
					,CompanyRateEditUserCode
					,CompanyRateEditDateTime
					,CompanyRateAddDateTime
					,CompanyRateExternalCustomerID
					,CompanyRateInvoiceNumberPrefix
					,CompanyRateUsesOrderScreen
					,CompanyRateUsesReceiptScreen
					,CompanyRateDivision
					,CompanyRateUsesTransportScreen
					,CompanyRatePaymentTermCode
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.CompanyID AS VARCHAR(50)) + CAST(Inserted.CompanyRateValidFromDate AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.CompanyID
					,Src.CompanyRateValidFromDate
					,Src.CompanyRateActive
					,Src.CompanyRateDefaultCurrencyCode
					,Src.CompanyRateRemarks
					,Src.CompanyRateAddUserCode
					,Src.CompanyRateEditUserCode
					,Src.CompanyRateEditDateTime
					,Src.CompanyRateAddDateTime
					,Src.CompanyRateExternalCustomerID
					,Src.CompanyRateInvoiceNumberPrefix
					,Src.CompanyRateUsesOrderScreen
					,Src.CompanyRateUsesReceiptScreen
					,Src.CompanyRateDivision
					,Src.CompanyRateUsesTransportScreen
					,Src.CompanyRatePaymentTermCode
				FROM [dbo].CompanyRates Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRates Dest WITH (NOLOCK) ON Dest.CompanyID = Src.CompanyID
					AND Dest.CompanyRateValidFromDate = Src.CompanyRateValidFromDate
				WHERE Dest.CompanyID IS NULL
					AND Dest.CompanyRateValidFromDate IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CompanyRates: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CompanyRates` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ChargeCategories
	SET @CurrentTableName = 'ChargeCategories';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeCategories AS Dest
			USING (
				SELECT T.[IDChargeCategory]
					,T.[ChargeCategoryName]
					,T.[ChargeCategoryAddUserCode]
					,T.[ChargeCategoryEditUserCode]
					,T.[ChargeCategoryEditDateTime]
					,T.[ChargeCategoryAddDateTime]
				FROM dbo.ChargeCategories T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDChargeCategory] = Src.[IDChargeCategory])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ChargeCategoryName] = Src.[ChargeCategoryName]
						,Dest.[ChargeCategoryAddUserCode] = Src.[ChargeCategoryAddUserCode]
						,Dest.[ChargeCategoryEditUserCode] = Src.[ChargeCategoryEditUserCode]
						,Dest.[ChargeCategoryEditDateTime] = Src.[ChargeCategoryEditDateTime]
						,Dest.[ChargeCategoryAddDateTime] = Src.[ChargeCategoryAddDateTime]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDChargeCategory]
						,[ChargeCategoryName]
						,[ChargeCategoryAddUserCode]
						,[ChargeCategoryEditUserCode]
						,[ChargeCategoryEditDateTime]
						,[ChargeCategoryAddDateTime]
						)
					VALUES (
						Src.[IDChargeCategory]
						,Src.[ChargeCategoryName]
						,Src.[ChargeCategoryAddUserCode]
						,Src.[ChargeCategoryEditUserCode]
						,Src.[ChargeCategoryEditDateTime]
						,Src.[ChargeCategoryAddDateTime]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDChargeCategory] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDChargeCategory] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ChargeCategories Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeCategories Dest WITH (NOLOCK) ON Src.IDChargeCategory = Dest.IDChargeCategory
					WHERE Dest.[ChargeCategoryEditDateTime] < Src.[ChargeCategoryEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ChargeCategoryName] = Src.[ChargeCategoryName]
					,Dest.[ChargeCategoryAddUserCode] = Src.[ChargeCategoryAddUserCode]
					,Dest.[ChargeCategoryEditUserCode] = Src.[ChargeCategoryEditUserCode]
					,Dest.[ChargeCategoryEditDateTime] = Src.[ChargeCategoryEditDateTime]
					,Dest.[ChargeCategoryAddDateTime] = Src.[ChargeCategoryAddDateTime]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDChargeCategory AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDChargeCategory AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ChargeCategories Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeCategories Dest ON Src.IDChargeCategory = Dest.IDChargeCategory
				WHERE Dest.[ChargeCategoryEditDateTime] < Src.[ChargeCategoryEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ChargeCategories Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeCategories Dest WITH (NOLOCK) ON Src.IDChargeCategory = Dest.IDChargeCategory
					WHERE Dest.IDChargeCategory IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeCategories (
					[IDChargeCategory]
					,[ChargeCategoryName]
					,[ChargeCategoryAddUserCode]
					,[ChargeCategoryEditUserCode]
					,[ChargeCategoryEditDateTime]
					,[ChargeCategoryAddDateTime]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDChargeCategory AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDChargeCategory]
					,Src.[ChargeCategoryName]
					,Src.[ChargeCategoryAddUserCode]
					,Src.[ChargeCategoryEditUserCode]
					,Src.[ChargeCategoryEditDateTime]
					,Src.[ChargeCategoryAddDateTime]
				FROM [dbo].ChargeCategories Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeCategories Dest WITH (NOLOCK) ON Src.IDChargeCategory = Dest.IDChargeCategory
				WHERE Dest.IDChargeCategory IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ChargeCategories: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ChargeCategories` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ChargeGroups
	SET @CurrentTableName = 'ChargeGroups';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeGroups AS Dest
			USING (
				SELECT [IDChargeGroup]
					,[ChargeGroupName]
					,[ChargeGroupAddUserCode]
					,[ChargeGroupEditUserCode]
					,[ChargeGroupEditDateTime]
					,[ChargeGroupAddDateTime]
				FROM dbo.ChargeGroups T WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDChargeGroup] = Src.[IDChargeGroup])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ChargeGroupName] = Src.[ChargeGroupName]
						,Dest.[ChargeGroupAddUserCode] = Src.[ChargeGroupAddUserCode]
						,Dest.[ChargeGroupEditUserCode] = Src.[ChargeGroupEditUserCode]
						,Dest.[ChargeGroupEditDateTime] = Src.[ChargeGroupEditDateTime]
						,Dest.[ChargeGroupAddDateTime] = Src.[ChargeGroupAddDateTime]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDChargeGroup]
						,[ChargeGroupName]
						,[ChargeGroupAddUserCode]
						,[ChargeGroupEditUserCode]
						,[ChargeGroupEditDateTime]
						,[ChargeGroupAddDateTime]
						)
					VALUES (
						Src.[IDChargeGroup]
						,Src.[ChargeGroupName]
						,Src.[ChargeGroupAddUserCode]
						,Src.[ChargeGroupEditUserCode]
						,Src.[ChargeGroupEditDateTime]
						,Src.[ChargeGroupAddDateTime]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDChargeGroup] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDChargeGroup] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ChargeGroups Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeGroups Dest WITH (NOLOCK) ON Src.IDChargeGroup = Dest.IDChargeGroup
					WHERE Dest.[ChargeGroupEditDateTime] < Src.[ChargeGroupEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ChargeGroupName] = Src.[ChargeGroupName]
					,Dest.[ChargeGroupAddUserCode] = Src.[ChargeGroupAddUserCode]
					,Dest.[ChargeGroupEditUserCode] = Src.[ChargeGroupEditUserCode]
					,Dest.[ChargeGroupEditDateTime] = Src.[ChargeGroupEditDateTime]
					,Dest.[ChargeGroupAddDateTime] = Src.[ChargeGroupAddDateTime]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDChargeGroup AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDChargeGroup AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ChargeGroups Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeGroups Dest ON Src.IDChargeGroup = Dest.IDChargeGroup
				WHERE Dest.[ChargeGroupEditDateTime] < Src.[ChargeGroupEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ChargeGroups Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeGroups Dest WITH (NOLOCK) ON Src.IDChargeGroup = Dest.IDChargeGroup
					WHERE Dest.IDChargeGroup IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeGroups (
					[IDChargeGroup]
					,[ChargeGroupName]
					,[ChargeGroupAddUserCode]
					,[ChargeGroupEditUserCode]
					,[ChargeGroupEditDateTime]
					,[ChargeGroupAddDateTime]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDChargeGroup AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDChargeGroup]
					,Src.[ChargeGroupName]
					,Src.[ChargeGroupAddUserCode]
					,Src.[ChargeGroupEditUserCode]
					,Src.[ChargeGroupEditDateTime]
					,Src.[ChargeGroupAddDateTime]
				FROM [dbo].ChargeGroups Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ChargeGroups Dest WITH (NOLOCK) ON Src.IDChargeGroup = Dest.IDChargeGroup
				WHERE Dest.IDChargeGroup IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ChargeGroups: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ChargeGroups` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--ScoreCardCategories
	SET @CurrentTableName = 'ScoreCardCategories';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ScoreCardCategories AS Dest
			USING (
				SELECT [IDScoreCardCategory]
					,[ScoreCardCategoryName]
					,[ScoreCardCategoryAddUserCode]
					,[ScoreCardCategoryEditUserCode]
					,[ScoreCardCategoryEditDateTime]
					,[ScoreCardCategoryAddDateTime]
				FROM dbo.ScoreCardCategories T WITH (NOLOCK)
				) AS Src
				ON (DEST.[IDScoreCardCategory] = Src.[IDScoreCardCategory])
			WHEN MATCHED
				THEN
					UPDATE
					SET DEST.[ScoreCardCategoryName] = Src.[ScoreCardCategoryName]
						,DEST.[ScoreCardCategoryAddUserCode] = Src.[ScoreCardCategoryAddUserCode]
						,DEST.[ScoreCardCategoryEditUserCode] = Src.[ScoreCardCategoryEditUserCode]
						,DEST.[ScoreCardCategoryEditDateTime] = Src.[ScoreCardCategoryEditDateTime]
						,DEST.[ScoreCardCategoryAddDateTime] = Src.[ScoreCardCategoryAddDateTime]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDScoreCardCategory]
						,[ScoreCardCategoryName]
						,[ScoreCardCategoryAddUserCode]
						,[ScoreCardCategoryEditUserCode]
						,[ScoreCardCategoryEditDateTime]
						,[ScoreCardCategoryAddDateTime]
						)
					VALUES (
						Src.[IDScoreCardCategory]
						,Src.[ScoreCardCategoryName]
						,Src.[ScoreCardCategoryAddUserCode]
						,Src.[ScoreCardCategoryEditUserCode]
						,Src.[ScoreCardCategoryEditDateTime]
						,Src.[ScoreCardCategoryAddDateTime]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDScoreCardCategory] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDScoreCardCategory] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ScoreCardCategories Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ScoreCardCategories Dest WITH (NOLOCK) ON Src.IDScoreCardCategory = Dest.IDScoreCardCategory
					WHERE Dest.[ScoreCardCategoryEditDateTime] < Src.[ScoreCardCategoryEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET DEST.[ScoreCardCategoryName] = Src.[ScoreCardCategoryName]
					,DEST.[ScoreCardCategoryAddUserCode] = Src.[ScoreCardCategoryAddUserCode]
					,DEST.[ScoreCardCategoryEditUserCode] = Src.[ScoreCardCategoryEditUserCode]
					,DEST.[ScoreCardCategoryEditDateTime] = Src.[ScoreCardCategoryEditDateTime]
					,DEST.[ScoreCardCategoryAddDateTime] = Src.[ScoreCardCategoryAddDateTime]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDScoreCardCategory AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDScoreCardCategory AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].ScoreCardCategories Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ScoreCardCategories Dest ON Src.IDScoreCardCategory = Dest.IDScoreCardCategory
				WHERE Dest.[ScoreCardCategoryEditDateTime] < Src.[ScoreCardCategoryEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].ScoreCardCategories Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ScoreCardCategories Dest WITH (NOLOCK) ON Src.IDScoreCardCategory = Dest.IDScoreCardCategory
					WHERE Dest.IDScoreCardCategory IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.ScoreCardCategories (
					[IDScoreCardCategory]
					,[ScoreCardCategoryName]
					,[ScoreCardCategoryAddUserCode]
					,[ScoreCardCategoryEditUserCode]
					,[ScoreCardCategoryEditDateTime]
					,[ScoreCardCategoryAddDateTime]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDScoreCardCategory AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDScoreCardCategory]
					,Src.[ScoreCardCategoryName]
					,Src.[ScoreCardCategoryAddUserCode]
					,Src.[ScoreCardCategoryEditUserCode]
					,Src.[ScoreCardCategoryEditDateTime]
					,Src.[ScoreCardCategoryAddDateTime]
				FROM [dbo].ScoreCardCategories Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.ScoreCardCategories Dest WITH (NOLOCK) ON Src.IDScoreCardCategory = Dest.IDScoreCardCategory
				WHERE Dest.IDScoreCardCategory IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') ScoreCardCategories: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `ScoreCardCategories` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--Charges
	SET @CurrentTableName = 'Charges';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Charges AS Dest
			USING (
				SELECT IDCharge
					,ChargeName
					,ChargeDescription
					,ChargeCategoryID
					,ChargeGroupID
					,ScoreCardCategoryID
					,ChargeMeasuringUnit
					,ChargeSplitType
					,ChargeDefaultTariff
					,ChargeReceiptUsage
					,ChargeOrderUsage
					,ChargeDirectForCustomers
					,ChargeExternalID
					,ChargeCriteriaString
					,ChargeAddUserCode
					,ChargeEditUserCode
					,ChargeEditDateTime
					,ChargeAddDateTime
					,ChargeMeasuringUnitName
					,ChargeBookDateField
					,ChargeReportingName
					,ChargeMultiplyQuantityWithSplitQuantity
					,ChargeDisplayName
					,ChargeRequiresActivation
					,ChargeExternalMeasuringUnit
					,ChargeValueNumberFormat
					,ChargeInvoiceWithoutQuantity
					,ChargeRoundingType
					,ChargeCalculationDay
					,ChargeMinimumQuantityType
					,ChargeFreeQuantity
					,TransportStopUsage
					,ChargeType
					,ChargeTransportUsage
					,ChargeTransportDetailUsage
					,ChargeQuotationUsage
					,ChargeMatrixSearchRoundingType
					,ChargeMatrixSearchFigureType
					,ChargeMatrixTariffFigureType
					,ChargeUseMatrixFigureAsFigure
					,ChargeMatrixFigureRoundingType
					,ChargeGroupNumber
					,ChargeLegNumber
					,ChargeMatrixSearchFigureExpression
					,ChargeMatrixTariffFigureExpression
					,ChargeExternalUserWizardPage
					,ChargeExternalUserGroupDescription
					,ChargeExternalUserChargeDescription
					,ChargeMatrixOriginSearchField
					,ChargeMatrixDestinationSearchField
					,ChargeUseMaximumTariffFromMatrix
					,ChargeOnlyUseFirstItemFromFirstMatrix
					,CountryCode
					,ChargeOrderNumber
					,ChargeShortName
					,ChargeCostsFromSupplier
					,ChargeDirectAmount
					,ChargeOrderBundleUsage
					,ChargeReceiptBundleUsage
					,ChargeSourceSystemID
					,ChargeSpecialType
					,ChargeDefaultAllocationMethod
					,ChargeAlwaysUseClientSpecificTariffFromMatrix
					,ChargeVisibleToExternalUsers
					,ChargeReadOnlyForInternalUsers
					,ChargeDontSendIncomeToFinancialSystem
					,ChargeDontSendCostToFinancialSystem
					,ChargeIgnoreForOptimization
					,ChargeCostsSetupAtSupplier
				FROM dbo.Charges T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDCharge = Src.IDCharge)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.ChargeName = Src.ChargeName
						,Dest.ChargeDescription = Src.ChargeDescription
						,Dest.ChargeCategoryID = Src.ChargeCategoryID
						,Dest.ChargeGroupID = Src.ChargeGroupID
						,Dest.ScoreCardCategoryID = Src.ScoreCardCategoryID
						,Dest.ChargeMeasuringUnit = Src.ChargeMeasuringUnit
						,Dest.ChargeSplitType = Src.ChargeSplitType
						,Dest.ChargeDefaultTariff = Src.ChargeDefaultTariff
						,Dest.ChargeReceiptUsage = Src.ChargeReceiptUsage
						,Dest.ChargeOrderUsage = Src.ChargeOrderUsage
						,Dest.ChargeDirectForCustomers = Src.ChargeDirectForCustomers
						,Dest.ChargeExternalID = Src.ChargeExternalID
						,Dest.ChargeCriteriaString = Src.ChargeCriteriaString
						,Dest.ChargeAddUserCode = Src.ChargeAddUserCode
						,Dest.ChargeEditUserCode = Src.ChargeEditUserCode
						,Dest.ChargeEditDateTime = Src.ChargeEditDateTime
						,Dest.ChargeAddDateTime = Src.ChargeAddDateTime
						,Dest.ChargeMeasuringUnitName = Src.ChargeMeasuringUnitName
						,Dest.ChargeBookDateField = Src.ChargeBookDateField
						,Dest.ChargeReportingName = Src.ChargeReportingName
						,Dest.ChargeMultiplyQuantityWithSplitQuantity = Src.ChargeMultiplyQuantityWithSplitQuantity
						,Dest.ChargeDisplayName = Src.ChargeDisplayName
						,Dest.ChargeRequiresActivation = Src.ChargeRequiresActivation
						,Dest.ChargeExternalMeasuringUnit = Src.ChargeExternalMeasuringUnit
						,Dest.ChargeValueNumberFormat = Src.ChargeValueNumberFormat
						,Dest.ChargeInvoiceWithoutQuantity = Src.ChargeInvoiceWithoutQuantity
						,Dest.ChargeRoundingType = Src.ChargeRoundingType
						,Dest.ChargeCalculationDay = Src.ChargeCalculationDay
						,Dest.ChargeMinimumQuantityType = Src.ChargeMinimumQuantityType
						,Dest.ChargeFreeQuantity = Src.ChargeFreeQuantity
						,Dest.TransportStopUsage = Src.TransportStopUsage
						,Dest.ChargeType = Src.ChargeType
						,Dest.ChargeTransportUsage = Src.ChargeTransportUsage
						,Dest.ChargeTransportDetailUsage = Src.ChargeTransportDetailUsage
						,Dest.ChargeQuotationUsage = Src.ChargeQuotationUsage
						,Dest.ChargeMatrixSearchRoundingType = Src.ChargeMatrixSearchRoundingType
						,Dest.ChargeMatrixSearchFigureType = Src.ChargeMatrixSearchFigureType
						,Dest.ChargeMatrixTariffFigureType = Src.ChargeMatrixTariffFigureType
						,Dest.ChargeUseMatrixFigureAsFigure = Src.ChargeUseMatrixFigureAsFigure
						,Dest.ChargeMatrixFigureRoundingType = Src.ChargeMatrixFigureRoundingType
						,Dest.ChargeGroupNumber = Src.ChargeGroupNumber
						,Dest.ChargeLegNumber = Src.ChargeLegNumber
						,Dest.ChargeMatrixSearchFigureExpression = Src.ChargeMatrixSearchFigureExpression
						,Dest.ChargeMatrixTariffFigureExpression = Src.ChargeMatrixTariffFigureExpression
						,Dest.ChargeExternalUserWizardPage = Src.ChargeExternalUserWizardPage
						,Dest.ChargeExternalUserGroupDescription = Src.ChargeExternalUserGroupDescription
						,Dest.ChargeExternalUserChargeDescription = Src.ChargeExternalUserChargeDescription
						,Dest.ChargeMatrixOriginSearchField = Src.ChargeMatrixOriginSearchField
						,Dest.ChargeMatrixDestinationSearchField = Src.ChargeMatrixDestinationSearchField
						,Dest.ChargeUseMaximumTariffFromMatrix = Src.ChargeUseMaximumTariffFromMatrix
						,Dest.ChargeOnlyUseFirstItemFromFirstMatrix = Src.ChargeOnlyUseFirstItemFromFirstMatrix
						,Dest.CountryCode = Src.CountryCode
						,Dest.ChargeOrderNumber = Src.ChargeOrderNumber
						,Dest.ChargeShortName = Src.ChargeShortName
						,Dest.ChargeCostsFromSupplier = Src.ChargeCostsFromSupplier
						,Dest.ChargeDirectAmount = Src.ChargeDirectAmount
						,Dest.ChargeOrderBundleUsage = Src.ChargeOrderBundleUsage
						,Dest.ChargeReceiptBundleUsage = Src.ChargeReceiptBundleUsage
						,Dest.ChargeSourceSystemID = Src.ChargeSourceSystemID
						,Dest.ChargeSpecialType = Src.ChargeSpecialType
						,Dest.ChargeDefaultAllocationMethod = Src.ChargeDefaultAllocationMethod
						,Dest.ChargeAlwaysUseClientSpecificTariffFromMatrix = Src.ChargeAlwaysUseClientSpecificTariffFromMatrix
						,Dest.ChargeVisibleToExternalUsers = Src.ChargeVisibleToExternalUsers
						,Dest.ChargeReadOnlyForInternalUsers = Src.ChargeReadOnlyForInternalUsers
						,Dest.ChargeDontSendIncomeToFinancialSystem = Src.ChargeDontSendIncomeToFinancialSystem
						,Dest.ChargeDontSendCostToFinancialSystem = Src.ChargeDontSendCostToFinancialSystem
						,Dest.ChargeIgnoreForOptimization = Src.ChargeIgnoreForOptimization
						,Dest.ChargeCostsSetupAtSupplier = Src.ChargeCostsSetupAtSupplier
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDCharge
						,ChargeName
						,ChargeDescription
						,ChargeCategoryID
						,ChargeGroupID
						,ScoreCardCategoryID
						,ChargeMeasuringUnit
						,ChargeSplitType
						,ChargeDefaultTariff
						,ChargeReceiptUsage
						,ChargeOrderUsage
						,ChargeDirectForCustomers
						,ChargeExternalID
						,ChargeCriteriaString
						,ChargeAddUserCode
						,ChargeEditUserCode
						,ChargeEditDateTime
						,ChargeAddDateTime
						,ChargeMeasuringUnitName
						,ChargeBookDateField
						,ChargeReportingName
						,ChargeMultiplyQuantityWithSplitQuantity
						,ChargeDisplayName
						,ChargeRequiresActivation
						,ChargeExternalMeasuringUnit
						,ChargeValueNumberFormat
						,ChargeInvoiceWithoutQuantity
						,ChargeRoundingType
						,ChargeCalculationDay
						,ChargeMinimumQuantityType
						,ChargeFreeQuantity
						,TransportStopUsage
						,ChargeType
						,ChargeTransportUsage
						,ChargeTransportDetailUsage
						,ChargeQuotationUsage
						,ChargeMatrixSearchRoundingType
						,ChargeMatrixSearchFigureType
						,ChargeMatrixTariffFigureType
						,ChargeUseMatrixFigureAsFigure
						,ChargeMatrixFigureRoundingType
						,ChargeGroupNumber
						,ChargeLegNumber
						,ChargeMatrixSearchFigureExpression
						,ChargeMatrixTariffFigureExpression
						,ChargeExternalUserWizardPage
						,ChargeExternalUserGroupDescription
						,ChargeExternalUserChargeDescription
						,ChargeMatrixOriginSearchField
						,ChargeMatrixDestinationSearchField
						,ChargeUseMaximumTariffFromMatrix
						,ChargeOnlyUseFirstItemFromFirstMatrix
						,CountryCode
						,ChargeOrderNumber
						,ChargeShortName
						,ChargeCostsFromSupplier
						,ChargeDirectAmount
						,ChargeOrderBundleUsage
						,ChargeReceiptBundleUsage
						,ChargeSourceSystemID
						,ChargeSpecialType
						,ChargeDefaultAllocationMethod
						,ChargeAlwaysUseClientSpecificTariffFromMatrix
						,ChargeVisibleToExternalUsers
						,ChargeReadOnlyForInternalUsers
						,ChargeDontSendIncomeToFinancialSystem
						,ChargeDontSendCostToFinancialSystem
						,ChargeIgnoreForOptimization
						,ChargeCostsSetupAtSupplier
						)
					VALUES (
						Src.IDCharge
						,Src.ChargeName
						,Src.ChargeDescription
						,Src.ChargeCategoryID
						,Src.ChargeGroupID
						,Src.ScoreCardCategoryID
						,Src.ChargeMeasuringUnit
						,Src.ChargeSplitType
						,Src.ChargeDefaultTariff
						,Src.ChargeReceiptUsage
						,Src.ChargeOrderUsage
						,Src.ChargeDirectForCustomers
						,Src.ChargeExternalID
						,Src.ChargeCriteriaString
						,Src.ChargeAddUserCode
						,Src.ChargeEditUserCode
						,Src.ChargeEditDateTime
						,Src.ChargeAddDateTime
						,Src.ChargeMeasuringUnitName
						,Src.ChargeBookDateField
						,Src.ChargeReportingName
						,Src.ChargeMultiplyQuantityWithSplitQuantity
						,Src.ChargeDisplayName
						,Src.ChargeRequiresActivation
						,Src.ChargeExternalMeasuringUnit
						,Src.ChargeValueNumberFormat
						,Src.ChargeInvoiceWithoutQuantity
						,Src.ChargeRoundingType
						,Src.ChargeCalculationDay
						,Src.ChargeMinimumQuantityType
						,Src.ChargeFreeQuantity
						,Src.TransportStopUsage
						,Src.ChargeType
						,Src.ChargeTransportUsage
						,Src.ChargeTransportDetailUsage
						,Src.ChargeQuotationUsage
						,Src.ChargeMatrixSearchRoundingType
						,Src.ChargeMatrixSearchFigureType
						,Src.ChargeMatrixTariffFigureType
						,Src.ChargeUseMatrixFigureAsFigure
						,Src.ChargeMatrixFigureRoundingType
						,Src.ChargeGroupNumber
						,Src.ChargeLegNumber
						,Src.ChargeMatrixSearchFigureExpression
						,Src.ChargeMatrixTariffFigureExpression
						,Src.ChargeExternalUserWizardPage
						,Src.ChargeExternalUserGroupDescription
						,Src.ChargeExternalUserChargeDescription
						,Src.ChargeMatrixOriginSearchField
						,Src.ChargeMatrixDestinationSearchField
						,Src.ChargeUseMaximumTariffFromMatrix
						,Src.ChargeOnlyUseFirstItemFromFirstMatrix
						,Src.CountryCode
						,Src.ChargeOrderNumber
						,Src.ChargeShortName
						,Src.ChargeCostsFromSupplier
						,Src.ChargeDirectAmount
						,Src.ChargeOrderBundleUsage
						,Src.ChargeReceiptBundleUsage
						,Src.ChargeSourceSystemID
						,Src.ChargeSpecialType
						,Src.ChargeDefaultAllocationMethod
						,Src.ChargeAlwaysUseClientSpecificTariffFromMatrix
						,Src.ChargeVisibleToExternalUsers
						,Src.ChargeReadOnlyForInternalUsers
						,Src.ChargeDontSendIncomeToFinancialSystem
						,Src.ChargeDontSendCostToFinancialSystem
						,Src.ChargeIgnoreForOptimization
						,Src.ChargeCostsSetupAtSupplier
						)
			OUTPUT $ACTION
				,CAST(Inserted.IDCharge AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDCharge AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Charges Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Charges Dest WITH (NOLOCK) ON Src.IDCharge = Dest.IDCharge
					WHERE Dest.ChargeEditDateTime < Src.ChargeEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.ChargeName = Src.ChargeName
					,Dest.ChargeDescription = Src.ChargeDescription
					,Dest.ChargeCategoryID = Src.ChargeCategoryID
					,Dest.ChargeGroupID = Src.ChargeGroupID
					,Dest.ScoreCardCategoryID = Src.ScoreCardCategoryID
					,Dest.ChargeMeasuringUnit = Src.ChargeMeasuringUnit
					,Dest.ChargeSplitType = Src.ChargeSplitType
					,Dest.ChargeDefaultTariff = Src.ChargeDefaultTariff
					,Dest.ChargeReceiptUsage = Src.ChargeReceiptUsage
					,Dest.ChargeOrderUsage = Src.ChargeOrderUsage
					,Dest.ChargeDirectForCustomers = Src.ChargeDirectForCustomers
					,Dest.ChargeExternalID = Src.ChargeExternalID
					,Dest.ChargeCriteriaString = Src.ChargeCriteriaString
					,Dest.ChargeAddUserCode = Src.ChargeAddUserCode
					,Dest.ChargeEditUserCode = Src.ChargeEditUserCode
					,Dest.ChargeEditDateTime = Src.ChargeEditDateTime
					,Dest.ChargeAddDateTime = Src.ChargeAddDateTime
					,Dest.ChargeMeasuringUnitName = Src.ChargeMeasuringUnitName
					,Dest.ChargeBookDateField = Src.ChargeBookDateField
					,Dest.ChargeReportingName = Src.ChargeReportingName
					,Dest.ChargeMultiplyQuantityWithSplitQuantity = Src.ChargeMultiplyQuantityWithSplitQuantity
					,Dest.ChargeDisplayName = Src.ChargeDisplayName
					,Dest.ChargeRequiresActivation = Src.ChargeRequiresActivation
					,Dest.ChargeExternalMeasuringUnit = Src.ChargeExternalMeasuringUnit
					,Dest.ChargeValueNumberFormat = Src.ChargeValueNumberFormat
					,Dest.ChargeInvoiceWithoutQuantity = Src.ChargeInvoiceWithoutQuantity
					,Dest.ChargeRoundingType = Src.ChargeRoundingType
					,Dest.ChargeCalculationDay = Src.ChargeCalculationDay
					,Dest.ChargeMinimumQuantityType = Src.ChargeMinimumQuantityType
					,Dest.ChargeFreeQuantity = Src.ChargeFreeQuantity
					,Dest.TransportStopUsage = Src.TransportStopUsage
					,Dest.ChargeType = Src.ChargeType
					,Dest.ChargeTransportUsage = Src.ChargeTransportUsage
					,Dest.ChargeTransportDetailUsage = Src.ChargeTransportDetailUsage
					,Dest.ChargeQuotationUsage = Src.ChargeQuotationUsage
					,Dest.ChargeMatrixSearchRoundingType = Src.ChargeMatrixSearchRoundingType
					,Dest.ChargeMatrixSearchFigureType = Src.ChargeMatrixSearchFigureType
					,Dest.ChargeMatrixTariffFigureType = Src.ChargeMatrixTariffFigureType
					,Dest.ChargeUseMatrixFigureAsFigure = Src.ChargeUseMatrixFigureAsFigure
					,Dest.ChargeMatrixFigureRoundingType = Src.ChargeMatrixFigureRoundingType
					,Dest.ChargeGroupNumber = Src.ChargeGroupNumber
					,Dest.ChargeLegNumber = Src.ChargeLegNumber
					,Dest.ChargeMatrixSearchFigureExpression = Src.ChargeMatrixSearchFigureExpression
					,Dest.ChargeMatrixTariffFigureExpression = Src.ChargeMatrixTariffFigureExpression
					,Dest.ChargeExternalUserWizardPage = Src.ChargeExternalUserWizardPage
					,Dest.ChargeExternalUserGroupDescription = Src.ChargeExternalUserGroupDescription
					,Dest.ChargeExternalUserChargeDescription = Src.ChargeExternalUserChargeDescription
					,Dest.ChargeMatrixOriginSearchField = Src.ChargeMatrixOriginSearchField
					,Dest.ChargeMatrixDestinationSearchField = Src.ChargeMatrixDestinationSearchField
					,Dest.ChargeUseMaximumTariffFromMatrix = Src.ChargeUseMaximumTariffFromMatrix
					,Dest.ChargeOnlyUseFirstItemFromFirstMatrix = Src.ChargeOnlyUseFirstItemFromFirstMatrix
					,Dest.CountryCode = Src.CountryCode
					,Dest.ChargeOrderNumber = Src.ChargeOrderNumber
					,Dest.ChargeShortName = Src.ChargeShortName
					,Dest.ChargeCostsFromSupplier = Src.ChargeCostsFromSupplier
					,Dest.ChargeDirectAmount = Src.ChargeDirectAmount
					,Dest.ChargeOrderBundleUsage = Src.ChargeOrderBundleUsage
					,Dest.ChargeReceiptBundleUsage = Src.ChargeReceiptBundleUsage
					,Dest.ChargeSourceSystemID = Src.ChargeSourceSystemID
					,Dest.ChargeSpecialType = Src.ChargeSpecialType
					,Dest.ChargeDefaultAllocationMethod = Src.ChargeDefaultAllocationMethod
					,Dest.ChargeAlwaysUseClientSpecificTariffFromMatrix = Src.ChargeAlwaysUseClientSpecificTariffFromMatrix
					,Dest.ChargeVisibleToExternalUsers = Src.ChargeVisibleToExternalUsers
					,Dest.ChargeReadOnlyForInternalUsers = Src.ChargeReadOnlyForInternalUsers
					,Dest.ChargeDontSendIncomeToFinancialSystem = Src.ChargeDontSendIncomeToFinancialSystem
					,Dest.ChargeDontSendCostToFinancialSystem = Src.ChargeDontSendCostToFinancialSystem
					,Dest.ChargeIgnoreForOptimization = Src.ChargeIgnoreForOptimization
					,Dest.ChargeCostsSetupAtSupplier = Src.ChargeCostsSetupAtSupplier
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCharge AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCharge AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].Charges Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Charges Dest ON Src.IDCharge = Dest.IDCharge
				WHERE Dest.ChargeEditDateTime < Src.ChargeEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].Charges Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Charges Dest WITH (NOLOCK) ON Src.IDCharge = Dest.IDCharge
					WHERE Dest.IDCharge IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.Charges (
					IDCharge
					,ChargeName
					,ChargeDescription
					,ChargeCategoryID
					,ChargeGroupID
					,ScoreCardCategoryID
					,ChargeMeasuringUnit
					,ChargeSplitType
					,ChargeDefaultTariff
					,ChargeReceiptUsage
					,ChargeOrderUsage
					,ChargeDirectForCustomers
					,ChargeExternalID
					,ChargeCriteriaString
					,ChargeAddUserCode
					,ChargeEditUserCode
					,ChargeEditDateTime
					,ChargeAddDateTime
					,ChargeMeasuringUnitName
					,ChargeBookDateField
					,ChargeReportingName
					,ChargeMultiplyQuantityWithSplitQuantity
					,ChargeDisplayName
					,ChargeRequiresActivation
					,ChargeExternalMeasuringUnit
					,ChargeValueNumberFormat
					,ChargeInvoiceWithoutQuantity
					,ChargeRoundingType
					,ChargeCalculationDay
					,ChargeMinimumQuantityType
					,ChargeFreeQuantity
					,TransportStopUsage
					,ChargeType
					,ChargeTransportUsage
					,ChargeTransportDetailUsage
					,ChargeQuotationUsage
					,ChargeMatrixSearchRoundingType
					,ChargeMatrixSearchFigureType
					,ChargeMatrixTariffFigureType
					,ChargeUseMatrixFigureAsFigure
					,ChargeMatrixFigureRoundingType
					,ChargeGroupNumber
					,ChargeLegNumber
					,ChargeMatrixSearchFigureExpression
					,ChargeMatrixTariffFigureExpression
					,ChargeExternalUserWizardPage
					,ChargeExternalUserGroupDescription
					,ChargeExternalUserChargeDescription
					,ChargeMatrixOriginSearchField
					,ChargeMatrixDestinationSearchField
					,ChargeUseMaximumTariffFromMatrix
					,ChargeOnlyUseFirstItemFromFirstMatrix
					,CountryCode
					,ChargeOrderNumber
					,ChargeShortName
					,ChargeCostsFromSupplier
					,ChargeDirectAmount
					,ChargeOrderBundleUsage
					,ChargeReceiptBundleUsage
					,ChargeSourceSystemID
					,ChargeSpecialType
					,ChargeDefaultAllocationMethod
					,ChargeAlwaysUseClientSpecificTariffFromMatrix
					,ChargeVisibleToExternalUsers
					,ChargeReadOnlyForInternalUsers
					,ChargeDontSendIncomeToFinancialSystem
					,ChargeDontSendCostToFinancialSystem
					,ChargeIgnoreForOptimization
					,ChargeCostsSetupAtSupplier
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCharge AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDCharge
					,Src.ChargeName
					,Src.ChargeDescription
					,Src.ChargeCategoryID
					,Src.ChargeGroupID
					,Src.ScoreCardCategoryID
					,Src.ChargeMeasuringUnit
					,Src.ChargeSplitType
					,Src.ChargeDefaultTariff
					,Src.ChargeReceiptUsage
					,Src.ChargeOrderUsage
					,Src.ChargeDirectForCustomers
					,Src.ChargeExternalID
					,Src.ChargeCriteriaString
					,Src.ChargeAddUserCode
					,Src.ChargeEditUserCode
					,Src.ChargeEditDateTime
					,Src.ChargeAddDateTime
					,Src.ChargeMeasuringUnitName
					,Src.ChargeBookDateField
					,Src.ChargeReportingName
					,Src.ChargeMultiplyQuantityWithSplitQuantity
					,Src.ChargeDisplayName
					,Src.ChargeRequiresActivation
					,Src.ChargeExternalMeasuringUnit
					,Src.ChargeValueNumberFormat
					,Src.ChargeInvoiceWithoutQuantity
					,Src.ChargeRoundingType
					,Src.ChargeCalculationDay
					,Src.ChargeMinimumQuantityType
					,Src.ChargeFreeQuantity
					,Src.TransportStopUsage
					,Src.ChargeType
					,Src.ChargeTransportUsage
					,Src.ChargeTransportDetailUsage
					,Src.ChargeQuotationUsage
					,Src.ChargeMatrixSearchRoundingType
					,Src.ChargeMatrixSearchFigureType
					,Src.ChargeMatrixTariffFigureType
					,Src.ChargeUseMatrixFigureAsFigure
					,Src.ChargeMatrixFigureRoundingType
					,Src.ChargeGroupNumber
					,Src.ChargeLegNumber
					,Src.ChargeMatrixSearchFigureExpression
					,Src.ChargeMatrixTariffFigureExpression
					,Src.ChargeExternalUserWizardPage
					,Src.ChargeExternalUserGroupDescription
					,Src.ChargeExternalUserChargeDescription
					,Src.ChargeMatrixOriginSearchField
					,Src.ChargeMatrixDestinationSearchField
					,Src.ChargeUseMaximumTariffFromMatrix
					,Src.ChargeOnlyUseFirstItemFromFirstMatrix
					,Src.CountryCode
					,Src.ChargeOrderNumber
					,Src.ChargeShortName
					,Src.ChargeCostsFromSupplier
					,Src.ChargeDirectAmount
					,Src.ChargeOrderBundleUsage
					,Src.ChargeReceiptBundleUsage
					,Src.ChargeSourceSystemID
					,Src.ChargeSpecialType
					,Src.ChargeDefaultAllocationMethod
					,Src.ChargeAlwaysUseClientSpecificTariffFromMatrix
					,Src.ChargeVisibleToExternalUsers
					,Src.ChargeReadOnlyForInternalUsers
					,Src.ChargeDontSendIncomeToFinancialSystem
					,Src.ChargeDontSendCostToFinancialSystem
					,Src.ChargeIgnoreForOptimization
					,Src.ChargeCostsSetupAtSupplier
				FROM [dbo].Charges Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Charges Dest WITH (NOLOCK) ON Src.IDCharge = Dest.IDCharge
				WHERE Dest.IDCharge IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') Charges: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `Charges` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--SubCharges
	SET @CurrentTableName = 'SubCharges';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.SubCharges AS Dest
			USING (
				SELECT IDSubCharge
					,ChargeID
					,SubChargeExternalID
					,SubChargeAddDateTime
					,SubChargeAddUserCode
					,SubChargeEditDateTime
					,SubChargeEditUserCode
				FROM dbo.SubCharges T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDSubCharge = Src.IDSubCharge)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.ChargeID = Src.ChargeID
						,Dest.SubChargeExternalID = Src.SubChargeExternalID
						,Dest.SubChargeAddDateTime = Src.SubChargeAddDateTime
						,Dest.SubChargeAddUserCode = Src.SubChargeAddUserCode
						,Dest.SubChargeEditDateTime = Src.SubChargeEditDateTime
						,Dest.SubChargeEditUserCode = Src.SubChargeEditUserCode
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDSubCharge
						,ChargeID
						,SubChargeExternalID
						,SubChargeAddDateTime
						,SubChargeAddUserCode
						,SubChargeEditDateTime
						,SubChargeEditUserCode
						)
					VALUES (
						Src.IDSubCharge
						,Src.ChargeID
						,Src.SubChargeExternalID
						,Src.SubChargeAddDateTime
						,Src.SubChargeAddUserCode
						,Src.SubChargeEditDateTime
						,Src.SubChargeEditUserCode
						)
			OUTPUT $ACTION
				,CAST(Inserted.IDSubCharge AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDSubCharge AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].SubCharges Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.SubCharges Dest WITH (NOLOCK) ON Src.IDSubCharge = Dest.IDSubCharge
					WHERE Dest.SubChargeEditDateTime < Src.SubChargeEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.ChargeID = Src.ChargeID
					,Dest.SubChargeExternalID = Src.SubChargeExternalID
					,Dest.SubChargeAddDateTime = Src.SubChargeAddDateTime
					,Dest.SubChargeAddUserCode = Src.SubChargeAddUserCode
					,Dest.SubChargeEditDateTime = Src.SubChargeEditDateTime
					,Dest.SubChargeEditUserCode = Src.SubChargeEditUserCode
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDSubCharge AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDSubCharge AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].SubCharges Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.SubCharges Dest ON Src.IDSubCharge = Dest.IDSubCharge
				WHERE Dest.SubChargeEditDateTime < Src.SubChargeEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].SubCharges Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.SubCharges Dest WITH (NOLOCK) ON Src.IDSubCharge = Dest.IDSubCharge
					WHERE Dest.IDSubCharge IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.SubCharges (
					IDSubCharge
					,ChargeID
					,SubChargeExternalID
					,SubChargeAddDateTime
					,SubChargeAddUserCode
					,SubChargeEditDateTime
					,SubChargeEditUserCode
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDSubCharge AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDSubCharge
					,Src.ChargeID
					,Src.SubChargeExternalID
					,Src.SubChargeAddDateTime
					,Src.SubChargeAddUserCode
					,Src.SubChargeEditDateTime
					,Src.SubChargeEditUserCode
				FROM [dbo].SubCharges Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.SubCharges Dest WITH (NOLOCK) ON Src.IDSubCharge = Dest.IDSubCharge
				WHERE Dest.IDSubCharge IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') SubCharges: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `SubCharges` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--CompanyRateCharges
	SET @CurrentTableName = 'CompanyRateCharges';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateCharges AS Dest
			USING (
				SELECT IDCompanyRateCharge
					,ChargeID
					,CurrencyCode
					,CompanyRateChargeRemarks
					,CompanyRateChargeInputInstructions
					,CompanyID
					,CompanyRateValidFromDate
					,CompanyRateChargeExternalCustomerID
					,CompanyRateChargeAddUserCode
					,CompanyRateChargeEditUserCode
					,CompanyRateChargeEditDateTime
					,CompanyRateChargeAddDateTime
					,CompanyRateChargeComplexRevenueCalculation
					,CompanyRateChargeMaximumRevenue
					,CompanyRateChargeMaximumRevenueGrouping
					,CompanyRateChargeCostsForConsigneeType
					,CompanyRateChargeMinimumQuantity
					,CompanyRateChargeGroupNumber
					,CompanyRateChargeMinimumQuantityAllocationShare
					,CompanyRateChargeMinimumQuantityCorrectionRate
					,CompanyRateChargeTransportMatrixReference
					,CompanyRateChargeMarginFactor
					,CompanyRateChargeMinimumQuantityCorrectionRatePurchase
					,CompanyRateChargeTransportMatrixReferenceSupplierLink
					,CompanyRateChargeTransportMatrixReference2
					,CompanyRateChargeDefaultVATCodeCost
					,CompanyRateChargeDefaultVATCodeIncome
					,CompanyRateChargeHideForInboundPurchase
					,CompanyRateChargeHideForInboundSales
					,CompanyRateChargeHideForOutboundPurchase
					,CompanyRateChargeHideForOutboundSales
					,SubChargeIDDefault
					,CompanyRateChargeDefaultPaymentParty
					,CompanyRateChargeAutomaticCopyCostToIncome
					,CompanyRateChargeDefaultAllocationMethod
					,CompanyRateChargeDefaultMarginFactor
					,CompanyRateChargePaymentTermCode
					,DepartmentCode
				FROM dbo.CompanyRateCharges T WITH (NOLOCK)
				) AS Src
				ON (Dest.IDCompanyRateCharge = Src.IDCompanyRateCharge)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.ChargeID = Src.ChargeID
						,Dest.CurrencyCode = Src.CurrencyCode
						,Dest.CompanyRateChargeRemarks = Src.CompanyRateChargeRemarks
						,Dest.CompanyRateChargeInputInstructions = Src.CompanyRateChargeInputInstructions
						,Dest.CompanyID = Src.CompanyID
						,Dest.CompanyRateValidFromDate = Src.CompanyRateValidFromDate
						,Dest.CompanyRateChargeExternalCustomerID = Src.CompanyRateChargeExternalCustomerID
						,Dest.CompanyRateChargeAddUserCode = Src.CompanyRateChargeAddUserCode
						,Dest.CompanyRateChargeEditUserCode = Src.CompanyRateChargeEditUserCode
						,Dest.CompanyRateChargeEditDateTime = Src.CompanyRateChargeEditDateTime
						,Dest.CompanyRateChargeAddDateTime = Src.CompanyRateChargeAddDateTime
						,Dest.CompanyRateChargeComplexRevenueCalculation = Src.CompanyRateChargeComplexRevenueCalculation
						,Dest.CompanyRateChargeMaximumRevenue = Src.CompanyRateChargeMaximumRevenue
						,Dest.CompanyRateChargeMaximumRevenueGrouping = Src.CompanyRateChargeMaximumRevenueGrouping
						,Dest.CompanyRateChargeCostsForConsigneeType = Src.CompanyRateChargeCostsForConsigneeType
						,Dest.CompanyRateChargeMinimumQuantity = Src.CompanyRateChargeMinimumQuantity
						,Dest.CompanyRateChargeGroupNumber = Src.CompanyRateChargeGroupNumber
						,Dest.CompanyRateChargeMinimumQuantityAllocationShare = Src.CompanyRateChargeMinimumQuantityAllocationShare
						,Dest.CompanyRateChargeMinimumQuantityCorrectionRate = Src.CompanyRateChargeMinimumQuantityCorrectionRate
						,Dest.CompanyRateChargeTransportMatrixReference = Src.CompanyRateChargeTransportMatrixReference
						,Dest.CompanyRateChargeMarginFactor = Src.CompanyRateChargeMarginFactor
						,Dest.CompanyRateChargeMinimumQuantityCorrectionRatePurchase = Src.CompanyRateChargeMinimumQuantityCorrectionRatePurchase
						,Dest.CompanyRateChargeTransportMatrixReferenceSupplierLink = Src.CompanyRateChargeTransportMatrixReferenceSupplierLink
						,Dest.CompanyRateChargeTransportMatrixReference2 = Src.CompanyRateChargeTransportMatrixReference2
						,Dest.CompanyRateChargeDefaultVATCodeCost = Src.CompanyRateChargeDefaultVATCodeCost
						,Dest.CompanyRateChargeDefaultVATCodeIncome = Src.CompanyRateChargeDefaultVATCodeIncome
						,Dest.CompanyRateChargeHideForInboundPurchase = Src.CompanyRateChargeHideForInboundPurchase
						,Dest.CompanyRateChargeHideForInboundSales = Src.CompanyRateChargeHideForInboundSales
						,Dest.CompanyRateChargeHideForOutboundPurchase = Src.CompanyRateChargeHideForOutboundPurchase
						,Dest.CompanyRateChargeHideForOutboundSales = Src.CompanyRateChargeHideForOutboundSales
						,Dest.SubChargeIDDefault = Src.SubChargeIDDefault
						,Dest.CompanyRateChargeDefaultPaymentParty = Src.CompanyRateChargeDefaultPaymentParty
						,Dest.CompanyRateChargeAutomaticCopyCostToIncome = Src.CompanyRateChargeAutomaticCopyCostToIncome
						,Dest.CompanyRateChargeDefaultAllocationMethod = Src.CompanyRateChargeDefaultAllocationMethod
						,Dest.CompanyRateChargeDefaultMarginFactor = Src.CompanyRateChargeDefaultMarginFactor
						,Dest.CompanyRateChargePaymentTermCode = Src.CompanyRateChargePaymentTermCode
						,Dest.DepartmentCode = Src.DepartmentCode
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDCompanyRateCharge
						,ChargeID
						,CurrencyCode
						,CompanyRateChargeRemarks
						,CompanyRateChargeInputInstructions
						,CompanyID
						,CompanyRateValidFromDate
						,CompanyRateChargeExternalCustomerID
						,CompanyRateChargeAddUserCode
						,CompanyRateChargeEditUserCode
						,CompanyRateChargeEditDateTime
						,CompanyRateChargeAddDateTime
						,CompanyRateChargeComplexRevenueCalculation
						,CompanyRateChargeMaximumRevenue
						,CompanyRateChargeMaximumRevenueGrouping
						,CompanyRateChargeCostsForConsigneeType
						,CompanyRateChargeMinimumQuantity
						,CompanyRateChargeGroupNumber
						,CompanyRateChargeMinimumQuantityAllocationShare
						,CompanyRateChargeMinimumQuantityCorrectionRate
						,CompanyRateChargeTransportMatrixReference
						,CompanyRateChargeMarginFactor
						,CompanyRateChargeMinimumQuantityCorrectionRatePurchase
						,CompanyRateChargeTransportMatrixReferenceSupplierLink
						,CompanyRateChargeTransportMatrixReference2
						,CompanyRateChargeDefaultVATCodeCost
						,CompanyRateChargeDefaultVATCodeIncome
						,CompanyRateChargeHideForInboundPurchase
						,CompanyRateChargeHideForInboundSales
						,CompanyRateChargeHideForOutboundPurchase
						,CompanyRateChargeHideForOutboundSales
						,SubChargeIDDefault
						,CompanyRateChargeDefaultPaymentParty
						,CompanyRateChargeAutomaticCopyCostToIncome
						,CompanyRateChargeDefaultAllocationMethod
						,CompanyRateChargeDefaultMarginFactor
						,CompanyRateChargePaymentTermCode
						,DepartmentCode
						)
					VALUES (
						Src.IDCompanyRateCharge
						,Src.ChargeID
						,Src.CurrencyCode
						,Src.CompanyRateChargeRemarks
						,Src.CompanyRateChargeInputInstructions
						,Src.CompanyID
						,Src.CompanyRateValidFromDate
						,Src.CompanyRateChargeExternalCustomerID
						,Src.CompanyRateChargeAddUserCode
						,Src.CompanyRateChargeEditUserCode
						,Src.CompanyRateChargeEditDateTime
						,Src.CompanyRateChargeAddDateTime
						,Src.CompanyRateChargeComplexRevenueCalculation
						,Src.CompanyRateChargeMaximumRevenue
						,Src.CompanyRateChargeMaximumRevenueGrouping
						,Src.CompanyRateChargeCostsForConsigneeType
						,Src.CompanyRateChargeMinimumQuantity
						,Src.CompanyRateChargeGroupNumber
						,Src.CompanyRateChargeMinimumQuantityAllocationShare
						,Src.CompanyRateChargeMinimumQuantityCorrectionRate
						,Src.CompanyRateChargeTransportMatrixReference
						,Src.CompanyRateChargeMarginFactor
						,Src.CompanyRateChargeMinimumQuantityCorrectionRatePurchase
						,Src.CompanyRateChargeTransportMatrixReferenceSupplierLink
						,Src.CompanyRateChargeTransportMatrixReference2
						,Src.CompanyRateChargeDefaultVATCodeCost
						,Src.CompanyRateChargeDefaultVATCodeIncome
						,Src.CompanyRateChargeHideForInboundPurchase
						,Src.CompanyRateChargeHideForInboundSales
						,Src.CompanyRateChargeHideForOutboundPurchase
						,Src.CompanyRateChargeHideForOutboundSales
						,Src.SubChargeIDDefault
						,Src.CompanyRateChargeDefaultPaymentParty
						,Src.CompanyRateChargeAutomaticCopyCostToIncome
						,Src.CompanyRateChargeDefaultAllocationMethod
						,Src.CompanyRateChargeDefaultMarginFactor
						,Src.CompanyRateChargePaymentTermCode
						,Src.DepartmentCode
						)
			OUTPUT $ACTION
				,CAST(Inserted.IDCompanyRateCharge AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDCompanyRateCharge AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CompanyRateCharges Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateCharges Dest WITH (NOLOCK) ON Src.IDCompanyRateCharge = Dest.IDCompanyRateCharge
					WHERE Dest.CompanyRateChargeEditDateTime < Src.CompanyRateChargeEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.ChargeID = Src.ChargeID
					,Dest.CurrencyCode = Src.CurrencyCode
					,Dest.CompanyRateChargeRemarks = Src.CompanyRateChargeRemarks
					,Dest.CompanyRateChargeInputInstructions = Src.CompanyRateChargeInputInstructions
					,Dest.CompanyID = Src.CompanyID
					,Dest.CompanyRateValidFromDate = Src.CompanyRateValidFromDate
					,Dest.CompanyRateChargeExternalCustomerID = Src.CompanyRateChargeExternalCustomerID
					,Dest.CompanyRateChargeAddUserCode = Src.CompanyRateChargeAddUserCode
					,Dest.CompanyRateChargeEditUserCode = Src.CompanyRateChargeEditUserCode
					,Dest.CompanyRateChargeEditDateTime = Src.CompanyRateChargeEditDateTime
					,Dest.CompanyRateChargeAddDateTime = Src.CompanyRateChargeAddDateTime
					,Dest.CompanyRateChargeComplexRevenueCalculation = Src.CompanyRateChargeComplexRevenueCalculation
					,Dest.CompanyRateChargeMaximumRevenue = Src.CompanyRateChargeMaximumRevenue
					,Dest.CompanyRateChargeMaximumRevenueGrouping = Src.CompanyRateChargeMaximumRevenueGrouping
					,Dest.CompanyRateChargeCostsForConsigneeType = Src.CompanyRateChargeCostsForConsigneeType
					,Dest.CompanyRateChargeMinimumQuantity = Src.CompanyRateChargeMinimumQuantity
					,Dest.CompanyRateChargeGroupNumber = Src.CompanyRateChargeGroupNumber
					,Dest.CompanyRateChargeMinimumQuantityAllocationShare = Src.CompanyRateChargeMinimumQuantityAllocationShare
					,Dest.CompanyRateChargeMinimumQuantityCorrectionRate = Src.CompanyRateChargeMinimumQuantityCorrectionRate
					,Dest.CompanyRateChargeTransportMatrixReference = Src.CompanyRateChargeTransportMatrixReference
					,Dest.CompanyRateChargeMarginFactor = Src.CompanyRateChargeMarginFactor
					,Dest.CompanyRateChargeMinimumQuantityCorrectionRatePurchase = Src.CompanyRateChargeMinimumQuantityCorrectionRatePurchase
					,Dest.CompanyRateChargeTransportMatrixReferenceSupplierLink = Src.CompanyRateChargeTransportMatrixReferenceSupplierLink
					,Dest.CompanyRateChargeTransportMatrixReference2 = Src.CompanyRateChargeTransportMatrixReference2
					,Dest.CompanyRateChargeDefaultVATCodeCost = Src.CompanyRateChargeDefaultVATCodeCost
					,Dest.CompanyRateChargeDefaultVATCodeIncome = Src.CompanyRateChargeDefaultVATCodeIncome
					,Dest.CompanyRateChargeHideForInboundPurchase = Src.CompanyRateChargeHideForInboundPurchase
					,Dest.CompanyRateChargeHideForInboundSales = Src.CompanyRateChargeHideForInboundSales
					,Dest.CompanyRateChargeHideForOutboundPurchase = Src.CompanyRateChargeHideForOutboundPurchase
					,Dest.CompanyRateChargeHideForOutboundSales = Src.CompanyRateChargeHideForOutboundSales
					,Dest.SubChargeIDDefault = Src.SubChargeIDDefault
					,Dest.CompanyRateChargeDefaultPaymentParty = Src.CompanyRateChargeDefaultPaymentParty
					,Dest.CompanyRateChargeAutomaticCopyCostToIncome = Src.CompanyRateChargeAutomaticCopyCostToIncome
					,Dest.CompanyRateChargeDefaultAllocationMethod = Src.CompanyRateChargeDefaultAllocationMethod
					,Dest.CompanyRateChargeDefaultMarginFactor = Src.CompanyRateChargeDefaultMarginFactor
					,Dest.CompanyRateChargePaymentTermCode = Src.CompanyRateChargePaymentTermCode
					,Dest.DepartmentCode = Src.DepartmentCode
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCompanyRateCharge AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCompanyRateCharge AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CompanyRateCharges Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateCharges Dest ON Src.IDCompanyRateCharge = Dest.IDCompanyRateCharge
				WHERE Dest.CompanyRateChargeEditDateTime < Src.CompanyRateChargeEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CompanyRateCharges Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateCharges Dest WITH (NOLOCK) ON Src.IDCompanyRateCharge = Dest.IDCompanyRateCharge
					WHERE Dest.IDCompanyRateCharge IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateCharges (
					IDCompanyRateCharge
					,ChargeID
					,CurrencyCode
					,CompanyRateChargeRemarks
					,CompanyRateChargeInputInstructions
					,CompanyID
					,CompanyRateValidFromDate
					,CompanyRateChargeExternalCustomerID
					,CompanyRateChargeAddUserCode
					,CompanyRateChargeEditUserCode
					,CompanyRateChargeEditDateTime
					,CompanyRateChargeAddDateTime
					,CompanyRateChargeComplexRevenueCalculation
					,CompanyRateChargeMaximumRevenue
					,CompanyRateChargeMaximumRevenueGrouping
					,CompanyRateChargeCostsForConsigneeType
					,CompanyRateChargeMinimumQuantity
					,CompanyRateChargeGroupNumber
					,CompanyRateChargeMinimumQuantityAllocationShare
					,CompanyRateChargeMinimumQuantityCorrectionRate
					,CompanyRateChargeTransportMatrixReference
					,CompanyRateChargeMarginFactor
					,CompanyRateChargeMinimumQuantityCorrectionRatePurchase
					,CompanyRateChargeTransportMatrixReferenceSupplierLink
					,CompanyRateChargeTransportMatrixReference2
					,CompanyRateChargeDefaultVATCodeCost
					,CompanyRateChargeDefaultVATCodeIncome
					,CompanyRateChargeHideForInboundPurchase
					,CompanyRateChargeHideForInboundSales
					,CompanyRateChargeHideForOutboundPurchase
					,CompanyRateChargeHideForOutboundSales
					,SubChargeIDDefault
					,CompanyRateChargeDefaultPaymentParty
					,CompanyRateChargeAutomaticCopyCostToIncome
					,CompanyRateChargeDefaultAllocationMethod
					,CompanyRateChargeDefaultMarginFactor
					,CompanyRateChargePaymentTermCode
					,DepartmentCode
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCompanyRateCharge AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDCompanyRateCharge
					,Src.ChargeID
					,Src.CurrencyCode
					,Src.CompanyRateChargeRemarks
					,Src.CompanyRateChargeInputInstructions
					,Src.CompanyID
					,Src.CompanyRateValidFromDate
					,Src.CompanyRateChargeExternalCustomerID
					,Src.CompanyRateChargeAddUserCode
					,Src.CompanyRateChargeEditUserCode
					,Src.CompanyRateChargeEditDateTime
					,Src.CompanyRateChargeAddDateTime
					,Src.CompanyRateChargeComplexRevenueCalculation
					,Src.CompanyRateChargeMaximumRevenue
					,Src.CompanyRateChargeMaximumRevenueGrouping
					,Src.CompanyRateChargeCostsForConsigneeType
					,Src.CompanyRateChargeMinimumQuantity
					,Src.CompanyRateChargeGroupNumber
					,Src.CompanyRateChargeMinimumQuantityAllocationShare
					,Src.CompanyRateChargeMinimumQuantityCorrectionRate
					,Src.CompanyRateChargeTransportMatrixReference
					,Src.CompanyRateChargeMarginFactor
					,Src.CompanyRateChargeMinimumQuantityCorrectionRatePurchase
					,Src.CompanyRateChargeTransportMatrixReferenceSupplierLink
					,Src.CompanyRateChargeTransportMatrixReference2
					,Src.CompanyRateChargeDefaultVATCodeCost
					,Src.CompanyRateChargeDefaultVATCodeIncome
					,Src.CompanyRateChargeHideForInboundPurchase
					,Src.CompanyRateChargeHideForInboundSales
					,Src.CompanyRateChargeHideForOutboundPurchase
					,Src.CompanyRateChargeHideForOutboundSales
					,Src.SubChargeIDDefault
					,Src.CompanyRateChargeDefaultPaymentParty
					,Src.CompanyRateChargeAutomaticCopyCostToIncome
					,Src.CompanyRateChargeDefaultAllocationMethod
					,Src.CompanyRateChargeDefaultMarginFactor
					,Src.CompanyRateChargePaymentTermCode
					,Src.DepartmentCode
				FROM [dbo].CompanyRateCharges Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CompanyRateCharges Dest WITH (NOLOCK) ON Src.IDCompanyRateCharge = Dest.IDCompanyRateCharge
				WHERE Dest.IDCompanyRateCharge IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CompanyRateCharges: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CompanyRateCharges` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--BillingQuantities
	SET @CurrentTableName = 'BillingQuantities';
	SET @BillingArchiveAfterDays = ISNULL((
				SELECT CAST(FieldValue AS FLOAT)
				FROM #InterfaceRowsWithConfValues I
				WHERE I.FieldCode = 'BillingArchiveAfterDays'
				), 365);
	SET @MaxDateToArchiveData = DATEADD(DAY, @BillingArchiveAfterDays * - 1, GETUTCDATE());

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities AS Dest
			USING (
				SELECT B.IDBillingQuantity
					,B.BillingQuantityDate
					,B.CompanyRateChargeID
					,B.BillingQuantityValue
					,B.ReceiptID
					,B.OrderID
					,B.BillingQuantityAddUserCode
					,B.BillingQuantityEditUserCode
					,B.BillingQuantityEditDateTime
					,B.BillingQuantityAddDateTime
					,B.BillingQuantitySplitQuantity
					,B.BillingQuantityCalculationDate
					,B.BillingQuantityType
					,B.BillingQuantityReferenceID
					,B.BillingQuantityWarningMessage
					,B.TransportStopID
					,B.TransportNumber
					,B.TransportStopNumber
					,B.QuotationVia
					,B.TransportID
					,B.TransportDetailID
					,B.QuotationID
					,B.SupplierID
					,B.BillingQuantityInfo
					,B.BillingQuantityLegOrigin
					,B.BillingQuantityLegDestination
					,B.BillingQuantitySourceInfo
					,B.BillingQuantityValidToDate
					,B.BillingQuantityMatrixTariff
					,B.BillingQuantityIndex
					,B.OrderBundleID
					,B.ReceiptBundleID
					,B.BillingQuantitySupplierRemarks
					,B.BillingQuantityInternalRemarks
					,B.ShipmentID
					,B.BillingQuantityOwnedByExternalCompany
					,B.SubChargeID
					,B.BillingQuantityAllocationRemarks
					,B.BillingQuantityPaymentParty
				FROM dbo.BillingQuantities B WITH (NOLOCK)
				WHERE CAST(B.[BillingQuantityEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
				) AS Src
				ON (Dest.IDBillingQuantity = Src.IDBillingQuantity)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.BillingQuantityDate = Src.BillingQuantityDate
						,Dest.CompanyRateChargeID = Src.CompanyRateChargeID
						,Dest.BillingQuantityValue = Src.BillingQuantityValue
						,Dest.ReceiptID = Src.ReceiptID
						,Dest.OrderID = Src.OrderID
						,Dest.BillingQuantityAddUserCode = Src.BillingQuantityAddUserCode
						,Dest.BillingQuantityEditUserCode = Src.BillingQuantityEditUserCode
						,Dest.BillingQuantityEditDateTime = Src.BillingQuantityEditDateTime
						,Dest.BillingQuantityAddDateTime = Src.BillingQuantityAddDateTime
						,Dest.BillingQuantitySplitQuantity = Src.BillingQuantitySplitQuantity
						,Dest.BillingQuantityCalculationDate = Src.BillingQuantityCalculationDate
						,Dest.BillingQuantityType = Src.BillingQuantityType
						,Dest.BillingQuantityReferenceID = Src.BillingQuantityReferenceID
						,Dest.BillingQuantityWarningMessage = Src.BillingQuantityWarningMessage
						,Dest.TransportStopID = Src.TransportStopID
						,Dest.TransportNumber = Src.TransportNumber
						,Dest.TransportStopNumber = Src.TransportStopNumber
						,Dest.QuotationVia = Src.QuotationVia
						,Dest.TransportID = Src.TransportID
						,Dest.TransportDetailID = Src.TransportDetailID
						,Dest.QuotationID = Src.QuotationID
						,Dest.SupplierID = Src.SupplierID
						,Dest.BillingQuantityInfo = Src.BillingQuantityInfo
						,Dest.BillingQuantityLegOrigin = Src.BillingQuantityLegOrigin
						,Dest.BillingQuantityLegDestination = Src.BillingQuantityLegDestination
						,Dest.BillingQuantitySourceInfo = Src.BillingQuantitySourceInfo
						,Dest.BillingQuantityValidToDate = Src.BillingQuantityValidToDate
						,Dest.BillingQuantityMatrixTariff = Src.BillingQuantityMatrixTariff
						,Dest.BillingQuantityIndex = Src.BillingQuantityIndex
						,Dest.OrderBundleID = Src.OrderBundleID
						,Dest.ReceiptBundleID = Src.ReceiptBundleID
						,Dest.BillingQuantitySupplierRemarks = Src.BillingQuantitySupplierRemarks
						,Dest.BillingQuantityInternalRemarks = Src.BillingQuantityInternalRemarks
						,Dest.ShipmentID = Src.ShipmentID
						,Dest.BillingQuantityOwnedByExternalCompany = Src.BillingQuantityOwnedByExternalCompany
						,Dest.SubChargeID = Src.SubChargeID
						,Dest.BillingQuantityAllocationRemarks = Src.BillingQuantityAllocationRemarks
						,Dest.BillingQuantityPaymentParty = Src.BillingQuantityPaymentParty
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDBillingQuantity
						,BillingQuantityDate
						,CompanyRateChargeID
						,BillingQuantityValue
						,ReceiptID
						,OrderID
						,BillingQuantityAddUserCode
						,BillingQuantityEditUserCode
						,BillingQuantityEditDateTime
						,BillingQuantityAddDateTime
						,BillingQuantitySplitQuantity
						,BillingQuantityCalculationDate
						,BillingQuantityType
						,BillingQuantityReferenceID
						,BillingQuantityWarningMessage
						,TransportStopID
						,TransportNumber
						,TransportStopNumber
						,QuotationVia
						,TransportID
						,TransportDetailID
						,QuotationID
						,SupplierID
						,BillingQuantityInfo
						,BillingQuantityLegOrigin
						,BillingQuantityLegDestination
						,BillingQuantitySourceInfo
						,BillingQuantityValidToDate
						,BillingQuantityMatrixTariff
						,BillingQuantityIndex
						,OrderBundleID
						,ReceiptBundleID
						,BillingQuantitySupplierRemarks
						,BillingQuantityInternalRemarks
						,ShipmentID
						,BillingQuantityOwnedByExternalCompany
						,SubChargeID
						,BillingQuantityAllocationRemarks
						,BillingQuantityPaymentParty
						)
					VALUES (
						Src.IDBillingQuantity
						,Src.BillingQuantityDate
						,Src.CompanyRateChargeID
						,Src.BillingQuantityValue
						,Src.ReceiptID
						,Src.OrderID
						,Src.BillingQuantityAddUserCode
						,Src.BillingQuantityEditUserCode
						,Src.BillingQuantityEditDateTime
						,Src.BillingQuantityAddDateTime
						,Src.BillingQuantitySplitQuantity
						,Src.BillingQuantityCalculationDate
						,Src.BillingQuantityType
						,Src.BillingQuantityReferenceID
						,Src.BillingQuantityWarningMessage
						,Src.TransportStopID
						,Src.TransportNumber
						,Src.TransportStopNumber
						,Src.QuotationVia
						,Src.TransportID
						,Src.TransportDetailID
						,Src.QuotationID
						,Src.SupplierID
						,Src.BillingQuantityInfo
						,Src.BillingQuantityLegOrigin
						,Src.BillingQuantityLegDestination
						,Src.BillingQuantitySourceInfo
						,Src.BillingQuantityValidToDate
						,Src.BillingQuantityMatrixTariff
						,Src.BillingQuantityIndex
						,Src.OrderBundleID
						,Src.ReceiptBundleID
						,Src.BillingQuantitySupplierRemarks
						,Src.BillingQuantityInternalRemarks
						,Src.ShipmentID
						,Src.BillingQuantityOwnedByExternalCompany
						,Src.SubChargeID
						,Src.BillingQuantityAllocationRemarks
						,Src.BillingQuantityPaymentParty
						)
			OUTPUT $ACTION
				,CAST(Inserted.IDBillingQuantity AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDBillingQuantity AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].BillingQuantities Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities Dest WITH (NOLOCK) ON Src.IDBillingQuantity = Dest.IDBillingQuantity
					WHERE CAST(Src.[BillingQuantityEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
						AND Dest.BillingQuantityEditDateTime < Src.BillingQuantityEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.BillingQuantityDate = Src.BillingQuantityDate
					,Dest.CompanyRateChargeID = Src.CompanyRateChargeID
					,Dest.BillingQuantityValue = Src.BillingQuantityValue
					,Dest.ReceiptID = Src.ReceiptID
					,Dest.OrderID = Src.OrderID
					,Dest.BillingQuantityAddUserCode = Src.BillingQuantityAddUserCode
					,Dest.BillingQuantityEditUserCode = Src.BillingQuantityEditUserCode
					,Dest.BillingQuantityEditDateTime = Src.BillingQuantityEditDateTime
					,Dest.BillingQuantityAddDateTime = Src.BillingQuantityAddDateTime
					,Dest.BillingQuantitySplitQuantity = Src.BillingQuantitySplitQuantity
					,Dest.BillingQuantityCalculationDate = Src.BillingQuantityCalculationDate
					,Dest.BillingQuantityType = Src.BillingQuantityType
					,Dest.BillingQuantityReferenceID = Src.BillingQuantityReferenceID
					,Dest.BillingQuantityWarningMessage = Src.BillingQuantityWarningMessage
					,Dest.TransportStopID = Src.TransportStopID
					,Dest.TransportNumber = Src.TransportNumber
					,Dest.TransportStopNumber = Src.TransportStopNumber
					,Dest.QuotationVia = Src.QuotationVia
					,Dest.TransportID = Src.TransportID
					,Dest.TransportDetailID = Src.TransportDetailID
					,Dest.QuotationID = Src.QuotationID
					,Dest.SupplierID = Src.SupplierID
					,Dest.BillingQuantityInfo = Src.BillingQuantityInfo
					,Dest.BillingQuantityLegOrigin = Src.BillingQuantityLegOrigin
					,Dest.BillingQuantityLegDestination = Src.BillingQuantityLegDestination
					,Dest.BillingQuantitySourceInfo = Src.BillingQuantitySourceInfo
					,Dest.BillingQuantityValidToDate = Src.BillingQuantityValidToDate
					,Dest.BillingQuantityMatrixTariff = Src.BillingQuantityMatrixTariff
					,Dest.BillingQuantityIndex = Src.BillingQuantityIndex
					,Dest.OrderBundleID = Src.OrderBundleID
					,Dest.ReceiptBundleID = Src.ReceiptBundleID
					,Dest.BillingQuantitySupplierRemarks = Src.BillingQuantitySupplierRemarks
					,Dest.BillingQuantityInternalRemarks = Src.BillingQuantityInternalRemarks
					,Dest.ShipmentID = Src.ShipmentID
					,Dest.BillingQuantityOwnedByExternalCompany = Src.BillingQuantityOwnedByExternalCompany
					,Dest.SubChargeID = Src.SubChargeID
					,Dest.BillingQuantityAllocationRemarks = Src.BillingQuantityAllocationRemarks
					,Dest.BillingQuantityPaymentParty = Src.BillingQuantityPaymentParty
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDBillingQuantity AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDBillingQuantity AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].BillingQuantities Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities Dest ON Src.IDBillingQuantity = Dest.IDBillingQuantity
				WHERE CAST(Src.[BillingQuantityEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					AND Dest.BillingQuantityEditDateTime < Src.BillingQuantityEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].BillingQuantities Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts R WITH (NOLOCK) ON Src.ReceiptID=R.IDReceipt
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities Dest WITH (NOLOCK) ON Src.IDBillingQuantity = Dest.IDBillingQuantity
					WHERE CAST(Src.[BillingQuantityEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
						AND Dest.IDBillingQuantity IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities (
					IDBillingQuantity
					,BillingQuantityDate
					,CompanyRateChargeID
					,BillingQuantityValue
					,ReceiptID
					,OrderID
					,BillingQuantityAddUserCode
					,BillingQuantityEditUserCode
					,BillingQuantityEditDateTime
					,BillingQuantityAddDateTime
					,BillingQuantitySplitQuantity
					,BillingQuantityCalculationDate
					,BillingQuantityType
					,BillingQuantityReferenceID
					,BillingQuantityWarningMessage
					,TransportStopID
					,TransportNumber
					,TransportStopNumber
					,QuotationVia
					,TransportID
					,TransportDetailID
					,QuotationID
					,SupplierID
					,BillingQuantityInfo
					,BillingQuantityLegOrigin
					,BillingQuantityLegDestination
					,BillingQuantitySourceInfo
					,BillingQuantityValidToDate
					,BillingQuantityMatrixTariff
					,BillingQuantityIndex
					,OrderBundleID
					,ReceiptBundleID
					,BillingQuantitySupplierRemarks
					,BillingQuantityInternalRemarks
					,ShipmentID
					,BillingQuantityOwnedByExternalCompany
					,SubChargeID
					,BillingQuantityAllocationRemarks
					,BillingQuantityPaymentParty
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDBillingQuantity AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDBillingQuantity
					,Src.BillingQuantityDate
					,Src.CompanyRateChargeID
					,Src.BillingQuantityValue
					,Src.ReceiptID
					,Src.OrderID
					,Src.BillingQuantityAddUserCode
					,Src.BillingQuantityEditUserCode
					,Src.BillingQuantityEditDateTime
					,Src.BillingQuantityAddDateTime
					,Src.BillingQuantitySplitQuantity
					,Src.BillingQuantityCalculationDate
					,Src.BillingQuantityType
					,Src.BillingQuantityReferenceID
					,Src.BillingQuantityWarningMessage
					,Src.TransportStopID
					,Src.TransportNumber
					,Src.TransportStopNumber
					,Src.QuotationVia
					,Src.TransportID
					,Src.TransportDetailID
					,Src.QuotationID
					,Src.SupplierID
					,Src.BillingQuantityInfo
					,Src.BillingQuantityLegOrigin
					,Src.BillingQuantityLegDestination
					,Src.BillingQuantitySourceInfo
					,Src.BillingQuantityValidToDate
					,Src.BillingQuantityMatrixTariff
					,Src.BillingQuantityIndex
					,Src.OrderBundleID
					,Src.ReceiptBundleID
					,Src.BillingQuantitySupplierRemarks
					,Src.BillingQuantityInternalRemarks
					,Src.ShipmentID
					,Src.BillingQuantityOwnedByExternalCompany
					,Src.SubChargeID
					,Src.BillingQuantityAllocationRemarks
					,Src.BillingQuantityPaymentParty
				FROM [dbo].BillingQuantities Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts R WITH (NOLOCK) ON Src.ReceiptID=R.IDReceipt
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities Dest WITH (NOLOCK) ON Src.IDBillingQuantity = Dest.IDBillingQuantity
				WHERE CAST(Src.[BillingQuantityEditDateTime] AS DATE) <= CAST(@MaxDateToArchiveData AS DATE)
					AND Dest.IDBillingQuantity IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') BillingQuantities: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `BillingQuantities` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--BillingRevenues
	SET @CurrentTableName = 'BillingRevenues';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingRevenues AS Dest
			USING (
				SELECT BillingQuantityID
					,BillingRevenueRevenueForeignCurrency
					,BillingRevenueEditDateTime
					,BillingRevenueAddDateTime
					,BillingRevenueRevenueLocalCurrency
					,BillingRevenueRevenueInvoiceCurrency
					,CurrencyCodeForeign
					,CurrencyCodeInvoice
				FROM dbo.BillingRevenues T WITH (NOLOCK)
				) AS Src
				ON (Dest.BillingQuantityID = Src.BillingQuantityID)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.BillingRevenueRevenueForeignCurrency = Src.BillingRevenueRevenueForeignCurrency
						,Dest.BillingRevenueEditDateTime = Src.BillingRevenueEditDateTime
						,Dest.BillingRevenueAddDateTime = Src.BillingRevenueAddDateTime
						,Dest.BillingRevenueRevenueLocalCurrency = Src.BillingRevenueRevenueLocalCurrency
						,Dest.BillingRevenueRevenueInvoiceCurrency = Src.BillingRevenueRevenueInvoiceCurrency
						,Dest.CurrencyCodeForeign = Src.CurrencyCodeForeign
						,Dest.CurrencyCodeInvoice = Src.CurrencyCodeInvoice
			WHEN NOT MATCHED
				THEN
					INSERT (
						BillingQuantityID
						,BillingRevenueRevenueForeignCurrency
						,BillingRevenueEditDateTime
						,BillingRevenueAddDateTime
						,BillingRevenueRevenueLocalCurrency
						,BillingRevenueRevenueInvoiceCurrency
						,CurrencyCodeForeign
						,CurrencyCodeInvoice
						)
					VALUES (
						Src.BillingQuantityID
						,Src.BillingRevenueRevenueForeignCurrency
						,Src.BillingRevenueEditDateTime
						,Src.BillingRevenueAddDateTime
						,Src.BillingRevenueRevenueLocalCurrency
						,Src.BillingRevenueRevenueInvoiceCurrency
						,Src.CurrencyCodeForeign
						,Src.CurrencyCodeInvoice
						)
			OUTPUT $ACTION
				,CAST(Inserted.BillingQuantityID AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.BillingQuantityID AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].BillingRevenues Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities B WITH (NOLOCK) ON Src.BillingQuantityID = B.IDBillingQuantity
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingRevenues Dest WITH (NOLOCK) ON Src.BillingQuantityID = Dest.BillingQuantityID
					WHERE Dest.BillingRevenueEditDateTime < Src.BillingRevenueEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.BillingRevenueRevenueForeignCurrency = Src.BillingRevenueRevenueForeignCurrency
					,Dest.BillingRevenueEditDateTime = Src.BillingRevenueEditDateTime
					,Dest.BillingRevenueAddDateTime = Src.BillingRevenueAddDateTime
					,Dest.BillingRevenueRevenueLocalCurrency = Src.BillingRevenueRevenueLocalCurrency
					,Dest.BillingRevenueRevenueInvoiceCurrency = Src.BillingRevenueRevenueInvoiceCurrency
					,Dest.CurrencyCodeForeign = Src.CurrencyCodeForeign
					,Dest.CurrencyCodeInvoice = Src.CurrencyCodeInvoice
				OUTPUT 'UPDATE'
					,CAST(Inserted.BillingQuantityID AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.BillingQuantityID AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].BillingRevenues Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities B WITH (NOLOCK) ON Src.BillingQuantityID = B.IDBillingQuantity
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingRevenues Dest ON Src.BillingQuantityID = Dest.BillingQuantityID
				WHERE Dest.BillingRevenueEditDateTime < Src.BillingRevenueEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].BillingRevenues Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities B WITH (NOLOCK) ON Src.BillingQuantityID = B.IDBillingQuantity
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingRevenues Dest WITH (NOLOCK) ON Src.BillingQuantityID = Dest.BillingQuantityID
					WHERE Dest.BillingQuantityID IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingRevenues (
					BillingQuantityID
					,BillingRevenueRevenueForeignCurrency
					,BillingRevenueEditDateTime
					,BillingRevenueAddDateTime
					,BillingRevenueRevenueLocalCurrency
					,BillingRevenueRevenueInvoiceCurrency
					,CurrencyCodeForeign
					,CurrencyCodeInvoice
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.BillingQuantityID AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.BillingQuantityID
					,Src.BillingRevenueRevenueForeignCurrency
					,Src.BillingRevenueEditDateTime
					,Src.BillingRevenueAddDateTime
					,Src.BillingRevenueRevenueLocalCurrency
					,Src.BillingRevenueRevenueInvoiceCurrency
					,Src.CurrencyCodeForeign
					,Src.CurrencyCodeInvoice
				FROM [dbo].BillingRevenues Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities B WITH (NOLOCK) ON Src.BillingQuantityID = B.IDBillingQuantity
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingRevenues Dest WITH (NOLOCK) ON Src.BillingQuantityID = Dest.BillingQuantityID
				WHERE Dest.BillingQuantityID IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') BillingRevenues: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `BillingRevenues` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--BillingCosts
	SET @CurrentTableName = 'BillingCosts';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingCosts AS Dest
			USING (
				SELECT BillingQuantityID
					,BillingCostCostForeignCurrency
					,BillingCostCostLocalCurrency
					,BillingCostEditDateTime
					,BillingCostAddDateTime
					,BillingCostCostInvoiceCurrency
					,CurrencyCodeForeign
					,CurrencyCodeInvoice
				FROM dbo.BillingCosts T WITH (NOLOCK)
				) AS Src
				ON (Dest.BillingQuantityID = Src.BillingQuantityID)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.BillingCostCostForeignCurrency = Src.BillingCostCostForeignCurrency
						,Dest.BillingCostCostLocalCurrency = Src.BillingCostCostLocalCurrency
						,Dest.BillingCostEditDateTime = Src.BillingCostEditDateTime
						,Dest.BillingCostAddDateTime = Src.BillingCostAddDateTime
						,Dest.BillingCostCostInvoiceCurrency = Src.BillingCostCostInvoiceCurrency
						,Dest.CurrencyCodeForeign = Src.CurrencyCodeForeign
						,Dest.CurrencyCodeInvoice = Src.CurrencyCodeInvoice
			WHEN NOT MATCHED
				THEN
					INSERT (
						BillingQuantityID
						,BillingCostCostForeignCurrency
						,BillingCostCostLocalCurrency
						,BillingCostEditDateTime
						,BillingCostAddDateTime
						,BillingCostCostInvoiceCurrency
						,CurrencyCodeForeign
						,CurrencyCodeInvoice
						)
					VALUES (
						Src.BillingQuantityID
						,Src.BillingCostCostForeignCurrency
						,Src.BillingCostCostLocalCurrency
						,Src.BillingCostEditDateTime
						,Src.BillingCostAddDateTime
						,Src.BillingCostCostInvoiceCurrency
						,Src.CurrencyCodeForeign
						,Src.CurrencyCodeInvoice
						)
			OUTPUT $ACTION
				,CAST(Inserted.BillingQuantityID AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.BillingQuantityID AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].BillingCosts Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities B WITH (NOLOCK) ON Src.BillingQuantityID = B.IDBillingQuantity
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingCosts Dest WITH (NOLOCK) ON Src.BillingQuantityID = Dest.BillingQuantityID
					WHERE Dest.BillingCostEditDateTime < Src.BillingCostEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.BillingCostCostForeignCurrency = Src.BillingCostCostForeignCurrency
					,Dest.BillingCostCostLocalCurrency = Src.BillingCostCostLocalCurrency
					,Dest.BillingCostEditDateTime = Src.BillingCostEditDateTime
					,Dest.BillingCostAddDateTime = Src.BillingCostAddDateTime
					,Dest.BillingCostCostInvoiceCurrency = Src.BillingCostCostInvoiceCurrency
					,Dest.CurrencyCodeForeign = Src.CurrencyCodeForeign
					,Dest.CurrencyCodeInvoice = Src.CurrencyCodeInvoice
				OUTPUT 'UPDATE'
					,CAST(Inserted.BillingQuantityID AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.BillingQuantityID AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].BillingCosts Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities B WITH (NOLOCK) ON Src.BillingQuantityID = B.IDBillingQuantity
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingCosts Dest ON Src.BillingQuantityID = Dest.BillingQuantityID
				WHERE Dest.BillingCostEditDateTime < Src.BillingCostEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].BillingCosts Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities B WITH (NOLOCK) ON Src.BillingQuantityID = B.IDBillingQuantity
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingCosts Dest WITH (NOLOCK) ON Src.BillingQuantityID = Dest.BillingQuantityID
					WHERE Dest.BillingQuantityID IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingCosts (
					BillingQuantityID
					,BillingCostCostForeignCurrency
					,BillingCostCostLocalCurrency
					,BillingCostEditDateTime
					,BillingCostAddDateTime
					,BillingCostCostInvoiceCurrency
					,CurrencyCodeForeign
					,CurrencyCodeInvoice
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.BillingQuantityID AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.BillingQuantityID
					,Src.BillingCostCostForeignCurrency
					,Src.BillingCostCostLocalCurrency
					,Src.BillingCostEditDateTime
					,Src.BillingCostAddDateTime
					,Src.BillingCostCostInvoiceCurrency
					,Src.CurrencyCodeForeign
					,Src.CurrencyCodeInvoice
				FROM [dbo].BillingCosts Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingQuantities B WITH (NOLOCK) ON Src.BillingQuantityID = B.IDBillingQuantity
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillingCosts Dest WITH (NOLOCK) ON Src.BillingQuantityID = Dest.BillingQuantityID
				WHERE Dest.BillingQuantityID IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') BillingCosts: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `BillingCosts` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	-- 11 milestone updates
	--MileStoneUpdates
	SET @CurrentTableName = 'MileStoneUpdates';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		DECLARE @MinimumMileStoneUpdateEditDateTime DATETIME;

		--SET @MinimumMileStoneUpdateEditDateTime = COALESCE((
		--			SELECT DeleteAfterDays
		--			FROM Configurations C
		--			WHERE C.DeletionEntry = 'MinimumMileStoneUpdateEditDateTime'
		--			), '19930530 10:58:22.696');
		--IF EXISTS (
		--		SELECT 1
		--		FROM Configurations C
		--		WHERE C.ActionKey = 'MileStoneUpdates_ArchiveAfterDays'
		--			AND C.ActionType = 'Archive'
		--		)
		--BEGIN
		--	SET @DeleteAfterDays = (
		--			SELECT CAST(C.ActionValue AS INT)
		--			FROM Configurations C
		--			WHERE C.ActionKey = 'MileStoneUpdates_ArchiveAfterDays'
		--				AND C.ActionType = 'Archive'
		--			);
		--END
		--ELSE
		--BEGIN
		--	SET @ArchiveAfterDays = 365;
		--END
		SET @MileStoneUpdateArchiveAfterDays = ISNULL((
					SELECT FieldValue
					FROM #InterfaceRowsWithConfValues I
					WHERE I.FieldCode = 'MileStoneUpdateArchiveAfterDays'
					), 365);
		SET @MinimumMileStoneUpdateEditDateTime = DATEADD(day, - 1 * @MileStoneUpdateArchiveAfterDays, GETUTCDATE());

		IF OBJECT_ID('tempdb..#MileStoneUpdates') IS NOT NULL
		BEGIN
			DROP TABLE #MileStoneUpdates;
		END;

		CREATE TABLE #MileStoneUpdates (
			SlNo INT IDENTITY(1, 1)
			,IDMileStoneUpdate UNIQUEIDENTIFIER
			);

		--IF OBJECT_ID('tempdb..#TempTableMergeRowStatus') IS NOT NULL
		--BEGIN
		--	DROP TABLE #TempTableMergeRowStatus;
		--END;
		IF OBJECT_ID('tempdb..#TempTableMergeRowStatus') IS NOT NULL
		BEGIN
			TRUNCATE TABLE #TempTableMergeRowStatus;
		END;

		--CREATE TABLE #TempTableMergeRowStatus (
		--	Inserted INT
		--	,Updated INT
		--	,Unchanged INT
		--	,Descr NVARCHAR(100)
		--	);
		INSERT INTO #MileStoneUpdates (IDMileStoneUpdate)
		SELECT [MileStoneUpdates].IDMileStoneUpdate AS [ID]
		FROM MileStoneUpdates WITH (NOLOCK)
		INNER JOIN (
			SELECT [MileStoneUpdates].IDMileStoneUpdate AS [ID]
			FROM MileStoneUpdates WITH (NOLOCK)
			LEFT JOIN CSHeaders [MileStoneUpdates_CSHeader] WITH (NOLOCK) ON MileStoneUpdates.CSHeaderNumber = MileStoneUpdates_CSHeader.CSHeaderNumber
			LEFT JOIN InternalCSHeaders [MileStoneUpdates_CSHeader_InternalCSHeader] WITH (NOLOCK) ON MileStoneUpdates_CSHeader.CSHeaderNumber = MileStoneUpdates_CSHeader_InternalCSHeader.CSHeaderNumber
			WHERE [MileStoneUpdates].MileStoneUpdateEditDateTime < @MinimumMileStoneUpdateEditDateTime
			GROUP BY [MileStoneUpdates].IDMileStoneUpdate
			HAVING CAST(CAST(MAX(CAST(CASE 
									WHEN ([MileStoneUpdates_CSHeader_InternalCSHeader].CSHeaderNumber) IS NOT NULL
										THEN 1
									ELSE 0
									END AS INT)) AS BIT) AS BIT) = 0
			) [Select_MileStoneUpdates] ON [MileStoneUpdates].IDMileStoneUpdate = Select_MileStoneUpdates.ID;

		--Archiving MileStoneUpdates
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.[MileStoneUpdates] Dest
			USING (
				SELECT [MileStoneUpdates].IDMileStoneUpdate
					,[MileStoneUpdates].MileStoneUpdateActualDateTime
					,[MileStoneUpdates].MileStoneUpdateAddDateTime
					,[MileStoneUpdates].MileStoneUpdateAddUserCode
					,[MileStoneUpdates].MileStoneUpdateConsigneeCode
					,[MileStoneUpdates].MileStoneUpdateConsigneeName
					,[MileStoneUpdates].CSHeaderNumber
					,[MileStoneUpdates].MileStoneUpdateEditDateTime
					,[MileStoneUpdates].MileStoneUpdateEditUserCode
					,[MileStoneUpdates].MileStoneUpdateEventType
					,[MileStoneUpdates].MileStoneUpdateInterfacedDateTime
					,[MileStoneUpdates].MileStoneUpdateInterfaceErrorMessage
					,[MileStoneUpdates].MileStoneUpdateIsActual
					,[MileStoneUpdates].MileStoneUpdateLocationCode
					,[MileStoneUpdates].MileStoneUpdateLocationName
					,[MileStoneUpdates].MileStoneUpdateMessageDetails
					,[MileStoneUpdates].MileStoneInterfaceCode
					,[MileStoneUpdates].MileStoneLocationQualifierCode
					,[MileStoneUpdates].MileStoneRuleID
					,[MileStoneUpdates].MileStoneUpdatePlannedDateTime
					,[MileStoneUpdates].MileStoneUpdateProviderCode
					,[MileStoneUpdates].MileStoneUpdateProviderName
					,[MileStoneUpdates].MileStoneUpdateReplacedByNewerVersion
					,[MileStoneUpdates].MileStoneUpdateRuleInfo
				FROM MileStoneUpdates WITH (NOLOCK)
				INNER JOIN (
					SELECT [MileStoneUpdates].IDMileStoneUpdate AS [ID]
					FROM MileStoneUpdates WITH (NOLOCK)
					LEFT JOIN CSHeaders [MileStoneUpdates_CSHeader] WITH (NOLOCK) ON MileStoneUpdates.CSHeaderNumber = MileStoneUpdates_CSHeader.CSHeaderNumber
					LEFT JOIN InternalCSHeaders [MileStoneUpdates_CSHeader_InternalCSHeader] WITH (NOLOCK) ON MileStoneUpdates_CSHeader.CSHeaderNumber = MileStoneUpdates_CSHeader_InternalCSHeader.CSHeaderNumber
					WHERE [MileStoneUpdates].MileStoneUpdateEditDateTime < @MinimumMileStoneUpdateEditDateTime
					GROUP BY [MileStoneUpdates].IDMileStoneUpdate
					HAVING CAST(CAST(MAX(CAST(CASE 
											WHEN ([MileStoneUpdates_CSHeader_InternalCSHeader].CSHeaderNumber) IS NOT NULL
												THEN 1
											ELSE 0
											END AS INT)) AS BIT) AS BIT) = 0
					) [Select_MileStoneUpdates] ON [MileStoneUpdates].IDMileStoneUpdate = Select_MileStoneUpdates.ID
				) Src
				ON (Src.IDMileStoneUpdate = Dest.IDMileStoneUpdate)
			WHEN NOT MATCHED
				THEN
					INSERT (
						IDMileStoneUpdate
						,MileStoneUpdateActualDateTime
						,MileStoneUpdateAddDateTime
						,MileStoneUpdateAddUserCode
						,MileStoneUpdateConsigneeCode
						,MileStoneUpdateConsigneeName
						,CSHeaderNumber
						,MileStoneUpdateEditDateTime
						,MileStoneUpdateEditUserCode
						,MileStoneUpdateEventType
						,MileStoneUpdateInterfacedDateTime
						,MileStoneUpdateInterfaceErrorMessage
						,MileStoneUpdateIsActual
						,MileStoneUpdateLocationCode
						,MileStoneUpdateLocationName
						,MileStoneUpdateMessageDetails
						,MileStoneInterfaceCode
						,MileStoneLocationQualifierCode
						,MileStoneRuleID
						,MileStoneUpdatePlannedDateTime
						,MileStoneUpdateProviderCode
						,MileStoneUpdateProviderName
						,MileStoneUpdateReplacedByNewerVersion
						,MileStoneUpdateRuleInfo
						)
					VALUES (
						Src.IDMileStoneUpdate
						,Src.MileStoneUpdateActualDateTime
						,Src.MileStoneUpdateAddDateTime
						,Src.MileStoneUpdateAddUserCode
						,Src.MileStoneUpdateConsigneeCode
						,Src.MileStoneUpdateConsigneeName
						,Src.CSHeaderNumber
						,Src.MileStoneUpdateEditDateTime
						,Src.MileStoneUpdateEditUserCode
						,Src.MileStoneUpdateEventType
						,Src.MileStoneUpdateInterfacedDateTime
						,Src.MileStoneUpdateInterfaceErrorMessage
						,Src.MileStoneUpdateIsActual
						,Src.MileStoneUpdateLocationCode
						,Src.MileStoneUpdateLocationName
						,Src.MileStoneUpdateMessageDetails
						,Src.MileStoneInterfaceCode
						,Src.MileStoneLocationQualifierCode
						,Src.MileStoneRuleID
						,Src.MileStoneUpdatePlannedDateTime
						,Src.MileStoneUpdateProviderCode
						,Src.MileStoneUpdateProviderName
						,Src.MileStoneUpdateReplacedByNewerVersion
						,Src.MileStoneUpdateRuleInfo
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.MileStoneUpdateActualDateTime = Src.MileStoneUpdateActualDateTime
						,Dest.MileStoneUpdateAddDateTime = Src.MileStoneUpdateAddDateTime
						,Dest.MileStoneUpdateAddUserCode = Src.MileStoneUpdateAddUserCode
						,Dest.MileStoneUpdateConsigneeCode = Src.MileStoneUpdateConsigneeCode
						,Dest.MileStoneUpdateConsigneeName = Src.MileStoneUpdateConsigneeName
						,Dest.CSHeaderNumber = Src.CSHeaderNumber
						,Dest.MileStoneUpdateEditDateTime = Src.MileStoneUpdateEditDateTime
						,Dest.MileStoneUpdateEditUserCode = Src.MileStoneUpdateEditUserCode
						,Dest.MileStoneUpdateEventType = Src.MileStoneUpdateEventType
						,Dest.MileStoneUpdateInterfacedDateTime = Src.MileStoneUpdateInterfacedDateTime
						,Dest.MileStoneUpdateInterfaceErrorMessage = Src.MileStoneUpdateInterfaceErrorMessage
						,Dest.MileStoneUpdateIsActual = Src.MileStoneUpdateIsActual
						,Dest.MileStoneUpdateLocationCode = Src.MileStoneUpdateLocationCode
						,Dest.MileStoneUpdateLocationName = Src.MileStoneUpdateLocationName
						,Dest.MileStoneUpdateMessageDetails = Src.MileStoneUpdateMessageDetails
						,Dest.MileStoneInterfaceCode = Src.MileStoneInterfaceCode
						,Dest.MileStoneLocationQualifierCode = Src.MileStoneLocationQualifierCode
						,Dest.MileStoneRuleID = Src.MileStoneRuleID
						,Dest.MileStoneUpdatePlannedDateTime = Src.MileStoneUpdatePlannedDateTime
						,Dest.MileStoneUpdateProviderCode = Src.MileStoneUpdateProviderCode
						,Dest.MileStoneUpdateProviderName = Src.MileStoneUpdateProviderName
						,Dest.MileStoneUpdateReplacedByNewerVersion = Src.MileStoneUpdateReplacedByNewerVersion
						,Dest.MileStoneUpdateRuleInfo = Src.MileStoneUpdateRuleInfo
			OUTPUT $ACTION
				,CAST(Inserted.IDMileStoneUpdate AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.IDMileStoneUpdate AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].MileStoneUpdates Src WITH (NOLOCK)
					INNER JOIN #MileStoneUpdates [Select_MileStoneUpdates] ON Src.IDMileStoneUpdate = Select_MileStoneUpdates.ID
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.MileStoneUpdates Dest ON Src.IDMileStoneUpdate = Dest.IDMileStoneUpdate
					WHERE Dest.MileStoneUpdateEditDateTime < Src.MileStoneUpdateEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.MileStoneUpdateActualDateTime = Src.MileStoneUpdateActualDateTime
					,Dest.MileStoneUpdateAddDateTime = Src.MileStoneUpdateAddDateTime
					,Dest.MileStoneUpdateAddUserCode = Src.MileStoneUpdateAddUserCode
					,Dest.MileStoneUpdateConsigneeCode = Src.MileStoneUpdateConsigneeCode
					,Dest.MileStoneUpdateConsigneeName = Src.MileStoneUpdateConsigneeName
					,Dest.CSHeaderNumber = Src.CSHeaderNumber
					,Dest.MileStoneUpdateEditDateTime = Src.MileStoneUpdateEditDateTime
					,Dest.MileStoneUpdateEditUserCode = Src.MileStoneUpdateEditUserCode
					,Dest.MileStoneUpdateEventType = Src.MileStoneUpdateEventType
					,Dest.MileStoneUpdateInterfacedDateTime = Src.MileStoneUpdateInterfacedDateTime
					,Dest.MileStoneUpdateInterfaceErrorMessage = Src.MileStoneUpdateInterfaceErrorMessage
					,Dest.MileStoneUpdateIsActual = Src.MileStoneUpdateIsActual
					,Dest.MileStoneUpdateLocationCode = Src.MileStoneUpdateLocationCode
					,Dest.MileStoneUpdateLocationName = Src.MileStoneUpdateLocationName
					,Dest.MileStoneUpdateMessageDetails = Src.MileStoneUpdateMessageDetails
					,Dest.MileStoneInterfaceCode = Src.MileStoneInterfaceCode
					,Dest.MileStoneLocationQualifierCode = Src.MileStoneLocationQualifierCode
					,Dest.MileStoneRuleID = Src.MileStoneRuleID
					,Dest.MileStoneUpdatePlannedDateTime = Src.MileStoneUpdatePlannedDateTime
					,Dest.MileStoneUpdateProviderCode = Src.MileStoneUpdateProviderCode
					,Dest.MileStoneUpdateProviderName = Src.MileStoneUpdateProviderName
					,Dest.MileStoneUpdateReplacedByNewerVersion = Src.MileStoneUpdateReplacedByNewerVersion
					,Dest.MileStoneUpdateRuleInfo = Src.MileStoneUpdateRuleInfo
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDMileStoneUpdate AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDMileStoneUpdate AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].MileStoneUpdates Src WITH (NOLOCK)
				INNER JOIN #MileStoneUpdates [Select_MileStoneUpdates] ON Src.IDMileStoneUpdate = Select_MileStoneUpdates.ID
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.MileStoneUpdates Dest ON Src.IDMileStoneUpdate = Dest.IDMileStoneUpdate
				WHERE Dest.MileStoneUpdateEditDateTime < Src.MileStoneUpdateEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].MileStoneUpdates Src WITH (NOLOCK)
					INNER JOIN #MileStoneUpdates [Select_MileStoneUpdates] ON Src.IDMileStoneUpdate = Select_MileStoneUpdates.ID
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.MileStoneUpdates Dest ON Src.IDMileStoneUpdate = Dest.IDMileStoneUpdate
					WHERE Dest.IDMileStoneUpdate IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.MileStoneUpdates (
					IDMileStoneUpdate
					,MileStoneUpdateActualDateTime
					,MileStoneUpdateAddDateTime
					,MileStoneUpdateAddUserCode
					,MileStoneUpdateConsigneeCode
					,MileStoneUpdateConsigneeName
					,CSHeaderNumber
					,MileStoneUpdateEditDateTime
					,MileStoneUpdateEditUserCode
					,MileStoneUpdateEventType
					,MileStoneUpdateInterfacedDateTime
					,MileStoneUpdateInterfaceErrorMessage
					,MileStoneUpdateIsActual
					,MileStoneUpdateLocationCode
					,MileStoneUpdateLocationName
					,MileStoneUpdateMessageDetails
					,MileStoneInterfaceCode
					,MileStoneLocationQualifierCode
					,MileStoneRuleID
					,MileStoneUpdatePlannedDateTime
					,MileStoneUpdateProviderCode
					,MileStoneUpdateProviderName
					,MileStoneUpdateReplacedByNewerVersion
					,MileStoneUpdateRuleInfo
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDMileStoneUpdate AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.IDMileStoneUpdate
					,Src.MileStoneUpdateActualDateTime
					,Src.MileStoneUpdateAddDateTime
					,Src.MileStoneUpdateAddUserCode
					,Src.MileStoneUpdateConsigneeCode
					,Src.MileStoneUpdateConsigneeName
					,Src.CSHeaderNumber
					,Src.MileStoneUpdateEditDateTime
					,Src.MileStoneUpdateEditUserCode
					,Src.MileStoneUpdateEventType
					,Src.MileStoneUpdateInterfacedDateTime
					,Src.MileStoneUpdateInterfaceErrorMessage
					,Src.MileStoneUpdateIsActual
					,Src.MileStoneUpdateLocationCode
					,Src.MileStoneUpdateLocationName
					,Src.MileStoneUpdateMessageDetails
					,Src.MileStoneInterfaceCode
					,Src.MileStoneLocationQualifierCode
					,Src.MileStoneRuleID
					,Src.MileStoneUpdatePlannedDateTime
					,Src.MileStoneUpdateProviderCode
					,Src.MileStoneUpdateProviderName
					,Src.MileStoneUpdateReplacedByNewerVersion
					,Src.MileStoneUpdateRuleInfo
				FROM [dbo].MileStoneUpdates Src WITH (NOLOCK)
				INNER JOIN #MileStoneUpdates [Select_MileStoneUpdates] ON Src.IDMileStoneUpdate = Select_MileStoneUpdates.ID
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.MileStoneUpdates Dest ON Src.IDMileStoneUpdate = Dest.IDMileStoneUpdate
				WHERE Dest.IDMileStoneUpdate IS NULL;
			END;

			SET @TotRowCount = (
					SELECT COUNT(1)
					FROM #MileStoneUpdates
					);

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			--SELECT @Remarks = '(' + @DataBase + ') MileStoneUpdates: No. of Records: ' + CAST(@TotRowCount AS VARCHAR(10)) + '. Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) + ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			--FROM #TempTableMergeRowStatus tmp;
			SELECT @Remarks = '(' + @DataBase + ') MileStoneUpdates: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `MileStoneUpdates` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	-- 12 customs clearance documents
	--CustomRegimes
	SET @CurrentTableName = 'CustomRegimes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomRegimes AS Dest
			USING (
				SELECT [IDCustomRegime]
					,[CustomRegimeDescription]
				FROM dbo.CustomRegimes WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDCustomRegime] = Src.[IDCustomRegime])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CustomRegimeDescription] = Src.[CustomRegimeDescription]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDCustomRegime]
						,[CustomRegimeDescription]
						)
					VALUES (
						Src.[IDCustomRegime]
						,Src.[CustomRegimeDescription]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCustomRegime] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCustomRegime] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomRegimes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomRegimes Dest WITH (NOLOCK) ON Src.IDCustomRegime = Dest.IDCustomRegime
					WHERE Dest.CustomRegimeDescription <> Src.CustomRegimeDescription
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CustomRegimeDescription] = Src.[CustomRegimeDescription]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDCustomRegime AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDCustomRegime AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CustomRegimes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomRegimes Dest ON Src.IDCustomRegime = Dest.IDCustomRegime
				WHERE Dest.CustomRegimeDescription <> Src.CustomRegimeDescription;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomRegimes Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomRegimes Dest WITH (NOLOCK) ON Src.IDCustomRegime = Dest.IDCustomRegime
					WHERE Dest.IDCustomRegime IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomRegimes (
					[IDCustomRegime]
					,[CustomRegimeDescription]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDCustomRegime AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDCustomRegime]
					,Src.[CustomRegimeDescription]
				FROM [dbo].CustomRegimes Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomRegimes Dest WITH (NOLOCK) ON Src.IDCustomRegime = Dest.IDCustomRegime
				WHERE Dest.IDCustomRegime IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CustomRegimes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CustomRegimes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--CustomClearanceDocuments
	SET @CurrentTableName = 'CustomClearanceDocuments';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomClearanceDocuments AS Dest
			USING (
				SELECT CustomClearanceDocumentBatchNumber
					,CustomClearanceDocumentNumber
					,CustomClearanceDocumentLineNumber
					,CustomClearanceDocumentCustomRegimeID
					,CustomClearanceDocumentPreviousBatchNumber
					,CustomClearanceDocumentAssignedDateTime
					,CustomClearanceDocumentCreationDateTime
					,CustomClearanceDocumentCreationBy
				FROM dbo.CustomClearanceDocuments T WITH (NOLOCK)
				WHERE CustomClearanceDocumentAssignedDateTime <= @MaxDateToArchiveData
				) AS Src
				ON (Dest.CustomClearanceDocumentBatchNumber = Src.CustomClearanceDocumentBatchNumber)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.CustomClearanceDocumentNumber = Src.CustomClearanceDocumentNumber
						,Dest.CustomClearanceDocumentLineNumber = Src.CustomClearanceDocumentLineNumber
						,Dest.CustomClearanceDocumentCustomRegimeID = Src.CustomClearanceDocumentCustomRegimeID
						,Dest.CustomClearanceDocumentPreviousBatchNumber = Src.CustomClearanceDocumentPreviousBatchNumber
						,Dest.CustomClearanceDocumentAssignedDateTime = Src.CustomClearanceDocumentAssignedDateTime
						,Dest.CustomClearanceDocumentCreationDateTime = Src.CustomClearanceDocumentCreationDateTime
						,Dest.CustomClearanceDocumentCreationBy = Src.CustomClearanceDocumentCreationBy
			WHEN NOT MATCHED
				THEN
					INSERT (
						CustomClearanceDocumentBatchNumber
						,CustomClearanceDocumentNumber
						,CustomClearanceDocumentLineNumber
						,CustomClearanceDocumentCustomRegimeID
						,CustomClearanceDocumentPreviousBatchNumber
						,CustomClearanceDocumentAssignedDateTime
						,CustomClearanceDocumentCreationDateTime
						,CustomClearanceDocumentCreationBy
						)
					VALUES (
						Src.CustomClearanceDocumentBatchNumber
						,Src.CustomClearanceDocumentNumber
						,Src.CustomClearanceDocumentLineNumber
						,Src.CustomClearanceDocumentCustomRegimeID
						,Src.CustomClearanceDocumentPreviousBatchNumber
						,Src.CustomClearanceDocumentAssignedDateTime
						,Src.CustomClearanceDocumentCreationDateTime
						,Src.CustomClearanceDocumentCreationBy
						)
			OUTPUT $ACTION
				,CAST(Inserted.CustomClearanceDocumentBatchNumber AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.CustomClearanceDocumentBatchNumber AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomClearanceDocuments Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomClearanceDocuments Dest WITH (NOLOCK) ON Src.CustomClearanceDocumentBatchNumber = Dest.CustomClearanceDocumentBatchNumber
					WHERE Src.CustomClearanceDocumentAssignedDateTime <= @MaxDateToArchiveData
						AND Dest.CustomClearanceDocumentAssignedDateTime < Src.CustomClearanceDocumentAssignedDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.CustomClearanceDocumentNumber = Src.CustomClearanceDocumentNumber
					,Dest.CustomClearanceDocumentLineNumber = Src.CustomClearanceDocumentLineNumber
					,Dest.CustomClearanceDocumentCustomRegimeID = Src.CustomClearanceDocumentCustomRegimeID
					,Dest.CustomClearanceDocumentPreviousBatchNumber = Src.CustomClearanceDocumentPreviousBatchNumber
					,Dest.CustomClearanceDocumentAssignedDateTime = Src.CustomClearanceDocumentAssignedDateTime
					,Dest.CustomClearanceDocumentCreationDateTime = Src.CustomClearanceDocumentCreationDateTime
					,Dest.CustomClearanceDocumentCreationBy = Src.CustomClearanceDocumentCreationBy
				OUTPUT 'UPDATE'
					,CAST(Inserted.CustomClearanceDocumentBatchNumber AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.CustomClearanceDocumentBatchNumber AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].CustomClearanceDocuments Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomClearanceDocuments Dest ON Src.CustomClearanceDocumentBatchNumber = Dest.CustomClearanceDocumentBatchNumber
				WHERE Src.CustomClearanceDocumentAssignedDateTime <= @MaxDateToArchiveData
					AND Dest.CustomClearanceDocumentAssignedDateTime < Src.CustomClearanceDocumentAssignedDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].CustomClearanceDocuments Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomClearanceDocuments Dest WITH (NOLOCK) ON Src.CustomClearanceDocumentBatchNumber = Dest.CustomClearanceDocumentBatchNumber
					WHERE Src.CustomClearanceDocumentAssignedDateTime <= @MaxDateToArchiveData
						AND Dest.CustomClearanceDocumentBatchNumber IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomClearanceDocuments (
					CustomClearanceDocumentBatchNumber
					,CustomClearanceDocumentNumber
					,CustomClearanceDocumentLineNumber
					,CustomClearanceDocumentCustomRegimeID
					,CustomClearanceDocumentPreviousBatchNumber
					,CustomClearanceDocumentAssignedDateTime
					,CustomClearanceDocumentCreationDateTime
					,CustomClearanceDocumentCreationBy
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.CustomClearanceDocumentBatchNumber AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.CustomClearanceDocumentBatchNumber
					,Src.CustomClearanceDocumentNumber
					,Src.CustomClearanceDocumentLineNumber
					,Src.CustomClearanceDocumentCustomRegimeID
					,Src.CustomClearanceDocumentPreviousBatchNumber
					,Src.CustomClearanceDocumentAssignedDateTime
					,Src.CustomClearanceDocumentCreationDateTime
					,Src.CustomClearanceDocumentCreationBy
				FROM [dbo].CustomClearanceDocuments Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CustomClearanceDocuments Dest WITH (NOLOCK) ON Src.CustomClearanceDocumentBatchNumber = Dest.CustomClearanceDocumentBatchNumber
				WHERE Src.CustomClearanceDocumentAssignedDateTime <= @MaxDateToArchiveData
					AND Dest.CustomClearanceDocumentBatchNumber IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CustomClearanceDocuments: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CustomClearanceDocuments` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	-- 13 interface items
	--InterfaceTableDefinitions
	SET @CurrentTableName = 'InterfaceTableDefinitions';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions AS Dest
			USING (
				SELECT InterfaceTableDefinitionCode
					,InterfaceTableDefinitionName
					,InterfaceTableDefinitionDescription
					,InterfaceTableDefinitionArchive
					,InterfaceTableDefinitionArchiveAllowedStorageString
					,InterfaceTableDefinitionAddDateTime
					,InterfaceTableDefinitionAddUserCode
					,InterfaceTableDefinitionEditDateTime
					,InterfaceTableDefinitionEditUserCode
					,InterfaceTableDefinitionDataEntryDefinitionID
				FROM dbo.InterfaceTableDefinitions T WITH (NOLOCK)
				) AS Src
				ON (Dest.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.InterfaceTableDefinitionName = Src.InterfaceTableDefinitionName
						,Dest.InterfaceTableDefinitionDescription = Src.InterfaceTableDefinitionDescription
						,Dest.InterfaceTableDefinitionArchive = Src.InterfaceTableDefinitionArchive
						,Dest.InterfaceTableDefinitionArchiveAllowedStorageString = Src.InterfaceTableDefinitionArchiveAllowedStorageString
						,Dest.InterfaceTableDefinitionAddDateTime = Src.InterfaceTableDefinitionAddDateTime
						,Dest.InterfaceTableDefinitionAddUserCode = Src.InterfaceTableDefinitionAddUserCode
						,Dest.InterfaceTableDefinitionEditDateTime = Src.InterfaceTableDefinitionEditDateTime
						,Dest.InterfaceTableDefinitionEditUserCode = Src.InterfaceTableDefinitionEditUserCode
						,Dest.InterfaceTableDefinitionDataEntryDefinitionID = Src.InterfaceTableDefinitionDataEntryDefinitionID
			WHEN NOT MATCHED
				THEN
					INSERT (
						InterfaceTableDefinitionCode
						,InterfaceTableDefinitionName
						,InterfaceTableDefinitionDescription
						,InterfaceTableDefinitionArchive
						,InterfaceTableDefinitionArchiveAllowedStorageString
						,InterfaceTableDefinitionAddDateTime
						,InterfaceTableDefinitionAddUserCode
						,InterfaceTableDefinitionEditDateTime
						,InterfaceTableDefinitionEditUserCode
						,InterfaceTableDefinitionDataEntryDefinitionID
						)
					VALUES (
						Src.InterfaceTableDefinitionCode
						,Src.InterfaceTableDefinitionName
						,Src.InterfaceTableDefinitionDescription
						,Src.InterfaceTableDefinitionArchive
						,Src.InterfaceTableDefinitionArchiveAllowedStorageString
						,Src.InterfaceTableDefinitionAddDateTime
						,Src.InterfaceTableDefinitionAddUserCode
						,Src.InterfaceTableDefinitionEditDateTime
						,Src.InterfaceTableDefinitionEditUserCode
						,Src.InterfaceTableDefinitionDataEntryDefinitionID
						)
			OUTPUT $ACTION
				,CAST(Inserted.InterfaceTableDefinitionCode AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.InterfaceTableDefinitionCode AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].InterfaceTableDefinitions Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions Dest WITH (NOLOCK) ON Src.InterfaceTableDefinitionCode = Dest.InterfaceTableDefinitionCode
					WHERE Dest.InterfaceTableDefinitionEditDateTime < Src.InterfaceTableDefinitionEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.InterfaceTableDefinitionName = Src.InterfaceTableDefinitionName
					,Dest.InterfaceTableDefinitionDescription = Src.InterfaceTableDefinitionDescription
					,Dest.InterfaceTableDefinitionArchive = Src.InterfaceTableDefinitionArchive
					,Dest.InterfaceTableDefinitionArchiveAllowedStorageString = Src.InterfaceTableDefinitionArchiveAllowedStorageString
					,Dest.InterfaceTableDefinitionAddDateTime = Src.InterfaceTableDefinitionAddDateTime
					,Dest.InterfaceTableDefinitionAddUserCode = Src.InterfaceTableDefinitionAddUserCode
					,Dest.InterfaceTableDefinitionEditDateTime = Src.InterfaceTableDefinitionEditDateTime
					,Dest.InterfaceTableDefinitionEditUserCode = Src.InterfaceTableDefinitionEditUserCode
					,Dest.InterfaceTableDefinitionDataEntryDefinitionID = Src.InterfaceTableDefinitionDataEntryDefinitionID
				OUTPUT 'UPDATE'
					,CAST(Inserted.InterfaceTableDefinitionCode AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.InterfaceTableDefinitionCode AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].InterfaceTableDefinitions Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions Dest ON Src.InterfaceTableDefinitionCode = Dest.InterfaceTableDefinitionCode
				WHERE Dest.InterfaceTableDefinitionEditDateTime < Src.InterfaceTableDefinitionEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].InterfaceTableDefinitions Src WITH (NOLOCK)
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions Dest WITH (NOLOCK) ON Src.InterfaceTableDefinitionCode = Dest.InterfaceTableDefinitionCode
					WHERE Dest.InterfaceTableDefinitionCode IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions (
					InterfaceTableDefinitionCode
					,InterfaceTableDefinitionName
					,InterfaceTableDefinitionDescription
					,InterfaceTableDefinitionArchive
					,InterfaceTableDefinitionArchiveAllowedStorageString
					,InterfaceTableDefinitionAddDateTime
					,InterfaceTableDefinitionAddUserCode
					,InterfaceTableDefinitionEditDateTime
					,InterfaceTableDefinitionEditUserCode
					,InterfaceTableDefinitionDataEntryDefinitionID
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.InterfaceTableDefinitionCode AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.InterfaceTableDefinitionCode
					,Src.InterfaceTableDefinitionName
					,Src.InterfaceTableDefinitionDescription
					,Src.InterfaceTableDefinitionArchive
					,Src.InterfaceTableDefinitionArchiveAllowedStorageString
					,Src.InterfaceTableDefinitionAddDateTime
					,Src.InterfaceTableDefinitionAddUserCode
					,Src.InterfaceTableDefinitionEditDateTime
					,Src.InterfaceTableDefinitionEditUserCode
					,Src.InterfaceTableDefinitionDataEntryDefinitionID
				FROM [dbo].InterfaceTableDefinitions Src WITH (NOLOCK)
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions Dest WITH (NOLOCK) ON Src.InterfaceTableDefinitionCode = Dest.InterfaceTableDefinitionCode
				WHERE Dest.InterfaceTableDefinitionCode IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') InterfaceTableDefinitions: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `InterfaceTableDefinitions` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--InterfaceItems
	SET @CurrentTableName = 'InterfaceItems';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		/*
				MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceItems AS Dest
				USING (
					SELECT IDInterfaceItem
						,InterfaceTableDefinitionCode
						,InterfaceItemString01
						,InterfaceItemString02
						,InterfaceItemString03
						,InterfaceItemString04
						,InterfaceItemString05
						,InterfaceItemString06
						,InterfaceItemString07
						,InterfaceItemString08
						,InterfaceItemString09
						,InterfaceItemString10
						,InterfaceItemString11
						,InterfaceItemString12
						,InterfaceItemString13
						,InterfaceItemString14
						,InterfaceItemString15
						,InterfaceItemStringLong01
						,InterfaceItemStringLong02
						,InterfaceItemStringLong03
						,InterfaceItemStringLong04
						,InterfaceItemStringLong05
						,InterfaceItemNumber01
						,InterfaceItemNumber02
						,InterfaceItemNumber03
						,InterfaceItemNumber04
						,InterfaceItemNumber05
						,InterfaceItemNumber06
						,InterfaceItemNumber07
						,InterfaceItemNumber08
						,InterfaceItemNumber09
						,InterfaceItemNumber10
						,InterfaceItemDateTime01
						,InterfaceItemDateTime02
						,InterfaceItemDateTime03
						,InterfaceItemDateTime04
						,InterfaceItemDateTime05
						,InterfaceItemAddDateTime
						,InterfaceItemAddUserCode
						,InterfaceItemEditDateTime
						,InterfaceItemEditUserCode
					FROM dbo.InterfaceItems T WITH (NOLOCK)
						--WHERE 
					) AS Src
					ON (Dest.IDInterfaceItem = Src.IDInterfaceItem)
				WHEN MATCHED
					THEN
						UPDATE
						SET Dest.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode
							,Dest.InterfaceItemString01 = Src.InterfaceItemString01
							,Dest.InterfaceItemString02 = Src.InterfaceItemString02
							,Dest.InterfaceItemString03 = Src.InterfaceItemString03
							,Dest.InterfaceItemString04 = Src.InterfaceItemString04
							,Dest.InterfaceItemString05 = Src.InterfaceItemString05
							,Dest.InterfaceItemString06 = Src.InterfaceItemString06
							,Dest.InterfaceItemString07 = Src.InterfaceItemString07
							,Dest.InterfaceItemString08 = Src.InterfaceItemString08
							,Dest.InterfaceItemString09 = Src.InterfaceItemString09
							,Dest.InterfaceItemString10 = Src.InterfaceItemString10
							,Dest.InterfaceItemString11 = Src.InterfaceItemString11
							,Dest.InterfaceItemString12 = Src.InterfaceItemString12
							,Dest.InterfaceItemString13 = Src.InterfaceItemString13
							,Dest.InterfaceItemString14 = Src.InterfaceItemString14
							,Dest.InterfaceItemString15 = Src.InterfaceItemString15
							,Dest.InterfaceItemStringLong01 = Src.InterfaceItemStringLong01
							,Dest.InterfaceItemStringLong02 = Src.InterfaceItemStringLong02
							,Dest.InterfaceItemStringLong03 = Src.InterfaceItemStringLong03
							,Dest.InterfaceItemStringLong04 = Src.InterfaceItemStringLong04
							,Dest.InterfaceItemStringLong05 = Src.InterfaceItemStringLong05
							,Dest.InterfaceItemNumber01 = Src.InterfaceItemNumber01
							,Dest.InterfaceItemNumber02 = Src.InterfaceItemNumber02
							,Dest.InterfaceItemNumber03 = Src.InterfaceItemNumber03
							,Dest.InterfaceItemNumber04 = Src.InterfaceItemNumber04
							,Dest.InterfaceItemNumber05 = Src.InterfaceItemNumber05
							,Dest.InterfaceItemNumber06 = Src.InterfaceItemNumber06
							,Dest.InterfaceItemNumber07 = Src.InterfaceItemNumber07
							,Dest.InterfaceItemNumber08 = Src.InterfaceItemNumber08
							,Dest.InterfaceItemNumber09 = Src.InterfaceItemNumber09
							,Dest.InterfaceItemNumber10 = Src.InterfaceItemNumber10
							,Dest.InterfaceItemDateTime01 = Src.InterfaceItemDateTime01
							,Dest.InterfaceItemDateTime02 = Src.InterfaceItemDateTime02
							,Dest.InterfaceItemDateTime03 = Src.InterfaceItemDateTime03
							,Dest.InterfaceItemDateTime04 = Src.InterfaceItemDateTime04
							,Dest.InterfaceItemDateTime05 = Src.InterfaceItemDateTime05
							,Dest.InterfaceItemAddDateTime = Src.InterfaceItemAddDateTime
							,Dest.InterfaceItemAddUserCode = Src.InterfaceItemAddUserCode
							,Dest.InterfaceItemEditDateTime = Src.InterfaceItemEditDateTime
							,Dest.InterfaceItemEditUserCode = Src.InterfaceItemEditUserCode
				WHEN NOT MATCHED
					THEN
						INSERT (
							IDInterfaceItem
							,InterfaceTableDefinitionCode
							,InterfaceItemString01
							,InterfaceItemString02
							,InterfaceItemString03
							,InterfaceItemString04
							,InterfaceItemString05
							,InterfaceItemString06
							,InterfaceItemString07
							,InterfaceItemString08
							,InterfaceItemString09
							,InterfaceItemString10
							,InterfaceItemString11
							,InterfaceItemString12
							,InterfaceItemString13
							,InterfaceItemString14
							,InterfaceItemString15
							,InterfaceItemStringLong01
							,InterfaceItemStringLong02
							,InterfaceItemStringLong03
							,InterfaceItemStringLong04
							,InterfaceItemStringLong05
							,InterfaceItemNumber01
							,InterfaceItemNumber02
							,InterfaceItemNumber03
							,InterfaceItemNumber04
							,InterfaceItemNumber05
							,InterfaceItemNumber06
							,InterfaceItemNumber07
							,InterfaceItemNumber08
							,InterfaceItemNumber09
							,InterfaceItemNumber10
							,InterfaceItemDateTime01
							,InterfaceItemDateTime02
							,InterfaceItemDateTime03
							,InterfaceItemDateTime04
							,InterfaceItemDateTime05
							,InterfaceItemAddDateTime
							,InterfaceItemAddUserCode
							,InterfaceItemEditDateTime
							,InterfaceItemEditUserCode
							)
						VALUES (
							Src.IDInterfaceItem
							,Src.InterfaceTableDefinitionCode
							,Src.InterfaceItemString01
							,Src.InterfaceItemString02
							,Src.InterfaceItemString03
							,Src.InterfaceItemString04
							,Src.InterfaceItemString05
							,Src.InterfaceItemString06
							,Src.InterfaceItemString07
							,Src.InterfaceItemString08
							,Src.InterfaceItemString09
							,Src.InterfaceItemString10
							,Src.InterfaceItemString11
							,Src.InterfaceItemString12
							,Src.InterfaceItemString13
							,Src.InterfaceItemString14
							,Src.InterfaceItemString15
							,Src.InterfaceItemStringLong01
							,Src.InterfaceItemStringLong02
							,Src.InterfaceItemStringLong03
							,Src.InterfaceItemStringLong04
							,Src.InterfaceItemStringLong05
							,Src.InterfaceItemNumber01
							,Src.InterfaceItemNumber02
							,Src.InterfaceItemNumber03
							,Src.InterfaceItemNumber04
							,Src.InterfaceItemNumber05
							,Src.InterfaceItemNumber06
							,Src.InterfaceItemNumber07
							,Src.InterfaceItemNumber08
							,Src.InterfaceItemNumber09
							,Src.InterfaceItemNumber10
							,Src.InterfaceItemDateTime01
							,Src.InterfaceItemDateTime02
							,Src.InterfaceItemDateTime03
							,Src.InterfaceItemDateTime04
							,Src.InterfaceItemDateTime05
							,Src.InterfaceItemAddDateTime
							,Src.InterfaceItemAddUserCode
							,Src.InterfaceItemEditDateTime
							,Src.InterfaceItemEditUserCode
							)
				OUTPUT $ACTION
					,CAST(Inserted.IDInterfaceItem AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDInterfaceItem AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
				*/
		TRUNCATE TABLE #TempTableMergeRowStatus;

		IF EXISTS (
				SELECT 1
				FROM [dbo].InterfaceItems Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions I WITH (NOLOCK) ON I.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceItems Dest WITH (NOLOCK) ON Src.IDInterfaceItem = Dest.IDInterfaceItem
				WHERE CAST(Dest.InterfaceItemEditDateTime AS DATE) < CAST(Src.InterfaceItemEditDateTime AS DATE)
				)
		BEGIN
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].InterfaceItems Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions I WITH (NOLOCK) ON I.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceItems Dest WITH (NOLOCK) ON Src.IDInterfaceItem = Dest.IDInterfaceItem
					WHERE CAST(Dest.InterfaceItemEditDateTime AS DATE) < CAST(Src.InterfaceItemEditDateTime AS DATE)
					)
			BEGIN
				BEGIN TRY
					BEGIN TRANSACTION;

					UPDATE TOP (@BatchSizeForInterfaceArchival) Dest
					SET Dest.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode
						,Dest.InterfaceItemString01 = Src.InterfaceItemString01
						,Dest.InterfaceItemString02 = Src.InterfaceItemString02
						,Dest.InterfaceItemString03 = Src.InterfaceItemString03
						,Dest.InterfaceItemString04 = Src.InterfaceItemString04
						,Dest.InterfaceItemString05 = Src.InterfaceItemString05
						,Dest.InterfaceItemString06 = Src.InterfaceItemString06
						,Dest.InterfaceItemString07 = Src.InterfaceItemString07
						,Dest.InterfaceItemString08 = Src.InterfaceItemString08
						,Dest.InterfaceItemString09 = Src.InterfaceItemString09
						,Dest.InterfaceItemString10 = Src.InterfaceItemString10
						,Dest.InterfaceItemString11 = Src.InterfaceItemString11
						,Dest.InterfaceItemString12 = Src.InterfaceItemString12
						,Dest.InterfaceItemString13 = Src.InterfaceItemString13
						,Dest.InterfaceItemString14 = Src.InterfaceItemString14
						,Dest.InterfaceItemString15 = Src.InterfaceItemString15
						,Dest.InterfaceItemStringLong01 = Src.InterfaceItemStringLong01
						,Dest.InterfaceItemStringLong02 = Src.InterfaceItemStringLong02
						,Dest.InterfaceItemStringLong03 = Src.InterfaceItemStringLong03
						,Dest.InterfaceItemStringLong04 = Src.InterfaceItemStringLong04
						,Dest.InterfaceItemStringLong05 = Src.InterfaceItemStringLong05
						,Dest.InterfaceItemNumber01 = Src.InterfaceItemNumber01
						,Dest.InterfaceItemNumber02 = Src.InterfaceItemNumber02
						,Dest.InterfaceItemNumber03 = Src.InterfaceItemNumber03
						,Dest.InterfaceItemNumber04 = Src.InterfaceItemNumber04
						,Dest.InterfaceItemNumber05 = Src.InterfaceItemNumber05
						,Dest.InterfaceItemNumber06 = Src.InterfaceItemNumber06
						,Dest.InterfaceItemNumber07 = Src.InterfaceItemNumber07
						,Dest.InterfaceItemNumber08 = Src.InterfaceItemNumber08
						,Dest.InterfaceItemNumber09 = Src.InterfaceItemNumber09
						,Dest.InterfaceItemNumber10 = Src.InterfaceItemNumber10
						,Dest.InterfaceItemDateTime01 = Src.InterfaceItemDateTime01
						,Dest.InterfaceItemDateTime02 = Src.InterfaceItemDateTime02
						,Dest.InterfaceItemDateTime03 = Src.InterfaceItemDateTime03
						,Dest.InterfaceItemDateTime04 = Src.InterfaceItemDateTime04
						,Dest.InterfaceItemDateTime05 = Src.InterfaceItemDateTime05
						,Dest.InterfaceItemAddDateTime = Src.InterfaceItemAddDateTime
						,Dest.InterfaceItemAddUserCode = Src.InterfaceItemAddUserCode
						,Dest.InterfaceItemEditDateTime = Src.InterfaceItemEditDateTime
						,Dest.InterfaceItemEditUserCode = Src.InterfaceItemEditUserCode
					OUTPUT 'UPDATE'
						,CAST(Inserted.IDInterfaceItem AS VARCHAR(50)) AS 'Inserted'
						,CAST(Deleted.IDInterfaceItem AS VARCHAR(50)) AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					FROM [dbo].InterfaceItems Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions I WITH (NOLOCK) ON I.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceItems Dest ON Src.IDInterfaceItem = Dest.IDInterfaceItem
					WHERE CAST(Dest.InterfaceItemEditDateTime AS DATE) < CAST(Src.InterfaceItemEditDateTime AS DATE);

					TRUNCATE TABLE #TempTableMergeRowStatus;

					INSERT INTO #TempTableMergeRowStatus (
						Inserted
						,Updated
						)
					--,Unchanged
					SELECT ISNULL((
								SELECT COUNT(1)
								FROM #tmpTableVal
								WHERE MergeAction = 'INSERT'
								), 0) AS Inserted
						,ISNULL((
								SELECT COUNT(1)
								FROM #tmpTableVal
								WHERE MergeAction = 'UPDATE'
								), 0) AS Updated

					--,(
					--	@TotRowCount - (
					--		ISNULL((
					--				SELECT COUNT(1)
					--				FROM #tmpTableVal
					--				WHERE MergeAction = 'INSERT'
					--				), 0) + ISNULL((
					--				SELECT COUNT(1)
					--				FROM #tmpTableVal
					--				WHERE MergeAction = 'UPDATE'
					--				), 0)
					--		)
					--	) AS UnChanged
					SELECT @Remarks = '(' + @DataBase + ') InterfaceItems: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
					FROM #TempTableMergeRowStatus tmp;

					SET @LogDate = GETUTCDATE();

					EXEC pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					COMMIT TRANSACTION;
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @TypeOfError = ERROR_SEVERITY();
					SET @ErrorNumber = ERROR_NUMBER();
					SET @ErrorMessage = ERROR_MESSAGE();
					SET @LineNumber = ERROR_LINE();
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Error while archiving from `InterfaceItems` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

					EXEC pArchiveLogs @Remarks
						,@SourceProcName
						,@TypeOfError
						,@ErrorNumber
						,@ErrorMessage
						,@LineNumber
						,@LogDate
						,@HostName
						,@UserName
						,'Error'
						,@RunID;

					RAISERROR (
							@ErrorMessage
							,@TypeOfError
							,- 1
							);
				END CATCH;
			END;
		END;
		ELSE
		BEGIN
			SET @Remarks = '(' + @DataBase + ') InterfaceItems: No rows available for update.';
			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;
		END;


				IF EXISTS (
				SELECT 1
				FROM [dbo].InterfaceItems Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions I WITH (NOLOCK) ON I.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceItems Dest WITH (NOLOCK) ON Src.IDInterfaceItem = Dest.IDInterfaceItem
				WHERE Dest.IDInterfaceItem IS NULL
				)
		BEGIN
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].InterfaceItems Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions I WITH (NOLOCK) ON I.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceItems Dest WITH (NOLOCK) ON Src.IDInterfaceItem = Dest.IDInterfaceItem
					WHERE Dest.IDInterfaceItem IS NULL
					)
			BEGIN
				BEGIN TRY
					BEGIN TRANSACTION;

					INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceItems (
						IDInterfaceItem
						,InterfaceTableDefinitionCode
						,InterfaceItemString01
						,InterfaceItemString02
						,InterfaceItemString03
						,InterfaceItemString04
						,InterfaceItemString05
						,InterfaceItemString06
						,InterfaceItemString07
						,InterfaceItemString08
						,InterfaceItemString09
						,InterfaceItemString10
						,InterfaceItemString11
						,InterfaceItemString12
						,InterfaceItemString13
						,InterfaceItemString14
						,InterfaceItemString15
						,InterfaceItemStringLong01
						,InterfaceItemStringLong02
						,InterfaceItemStringLong03
						,InterfaceItemStringLong04
						,InterfaceItemStringLong05
						,InterfaceItemNumber01
						,InterfaceItemNumber02
						,InterfaceItemNumber03
						,InterfaceItemNumber04
						,InterfaceItemNumber05
						,InterfaceItemNumber06
						,InterfaceItemNumber07
						,InterfaceItemNumber08
						,InterfaceItemNumber09
						,InterfaceItemNumber10
						,InterfaceItemDateTime01
						,InterfaceItemDateTime02
						,InterfaceItemDateTime03
						,InterfaceItemDateTime04
						,InterfaceItemDateTime05
						,InterfaceItemAddDateTime
						,InterfaceItemAddUserCode
						,InterfaceItemEditDateTime
						,InterfaceItemEditUserCode
						)
					OUTPUT 'INSERT'
						,CAST(Inserted.IDInterfaceItem AS VARCHAR(50)) AS 'Inserted'
						,NULL AS 'Deleted'
					INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
					SELECT TOP (@BatchSizeForInterfaceArchival) Src.IDInterfaceItem
						,Src.InterfaceTableDefinitionCode
						,Src.InterfaceItemString01
						,Src.InterfaceItemString02
						,Src.InterfaceItemString03
						,Src.InterfaceItemString04
						,Src.InterfaceItemString05
						,Src.InterfaceItemString06
						,Src.InterfaceItemString07
						,Src.InterfaceItemString08
						,Src.InterfaceItemString09
						,Src.InterfaceItemString10
						,Src.InterfaceItemString11
						,Src.InterfaceItemString12
						,Src.InterfaceItemString13
						,Src.InterfaceItemString14
						,Src.InterfaceItemString15
						,Src.InterfaceItemStringLong01
						,Src.InterfaceItemStringLong02
						,Src.InterfaceItemStringLong03
						,Src.InterfaceItemStringLong04
						,Src.InterfaceItemStringLong05
						,Src.InterfaceItemNumber01
						,Src.InterfaceItemNumber02
						,Src.InterfaceItemNumber03
						,Src.InterfaceItemNumber04
						,Src.InterfaceItemNumber05
						,Src.InterfaceItemNumber06
						,Src.InterfaceItemNumber07
						,Src.InterfaceItemNumber08
						,Src.InterfaceItemNumber09
						,Src.InterfaceItemNumber10
						,Src.InterfaceItemDateTime01
						,Src.InterfaceItemDateTime02
						,Src.InterfaceItemDateTime03
						,Src.InterfaceItemDateTime04
						,Src.InterfaceItemDateTime05
						,Src.InterfaceItemAddDateTime
						,Src.InterfaceItemAddUserCode
						,Src.InterfaceItemEditDateTime
						,Src.InterfaceItemEditUserCode
					FROM [dbo].InterfaceItems Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceTableDefinitions I WITH (NOLOCK) ON I.InterfaceTableDefinitionCode = Src.InterfaceTableDefinitionCode
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.InterfaceItems Dest WITH (NOLOCK) ON Src.IDInterfaceItem = Dest.IDInterfaceItem
					WHERE Dest.IDInterfaceItem IS NULL;

					TRUNCATE TABLE #TempTableMergeRowStatus;

					INSERT INTO #TempTableMergeRowStatus (
						Inserted
						,Updated
						)
					--,Unchanged
					SELECT ISNULL((
								SELECT COUNT(1)
								FROM #tmpTableVal
								WHERE MergeAction = 'INSERT'
								), 0) AS Inserted
						,ISNULL((
								SELECT COUNT(1)
								FROM #tmpTableVal
								WHERE MergeAction = 'UPDATE'
								), 0) AS Updated

					--,(
					--	@TotRowCount - (
					--		ISNULL((
					--				SELECT COUNT(1)
					--				FROM #tmpTableVal
					--				WHERE MergeAction = 'INSERT'
					--				), 0) + ISNULL((
					--				SELECT COUNT(1)
					--				FROM #tmpTableVal
					--				WHERE MergeAction = 'UPDATE'
					--				), 0)
					--		)
					--	) AS UnChanged
					SELECT @Remarks = '(' + @DataBase + ') InterfaceItems: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
					FROM #TempTableMergeRowStatus tmp;

					SET @LogDate = GETUTCDATE();

					EXEC pArchiveLogs @Remarks
						,@SourceProcName
						,NULL
						,NULL
						,NULL
						,NULL
						,@LogDate
						,@HostName
						,@UserName
						,'Info'
						,@RunID;

					COMMIT TRANSACTION;
				END TRY

				BEGIN CATCH
					ROLLBACK TRANSACTION;

					SET @TypeOfError = ERROR_SEVERITY();
					SET @ErrorNumber = ERROR_NUMBER();
					SET @ErrorMessage = ERROR_MESSAGE();
					SET @LineNumber = ERROR_LINE();
					SET @LogDate = GETUTCDATE();
					SET @Remarks = 'Error while archiving from `InterfaceItems` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

					EXEC pArchiveLogs @Remarks
						,@SourceProcName
						,@TypeOfError
						,@ErrorNumber
						,@ErrorMessage
						,@LineNumber
						,@LogDate
						,@HostName
						,@UserName
						,'Error'
						,@RunID;

					RAISERROR (
							@ErrorMessage
							,@TypeOfError
							,- 1
							);
				END CATCH;
			END;
		END
		ELSE
		BEGIN
			SET @Remarks = '(' + @DataBase + ') InterfaceItems: No new rows available for insertion.';
			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;
		END;

	END


	--StockTransactions
	SET @CurrentTableName = 'StockTransactions';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.StockTransactions AS Dest
			USING (
				SELECT [IDStockTransaction]
					,[StockTransactionSystemID]
					,[StockTransactionType]
					,[CompanyIDStorer]
					,[ProductCode]
					,[LotID]
					,[LocationIDSource]
					,[StockUnitIDSource]
					,[LocationIDDestination]
					,[StockUnitIDDestination]
					,[StockTransactionSourceID]
					,[StockTransactionSourceType]
					,[StockTransactionStatus]
					,[StockTransactionLotAttribute01]
					,[StockTransactionLotAttribute02]
					,[StockTransactionLotAttribute03]
					,[StockTransactionLotAttribute04]
					,[StockTransactionLotAttribute05]
					,[StockTransactionLotAttribute06]
					,[StockTransactionLotAttribute07]
					,[StockTransactionLotAttribute08]
					,[StockTransactionLotAttribute09]
					,[StockTransactionLotAttribute10]
					,[StockTransactionEachesPerCase]
					,[StockTransactionInnerPack]
					,[StockTransactionQuantity]
					,[StockTransactionEachesPerPallet]
					,[StockTransactionCube]
					,[StockTransactionGrossWeight]
					,[StockTransactionNetWeight]
					,[StockTransactionOtherUnit1]
					,[StockTransactionOtherUnit2]
					,[PackCode]
					,[StockTransactionUnitOfMeasure]
					,[StockTransactionUnitOfMeasureCalculated]
					,[StockTransactionUnitOfMeasureQuantity]
					,[StockTransactionEffectiveDateTime]
					,[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[OrderID]
					,[OrderDetailLineNumber]
					,[StockTransactionAddDateTime]
					,[StockTransactionAddUserCode]
					,[StockTransactionEditDateTime]
					,[StockTransactionEditUserCode]
					,[StockTransactionQuantityPackages]
					,[StockTransactionQuantityPallets]
					,[StockTransactionReference]
				FROM dbo.StockTransactions WITH (NOLOCK)
				) AS Src
				ON (Dest.[IDStockTransaction] = Src.[IDStockTransaction])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[StockTransactionSystemID] = Src.[StockTransactionSystemID]
						,Dest.[StockTransactionType] = Src.[StockTransactionType]
						,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[LotID] = Src.[LotID]
						,Dest.[LocationIDSource] = Src.[LocationIDSource]
						,Dest.[StockUnitIDSource] = Src.[StockUnitIDSource]
						,Dest.[LocationIDDestination] = Src.[LocationIDDestination]
						,Dest.[StockUnitIDDestination] = Src.[StockUnitIDDestination]
						,Dest.[StockTransactionSourceID] = Src.[StockTransactionSourceID]
						,Dest.[StockTransactionSourceType] = Src.[StockTransactionSourceType]
						,Dest.[StockTransactionStatus] = Src.[StockTransactionStatus]
						,Dest.[StockTransactionLotAttribute01] = Src.[StockTransactionLotAttribute01]
						,Dest.[StockTransactionLotAttribute02] = Src.[StockTransactionLotAttribute02]
						,Dest.[StockTransactionLotAttribute03] = Src.[StockTransactionLotAttribute03]
						,Dest.[StockTransactionLotAttribute04] = Src.[StockTransactionLotAttribute04]
						,Dest.[StockTransactionLotAttribute05] = Src.[StockTransactionLotAttribute05]
						,Dest.[StockTransactionLotAttribute06] = Src.[StockTransactionLotAttribute06]
						,Dest.[StockTransactionLotAttribute07] = Src.[StockTransactionLotAttribute07]
						,Dest.[StockTransactionLotAttribute08] = Src.[StockTransactionLotAttribute08]
						,Dest.[StockTransactionLotAttribute09] = Src.[StockTransactionLotAttribute09]
						,Dest.[StockTransactionLotAttribute10] = Src.[StockTransactionLotAttribute10]
						,Dest.[StockTransactionEachesPerCase] = Src.[StockTransactionEachesPerCase]
						,Dest.[StockTransactionInnerPack] = Src.[StockTransactionInnerPack]
						,Dest.[StockTransactionQuantity] = Src.[StockTransactionQuantity]
						,Dest.[StockTransactionEachesPerPallet] = Src.[StockTransactionEachesPerPallet]
						,Dest.[StockTransactionCube] = Src.[StockTransactionCube]
						,Dest.[StockTransactionGrossWeight] = Src.[StockTransactionGrossWeight]
						,Dest.[StockTransactionNetWeight] = Src.[StockTransactionNetWeight]
						,Dest.[StockTransactionOtherUnit1] = Src.[StockTransactionOtherUnit1]
						,Dest.[StockTransactionOtherUnit2] = Src.[StockTransactionOtherUnit2]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[StockTransactionUnitOfMeasure] = Src.[StockTransactionUnitOfMeasure]
						,Dest.[StockTransactionUnitOfMeasureCalculated] = Src.[StockTransactionUnitOfMeasureCalculated]
						,Dest.[StockTransactionUnitOfMeasureQuantity] = Src.[StockTransactionUnitOfMeasureQuantity]
						,Dest.[StockTransactionEffectiveDateTime] = Src.[StockTransactionEffectiveDateTime]
						,Dest.[ReceiptID] = Src.[ReceiptID]
						,Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
						,Dest.[OrderID] = Src.[OrderID]
						,Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
						,Dest.[StockTransactionAddDateTime] = Src.[StockTransactionAddDateTime]
						,Dest.[StockTransactionAddUserCode] = Src.[StockTransactionAddUserCode]
						,Dest.[StockTransactionEditDateTime] = Src.[StockTransactionEditDateTime]
						,Dest.[StockTransactionEditUserCode] = Src.[StockTransactionEditUserCode]
						,Dest.[StockTransactionQuantityPackages] = Src.[StockTransactionQuantityPackages]
						,Dest.[StockTransactionQuantityPallets] = Src.[StockTransactionQuantityPallets]
						,Dest.[StockTransactionReference] = Src.[StockTransactionReference]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[IDStockTransaction]
						,[StockTransactionSystemID]
						,[StockTransactionType]
						,[CompanyIDStorer]
						,[ProductCode]
						,[LotID]
						,[LocationIDSource]
						,[StockUnitIDSource]
						,[LocationIDDestination]
						,[StockUnitIDDestination]
						,[StockTransactionSourceID]
						,[StockTransactionSourceType]
						,[StockTransactionStatus]
						,[StockTransactionLotAttribute01]
						,[StockTransactionLotAttribute02]
						,[StockTransactionLotAttribute03]
						,[StockTransactionLotAttribute04]
						,[StockTransactionLotAttribute05]
						,[StockTransactionLotAttribute06]
						,[StockTransactionLotAttribute07]
						,[StockTransactionLotAttribute08]
						,[StockTransactionLotAttribute09]
						,[StockTransactionLotAttribute10]
						,[StockTransactionEachesPerCase]
						,[StockTransactionInnerPack]
						,[StockTransactionQuantity]
						,[StockTransactionEachesPerPallet]
						,[StockTransactionCube]
						,[StockTransactionGrossWeight]
						,[StockTransactionNetWeight]
						,[StockTransactionOtherUnit1]
						,[StockTransactionOtherUnit2]
						,[PackCode]
						,[StockTransactionUnitOfMeasure]
						,[StockTransactionUnitOfMeasureCalculated]
						,[StockTransactionUnitOfMeasureQuantity]
						,[StockTransactionEffectiveDateTime]
						,[ReceiptID]
						,[ReceiptDetailLineNumber]
						,[OrderID]
						,[OrderDetailLineNumber]
						,[StockTransactionAddDateTime]
						,[StockTransactionAddUserCode]
						,[StockTransactionEditDateTime]
						,[StockTransactionEditUserCode]
						,[StockTransactionQuantityPackages]
						,[StockTransactionQuantityPallets]
						,[StockTransactionReference]
						)
					VALUES (
						Src.[IDStockTransaction]
						,Src.[StockTransactionSystemID]
						,Src.[StockTransactionType]
						,Src.[CompanyIDStorer]
						,Src.[ProductCode]
						,Src.[LotID]
						,Src.[LocationIDSource]
						,Src.[StockUnitIDSource]
						,Src.[LocationIDDestination]
						,Src.[StockUnitIDDestination]
						,Src.[StockTransactionSourceID]
						,Src.[StockTransactionSourceType]
						,Src.[StockTransactionStatus]
						,Src.[StockTransactionLotAttribute01]
						,Src.[StockTransactionLotAttribute02]
						,Src.[StockTransactionLotAttribute03]
						,Src.[StockTransactionLotAttribute04]
						,Src.[StockTransactionLotAttribute05]
						,Src.[StockTransactionLotAttribute06]
						,Src.[StockTransactionLotAttribute07]
						,Src.[StockTransactionLotAttribute08]
						,Src.[StockTransactionLotAttribute09]
						,Src.[StockTransactionLotAttribute10]
						,Src.[StockTransactionEachesPerCase]
						,Src.[StockTransactionInnerPack]
						,Src.[StockTransactionQuantity]
						,Src.[StockTransactionEachesPerPallet]
						,Src.[StockTransactionCube]
						,Src.[StockTransactionGrossWeight]
						,Src.[StockTransactionNetWeight]
						,Src.[StockTransactionOtherUnit1]
						,Src.[StockTransactionOtherUnit2]
						,Src.[PackCode]
						,Src.[StockTransactionUnitOfMeasure]
						,Src.[StockTransactionUnitOfMeasureCalculated]
						,Src.[StockTransactionUnitOfMeasureQuantity]
						,Src.[StockTransactionEffectiveDateTime]
						,Src.[ReceiptID]
						,Src.[ReceiptDetailLineNumber]
						,Src.[OrderID]
						,Src.[OrderDetailLineNumber]
						,Src.[StockTransactionAddDateTime]
						,Src.[StockTransactionAddUserCode]
						,Src.[StockTransactionEditDateTime]
						,Src.[StockTransactionEditUserCode]
						,Src.[StockTransactionQuantityPackages]
						,Src.[StockTransactionQuantityPallets]
						,Src.[StockTransactionReference]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDStockTransaction] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDStockTransaction] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM [dbo].StockTransactions Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts R WITH (NOLOCK) ON Src.ReceiptID = R.IDReceipt
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.StockTransactions Dest WITH (NOLOCK) ON Src.IDStockTransaction = Dest.IDStockTransaction
					WHERE Dest.StockTransactionEditDateTime < Src.StockTransactionEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[StockTransactionSystemID] = Src.[StockTransactionSystemID]
					,Dest.[StockTransactionType] = Src.[StockTransactionType]
					,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					,Dest.[ProductCode] = Src.[ProductCode]
					,Dest.[LotID] = Src.[LotID]
					,Dest.[LocationIDSource] = Src.[LocationIDSource]
					,Dest.[StockUnitIDSource] = Src.[StockUnitIDSource]
					,Dest.[LocationIDDestination] = Src.[LocationIDDestination]
					,Dest.[StockUnitIDDestination] = Src.[StockUnitIDDestination]
					,Dest.[StockTransactionSourceID] = Src.[StockTransactionSourceID]
					,Dest.[StockTransactionSourceType] = Src.[StockTransactionSourceType]
					,Dest.[StockTransactionStatus] = Src.[StockTransactionStatus]
					,Dest.[StockTransactionLotAttribute01] = Src.[StockTransactionLotAttribute01]
					,Dest.[StockTransactionLotAttribute02] = Src.[StockTransactionLotAttribute02]
					,Dest.[StockTransactionLotAttribute03] = Src.[StockTransactionLotAttribute03]
					,Dest.[StockTransactionLotAttribute04] = Src.[StockTransactionLotAttribute04]
					,Dest.[StockTransactionLotAttribute05] = Src.[StockTransactionLotAttribute05]
					,Dest.[StockTransactionLotAttribute06] = Src.[StockTransactionLotAttribute06]
					,Dest.[StockTransactionLotAttribute07] = Src.[StockTransactionLotAttribute07]
					,Dest.[StockTransactionLotAttribute08] = Src.[StockTransactionLotAttribute08]
					,Dest.[StockTransactionLotAttribute09] = Src.[StockTransactionLotAttribute09]
					,Dest.[StockTransactionLotAttribute10] = Src.[StockTransactionLotAttribute10]
					,Dest.[StockTransactionEachesPerCase] = Src.[StockTransactionEachesPerCase]
					,Dest.[StockTransactionInnerPack] = Src.[StockTransactionInnerPack]
					,Dest.[StockTransactionQuantity] = Src.[StockTransactionQuantity]
					,Dest.[StockTransactionEachesPerPallet] = Src.[StockTransactionEachesPerPallet]
					,Dest.[StockTransactionCube] = Src.[StockTransactionCube]
					,Dest.[StockTransactionGrossWeight] = Src.[StockTransactionGrossWeight]
					,Dest.[StockTransactionNetWeight] = Src.[StockTransactionNetWeight]
					,Dest.[StockTransactionOtherUnit1] = Src.[StockTransactionOtherUnit1]
					,Dest.[StockTransactionOtherUnit2] = Src.[StockTransactionOtherUnit2]
					,Dest.[PackCode] = Src.[PackCode]
					,Dest.[StockTransactionUnitOfMeasure] = Src.[StockTransactionUnitOfMeasure]
					,Dest.[StockTransactionUnitOfMeasureCalculated] = Src.[StockTransactionUnitOfMeasureCalculated]
					,Dest.[StockTransactionUnitOfMeasureQuantity] = Src.[StockTransactionUnitOfMeasureQuantity]
					,Dest.[StockTransactionEffectiveDateTime] = Src.[StockTransactionEffectiveDateTime]
					,Dest.[ReceiptID] = Src.[ReceiptID]
					,Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
					,Dest.[OrderID] = Src.[OrderID]
					,Dest.[OrderDetailLineNumber] = Src.[OrderDetailLineNumber]
					,Dest.[StockTransactionAddDateTime] = Src.[StockTransactionAddDateTime]
					,Dest.[StockTransactionAddUserCode] = Src.[StockTransactionAddUserCode]
					,Dest.[StockTransactionEditDateTime] = Src.[StockTransactionEditDateTime]
					,Dest.[StockTransactionEditUserCode] = Src.[StockTransactionEditUserCode]
					,Dest.[StockTransactionQuantityPackages] = Src.[StockTransactionQuantityPackages]
					,Dest.[StockTransactionQuantityPallets] = Src.[StockTransactionQuantityPallets]
					,Dest.[StockTransactionReference] = Src.[StockTransactionReference]
				OUTPUT 'UPDATE'
					,CAST(Inserted.IDStockTransaction AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.IDStockTransaction AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM [dbo].StockTransactions Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts R WITH (NOLOCK) ON Src.ReceiptID = R.IDReceipt
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.StockTransactions Dest ON Src.IDStockTransaction = Dest.IDStockTransaction
				WHERE Dest.StockTransactionEditDateTime < Src.StockTransactionEditDateTime;
			END;

			WHILE EXISTS (
					SELECT 1
					FROM [dbo].StockTransactions Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts R WITH (NOLOCK) ON Src.ReceiptID = R.IDReceipt
					LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.StockTransactions Dest WITH (NOLOCK) ON Src.IDStockTransaction = Dest.IDStockTransaction
					WHERE Dest.IDStockTransaction IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.StockTransactions (
					[IDStockTransaction]
					,[StockTransactionSystemID]
					,[StockTransactionType]
					,[CompanyIDStorer]
					,[ProductCode]
					,[LotID]
					,[LocationIDSource]
					,[StockUnitIDSource]
					,[LocationIDDestination]
					,[StockUnitIDDestination]
					,[StockTransactionSourceID]
					,[StockTransactionSourceType]
					,[StockTransactionStatus]
					,[StockTransactionLotAttribute01]
					,[StockTransactionLotAttribute02]
					,[StockTransactionLotAttribute03]
					,[StockTransactionLotAttribute04]
					,[StockTransactionLotAttribute05]
					,[StockTransactionLotAttribute06]
					,[StockTransactionLotAttribute07]
					,[StockTransactionLotAttribute08]
					,[StockTransactionLotAttribute09]
					,[StockTransactionLotAttribute10]
					,[StockTransactionEachesPerCase]
					,[StockTransactionInnerPack]
					,[StockTransactionQuantity]
					,[StockTransactionEachesPerPallet]
					,[StockTransactionCube]
					,[StockTransactionGrossWeight]
					,[StockTransactionNetWeight]
					,[StockTransactionOtherUnit1]
					,[StockTransactionOtherUnit2]
					,[PackCode]
					,[StockTransactionUnitOfMeasure]
					,[StockTransactionUnitOfMeasureCalculated]
					,[StockTransactionUnitOfMeasureQuantity]
					,[StockTransactionEffectiveDateTime]
					,[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[OrderID]
					,[OrderDetailLineNumber]
					,[StockTransactionAddDateTime]
					,[StockTransactionAddUserCode]
					,[StockTransactionEditDateTime]
					,[StockTransactionEditUserCode]
					,[StockTransactionQuantityPackages]
					,[StockTransactionQuantityPallets]
					,[StockTransactionReference]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.IDStockTransaction AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[IDStockTransaction]
					,Src.[StockTransactionSystemID]
					,Src.[StockTransactionType]
					,Src.[CompanyIDStorer]
					,Src.[ProductCode]
					,Src.[LotID]
					,Src.[LocationIDSource]
					,Src.[StockUnitIDSource]
					,Src.[LocationIDDestination]
					,Src.[StockUnitIDDestination]
					,Src.[StockTransactionSourceID]
					,Src.[StockTransactionSourceType]
					,Src.[StockTransactionStatus]
					,Src.[StockTransactionLotAttribute01]
					,Src.[StockTransactionLotAttribute02]
					,Src.[StockTransactionLotAttribute03]
					,Src.[StockTransactionLotAttribute04]
					,Src.[StockTransactionLotAttribute05]
					,Src.[StockTransactionLotAttribute06]
					,Src.[StockTransactionLotAttribute07]
					,Src.[StockTransactionLotAttribute08]
					,Src.[StockTransactionLotAttribute09]
					,Src.[StockTransactionLotAttribute10]
					,Src.[StockTransactionEachesPerCase]
					,Src.[StockTransactionInnerPack]
					,Src.[StockTransactionQuantity]
					,Src.[StockTransactionEachesPerPallet]
					,Src.[StockTransactionCube]
					,Src.[StockTransactionGrossWeight]
					,Src.[StockTransactionNetWeight]
					,Src.[StockTransactionOtherUnit1]
					,Src.[StockTransactionOtherUnit2]
					,Src.[PackCode]
					,Src.[StockTransactionUnitOfMeasure]
					,Src.[StockTransactionUnitOfMeasureCalculated]
					,Src.[StockTransactionUnitOfMeasureQuantity]
					,Src.[StockTransactionEffectiveDateTime]
					,Src.[ReceiptID]
					,Src.[ReceiptDetailLineNumber]
					,Src.[OrderID]
					,Src.[OrderDetailLineNumber]
					,Src.[StockTransactionAddDateTime]
					,Src.[StockTransactionAddUserCode]
					,Src.[StockTransactionEditDateTime]
					,Src.[StockTransactionEditUserCode]
					,Src.[StockTransactionQuantityPackages]
					,Src.[StockTransactionQuantityPallets]
					,Src.[StockTransactionReference]
				FROM [dbo].StockTransactions Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Receipts R WITH (NOLOCK) ON Src.ReceiptID = R.IDReceipt
				LEFT JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.StockTransactions Dest WITH (NOLOCK) ON Src.IDStockTransaction = Dest.IDStockTransaction
				WHERE Dest.IDStockTransaction IS NULL;
			END;

			IF OBJECT_ID('tempdb..#tmpStockTransactionIDs') IS NOT NULL
			BEGIN
				TRUNCATE TABLE #tmpStockTransactionIDs;
			END

			--ELSE
			--BEGIN
			--	CREATE TABLE #tmpStockTransactionIDs (StockTransactionID NVARCHAR(50));
			--END
			IF EXISTS (
					SELECT 1
					FROM #tmpTableVal
					)
			BEGIN
				INSERT INTO #tmpStockTransactionIDs
				SELECT InsertedId AS StockTransactionID
				FROM #tmpTableVal
				
				UNION
				
				SELECT DeletedId
				FROM #tmpTableVal;
			END

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') StockTransactions: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `StockTransactions` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--LotAttributes
	SET @CurrentTableName = 'LotAttributes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LotAttributes AS Dest
			USING (
				SELECT LA.[LotID]
					,LA.[LotAttributeValue01]
					,LA.[LotAttributeValue02]
					,LA.[LotAttributeValue03]
					,LA.[LotAttributeValue04]
					,LA.[LotAttributeValue05]
					,LA.[LotAttributeValue06]
					,LA.[LotAttributeValue07]
					,LA.[LotAttributeValue08]
					,LA.[LotAttributeValue09]
					,LA.[LotAttributeValue10]
					,LA.[LotAttributeExternalLotID]
					,LA.[LotAttributeAddDateTime]
					,LA.[LotAttributeAddUserCode]
					,LA.[LotAttributeEditDateTime]
					,LA.[LotAttributeEditUserCode]
					,LA.[LotAttributeValue11]
					,LA.[LotAttributeValue12]
					,LA.[LotAttributeValue13]
					,LA.[LotAttributeValue14]
					,LA.[LotAttributeValue15]
				FROM dbo.LotAttributes LA WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON LA.LotId = L.IDLot
				) AS Src
				ON (Dest.[LotID] = Src.[LotID])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[LotAttributeValue01] = Src.[LotAttributeValue01]
						,Dest.[LotAttributeValue02] = Src.[LotAttributeValue02]
						,Dest.[LotAttributeValue03] = Src.[LotAttributeValue03]
						,Dest.[LotAttributeValue04] = Src.[LotAttributeValue04]
						,Dest.[LotAttributeValue05] = Src.[LotAttributeValue05]
						,Dest.[LotAttributeValue06] = Src.[LotAttributeValue06]
						,Dest.[LotAttributeValue07] = Src.[LotAttributeValue07]
						,Dest.[LotAttributeValue08] = Src.[LotAttributeValue08]
						,Dest.[LotAttributeValue09] = Src.[LotAttributeValue09]
						,Dest.[LotAttributeValue10] = Src.[LotAttributeValue10]
						,Dest.[LotAttributeExternalLotID] = Src.[LotAttributeExternalLotID]
						,Dest.[LotAttributeAddDateTime] = Src.[LotAttributeAddDateTime]
						,Dest.[LotAttributeAddUserCode] = Src.[LotAttributeAddUserCode]
						,Dest.[LotAttributeEditDateTime] = Src.[LotAttributeEditDateTime]
						,Dest.[LotAttributeEditUserCode] = Src.[LotAttributeEditUserCode]
						,Dest.[LotAttributeValue11] = Src.[LotAttributeValue11]
						,Dest.[LotAttributeValue12] = Src.[LotAttributeValue12]
						,Dest.[LotAttributeValue13] = Src.[LotAttributeValue13]
						,Dest.[LotAttributeValue14] = Src.[LotAttributeValue14]
						,Dest.[LotAttributeValue15] = Src.[LotAttributeValue15]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[LotID]
						,[LotAttributeValue01]
						,[LotAttributeValue02]
						,[LotAttributeValue03]
						,[LotAttributeValue04]
						,[LotAttributeValue05]
						,[LotAttributeValue06]
						,[LotAttributeValue07]
						,[LotAttributeValue08]
						,[LotAttributeValue09]
						,[LotAttributeValue10]
						,[LotAttributeExternalLotID]
						,[LotAttributeAddDateTime]
						,[LotAttributeAddUserCode]
						,[LotAttributeEditDateTime]
						,[LotAttributeEditUserCode]
						,[LotAttributeValue11]
						,[LotAttributeValue12]
						,[LotAttributeValue13]
						,[LotAttributeValue14]
						,[LotAttributeValue15]
						)
					VALUES (
						Src.[LotID]
						,Src.[LotAttributeValue01]
						,Src.[LotAttributeValue02]
						,Src.[LotAttributeValue03]
						,Src.[LotAttributeValue04]
						,Src.[LotAttributeValue05]
						,Src.[LotAttributeValue06]
						,Src.[LotAttributeValue07]
						,Src.[LotAttributeValue08]
						,Src.[LotAttributeValue09]
						,Src.[LotAttributeValue10]
						,Src.[LotAttributeExternalLotID]
						,Src.[LotAttributeAddDateTime]
						,Src.[LotAttributeAddUserCode]
						,Src.[LotAttributeEditDateTime]
						,Src.[LotAttributeEditUserCode]
						,Src.[LotAttributeValue11]
						,Src.[LotAttributeValue12]
						,Src.[LotAttributeValue13]
						,Src.[LotAttributeValue14]
						,Src.[LotAttributeValue15]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[LotID] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[LotID] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM dbo.LotAttributes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LotAttributes Dest WITH (NOLOCK) ON Src.LotID = Dest.LotID
					WHERE Dest.[LotAttributeEditDateTime] < Src.[LotAttributeEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[LotAttributeValue01] = Src.[LotAttributeValue01]
					,Dest.[LotAttributeValue02] = Src.[LotAttributeValue02]
					,Dest.[LotAttributeValue03] = Src.[LotAttributeValue03]
					,Dest.[LotAttributeValue04] = Src.[LotAttributeValue04]
					,Dest.[LotAttributeValue05] = Src.[LotAttributeValue05]
					,Dest.[LotAttributeValue06] = Src.[LotAttributeValue06]
					,Dest.[LotAttributeValue07] = Src.[LotAttributeValue07]
					,Dest.[LotAttributeValue08] = Src.[LotAttributeValue08]
					,Dest.[LotAttributeValue09] = Src.[LotAttributeValue09]
					,Dest.[LotAttributeValue10] = Src.[LotAttributeValue10]
					,Dest.[LotAttributeExternalLotID] = Src.[LotAttributeExternalLotID]
					,Dest.[LotAttributeAddDateTime] = Src.[LotAttributeAddDateTime]
					,Dest.[LotAttributeAddUserCode] = Src.[LotAttributeAddUserCode]
					,Dest.[LotAttributeEditDateTime] = Src.[LotAttributeEditDateTime]
					,Dest.[LotAttributeEditUserCode] = Src.[LotAttributeEditUserCode]
					,Dest.[LotAttributeValue11] = Src.[LotAttributeValue11]
					,Dest.[LotAttributeValue12] = Src.[LotAttributeValue12]
					,Dest.[LotAttributeValue13] = Src.[LotAttributeValue13]
					,Dest.[LotAttributeValue14] = Src.[LotAttributeValue14]
					,Dest.[LotAttributeValue15] = Src.[LotAttributeValue15]
				OUTPUT 'UPDATE'
					,CAST(Inserted.LotID AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.LotID AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.LotAttributes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LotAttributes Dest WITH (NOLOCK) ON Src.LotID = Dest.LotID
				WHERE Dest.[LotAttributeEditDateTime] < Src.[LotAttributeEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.LotAttributes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LotAttributes Dest WITH (NOLOCK) ON Src.LotID = Dest.LotID
					WHERE Dest.LotID IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LotAttributes (
					[LotID]
					,[LotAttributeValue01]
					,[LotAttributeValue02]
					,[LotAttributeValue03]
					,[LotAttributeValue04]
					,[LotAttributeValue05]
					,[LotAttributeValue06]
					,[LotAttributeValue07]
					,[LotAttributeValue08]
					,[LotAttributeValue09]
					,[LotAttributeValue10]
					,[LotAttributeExternalLotID]
					,[LotAttributeAddDateTime]
					,[LotAttributeAddUserCode]
					,[LotAttributeEditDateTime]
					,[LotAttributeEditUserCode]
					,[LotAttributeValue11]
					,[LotAttributeValue12]
					,[LotAttributeValue13]
					,[LotAttributeValue14]
					,[LotAttributeValue15]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.LotID AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[LotID]
					,Src.[LotAttributeValue01]
					,Src.[LotAttributeValue02]
					,Src.[LotAttributeValue03]
					,Src.[LotAttributeValue04]
					,Src.[LotAttributeValue05]
					,Src.[LotAttributeValue06]
					,Src.[LotAttributeValue07]
					,Src.[LotAttributeValue08]
					,Src.[LotAttributeValue09]
					,Src.[LotAttributeValue10]
					,Src.[LotAttributeExternalLotID]
					,Src.[LotAttributeAddDateTime]
					,Src.[LotAttributeAddUserCode]
					,Src.[LotAttributeEditDateTime]
					,Src.[LotAttributeEditUserCode]
					,Src.[LotAttributeValue11]
					,Src.[LotAttributeValue12]
					,Src.[LotAttributeValue13]
					,Src.[LotAttributeValue14]
					,Src.[LotAttributeValue15]
				FROM dbo.LotAttributes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LotAttributes Dest WITH (NOLOCK) ON Src.LotID = Dest.LotID
				WHERE Dest.LotID IS NULL;
			END;

			IF OBJECT_ID('tempdb..#tmpLotAttributeIDs') IS NOT NULL
			BEGIN
				TRUNCATE TABLE #tmpLotAttributeIDs;
			END
			ELSE
			BEGIN
				CREATE TABLE #tmpLotAttributeIDs (LotID NVARCHAR(50));
			END

			IF EXISTS (
					SELECT 1
					FROM #tmpTableVal
					)
			BEGIN
				INSERT INTO #tmpLotAttributeIDs
				SELECT InsertedId AS LotID
				FROM #tmpTableVal
				
				UNION
				
				SELECT DeletedId
				FROM #tmpTableVal;
			END

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') LotAttributes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `LotAttributes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--CycleCountDetails
	SET @CurrentTableName = 'CycleCountDetails';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CycleCountDetails AS Dest
			USING (
				SELECT CCD.[CycleCountID]
					,CCD.[IDCycleCountDetail]
					,CCD.[CompanyIDStorer]
					,CCD.[ProductCode]
					,CCD.[LotID]
					,CCD.[LocationID]
					,CCD.[StorageUnitID]
					,CCD.[CycleCountDetailQuantity]
					,CCD.[CycleCountDetailSystemQuantity]
					,CCD.[CycleCountDetailAdjustedQuantity]
					,CCD.[CycleCountDetailStatus]
					,CCD.[CycleCountDetailStatusMessage]
					,CCD.[CycleCountDetailAddDateTime]
					,CCD.[CycleCountDetailAddUserCode]
					,CCD.[CycleCountDetailEditDateTime]
					,CCD.[CycleCountDetailEditUserCode]
				FROM dbo.CycleCountDetails CCD WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON CCD.LotId = L.IDLot
				) AS Src
				ON (Dest.[IDCycleCountDetail] = Src.[IDCycleCountDetail])
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[CycleCountID] = Src.[CycleCountID]
						,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						,Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[LotID] = Src.[LotID]
						,Dest.[LocationID] = Src.[LocationID]
						,Dest.[StorageUnitID] = Src.[StorageUnitID]
						,Dest.[CycleCountDetailQuantity] = Src.[CycleCountDetailQuantity]
						,Dest.[CycleCountDetailSystemQuantity] = Src.[CycleCountDetailSystemQuantity]
						,Dest.[CycleCountDetailAdjustedQuantity] = Src.[CycleCountDetailAdjustedQuantity]
						,Dest.[CycleCountDetailStatus] = Src.[CycleCountDetailStatus]
						,Dest.[CycleCountDetailStatusMessage] = Src.[CycleCountDetailStatusMessage]
						,Dest.[CycleCountDetailAddDateTime] = Src.[CycleCountDetailAddDateTime]
						,Dest.[CycleCountDetailAddUserCode] = Src.[CycleCountDetailAddUserCode]
						,Dest.[CycleCountDetailEditDateTime] = Src.[CycleCountDetailEditDateTime]
						,Dest.[CycleCountDetailEditUserCode] = Src.[CycleCountDetailEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[CycleCountID]
						,[IDCycleCountDetail]
						,[CompanyIDStorer]
						,[ProductCode]
						,[LotID]
						,[LocationID]
						,[StorageUnitID]
						,[CycleCountDetailQuantity]
						,[CycleCountDetailSystemQuantity]
						,[CycleCountDetailAdjustedQuantity]
						,[CycleCountDetailStatus]
						,[CycleCountDetailStatusMessage]
						,[CycleCountDetailAddDateTime]
						,[CycleCountDetailAddUserCode]
						,[CycleCountDetailEditDateTime]
						,[CycleCountDetailEditUserCode]
						)
					VALUES (
						Src.[CycleCountID]
						,Src.[IDCycleCountDetail]
						,Src.[CompanyIDStorer]
						,Src.[ProductCode]
						,Src.[LotID]
						,Src.[LocationID]
						,Src.[StorageUnitID]
						,Src.[CycleCountDetailQuantity]
						,Src.[CycleCountDetailSystemQuantity]
						,Src.[CycleCountDetailAdjustedQuantity]
						,Src.[CycleCountDetailStatus]
						,Src.[CycleCountDetailStatusMessage]
						,Src.[CycleCountDetailAddDateTime]
						,Src.[CycleCountDetailAddUserCode]
						,Src.[CycleCountDetailEditDateTime]
						,Src.[CycleCountDetailEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[IDCycleCountDetail] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[IDCycleCountDetail] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM dbo.CycleCountDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CycleCountDetails Dest WITH (NOLOCK) ON Src.[IDCycleCountDetail] = Dest.[IDCycleCountDetail]
					WHERE Dest.[CycleCountDetailEditDateTime] < Src.[CycleCountDetailEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[CycleCountID] = Src.[CycleCountID]
					,Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					,Dest.[ProductCode] = Src.[ProductCode]
					,Dest.[LotID] = Src.[LotID]
					,Dest.[LocationID] = Src.[LocationID]
					,Dest.[StorageUnitID] = Src.[StorageUnitID]
					,Dest.[CycleCountDetailQuantity] = Src.[CycleCountDetailQuantity]
					,Dest.[CycleCountDetailSystemQuantity] = Src.[CycleCountDetailSystemQuantity]
					,Dest.[CycleCountDetailAdjustedQuantity] = Src.[CycleCountDetailAdjustedQuantity]
					,Dest.[CycleCountDetailStatus] = Src.[CycleCountDetailStatus]
					,Dest.[CycleCountDetailStatusMessage] = Src.[CycleCountDetailStatusMessage]
					,Dest.[CycleCountDetailAddDateTime] = Src.[CycleCountDetailAddDateTime]
					,Dest.[CycleCountDetailAddUserCode] = Src.[CycleCountDetailAddUserCode]
					,Dest.[CycleCountDetailEditDateTime] = Src.[CycleCountDetailEditDateTime]
					,Dest.[CycleCountDetailEditUserCode] = Src.[CycleCountDetailEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[IDCycleCountDetail] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[IDCycleCountDetail] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.CycleCountDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CycleCountDetails Dest WITH (NOLOCK) ON Src.[IDCycleCountDetail] = Dest.[IDCycleCountDetail]
				WHERE Dest.[CycleCountDetailEditDateTime] < Src.[CycleCountDetailEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.CycleCountDetails Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CycleCountDetails Dest WITH (NOLOCK) ON Src.[IDCycleCountDetail] = Dest.[IDCycleCountDetail]
					WHERE Dest.[IDCycleCountDetail] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.CycleCountDetails (
					[CycleCountID]
					,[IDCycleCountDetail]
					,[CompanyIDStorer]
					,[ProductCode]
					,[LotID]
					,[LocationID]
					,[StorageUnitID]
					,[CycleCountDetailQuantity]
					,[CycleCountDetailSystemQuantity]
					,[CycleCountDetailAdjustedQuantity]
					,[CycleCountDetailStatus]
					,[CycleCountDetailStatusMessage]
					,[CycleCountDetailAddDateTime]
					,[CycleCountDetailAddUserCode]
					,[CycleCountDetailEditDateTime]
					,[CycleCountDetailEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[IDCycleCountDetail] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[CycleCountID]
					,Src.[IDCycleCountDetail]
					,Src.[CompanyIDStorer]
					,Src.[ProductCode]
					,Src.[LotID]
					,Src.[LocationID]
					,Src.[StorageUnitID]
					,Src.[CycleCountDetailQuantity]
					,Src.[CycleCountDetailSystemQuantity]
					,Src.[CycleCountDetailAdjustedQuantity]
					,Src.[CycleCountDetailStatus]
					,Src.[CycleCountDetailStatusMessage]
					,Src.[CycleCountDetailAddDateTime]
					,Src.[CycleCountDetailAddUserCode]
					,Src.[CycleCountDetailEditDateTime]
					,Src.[CycleCountDetailEditUserCode]
				FROM dbo.CycleCountDetails Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.CycleCountDetails Dest WITH (NOLOCK) ON Src.[IDCycleCountDetail] = Dest.[IDCycleCountDetail]
				WHERE Dest.[IDCycleCountDetail] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') CycleCountDetails: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `CycleCountDetails` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--LinkLotsLocationsStorageUnits
	SET @CurrentTableName = 'LinkLotsLocationsStorageUnits';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LinkLotsLocationsStorageUnits AS Dest
			USING (
				SELECT LLLSU.[LotID]
					,LLLSU.[LocationID]
					,LLLSU.[StorageUnitID]
					,LLLSU.[LinkLotLocationStorageUnitQuantity]
					,LLLSU.[LinkLotLocationStorageUnitQuantityAllocated]
					,LLLSU.[LinkLotLocationStorageUnitQuantityPicked]
					,LLLSU.[LinkLotLocationStorageUnitQuantityExpected]
					,LLLSU.[LinkLotLocationStorageUnitQuantityPickingProcess]
					,LLLSU.[LinkLotLocationStorageUnitPendingMoveIn]
					,LLLSU.[LinkLotLocationStorageUnitArchiveQuantity]
					,LLLSU.[LinkLotLocationStorageUnitArchiveDateTime]
					,LLLSU.[LinkLotLocationStorageUnitStatus]
					,LLLSU.[LinkLotLocationStorageUnitAddDateTime]
					,LLLSU.[LinkLotLocationStorageUnitAddUserCode]
					,LLLSU.[LinkLotLocationStorageUnitEditDateTime]
					,LLLSU.[LinkLotLocationStorageUnitEditUserCode]
					,LLLSU.[ReceiptID]
					,LLLSU.[ReceiptDetailLineNumber]
					,LLLSU.[LinkLotLocationStorageUnitUnitOfMeasure]
					,LLLSU.[LinkLotLocationStorageUnitGrossWeight]
					,LLLSU.[LinkLotLocationStorageUnitNetWeight]
					,LLLSU.[LinkLotLocationStorageUnitVolume]
					,LLLSU.[LinkLotLocationStorageUnitInStockDateTime]
					,LLLSU.[LinkLotLocationStorageUnitGoodsID]
					,LLLSU.[LinkLotLocationStorageUnitSearchID]
					,LLLSU.[LinkLotLocationStorageUnitProcessCode]
					,LLLSU.[LinkLotLocationStorageUnitExpiryDate]
					,LLLSU.[LinkLotLocationStorageUnitDiameter]
					,LLLSU.[LinkLotLocationStorageUnitHeight]
					,LLLSU.[LinkLotLocationStorageUnitLength]
					,LLLSU.[LinkLotLocationStorageUnitWidth]
					,LLLSU.[LinkLotLocationStorageUnitBlockReason]
					,LLLSU.[LinkLotLocationStorageUnitDiscrepancyNote]
					,LLLSU.[LinkLotLocationStorageUnitLogisticsNote]
					,LLLSU.[LinkLotLocationStorageUnitUserDefinedText01]
					,LLLSU.[LinkLotLocationStorageUnitUserDefinedText02]
					,LLLSU.[LinkLotLocationStorageUnitUserDefinedText03]
					,LLLSU.[LinkLotLocationStorageUnitUserDefinedText04]
					,LLLSU.[LinkLotLocationStorageUnitUserDefinedText05]
					,LLLSU.[LinkLotLocationStorageUnitChargeableWeight]
					,LLLSU.[LinkLotLocationStorageUnitQuantityPackages]
					,LLLSU.[LinkLotLocationStorageUnitQuantityPallets]
					,LLLSU.[LinkLotLocationStorageUnitThickness]
					,LLLSU.[LinkLotLocationStorageUnitTransit]
				FROM dbo.LinkLotsLocationsStorageUnits LLLSU WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON LLLSU.LotId = L.IDLot
				) AS Src
				ON (
						Dest.[LotID] = Src.[LotID]
						AND Dest.[LocationID] = Src.[LocationID]
						AND Dest.[StorageUnitID] = Src.[StorageUnitID]
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[LinkLotLocationStorageUnitQuantity] = Src.[LinkLotLocationStorageUnitQuantity]
						,Dest.[LinkLotLocationStorageUnitQuantityAllocated] = Src.[LinkLotLocationStorageUnitQuantityAllocated]
						,Dest.[LinkLotLocationStorageUnitQuantityPicked] = Src.[LinkLotLocationStorageUnitQuantityPicked]
						,Dest.[LinkLotLocationStorageUnitQuantityExpected] = Src.[LinkLotLocationStorageUnitQuantityExpected]
						,Dest.[LinkLotLocationStorageUnitQuantityPickingProcess] = Src.[LinkLotLocationStorageUnitQuantityPickingProcess]
						,Dest.[LinkLotLocationStorageUnitPendingMoveIn] = Src.[LinkLotLocationStorageUnitPendingMoveIn]
						,Dest.[LinkLotLocationStorageUnitArchiveQuantity] = Src.[LinkLotLocationStorageUnitArchiveQuantity]
						,Dest.[LinkLotLocationStorageUnitArchiveDateTime] = Src.[LinkLotLocationStorageUnitArchiveDateTime]
						,Dest.[LinkLotLocationStorageUnitStatus] = Src.[LinkLotLocationStorageUnitStatus]
						,Dest.[LinkLotLocationStorageUnitAddDateTime] = Src.[LinkLotLocationStorageUnitAddDateTime]
						,Dest.[LinkLotLocationStorageUnitAddUserCode] = Src.[LinkLotLocationStorageUnitAddUserCode]
						,Dest.[LinkLotLocationStorageUnitEditDateTime] = Src.[LinkLotLocationStorageUnitEditDateTime]
						,Dest.[LinkLotLocationStorageUnitEditUserCode] = Src.[LinkLotLocationStorageUnitEditUserCode]
						,Dest.[ReceiptID] = Src.[ReceiptID]
						,Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
						,Dest.[LinkLotLocationStorageUnitUnitOfMeasure] = Src.[LinkLotLocationStorageUnitUnitOfMeasure]
						,Dest.[LinkLotLocationStorageUnitGrossWeight] = Src.[LinkLotLocationStorageUnitGrossWeight]
						,Dest.[LinkLotLocationStorageUnitNetWeight] = Src.[LinkLotLocationStorageUnitNetWeight]
						,Dest.[LinkLotLocationStorageUnitVolume] = Src.[LinkLotLocationStorageUnitVolume]
						,Dest.[LinkLotLocationStorageUnitInStockDateTime] = Src.[LinkLotLocationStorageUnitInStockDateTime]
						,Dest.[LinkLotLocationStorageUnitGoodsID] = Src.[LinkLotLocationStorageUnitGoodsID]
						,Dest.[LinkLotLocationStorageUnitSearchID] = Src.[LinkLotLocationStorageUnitSearchID]
						,Dest.[LinkLotLocationStorageUnitProcessCode] = Src.[LinkLotLocationStorageUnitProcessCode]
						,Dest.[LinkLotLocationStorageUnitExpiryDate] = Src.[LinkLotLocationStorageUnitExpiryDate]
						,Dest.[LinkLotLocationStorageUnitDiameter] = Src.[LinkLotLocationStorageUnitDiameter]
						,Dest.[LinkLotLocationStorageUnitHeight] = Src.[LinkLotLocationStorageUnitHeight]
						,Dest.[LinkLotLocationStorageUnitLength] = Src.[LinkLotLocationStorageUnitLength]
						,Dest.[LinkLotLocationStorageUnitWidth] = Src.[LinkLotLocationStorageUnitWidth]
						,Dest.[LinkLotLocationStorageUnitBlockReason] = Src.[LinkLotLocationStorageUnitBlockReason]
						,Dest.[LinkLotLocationStorageUnitDiscrepancyNote] = Src.[LinkLotLocationStorageUnitDiscrepancyNote]
						,Dest.[LinkLotLocationStorageUnitLogisticsNote] = Src.[LinkLotLocationStorageUnitLogisticsNote]
						,Dest.[LinkLotLocationStorageUnitUserDefinedText01] = Src.[LinkLotLocationStorageUnitUserDefinedText01]
						,Dest.[LinkLotLocationStorageUnitUserDefinedText02] = Src.[LinkLotLocationStorageUnitUserDefinedText02]
						,Dest.[LinkLotLocationStorageUnitUserDefinedText03] = Src.[LinkLotLocationStorageUnitUserDefinedText03]
						,Dest.[LinkLotLocationStorageUnitUserDefinedText04] = Src.[LinkLotLocationStorageUnitUserDefinedText04]
						,Dest.[LinkLotLocationStorageUnitUserDefinedText05] = Src.[LinkLotLocationStorageUnitUserDefinedText05]
						,Dest.[LinkLotLocationStorageUnitChargeableWeight] = Src.[LinkLotLocationStorageUnitChargeableWeight]
						,Dest.[LinkLotLocationStorageUnitQuantityPackages] = Src.[LinkLotLocationStorageUnitQuantityPackages]
						,Dest.[LinkLotLocationStorageUnitQuantityPallets] = Src.[LinkLotLocationStorageUnitQuantityPallets]
						,Dest.[LinkLotLocationStorageUnitThickness] = Src.[LinkLotLocationStorageUnitThickness]
						,Dest.[LinkLotLocationStorageUnitTransit] = Src.[LinkLotLocationStorageUnitTransit]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[LotID]
						,[LocationID]
						,[StorageUnitID]
						,[LinkLotLocationStorageUnitQuantity]
						,[LinkLotLocationStorageUnitQuantityAllocated]
						,[LinkLotLocationStorageUnitQuantityPicked]
						,[LinkLotLocationStorageUnitQuantityExpected]
						,[LinkLotLocationStorageUnitQuantityPickingProcess]
						,[LinkLotLocationStorageUnitPendingMoveIn]
						,[LinkLotLocationStorageUnitArchiveQuantity]
						,[LinkLotLocationStorageUnitArchiveDateTime]
						,[LinkLotLocationStorageUnitStatus]
						,[LinkLotLocationStorageUnitAddDateTime]
						,[LinkLotLocationStorageUnitAddUserCode]
						,[LinkLotLocationStorageUnitEditDateTime]
						,[LinkLotLocationStorageUnitEditUserCode]
						,[ReceiptID]
						,[ReceiptDetailLineNumber]
						,[LinkLotLocationStorageUnitUnitOfMeasure]
						,[LinkLotLocationStorageUnitGrossWeight]
						,[LinkLotLocationStorageUnitNetWeight]
						,[LinkLotLocationStorageUnitVolume]
						,[LinkLotLocationStorageUnitInStockDateTime]
						,[LinkLotLocationStorageUnitGoodsID]
						,[LinkLotLocationStorageUnitSearchID]
						,[LinkLotLocationStorageUnitProcessCode]
						,[LinkLotLocationStorageUnitExpiryDate]
						,[LinkLotLocationStorageUnitDiameter]
						,[LinkLotLocationStorageUnitHeight]
						,[LinkLotLocationStorageUnitLength]
						,[LinkLotLocationStorageUnitWidth]
						,[LinkLotLocationStorageUnitBlockReason]
						,[LinkLotLocationStorageUnitDiscrepancyNote]
						,[LinkLotLocationStorageUnitLogisticsNote]
						,[LinkLotLocationStorageUnitUserDefinedText01]
						,[LinkLotLocationStorageUnitUserDefinedText02]
						,[LinkLotLocationStorageUnitUserDefinedText03]
						,[LinkLotLocationStorageUnitUserDefinedText04]
						,[LinkLotLocationStorageUnitUserDefinedText05]
						,[LinkLotLocationStorageUnitChargeableWeight]
						,[LinkLotLocationStorageUnitQuantityPackages]
						,[LinkLotLocationStorageUnitQuantityPallets]
						,[LinkLotLocationStorageUnitThickness]
						,[LinkLotLocationStorageUnitTransit]
						)
					VALUES (
						Src.[LotID]
						,Src.[LocationID]
						,Src.[StorageUnitID]
						,Src.[LinkLotLocationStorageUnitQuantity]
						,Src.[LinkLotLocationStorageUnitQuantityAllocated]
						,Src.[LinkLotLocationStorageUnitQuantityPicked]
						,Src.[LinkLotLocationStorageUnitQuantityExpected]
						,Src.[LinkLotLocationStorageUnitQuantityPickingProcess]
						,Src.[LinkLotLocationStorageUnitPendingMoveIn]
						,Src.[LinkLotLocationStorageUnitArchiveQuantity]
						,Src.[LinkLotLocationStorageUnitArchiveDateTime]
						,Src.[LinkLotLocationStorageUnitStatus]
						,Src.[LinkLotLocationStorageUnitAddDateTime]
						,Src.[LinkLotLocationStorageUnitAddUserCode]
						,Src.[LinkLotLocationStorageUnitEditDateTime]
						,Src.[LinkLotLocationStorageUnitEditUserCode]
						,Src.[ReceiptID]
						,Src.[ReceiptDetailLineNumber]
						,Src.[LinkLotLocationStorageUnitUnitOfMeasure]
						,Src.[LinkLotLocationStorageUnitGrossWeight]
						,Src.[LinkLotLocationStorageUnitNetWeight]
						,Src.[LinkLotLocationStorageUnitVolume]
						,Src.[LinkLotLocationStorageUnitInStockDateTime]
						,Src.[LinkLotLocationStorageUnitGoodsID]
						,Src.[LinkLotLocationStorageUnitSearchID]
						,Src.[LinkLotLocationStorageUnitProcessCode]
						,Src.[LinkLotLocationStorageUnitExpiryDate]
						,Src.[LinkLotLocationStorageUnitDiameter]
						,Src.[LinkLotLocationStorageUnitHeight]
						,Src.[LinkLotLocationStorageUnitLength]
						,Src.[LinkLotLocationStorageUnitWidth]
						,Src.[LinkLotLocationStorageUnitBlockReason]
						,Src.[LinkLotLocationStorageUnitDiscrepancyNote]
						,Src.[LinkLotLocationStorageUnitLogisticsNote]
						,Src.[LinkLotLocationStorageUnitUserDefinedText01]
						,Src.[LinkLotLocationStorageUnitUserDefinedText02]
						,Src.[LinkLotLocationStorageUnitUserDefinedText03]
						,Src.[LinkLotLocationStorageUnitUserDefinedText04]
						,Src.[LinkLotLocationStorageUnitUserDefinedText05]
						,Src.[LinkLotLocationStorageUnitChargeableWeight]
						,Src.[LinkLotLocationStorageUnitQuantityPackages]
						,Src.[LinkLotLocationStorageUnitQuantityPallets]
						,Src.[LinkLotLocationStorageUnitThickness]
						,Src.[LinkLotLocationStorageUnitTransit]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[LotID] AS VARCHAR(50)) + CAST(Inserted.[LocationID] AS VARCHAR(50)) + CAST(Inserted.[StorageUnitID] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[LotID] AS VARCHAR(50)) + CAST(Deleted.[LocationID] AS VARCHAR(50)) + CAST(Deleted.[StorageUnitID] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM dbo.LinkLotsLocationsStorageUnits Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LinkLotsLocationsStorageUnits Dest ON Dest.[LotID] = Src.[LotID]
						AND Dest.[LocationID] = Src.[LocationID]
						AND Dest.[StorageUnitID] = Src.[StorageUnitID]
					WHERE Dest.[LinkLotLocationStorageUnitEditDateTime] < Src.[LinkLotLocationStorageUnitEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[LinkLotLocationStorageUnitQuantity] = Src.[LinkLotLocationStorageUnitQuantity]
					,Dest.[LinkLotLocationStorageUnitQuantityAllocated] = Src.[LinkLotLocationStorageUnitQuantityAllocated]
					,Dest.[LinkLotLocationStorageUnitQuantityPicked] = Src.[LinkLotLocationStorageUnitQuantityPicked]
					,Dest.[LinkLotLocationStorageUnitQuantityExpected] = Src.[LinkLotLocationStorageUnitQuantityExpected]
					,Dest.[LinkLotLocationStorageUnitQuantityPickingProcess] = Src.[LinkLotLocationStorageUnitQuantityPickingProcess]
					,Dest.[LinkLotLocationStorageUnitPendingMoveIn] = Src.[LinkLotLocationStorageUnitPendingMoveIn]
					,Dest.[LinkLotLocationStorageUnitArchiveQuantity] = Src.[LinkLotLocationStorageUnitArchiveQuantity]
					,Dest.[LinkLotLocationStorageUnitArchiveDateTime] = Src.[LinkLotLocationStorageUnitArchiveDateTime]
					,Dest.[LinkLotLocationStorageUnitStatus] = Src.[LinkLotLocationStorageUnitStatus]
					,Dest.[LinkLotLocationStorageUnitAddDateTime] = Src.[LinkLotLocationStorageUnitAddDateTime]
					,Dest.[LinkLotLocationStorageUnitAddUserCode] = Src.[LinkLotLocationStorageUnitAddUserCode]
					,Dest.[LinkLotLocationStorageUnitEditDateTime] = Src.[LinkLotLocationStorageUnitEditDateTime]
					,Dest.[LinkLotLocationStorageUnitEditUserCode] = Src.[LinkLotLocationStorageUnitEditUserCode]
					,Dest.[ReceiptID] = Src.[ReceiptID]
					,Dest.[ReceiptDetailLineNumber] = Src.[ReceiptDetailLineNumber]
					,Dest.[LinkLotLocationStorageUnitUnitOfMeasure] = Src.[LinkLotLocationStorageUnitUnitOfMeasure]
					,Dest.[LinkLotLocationStorageUnitGrossWeight] = Src.[LinkLotLocationStorageUnitGrossWeight]
					,Dest.[LinkLotLocationStorageUnitNetWeight] = Src.[LinkLotLocationStorageUnitNetWeight]
					,Dest.[LinkLotLocationStorageUnitVolume] = Src.[LinkLotLocationStorageUnitVolume]
					,Dest.[LinkLotLocationStorageUnitInStockDateTime] = Src.[LinkLotLocationStorageUnitInStockDateTime]
					,Dest.[LinkLotLocationStorageUnitGoodsID] = Src.[LinkLotLocationStorageUnitGoodsID]
					,Dest.[LinkLotLocationStorageUnitSearchID] = Src.[LinkLotLocationStorageUnitSearchID]
					,Dest.[LinkLotLocationStorageUnitProcessCode] = Src.[LinkLotLocationStorageUnitProcessCode]
					,Dest.[LinkLotLocationStorageUnitExpiryDate] = Src.[LinkLotLocationStorageUnitExpiryDate]
					,Dest.[LinkLotLocationStorageUnitDiameter] = Src.[LinkLotLocationStorageUnitDiameter]
					,Dest.[LinkLotLocationStorageUnitHeight] = Src.[LinkLotLocationStorageUnitHeight]
					,Dest.[LinkLotLocationStorageUnitLength] = Src.[LinkLotLocationStorageUnitLength]
					,Dest.[LinkLotLocationStorageUnitWidth] = Src.[LinkLotLocationStorageUnitWidth]
					,Dest.[LinkLotLocationStorageUnitBlockReason] = Src.[LinkLotLocationStorageUnitBlockReason]
					,Dest.[LinkLotLocationStorageUnitDiscrepancyNote] = Src.[LinkLotLocationStorageUnitDiscrepancyNote]
					,Dest.[LinkLotLocationStorageUnitLogisticsNote] = Src.[LinkLotLocationStorageUnitLogisticsNote]
					,Dest.[LinkLotLocationStorageUnitUserDefinedText01] = Src.[LinkLotLocationStorageUnitUserDefinedText01]
					,Dest.[LinkLotLocationStorageUnitUserDefinedText02] = Src.[LinkLotLocationStorageUnitUserDefinedText02]
					,Dest.[LinkLotLocationStorageUnitUserDefinedText03] = Src.[LinkLotLocationStorageUnitUserDefinedText03]
					,Dest.[LinkLotLocationStorageUnitUserDefinedText04] = Src.[LinkLotLocationStorageUnitUserDefinedText04]
					,Dest.[LinkLotLocationStorageUnitUserDefinedText05] = Src.[LinkLotLocationStorageUnitUserDefinedText05]
					,Dest.[LinkLotLocationStorageUnitChargeableWeight] = Src.[LinkLotLocationStorageUnitChargeableWeight]
					,Dest.[LinkLotLocationStorageUnitQuantityPackages] = Src.[LinkLotLocationStorageUnitQuantityPackages]
					,Dest.[LinkLotLocationStorageUnitQuantityPallets] = Src.[LinkLotLocationStorageUnitQuantityPallets]
					,Dest.[LinkLotLocationStorageUnitThickness] = Src.[LinkLotLocationStorageUnitThickness]
					,Dest.[LinkLotLocationStorageUnitTransit] = Src.[LinkLotLocationStorageUnitTransit]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[LotID] AS VARCHAR(50)) + CAST(Inserted.[LocationID] AS VARCHAR(50)) + CAST(Inserted.[StorageUnitID] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[LotID] AS VARCHAR(50)) + CAST(Deleted.[LocationID] AS VARCHAR(50)) + CAST(Deleted.[StorageUnitID] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.LinkLotsLocationsStorageUnits Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LinkLotsLocationsStorageUnits Dest ON Dest.[LotID] = Src.[LotID]
					AND Dest.[LocationID] = Src.[LocationID]
					AND Dest.[StorageUnitID] = Src.[StorageUnitID]
				WHERE Dest.[LinkLotLocationStorageUnitEditDateTime] < Src.[LinkLotLocationStorageUnitEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.LinkLotsLocationsStorageUnits Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LinkLotsLocationsStorageUnits Dest ON Dest.[LotID] = Src.[LotID]
						AND Dest.[LocationID] = Src.[LocationID]
						AND Dest.[StorageUnitID] = Src.[StorageUnitID]
					WHERE Dest.[LotID] IS NULL
						AND Dest.[LocationID] IS NULL
						AND Dest.[StorageUnitID] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.LinkLotsLocationsStorageUnits (
					[LotID]
					,[LocationID]
					,[StorageUnitID]
					,[LinkLotLocationStorageUnitQuantity]
					,[LinkLotLocationStorageUnitQuantityAllocated]
					,[LinkLotLocationStorageUnitQuantityPicked]
					,[LinkLotLocationStorageUnitQuantityExpected]
					,[LinkLotLocationStorageUnitQuantityPickingProcess]
					,[LinkLotLocationStorageUnitPendingMoveIn]
					,[LinkLotLocationStorageUnitArchiveQuantity]
					,[LinkLotLocationStorageUnitArchiveDateTime]
					,[LinkLotLocationStorageUnitStatus]
					,[LinkLotLocationStorageUnitAddDateTime]
					,[LinkLotLocationStorageUnitAddUserCode]
					,[LinkLotLocationStorageUnitEditDateTime]
					,[LinkLotLocationStorageUnitEditUserCode]
					,[ReceiptID]
					,[ReceiptDetailLineNumber]
					,[LinkLotLocationStorageUnitUnitOfMeasure]
					,[LinkLotLocationStorageUnitGrossWeight]
					,[LinkLotLocationStorageUnitNetWeight]
					,[LinkLotLocationStorageUnitVolume]
					,[LinkLotLocationStorageUnitInStockDateTime]
					,[LinkLotLocationStorageUnitGoodsID]
					,[LinkLotLocationStorageUnitSearchID]
					,[LinkLotLocationStorageUnitProcessCode]
					,[LinkLotLocationStorageUnitExpiryDate]
					,[LinkLotLocationStorageUnitDiameter]
					,[LinkLotLocationStorageUnitHeight]
					,[LinkLotLocationStorageUnitLength]
					,[LinkLotLocationStorageUnitWidth]
					,[LinkLotLocationStorageUnitBlockReason]
					,[LinkLotLocationStorageUnitDiscrepancyNote]
					,[LinkLotLocationStorageUnitLogisticsNote]
					,[LinkLotLocationStorageUnitUserDefinedText01]
					,[LinkLotLocationStorageUnitUserDefinedText02]
					,[LinkLotLocationStorageUnitUserDefinedText03]
					,[LinkLotLocationStorageUnitUserDefinedText04]
					,[LinkLotLocationStorageUnitUserDefinedText05]
					,[LinkLotLocationStorageUnitChargeableWeight]
					,[LinkLotLocationStorageUnitQuantityPackages]
					,[LinkLotLocationStorageUnitQuantityPallets]
					,[LinkLotLocationStorageUnitThickness]
					,[LinkLotLocationStorageUnitTransit]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[LotID] AS VARCHAR(50)) + CAST(Inserted.[LocationID] AS VARCHAR(50)) + CAST(Inserted.[StorageUnitID] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[LotID]
					,Src.[LocationID]
					,Src.[StorageUnitID]
					,Src.[LinkLotLocationStorageUnitQuantity]
					,Src.[LinkLotLocationStorageUnitQuantityAllocated]
					,Src.[LinkLotLocationStorageUnitQuantityPicked]
					,Src.[LinkLotLocationStorageUnitQuantityExpected]
					,Src.[LinkLotLocationStorageUnitQuantityPickingProcess]
					,Src.[LinkLotLocationStorageUnitPendingMoveIn]
					,Src.[LinkLotLocationStorageUnitArchiveQuantity]
					,Src.[LinkLotLocationStorageUnitArchiveDateTime]
					,Src.[LinkLotLocationStorageUnitStatus]
					,Src.[LinkLotLocationStorageUnitAddDateTime]
					,Src.[LinkLotLocationStorageUnitAddUserCode]
					,Src.[LinkLotLocationStorageUnitEditDateTime]
					,Src.[LinkLotLocationStorageUnitEditUserCode]
					,Src.[ReceiptID]
					,Src.[ReceiptDetailLineNumber]
					,Src.[LinkLotLocationStorageUnitUnitOfMeasure]
					,Src.[LinkLotLocationStorageUnitGrossWeight]
					,Src.[LinkLotLocationStorageUnitNetWeight]
					,Src.[LinkLotLocationStorageUnitVolume]
					,Src.[LinkLotLocationStorageUnitInStockDateTime]
					,Src.[LinkLotLocationStorageUnitGoodsID]
					,Src.[LinkLotLocationStorageUnitSearchID]
					,Src.[LinkLotLocationStorageUnitProcessCode]
					,Src.[LinkLotLocationStorageUnitExpiryDate]
					,Src.[LinkLotLocationStorageUnitDiameter]
					,Src.[LinkLotLocationStorageUnitHeight]
					,Src.[LinkLotLocationStorageUnitLength]
					,Src.[LinkLotLocationStorageUnitWidth]
					,Src.[LinkLotLocationStorageUnitBlockReason]
					,Src.[LinkLotLocationStorageUnitDiscrepancyNote]
					,Src.[LinkLotLocationStorageUnitLogisticsNote]
					,Src.[LinkLotLocationStorageUnitUserDefinedText01]
					,Src.[LinkLotLocationStorageUnitUserDefinedText02]
					,Src.[LinkLotLocationStorageUnitUserDefinedText03]
					,Src.[LinkLotLocationStorageUnitUserDefinedText04]
					,Src.[LinkLotLocationStorageUnitUserDefinedText05]
					,Src.[LinkLotLocationStorageUnitChargeableWeight]
					,Src.[LinkLotLocationStorageUnitQuantityPackages]
					,Src.[LinkLotLocationStorageUnitQuantityPallets]
					,Src.[LinkLotLocationStorageUnitThickness]
					,Src.[LinkLotLocationStorageUnitTransit]
				FROM dbo.LinkLotsLocationsStorageUnits Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Lots L WITH (NOLOCK) ON Src.LotId = L.IDLot
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.LinkLotsLocationsStorageUnits Dest ON Dest.[LotID] = Src.[LotID]
					AND Dest.[LocationID] = Src.[LocationID]
					AND Dest.[StorageUnitID] = Src.[StorageUnitID]
				WHERE Dest.[LotID] IS NULL
					AND Dest.[LocationID] IS NULL
					AND Dest.[StorageUnitID] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') LinkLotsLocationsStorageUnits: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `LinkLotsLocationsStorageUnits` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--BillsOfMaterial
	SET @CurrentTableName = 'BillsOfMaterial';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.BillsOfMaterial AS Dest
			USING (
				SELECT BOM.[CompanyIDStorer]
					,BOM.[ProductCodeMaster]
					,BOM.[ProductCodeComponent]
					,BOM.[BillOfMaterialSequence]
					,BOM.[BillOfMaterialBillOfMaterialOnly]
					,BOM.[BillOfMaterialQuantity]
					,BOM.[BillOfMaterialAddDateTime]
					,BOM.[BillOfMaterialAddUserCode]
					,BOM.[BillOfMaterialEditDateTime]
					,BOM.[BillOfMaterialEditUserCode]
					,BOM.[BillOfMaterialNotes]
				FROM dbo.BillsOfMaterial BOM WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON BOM.[ProductCodeMaster] = P.[ProductCode]
					AND BOM.[CompanyIDStorer] = P.[CompanyIDStorer]
				) AS Src
				ON (
						Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						AND Dest.[ProductCodeMaster] = Src.[ProductCodeMaster]
						AND Dest.[ProductCodeComponent] = Src.[ProductCodeComponent]
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[BillOfMaterialSequence] = Src.[BillOfMaterialSequence]
						,Dest.[BillOfMaterialBillOfMaterialOnly] = Src.[BillOfMaterialBillOfMaterialOnly]
						,Dest.[BillOfMaterialQuantity] = Src.[BillOfMaterialQuantity]
						,Dest.[BillOfMaterialAddDateTime] = Src.[BillOfMaterialAddDateTime]
						,Dest.[BillOfMaterialAddUserCode] = Src.[BillOfMaterialAddUserCode]
						,Dest.[BillOfMaterialEditDateTime] = Src.[BillOfMaterialEditDateTime]
						,Dest.[BillOfMaterialEditUserCode] = Src.[BillOfMaterialEditUserCode]
						,Dest.[BillOfMaterialNotes] = Src.[BillOfMaterialNotes]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[CompanyIDStorer]
						,[ProductCodeMaster]
						,[ProductCodeComponent]
						,[BillOfMaterialSequence]
						,[BillOfMaterialBillOfMaterialOnly]
						,[BillOfMaterialQuantity]
						,[BillOfMaterialAddDateTime]
						,[BillOfMaterialAddUserCode]
						,[BillOfMaterialEditDateTime]
						,[BillOfMaterialEditUserCode]
						,[BillOfMaterialNotes]
						)
					VALUES (
						Src.[CompanyIDStorer]
						,Src.[ProductCodeMaster]
						,Src.[ProductCodeComponent]
						,Src.[BillOfMaterialSequence]
						,Src.[BillOfMaterialBillOfMaterialOnly]
						,Src.[BillOfMaterialQuantity]
						,Src.[BillOfMaterialAddDateTime]
						,Src.[BillOfMaterialAddUserCode]
						,Src.[BillOfMaterialEditDateTime]
						,Src.[BillOfMaterialEditUserCode]
						,Src.[BillOfMaterialNotes]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Inserted.[ProductCodeMaster] AS VARCHAR(50)) + CAST(Inserted.[ProductCodeComponent] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Deleted.[ProductCodeMaster] AS VARCHAR(50)) + CAST(Deleted.[ProductCodeComponent] AS VARCHAR(50)) AS 'Deleted'
			--,CAST(Deleted.[LotID] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM dbo.BillsOfMaterial Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCodeMaster] = P.[ProductCode]
						AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillsOfMaterial Dest WITH (NOLOCK) ON Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						AND Dest.[ProductCodeMaster] = Src.[ProductCodeMaster]
						AND Dest.[ProductCodeComponent] = Src.[ProductCodeComponent]
					WHERE Dest.BillOfMaterialEditDateTime < Src.BillOfMaterialEditDateTime
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[BillOfMaterialSequence] = Src.[BillOfMaterialSequence]
					,Dest.[BillOfMaterialBillOfMaterialOnly] = Src.[BillOfMaterialBillOfMaterialOnly]
					,Dest.[BillOfMaterialQuantity] = Src.[BillOfMaterialQuantity]
					,Dest.[BillOfMaterialAddDateTime] = Src.[BillOfMaterialAddDateTime]
					,Dest.[BillOfMaterialAddUserCode] = Src.[BillOfMaterialAddUserCode]
					,Dest.[BillOfMaterialEditDateTime] = Src.[BillOfMaterialEditDateTime]
					,Dest.[BillOfMaterialEditUserCode] = Src.[BillOfMaterialEditUserCode]
					,Dest.[BillOfMaterialNotes] = Src.[BillOfMaterialNotes]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Inserted.[ProductCodeMaster] AS VARCHAR(50)) + CAST(Inserted.[ProductCodeComponent] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Deleted.[ProductCodeMaster] AS VARCHAR(50)) + CAST(Deleted.[ProductCodeComponent] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.BillsOfMaterial Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCodeMaster] = P.[ProductCode]
					AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillsOfMaterial Dest WITH (NOLOCK) ON Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					AND Dest.[ProductCodeMaster] = Src.[ProductCodeMaster]
					AND Dest.[ProductCodeComponent] = Src.[ProductCodeComponent]
				WHERE Dest.BillOfMaterialEditDateTime < Src.BillOfMaterialEditDateTime
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.BillsOfMaterial Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCodeMaster] = P.[ProductCode]
						AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillsOfMaterial Dest WITH (NOLOCK) ON Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						AND Dest.[ProductCodeMaster] = Src.[ProductCodeMaster]
						AND Dest.[ProductCodeComponent] = Src.[ProductCodeComponent]
					WHERE Dest.[CompanyIDStorer] IS NULL
						AND Dest.[ProductCodeMaster] IS NULL
						AND Dest.[ProductCodeComponent] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.BillsOfMaterial (
					[CompanyIDStorer]
					,[ProductCodeMaster]
					,[ProductCodeComponent]
					,[BillOfMaterialSequence]
					,[BillOfMaterialBillOfMaterialOnly]
					,[BillOfMaterialQuantity]
					,[BillOfMaterialAddDateTime]
					,[BillOfMaterialAddUserCode]
					,[BillOfMaterialEditDateTime]
					,[BillOfMaterialEditUserCode]
					,[BillOfMaterialNotes]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Inserted.[ProductCodeMaster] AS VARCHAR(50)) + CAST(Inserted.[ProductCodeComponent] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[CompanyIDStorer]
					,Src.[ProductCodeMaster]
					,Src.[ProductCodeComponent]
					,Src.[BillOfMaterialSequence]
					,Src.[BillOfMaterialBillOfMaterialOnly]
					,Src.[BillOfMaterialQuantity]
					,Src.[BillOfMaterialAddDateTime]
					,Src.[BillOfMaterialAddUserCode]
					,Src.[BillOfMaterialEditDateTime]
					,Src.[BillOfMaterialEditUserCode]
					,Src.[BillOfMaterialNotes]
				FROM dbo.BillsOfMaterial Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCodeMaster] = P.[ProductCode]
					AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.BillsOfMaterial Dest WITH (NOLOCK) ON Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					AND Dest.[ProductCodeMaster] = Src.[ProductCodeMaster]
					AND Dest.[ProductCodeComponent] = Src.[ProductCodeComponent]
				WHERE Dest.[CompanyIDStorer] IS NULL
					AND Dest.[ProductCodeMaster] IS NULL
					AND Dest.[ProductCodeComponent] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') BillsOfMaterial: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `BillsOfMaterial` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	--AlternativeProductCodes
	SET @CurrentTableName = 'AlternativeProductCodes';

	IF EXISTS (
			SELECT 1
			FROM #TempTableArchiveTablesList T
			WHERE T.TableName = @CurrentTableName
			)
	BEGIN
		TRUNCATE TABLE #tmpTableVal;

		BEGIN TRY
			BEGIN TRANSACTION;

			/*
			MERGE INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.AlternativeProductCodes AS Dest
			USING (
				SELECT APC.[CompanyIDStorer]
					,APC.[AlternativeProductCode]
					,APC.[ProductCode]
					,APC.[AlternativeProductCodeVendor]
					,APC.[PackCode]
					,APC.[AlternativeProductCodeDefaultUnitOfMeasure]
					,APC.[AlternativeProductCodeType]
					,APC.[AlternativeProductCodeUserDefined01]
					,APC.[AlternativeProductCodeUserDefined02]
					,APC.[AlternativeProductCodeUserDefined03]
					,APC.[AlternativeProductCodeUserDefined04]
					,APC.[AlternativeProductCodeUserDefined05]
					,APC.[AlternativeProductCodeAddDateTime]
					,APC.[AlternativeProductCodeAddUserCode]
					,APC.[AlternativeProductCodeEditDateTime]
					,APC.[AlternativeProductCodeEditUserCode]
				FROM dbo.AlternativeProductCodes APC WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON APC.[ProductCode] = P.[ProductCode]
					AND APC.[CompanyIDStorer] = P.[CompanyIDStorer]
				) AS Src
				ON (
						Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						AND Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
						)
			WHEN MATCHED
				THEN
					UPDATE
					SET Dest.[ProductCode] = Src.[ProductCode]
						,Dest.[AlternativeProductCodeVendor] = Src.[AlternativeProductCodeVendor]
						,Dest.[PackCode] = Src.[PackCode]
						,Dest.[AlternativeProductCodeDefaultUnitOfMeasure] = Src.[AlternativeProductCodeDefaultUnitOfMeasure]
						,Dest.[AlternativeProductCodeType] = Src.[AlternativeProductCodeType]
						,Dest.[AlternativeProductCodeUserDefined01] = Src.[AlternativeProductCodeUserDefined01]
						,Dest.[AlternativeProductCodeUserDefined02] = Src.[AlternativeProductCodeUserDefined02]
						,Dest.[AlternativeProductCodeUserDefined03] = Src.[AlternativeProductCodeUserDefined03]
						,Dest.[AlternativeProductCodeUserDefined04] = Src.[AlternativeProductCodeUserDefined04]
						,Dest.[AlternativeProductCodeUserDefined05] = Src.[AlternativeProductCodeUserDefined05]
						,Dest.[AlternativeProductCodeAddDateTime] = Src.[AlternativeProductCodeAddDateTime]
						,Dest.[AlternativeProductCodeAddUserCode] = Src.[AlternativeProductCodeAddUserCode]
						,Dest.[AlternativeProductCodeEditDateTime] = Src.[AlternativeProductCodeEditDateTime]
						,Dest.[AlternativeProductCodeEditUserCode] = Src.[AlternativeProductCodeEditUserCode]
			WHEN NOT MATCHED
				THEN
					INSERT (
						[CompanyIDStorer]
						,[AlternativeProductCode]
						,[ProductCode]
						,[AlternativeProductCodeVendor]
						,[PackCode]
						,[AlternativeProductCodeDefaultUnitOfMeasure]
						,[AlternativeProductCodeType]
						,[AlternativeProductCodeUserDefined01]
						,[AlternativeProductCodeUserDefined02]
						,[AlternativeProductCodeUserDefined03]
						,[AlternativeProductCodeUserDefined04]
						,[AlternativeProductCodeUserDefined05]
						,[AlternativeProductCodeAddDateTime]
						,[AlternativeProductCodeAddUserCode]
						,[AlternativeProductCodeEditDateTime]
						,[AlternativeProductCodeEditUserCode]
						)
					VALUES (
						[CompanyIDStorer]
						,[AlternativeProductCode]
						,[ProductCode]
						,[AlternativeProductCodeVendor]
						,[PackCode]
						,[AlternativeProductCodeDefaultUnitOfMeasure]
						,[AlternativeProductCodeType]
						,[AlternativeProductCodeUserDefined01]
						,[AlternativeProductCodeUserDefined02]
						,[AlternativeProductCodeUserDefined03]
						,[AlternativeProductCodeUserDefined04]
						,[AlternativeProductCodeUserDefined05]
						,[AlternativeProductCodeAddDateTime]
						,[AlternativeProductCodeAddUserCode]
						,[AlternativeProductCodeEditDateTime]
						,[AlternativeProductCodeEditUserCode]
						)
			OUTPUT $ACTION
				,CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Inserted.[AlternativeProductCode] AS VARCHAR(50)) AS 'Inserted'
				,CAST(Deleted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Deleted.[AlternativeProductCode] AS VARCHAR(50)) AS 'Deleted'
			INTO #tmpTableVal(MergeAction, InsertedId, DeletedId);
			*/
			WHILE EXISTS (
					SELECT 1
					FROM dbo.AlternativeProductCodes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
						AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.AlternativeProductCodes Dest WITH (NOLOCK) ON Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						AND Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
					WHERE Dest.[AlternativeProductCodeEditDateTime] < Src.[AlternativeProductCodeEditDateTime]
					)
			BEGIN
				UPDATE TOP (@BatchSizeForArchival) Dest
				SET Dest.[ProductCode] = Src.[ProductCode]
					,Dest.[AlternativeProductCodeVendor] = Src.[AlternativeProductCodeVendor]
					,Dest.[PackCode] = Src.[PackCode]
					,Dest.[AlternativeProductCodeDefaultUnitOfMeasure] = Src.[AlternativeProductCodeDefaultUnitOfMeasure]
					,Dest.[AlternativeProductCodeType] = Src.[AlternativeProductCodeType]
					,Dest.[AlternativeProductCodeUserDefined01] = Src.[AlternativeProductCodeUserDefined01]
					,Dest.[AlternativeProductCodeUserDefined02] = Src.[AlternativeProductCodeUserDefined02]
					,Dest.[AlternativeProductCodeUserDefined03] = Src.[AlternativeProductCodeUserDefined03]
					,Dest.[AlternativeProductCodeUserDefined04] = Src.[AlternativeProductCodeUserDefined04]
					,Dest.[AlternativeProductCodeUserDefined05] = Src.[AlternativeProductCodeUserDefined05]
					,Dest.[AlternativeProductCodeAddDateTime] = Src.[AlternativeProductCodeAddDateTime]
					,Dest.[AlternativeProductCodeAddUserCode] = Src.[AlternativeProductCodeAddUserCode]
					,Dest.[AlternativeProductCodeEditDateTime] = Src.[AlternativeProductCodeEditDateTime]
					,Dest.[AlternativeProductCodeEditUserCode] = Src.[AlternativeProductCodeEditUserCode]
				OUTPUT 'UPDATE'
					,CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Inserted.[AlternativeProductCode] AS VARCHAR(50)) AS 'Inserted'
					,CAST(Deleted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Deleted.[AlternativeProductCode] AS VARCHAR(50)) AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				FROM dbo.AlternativeProductCodes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
					AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.AlternativeProductCodes Dest WITH (NOLOCK) ON Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					AND Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
				WHERE Dest.[AlternativeProductCodeEditDateTime] < Src.[AlternativeProductCodeEditDateTime];
			END;

			WHILE EXISTS (
					SELECT 1
					FROM dbo.AlternativeProductCodes Src WITH (NOLOCK)
					INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
						AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
					LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.AlternativeProductCodes Dest WITH (NOLOCK) ON Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
						AND Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
					WHERE Dest.[CompanyIDStorer] IS NULL
						AND Dest.[AlternativeProductCode] IS NULL
					)
			BEGIN
				INSERT INTO ILSE_WBK_ARCHIVE_NONPROD.dbo.AlternativeProductCodes (
					[CompanyIDStorer]
					,[AlternativeProductCode]
					,[ProductCode]
					,[AlternativeProductCodeVendor]
					,[PackCode]
					,[AlternativeProductCodeDefaultUnitOfMeasure]
					,[AlternativeProductCodeType]
					,[AlternativeProductCodeUserDefined01]
					,[AlternativeProductCodeUserDefined02]
					,[AlternativeProductCodeUserDefined03]
					,[AlternativeProductCodeUserDefined04]
					,[AlternativeProductCodeUserDefined05]
					,[AlternativeProductCodeAddDateTime]
					,[AlternativeProductCodeAddUserCode]
					,[AlternativeProductCodeEditDateTime]
					,[AlternativeProductCodeEditUserCode]
					)
				OUTPUT 'INSERT'
					,CAST(Inserted.[CompanyIDStorer] AS VARCHAR(50)) + CAST(Inserted.[AlternativeProductCode] AS VARCHAR(50)) AS 'Inserted'
					,NULL AS 'Deleted'
				INTO #tmpTableVal(MergeAction, InsertedId, DeletedId)
				SELECT TOP (@BatchSizeForArchival) Src.[CompanyIDStorer]
					,Src.[AlternativeProductCode]
					,Src.[ProductCode]
					,Src.[AlternativeProductCodeVendor]
					,Src.[PackCode]
					,Src.[AlternativeProductCodeDefaultUnitOfMeasure]
					,Src.[AlternativeProductCodeType]
					,Src.[AlternativeProductCodeUserDefined01]
					,Src.[AlternativeProductCodeUserDefined02]
					,Src.[AlternativeProductCodeUserDefined03]
					,Src.[AlternativeProductCodeUserDefined04]
					,Src.[AlternativeProductCodeUserDefined05]
					,Src.[AlternativeProductCodeAddDateTime]
					,Src.[AlternativeProductCodeAddUserCode]
					,Src.[AlternativeProductCodeEditDateTime]
					,Src.[AlternativeProductCodeEditUserCode]
				FROM dbo.AlternativeProductCodes Src WITH (NOLOCK)
				INNER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.Products P WITH (NOLOCK) ON Src.[ProductCode] = P.[ProductCode]
					AND Src.[CompanyIDStorer] = P.[CompanyIDStorer]
				LEFT OUTER JOIN ILSE_WBK_ARCHIVE_NONPROD.dbo.AlternativeProductCodes Dest WITH (NOLOCK) ON Dest.[CompanyIDStorer] = Src.[CompanyIDStorer]
					AND Dest.[AlternativeProductCode] = Src.[AlternativeProductCode]
				WHERE Dest.[CompanyIDStorer] IS NULL
					AND Dest.[AlternativeProductCode] IS NULL;
			END;

			TRUNCATE TABLE #TempTableMergeRowStatus;

			INSERT INTO #TempTableMergeRowStatus (
				Inserted
				,Updated
				)
			--,Unchanged
			SELECT ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'INSERT'
						), 0) AS Inserted
				,ISNULL((
						SELECT COUNT(1)
						FROM #tmpTableVal
						WHERE MergeAction = 'UPDATE'
						), 0) AS Updated

			--,(
			--	@TotRowCount - (
			--		ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'INSERT'
			--				), 0) + ISNULL((
			--				SELECT COUNT(1)
			--				FROM #tmpTableVal
			--				WHERE MergeAction = 'UPDATE'
			--				), 0)
			--		)
			--	) AS UnChanged
			SELECT @Remarks = '(' + @DataBase + ') AlternativeProductCodes: Inserted: ' + CAST(tmp.Inserted AS VARCHAR(10)) + ', Updated: ' + CAST(tmp.Updated AS VARCHAR(10)) --+ ', Unchanged: ' + CAST(tmp.UnChanged AS VARCHAR(10))
			FROM #TempTableMergeRowStatus tmp;

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while archiving from `AlternativeProductCodes` in ' + @DataBase + ' (Total no of rows archived: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH;
	END

	----------------------------------------------------------------------------------------------
	--CycleCountDetails
	--Receipts-----------------------------------
	--Deletion--------------
	IF EXISTS (
			SELECT 1
			FROM #tmpReceiptIDs
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			DELETE ORSN
			FROM [dbo].[OrderReceiptSerialNumbers] ORSN
			INNER JOIN [dbo].[ReceiptParties] RP WITH (NOLOCK) ON ORSN.[ReceiptID] = RP.[ReceiptID]
				AND ORSN.[ReceiptDetailLineNumber] = RP.[ReceiptDetailLineNumber]
				AND ORSN.ReceiptPartySubPartyNumber = RP.ReceiptPartySubPartyNumber
			INNER JOIN ReceiptDetails RD WITH (NOLOCK) ON RP.ReceiptID = RD.ReceiptID
				AND RP.ReceiptDetailLineNumber = RD.ReceiptDetailLineNumber
			INNER JOIN Receipts R WITH (NOLOCK) ON R.IDReceipt = RD.ReceiptID
			INNER JOIN #tmpReceiptIDs TR ON TR.ReceiptID = R.IDReceipt;

			SELECT @Remarks = '(' + @DataBase + ') OrderReceiptSerialNumbers: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			DELETE RP
			FROM [dbo].[ReceiptParties] RP
			INNER JOIN ReceiptDetails RD WITH (NOLOCK) ON RP.ReceiptID = RD.ReceiptID
				AND RP.ReceiptDetailLineNumber = RD.ReceiptDetailLineNumber
			INNER JOIN Receipts R WITH (NOLOCK) ON R.IDReceipt = RD.ReceiptID
			INNER JOIN #tmpReceiptIDs TR ON TR.ReceiptID = R.IDReceipt;

			SELECT @Remarks = '(' + @DataBase + ') ReceiptParties: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			DELETE RP
			FROM [dbo].[ReceiptCaseDetails] RP
			INNER JOIN ReceiptDetails RD WITH (NOLOCK) ON RP.ReceiptID = RD.ReceiptID
				AND RP.ReceiptDetailLineNumber = RD.ReceiptDetailLineNumber
			INNER JOIN Receipts R WITH (NOLOCK) ON R.IDReceipt = RD.ReceiptID
			INNER JOIN #tmpReceiptIDs TR ON TR.ReceiptID = R.IDReceipt;

			SELECT @Remarks = '(' + @DataBase + ') ReceiptCaseDetails: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			DELETE RD
			FROM ReceiptDetails RD
			INNER JOIN Receipts R WITH (NOLOCK) ON R.IDReceipt = RD.ReceiptID
			INNER JOIN #tmpReceiptIDs TR ON TR.ReceiptID = R.IDReceipt;

			SELECT @Remarks = '(' + @DataBase + ') ReceiptDetails: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			DELETE R
			FROM Receipts R
			INNER JOIN #tmpReceiptIDs TR ON TR.ReceiptID = R.IDReceipt;

			SELECT @Remarks = '(' + @DataBase + ') Receipts: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while deleting from `Receipts` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH
	END

	--Orders------------------------
	--Deletion
	IF EXISTS (
			SELECT 1
			FROM #tmpOrderIDs
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			DELETE RP
			FROM [dbo].[PickDetails] RP
			INNER JOIN OrderDetails RD WITH (NOLOCK) ON RP.[OrderID] = RD.[OrderID]
				AND RP.OrderDetailLineNumber = RD.OrderDetailLineNumber
			INNER JOIN Orders R WITH (NOLOCK) ON R.[IDOrder] = RD.[OrderID]
			INNER JOIN #tmpOrderIDs TR ON TR.[OrderID] = R.[IDOrder];

			SELECT @Remarks = '(' + @DataBase + ') PickDetails: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			DELETE RD
			FROM OrderDetails RD
			INNER JOIN Orders R WITH (NOLOCK) ON R.IDOrder = RD.OrderID
			INNER JOIN #tmpOrderIDs TR ON TR.OrderID = R.IDOrder;

			SELECT @Remarks = '(' + @DataBase + ') OrderDetails: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			DELETE RD
			FROM LoadOrderDetails RD
			INNER JOIN Orders R WITH (NOLOCK) ON R.IDOrder = RD.OrderID
			INNER JOIN #tmpOrderIDs TR ON TR.OrderID = R.IDOrder;

			SELECT @Remarks = '(' + @DataBase + ') LoadOrderDetails: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			DELETE R
			FROM Orders R
			INNER JOIN #tmpOrderIDs TR ON TR.OrderID = R.IDOrder;

			SELECT @Remarks = '(' + @DataBase + ') Orders: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while deleting from `Orders` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH
	END

	--------------------------------
	--StockTransactions
	--Delete
	IF EXISTS (
			SELECT 1
			--FROM #tmpReceiptIDs
			FROM #tmpStockTransactionIDs
			)
	BEGIN
		BEGIN TRY
			BEGIN TRANSACTION;

			DELETE R
			FROM StockTransactions R
			INNER JOIN #tmpStockTransactionIDs TR ON TR.StockTransactionID = R.IDStockTransaction;

			SELECT @Remarks = '(' + @DataBase + ') StockTransactions: Deleted: ' + LTRIM(STR(@@ROWCOUNT));

			SET @LogDate = GETUTCDATE();

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,NULL
				,NULL
				,NULL
				,NULL
				,@LogDate
				,@HostName
				,@UserName
				,'Info'
				,@RunID;

			COMMIT TRANSACTION;
		END TRY

		BEGIN CATCH
			ROLLBACK TRANSACTION;

			SET @TypeOfError = ERROR_SEVERITY();
			SET @ErrorNumber = ERROR_NUMBER();
			SET @ErrorMessage = ERROR_MESSAGE();
			SET @LineNumber = ERROR_LINE();
			SET @LogDate = GETUTCDATE();
			SET @Remarks = 'Error while deleting from `StockTransactions` in ' + @DataBase + ' (Total no of rows deleted: ' + CONVERT(VARCHAR(10), @TotRowCount) + ').';

			EXEC pArchiveLogs @Remarks
				,@SourceProcName
				,@TypeOfError
				,@ErrorNumber
				,@ErrorMessage
				,@LineNumber
				,@LogDate
				,@HostName
				,@UserName
				,'Error'
				,@RunID;

			RAISERROR (
					@ErrorMessage
					,@TypeOfError
					,- 1
					);
		END CATCH
	END

	--------------------------------
	--------------------------------
	SET @LogDate = GETUTCDATE();
	SET @Remarks = 'Completed Process : Archival of data for `' + @DataBase + '` in `' + @ArchiveDataBase + '` Completed.'

	EXEC pArchiveLogs @Remarks
		,@SourceProcName
		,NULL
		,NULL
		,NULL
		,NULL
		,@LogDate
		,@HostName
		,@UserName
		,'InfoAction'
		,@RunID;

	SET @Remarks = '(END   with RunID: ' + @RunID + ' )------------------------------------------------------------------------------------------------------------------------------------------------'

	EXEC pArchiveLogs @Remarks
		,@SourceProcName
		,NULL
		,NULL
		,NULL
		,NULL
		,@LogDate
		,@HostName
		,@UserName
		,'Info'
		,@RunID;
END
GO